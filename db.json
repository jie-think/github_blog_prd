{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cafe/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/cafe/source/images/fly-to-top.png","path":"images/fly-to-top.png","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/js/elevator.js","path":"js/elevator.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/js/posts.js","path":"js/posts.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/js/is.js","path":"js/is.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/duoshuo/embed.js","path":"duoshuo/embed.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/jquery/jquery.min.js","path":"jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/cafe/source/themes/screenshots/Cafe.png","path":"themes/screenshots/Cafe.png","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/cafe/.bowerrc","hash":"5d8502d31f0ed07e935bc6faf5e7f8ce8308ab75","modified":1535966113917},{"_id":"themes/cafe/.gitignore","hash":"a632e0ef685c46927968336af6b03ab3465d4fb2","modified":1535966113917},{"_id":"themes/cafe/README.md","hash":"7f7b7b853aa9f62d97fb2e5979e962dd47b93aaa","modified":1535966113918},{"_id":"themes/cafe/_config.yml","hash":"e273e05945845ff461a9319e7845a3bef28586a8","modified":1535968911647},{"_id":"themes/cafe/README_en.md","hash":"c66ddb0326313f1b912d41d735e22dd2d10509e1","modified":1535966113919},{"_id":"themes/cafe/bower.json","hash":"b62df738176f21afb7f9bac2ddca8b269fd4b863","modified":1535966113937},{"_id":"themes/cafe/cafe-qrcode.png","hash":"4fef2c889376a208a49aa92c582b147e7e005d23","modified":1535966113937},{"_id":"themes/cafe/package.json","hash":"bf40790696da9a813489f49dcf90a87f9114869c","modified":1535966113951},{"_id":"themes/cafe/webpack.config.js","hash":"7fa25bf7c2bf831c8dfcece8bbeee6cb5c2b2c80","modified":1535966113974},{"_id":"source/_posts/.DS_Store","hash":"d63f241142225457c807928e7a896575eb3cc414","modified":1535549879915},{"_id":"source/categories/index.md","hash":"a6278cee33d494bb9642676c84324b48181b64f8","modified":1535544712380},{"_id":"source/tags/index.md","hash":"382f52f97fe307d55742bb23e0df2a541614523f","modified":1535544696698},{"_id":"themes/cafe/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1535966113911},{"_id":"themes/cafe/.git/config","hash":"1c091a5565c6432135a663d4ffe26c8a2b3d2aca","modified":1535966113913},{"_id":"themes/cafe/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1535966094728},{"_id":"themes/cafe/.git/index","hash":"c521ffb0bacf4aa3278fdbeda68ce90ed82a8cfe","modified":1537172312577},{"_id":"themes/cafe/.git/packed-refs","hash":"af0f64861481b8c542e803e7c73a0d6228d7ada2","modified":1535966113909},{"_id":"themes/cafe/assets/duoshuo_comment.png","hash":"33402149f82b66ff4ed405f44beb06eb0172b6de","modified":1535966113920},{"_id":"themes/cafe/languages/default.yml","hash":"0f4186f8e0c5d83cddf443fb9d7d4f200780831b","modified":1535966113937},{"_id":"themes/cafe/assets/share.png","hash":"823926d9cb8985ceb93a119ef138f9638a8ead1a","modified":1535966113937},{"_id":"themes/cafe/languages/en.yml","hash":"4d072fac64d756579962d3c0d10e300c11f99668","modified":1535966113937},{"_id":"themes/cafe/languages/nl.yml","hash":"218d1ef7863e884de5e48c6a9fa7c8e3a07a88c6","modified":1535966113938},{"_id":"themes/cafe/languages/no.yml","hash":"d326d07449152e874d419c21fe31bbbfa624809c","modified":1535966113938},{"_id":"themes/cafe/languages/ru.yml","hash":"2b9f264074acbbdd46512d8d7488e7ec0eee2da9","modified":1535966113938},{"_id":"themes/cafe/languages/zh-CN.yml","hash":"fd7eb6f2395cd8c483119bb96882c7dd3004881d","modified":1535966113938},{"_id":"themes/cafe/languages/zh-TW.yml","hash":"a53f356900ffd40cb87dfbb96e5c677ed88e9992","modified":1535966113938},{"_id":"themes/cafe/layout/archive.ejs","hash":"11912b8e50dafbe9b0a65df0beaeab64fde90abe","modified":1535966113948},{"_id":"themes/cafe/layout/category.ejs","hash":"f46e99e5b68c2ee67bdab068b1da4029bc09847d","modified":1535966113949},{"_id":"themes/cafe/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1535966113949},{"_id":"themes/cafe/layout/layout.ejs","hash":"54719bf692ee75c4e0fc4a39dec83484e4851307","modified":1535966113949},{"_id":"themes/cafe/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1535966113949},{"_id":"themes/cafe/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1535966113951},{"_id":"themes/cafe/layout/tag.ejs","hash":"4349f382b07603f9d2c03dd4df70ddea9b9a035c","modified":1535966113951},{"_id":"themes/cafe/scripts/extend.generator.js","hash":"06d801d46268351c34f1b0a2fc67726cf9418baa","modified":1535966113951},{"_id":"themes/cafe/scripts/fancybox.js","hash":"1c20613889139c652923b57b42ce6f7bc279511b","modified":1535966113952},{"_id":"themes/cafe/source/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1535966113971},{"_id":"themes/cafe/layout/_scripts/index.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535966113942},{"_id":"source/_posts/alg/.DS_Store","hash":"ded0b4cbb1cf737d16f04f8f19e27617a1166864","modified":1562382369858},{"_id":"source/_posts/backend/.DS_Store","hash":"f6f86dbb27ad857040c719803f8e26d9c7757596","modified":1559631315463},{"_id":"source/_posts/basic/正则零宽断言.md","hash":"71574e25627bcc0dc0212f3b25ae1e7480e349f4","modified":1563000137336},{"_id":"source/_posts/block_chain/在私有网络上搭建3个以上节点.md","hash":"3878699342ba819b3f1dada17c8751351f0dd8bc","modified":1535548488227},{"_id":"source/_posts/block_chain/搭建自己的私有网络.md","hash":"9543c17a74badd4d90fd434a2485cc5ee0a97658","modified":1535549061195},{"_id":"source/_posts/frontend/.DS_Store","hash":"f8714f8be2768318b8df48564f12e546e338ccdf","modified":1535551316000},{"_id":"source/_posts/devops/build_vpn_server.md","hash":"1b0eb398466e06609c1e64b32af387297c871848","modified":1543933786108},{"_id":"source/_posts/devops/shadowsocks_server.md","hash":"5de92cbcd98109630feec7aca2a4fff22e0ebc20","modified":1562129510471},{"_id":"source/_posts/devops/supervisor_learn.md","hash":"f0f7c8fc67758036fde2a52ca000f3cd7dbc0ec0","modified":1535549456403},{"_id":"source/_posts/mac/防火墙问题.md","hash":"b5feaa2591040b5c3010f93777a0e19bf16f7cb7","modified":1543565311350},{"_id":"source/_posts/self_doc/个人软件安装记录-linux.md","hash":"64908610591a4cc8005a5cee0d1f98ed1d6df4b0","modified":1544166785317},{"_id":"source/_posts/self_doc/个人软件安装记录.md","hash":"d33eac683f60ece800afa0762d30eba049a4e632","modified":1544166788386},{"_id":"themes/cafe/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1535966094729},{"_id":"themes/cafe/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1535966094729},{"_id":"themes/cafe/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1535966094730},{"_id":"themes/cafe/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1535966094728},{"_id":"themes/cafe/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1535966094730},{"_id":"themes/cafe/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1535966094729},{"_id":"themes/cafe/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1535966094730},{"_id":"themes/cafe/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1535966094729},{"_id":"themes/cafe/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1535966094729},{"_id":"themes/cafe/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1535966094730},{"_id":"themes/cafe/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1535966094730},{"_id":"themes/cafe/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1535966094728},{"_id":"themes/cafe/.git/logs/HEAD","hash":"39a4c4e7657bb026c149e103b54fc178d9914982","modified":1535966113912},{"_id":"themes/cafe/layout/_partial/after-footer.ejs","hash":"e48868420643950050f8622a1a68d738f0fddde5","modified":1535966113938},{"_id":"themes/cafe/layout/_partial/archive-post.ejs","hash":"4c7716e53396abdf828b518f90df3c00e63349da","modified":1535966113939},{"_id":"themes/cafe/layout/_partial/archive.ejs","hash":"b7358ffcbd26bc2c6c7bf384c4fb7b68085b6cbc","modified":1535966113939},{"_id":"themes/cafe/layout/_partial/article.ejs","hash":"1d6e90775a6f52b862047adf2369ce8c1282554a","modified":1535966113939},{"_id":"themes/cafe/layout/_partial/comments.ejs","hash":"43217242b743530f6dd1c08e41af5c255f14abd9","modified":1535966113939},{"_id":"themes/cafe/layout/_partial/footer.ejs","hash":"fbc03f56835e967bfe6021a2102f058b1ec27af5","modified":1535966113939},{"_id":"themes/cafe/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1535966113939},{"_id":"themes/cafe/layout/_partial/head.ejs","hash":"6774dad5680a91f8a4d21e5d73189b92a9b6864b","modified":1535966113940},{"_id":"themes/cafe/layout/_partial/header.ejs","hash":"ee530030409ee4cd67136ad23c96aa1b3466293e","modified":1535966113940},{"_id":"themes/cafe/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1535966113940},{"_id":"themes/cafe/layout/_partial/random_posts.ejs","hash":"8ac10cb23345a04de2683bcfc2122f26111131ed","modified":1535966113941},{"_id":"themes/cafe/layout/_partial/sidebar.ejs","hash":"ce3ecf7c74fd5f50aebada49e403152de114e6bb","modified":1535966113942},{"_id":"themes/cafe/layout/_partial/widget.ejs","hash":"fe22996588b33eb9d44ab104c6ed5687fb11cac6","modified":1535966113942},{"_id":"themes/cafe/layout/_third-part/index.ejs","hash":"219d269b6840d5dde5a14e4f26ef49d102d32532","modified":1535966113945},{"_id":"themes/cafe/layout/_widget/archive.ejs","hash":"39a047c9bcfbce9d6a815b3938211213bd5268f7","modified":1535966113945},{"_id":"themes/cafe/layout/_widget/category.ejs","hash":"6064d276caf727d3e082343f9a30b015d30fdd48","modified":1535966113946},{"_id":"themes/cafe/layout/_widget/friendly_link.ejs","hash":"0c01b13ad81b729fd1f39e01b819d6f315a411b8","modified":1535966113946},{"_id":"themes/cafe/layout/_widget/hot_comment_posts.ejs","hash":"819fd75aad2d16d58bc06054b8fdf966d222576a","modified":1535966113946},{"_id":"themes/cafe/layout/_widget/lastest_comments.ejs","hash":"518f17d2a3ca5daca4a8a6ed186bae3ae348fde5","modified":1535966113946},{"_id":"themes/cafe/layout/_widget/post_content.ejs","hash":"9f17038635d221719c7ef10ae473f7f5b288fc9a","modified":1535966113947},{"_id":"themes/cafe/layout/_widget/recent_posts.ejs","hash":"1eca91f3cd8fb4563f708678130138be9404b70e","modified":1535966113947},{"_id":"themes/cafe/layout/_widget/social.ejs","hash":"601c0295ac544942bc78185ce5378a3a19f267fe","modified":1535966113947},{"_id":"themes/cafe/layout/_widget/tag.ejs","hash":"e82a6951bf13a05f0d2218516d51fac1953d6739","modified":1535966113947},{"_id":"themes/cafe/layout/_widget/tagcloud.ejs","hash":"a5846d3bd367a8147d84d57e64ebc93441378cd8","modified":1535966113948},{"_id":"themes/cafe/layout/_widget/wechat.ejs","hash":"22d19c533a30e41c56a45e4edb74ec30c8c70978","modified":1535966113948},{"_id":"themes/cafe/layout/partials/back2top.ejs","hash":"3b69f1d825f1837100151197da2b13b34676345d","modified":1535966113949},{"_id":"themes/cafe/layout/partials/hot-comment-posts.ejs","hash":"af27de063408d3336ea7bd700d3ea2c4bef71ae0","modified":1535966113950},{"_id":"themes/cafe/layout/partials/lastest-comments.ejs","hash":"64cf0da989e6aeb4635482f48355d74447ba32c8","modified":1535966113950},{"_id":"themes/cafe/layout/partials/pagination.ejs","hash":"146ae79bd5a89524d5f8026c21ed34a557fe753d","modified":1535966113950},{"_id":"themes/cafe/layout/partials/recent-posts.ejs","hash":"c4d6ad99fabe8a9821511e2c39861b268779d40e","modified":1535966113950},{"_id":"themes/cafe/source/_data/themes.yml","hash":"dbbd2878f85379b3c388f09539327085e0cdde34","modified":1535966113952},{"_id":"themes/cafe/source/css/_extend.styl","hash":"faef85ad9c2806b634a638b0b05b825277c11e45","modified":1535966113952},{"_id":"themes/cafe/source/css/_variables.styl","hash":"73cd2ad7c06c49b6f01ed0cd207e7aac55d22c8c","modified":1535966113956},{"_id":"themes/cafe/source/css/style.styl","hash":"78a349fe6901a1ebe6668b58a33ca129cf9cdd35","modified":1535966113967},{"_id":"themes/cafe/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1535966113968},{"_id":"themes/cafe/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1535966113968},{"_id":"themes/cafe/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1535966113968},{"_id":"themes/cafe/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1535966113969},{"_id":"themes/cafe/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1535966113969},{"_id":"themes/cafe/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1535966113969},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1535966113970},{"_id":"themes/cafe/source/images/fly-to-top.png","hash":"f189038da3c68a8012e924185a1faee98bde3003","modified":1535966113972},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1535966113971},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1535966113971},{"_id":"themes/cafe/source/js/elevator.js","hash":"2aab182c3f08aa939bbf09faf49e79e0681a6389","modified":1535966113973},{"_id":"themes/cafe/source/js/posts.js","hash":"4351c14760735df911840f93d41b7126f8109d5e","modified":1563079726092},{"_id":"themes/cafe/source/js/is.js","hash":"457446cf7fe0b08bfa197ee76435d273b456deaa","modified":1535966113973},{"_id":"themes/cafe/source/js/script.js","hash":"320cc11fb445658e7a1e1bb2e9da499ee579d755","modified":1535966113973},{"_id":"themes/cafe/source/duoshuo/embed.js","hash":"6a8d90f99d17a614312f87d9a6a7182c9cb484f4","modified":1535966113967},{"_id":"themes/cafe/source/jquery/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1535966113972},{"_id":"source/_posts/alg/DynamicProgramming/动态规划总结.md","hash":"a49da9f8e70f2330fdea85e30fa5d69a2ca89648","modified":1535548851386},{"_id":"source/_posts/alg/DynamicProgramming/1_1_Fibonacci numbers.md","hash":"8c058737199572283d9d360ebb74681190f27768","modified":1535548849056},{"_id":"source/_posts/alg/DynamicProgramming/题集.md","hash":"ffe3d1813be4553b6021b1fbd6761042f6e704e9","modified":1535548852368},{"_id":"source/_posts/alg/finance/alg_list.md","hash":"f10df0026c40afe8e6388e803bcd301b3f5bfb49","modified":1562080015577},{"_id":"source/_posts/alg/finance/bias.md","hash":"be06685637aa21c197f32f0711663bbce87becd8","modified":1562393016254},{"_id":"source/_posts/alg/finance/cci.md","hash":"d21dd56429c428338a629bb00649c6f4295f4fe8","modified":1561598685557},{"_id":"source/_posts/alg/finance/kdj.md","hash":"4345d2434e19603d4b2c58bf41269428eaf3e141","modified":1561904689914},{"_id":"source/_posts/alg/raft/2_raft_copy_log.md","hash":"c646d777d910381bd4a7d63c55b01f435febb70b","modified":1545464481411},{"_id":"source/_posts/alg/finance/rsi.md","hash":"4928386356bc2f6f72e114085a4316eaece70387","modified":1562079316600},{"_id":"source/_posts/alg/finance/macd.md","hash":"d2e2e69bb7649dd8e676766b22371db6319231c2","modified":1561944719159},{"_id":"source/_posts/alg/raft/1_raft基础.md","hash":"b4497510a503540cb3a0eaa76e43979cd5528b65","modified":1545449862448},{"_id":"source/_posts/alg/raft/3_raft领导选取.md","hash":"88342e33dc900a34215d56eaf5155d5f23e8405b","modified":1545466622789},{"_id":"source/_posts/alg/raft/ReadRaft.md","hash":"9e4d3a45a2566fe260cb39a048767c66e96128ff","modified":1545469737877},{"_id":"source/_posts/alg/raft/goraft_read.md","hash":"587196e4111eb31b334b51efffbcd3b11d1ebd0e","modified":1540394083906},{"_id":"source/_posts/alg/raft/raft_think.md","hash":"90142d0e10b70730346e322df43476764c3b971f","modified":1544454733451},{"_id":"source/_posts/alg/sorting/Dual_pivot_Quicksort.md","hash":"0b1ca973b3f2254bae465a0edb9421c9b569d5ae","modified":1535548892071},{"_id":"source/_posts/backend/docker/docker_构建最小_go_app.md","hash":"400f295ba02361d83b75ec64b9d62ba96e8c6516","modified":1535617658128},{"_id":"source/_posts/backend/go/.DS_Store","hash":"923562deceeec193061f36152d8105ffcaf99d99","modified":1535545408696},{"_id":"source/_posts/backend/java/Lombok原理分析与功能实现.md","hash":"124d0e5d09fc2e35ab45466ae8adf5771c34b3bd","modified":1535549160740},{"_id":"source/_posts/backend/java/spring_aop.md","hash":"20953e4c587986e8df3bd270482834d597aef229","modified":1535549205498},{"_id":"source/_posts/backend/python/python 项目目录结构.md","hash":"b94f95f5fb4cb603f9d62a017c12799db25d193b","modified":1562168963415},{"_id":"source/_posts/backend/styleguide/python.md","hash":"8a46d22ba23cc269719d5e6af8c0ba269fe521a5","modified":1562643431946},{"_id":"source/_posts/backend/tools/apidoc_start_learn.md","hash":"478041e85b248c19ff1f6aef5a8b1906c362f4c4","modified":1535787478024},{"_id":"source/_posts/backend/tools/markfile_start_learn.md","hash":"b6754c3ee44adc7a5738a1b08b7d47c548e7f78b","modified":1535796344866},{"_id":"source/_posts/block_chain/contractLearn/Zombie_Con_Ch3.md","hash":"6e7b10b0d3de5e704f9f0d09a4ad178a89f8a763","modified":1535549017173},{"_id":"source/_posts/build_own_x/data_base/build_simple_database_task.md","hash":"9f58606501b1cce646d1a5df07d749a0c756a08a","modified":1548509066646},{"_id":"source/_posts/build_own_x/os/How to create an OS from scratch.md","hash":"6682b8090c29c176c4b1c86f0e881036d6f0f592","modified":1544163322113},{"_id":"source/_posts/frontend/css/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1535551328967},{"_id":"source/_posts/frontend/css/basic_1_0_css_position.md","hash":"02b28484851cd90e2b8ca8012f538fca562ccd8f","modified":1535554069268},{"_id":"source/_posts/frontend/flutter/flutter_learn_plan.md","hash":"23701af35c59e8a47617e8a76e81ae411e64a8b9","modified":1544097517134},{"_id":"source/_posts/frontend/learn_admin_manage/admin_manage_jie_learn.md","hash":"73550f356a55b55117dd72df84b253cf0ff12c88","modified":1536416996856},{"_id":"source/_posts/ide/vscode/.DS_Store","hash":"762b11cf95f0ff43cce0a4bbb0ecbcea0b44882f","modified":1562907873968},{"_id":"source/_posts/ide/vscode/vscode-snippet.md","hash":"1b7d80ddf5ea55e44159934b3deb2ab9f348f4ae","modified":1562908098491},{"_id":"themes/cafe/.git/refs/heads/master","hash":"ee5fcaedadc36a3fc117d11645d9f896d0295bd1","modified":1535966113911},{"_id":"themes/cafe/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1535966113940},{"_id":"themes/cafe/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1535966113940},{"_id":"themes/cafe/layout/_partial/post/duoshuo.ejs","hash":"0ea7f7effe32f7c9b0716c380850223feb262bcd","modified":1535966113940},{"_id":"themes/cafe/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1535966113941},{"_id":"themes/cafe/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1535966113941},{"_id":"themes/cafe/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1535966113941},{"_id":"themes/cafe/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1535966113941},{"_id":"themes/cafe/layout/_third-part/comments/changyan.ejs","hash":"b32598bc07328d8118f6b8b8b898a5d3dba4adc0","modified":1535966113943},{"_id":"themes/cafe/layout/_third-part/comments/disqus.ejs","hash":"f9543a67619272c9ff23b461ffcc63b504385461","modified":1535966113943},{"_id":"themes/cafe/layout/_third-part/comments/duoshuo.ejs","hash":"a37a59cf0226afc1d187810c81c61f4bf5a6a6b7","modified":1535966113943},{"_id":"themes/cafe/layout/_third-part/comments/gentie.ejs","hash":"7bb3a0aa215dba09f87bf227b170d54ba69cadb3","modified":1535966113944},{"_id":"themes/cafe/layout/_third-part/comments/gitment.ejs","hash":"25c71114ff0ede012d2dcb72cfb4e821f1744634","modified":1535966113944},{"_id":"themes/cafe/layout/_third-part/comments/index.ejs","hash":"e32b4c07c55dae75fefbe51d6afc2a0a760f2958","modified":1535966113944},{"_id":"themes/cafe/layout/_third-part/comments/youyan.ejs","hash":"466db2fad7c05b57d8987fc0e042e76072b4e6b2","modified":1535966113944},{"_id":"themes/cafe/layout/_third-part/mathjax/index.ejs","hash":"7b03a461fd2caf4662665a93c5d0e22b6a2ff1a6","modified":1535966113945},{"_id":"themes/cafe/source/css/_partial/archive.styl","hash":"bcc996ab9d1a3a2e0f754043a6c93ddd314d9987","modified":1535966113953},{"_id":"themes/cafe/source/css/_partial/article.styl","hash":"1273f03633fe8d4199b6269663fcb71dd2c81297","modified":1535966113953},{"_id":"themes/cafe/source/css/_partial/comment.styl","hash":"3477b4ecb2b188528b4f9c12fe78369110e0616b","modified":1535966113953},{"_id":"themes/cafe/source/css/_partial/custom.styl","hash":"f162ddfa65c268d79425e8c143688481f559ad2c","modified":1535966113953},{"_id":"themes/cafe/source/css/_partial/duoshuo.styl","hash":"5c9cb2c43be136a3cc83fb961b2e030e34cdd0f7","modified":1535966113954},{"_id":"themes/cafe/source/css/_partial/footer.styl","hash":"17fb21e25e7cdd57b3a33d402563d7c543ba9218","modified":1535966113954},{"_id":"themes/cafe/source/css/_partial/header.styl","hash":"56b324a23438b1b72c3b1de72ff123c5ca2ca266","modified":1535966113954},{"_id":"themes/cafe/source/css/_partial/highlight.styl","hash":"83af177b67e71f88a2a58cad944fb1460a41f752","modified":1535966113954},{"_id":"themes/cafe/source/css/_partial/random-post.styl","hash":"dba79ab57f6236d7128f3b7680eb2f6ccc84c26e","modified":1535966113955},{"_id":"themes/cafe/source/css/_partial/other.styl","hash":"e8892f04955c0738bd80bf92d72ee634d2a4e01a","modified":1535966113955},{"_id":"themes/cafe/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1535966113954},{"_id":"themes/cafe/source/css/_partial/sidebar-aside.styl","hash":"cd6e5f50b9db9a9f582995c16d634b1c427a2d00","modified":1535966113955},{"_id":"themes/cafe/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1535966113955},{"_id":"themes/cafe/source/css/_partial/sidebar.styl","hash":"ecd3303b117ae929558899d491e12094d4117829","modified":1535966113955},{"_id":"themes/cafe/source/css/_partial/social.styl","hash":"fc8d62aada96c75930dc03f6d4af83595eb44e71","modified":1535966113956},{"_id":"themes/cafe/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1535966113956},{"_id":"themes/cafe/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1535966113956},{"_id":"themes/cafe/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1535966113969},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1535966113969},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1535966113970},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1535966113970},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1535966113970},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1535966113970},{"_id":"themes/cafe/source/themes/screenshots/Cafe.png","hash":"6f639068117b8d44005730864cc0b05a11b28d73","modified":1535966113974},{"_id":"themes/cafe/.git/objects/pack/pack-2f29a3ae11d14c7053023e0568be947fc67f5b01.idx","hash":"1dc588bdb62c66c16a6f07347fb36994cde57140","modified":1535966113895},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1535966113964},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1535966113965},{"_id":"source/_posts/backend/go/cron/cron_source_code_read.md","hash":"92123daaf188a6c44444c90e2a928d90d6ed1142","modified":1543478852353},{"_id":"source/_posts/backend/go/echo/echo_learn.md","hash":"53b3820a1adf33ad5958cbb27bc10e83dc11c920","modified":1556373577357},{"_id":"source/_posts/backend/go/gin/gin实现原理.md","hash":"e3dd52fbed165193bc9c27e97244cdae9e5da658","modified":1559631217235},{"_id":"source/_posts/backend/go/gin/gin_learn_start.md","hash":"e0108a44562c17a104f028c20b27b5d6debab3ff","modified":1536073670233},{"_id":"source/_posts/backend/go/fsm/fsm理解.md","hash":"434fc7d63834f5bbb5d730dff2eaad49ad43b603","modified":1559632888280},{"_id":"source/_posts/backend/go/goStandardLib/REDEME.md","hash":"502fff04d7efc0317eee017dacbe4f4ecf109ad9","modified":1541814543363},{"_id":"source/_posts/backend/go/goStandardLib/log.md","hash":"12799be477b97ba8fa4f9afb41428aa0ad8c1740","modified":1543484833098},{"_id":"source/_posts/backend/go/goStandardLib/sort.md","hash":"5274ce6057eeed3b0f2bec257a7343cbf04e9792","modified":1543482583117},{"_id":"source/_posts/backend/go/goose/goose_start_learn.md","hash":"630bf2576fb0e7e9fb76b51247dc2188beb70e84","modified":1535544798646},{"_id":"source/_posts/backend/go/goose/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1535545398277},{"_id":"source/_posts/backend/go/grpc/grpc_start_learn.md","hash":"98e03bd0fa64438057b8d1761e966a2c7de02d4a","modified":1535545369760},{"_id":"source/_posts/backend/go/grpc/服务的注册_发现.md","hash":"ff19e97ffa5f3125a497320f1041dda48c1cf12e","modified":1536978179561},{"_id":"source/_posts/backend/go/redis/redis_start_learn.md","hash":"6a02f4e47b7af956fcabd3edc9321db389e6d23f","modified":1535548074323},{"_id":"source/_posts/build_own_x/data_base/build_simple_database/Part11_recursively_seaching_the_B_tree.md","hash":"941472c1f1cd9a4d9c65852bd6e79e35064ce315","modified":1551059075234},{"_id":"source/_posts/build_own_x/data_base/build_simple_database/Part10_splitting_a_leaf_node.md","hash":"353e894233894ff036d7e5993a2b75365b32e856","modified":1551013857765},{"_id":"source/_posts/build_own_x/data_base/build_simple_database/Part12_scanning_a_multi-level_B-tree.md","hash":"99eada9254ffe42decc806c987d2c2f87f7ddd24","modified":1552107156441},{"_id":"source/_posts/build_own_x/data_base/build_simple_database/Part1_Introduction_and_setting_up_the_REPL.md","hash":"3851d31f937662f1e9b0008a0b3ed1f80f3f957d","modified":1548496085249},{"_id":"source/_posts/build_own_x/data_base/build_simple_database/Part2_worlds_simplest_sql_compiler_and_VM.md","hash":"ad7180ce46c4aac589c9281f3bd36bf7df4770e9","modified":1548509980637},{"_id":"source/_posts/build_own_x/data_base/build_simple_database/Part3_an_in-memory_append-only_single-table_database.md","hash":"608328bc521f55b7f0fdf6ce5ce36a7ea55d317f","modified":1548567915316},{"_id":"source/_posts/build_own_x/data_base/build_simple_database/Part4_our_first_tests.md","hash":"4d594ccc9e538361ae8634b0c02f215a28721039","modified":1548686063561},{"_id":"source/_posts/build_own_x/data_base/build_simple_database/Part6_the_cursor_abstrction.md","hash":"ce48f82621fb0377b657b96bb1c3ad081b4915be","modified":1549187683881},{"_id":"source/_posts/build_own_x/data_base/build_simple_database/Part5_persistence_to_disk.md","hash":"59076ad420c5e1125eb7e5c4df104b7d590ae956","modified":1549028485414},{"_id":"source/_posts/build_own_x/data_base/build_simple_database/Part7_introduction_b_tree.md","hash":"25ed91d386105af5a2cfb8071f05c9644b7e6849","modified":1549587644691},{"_id":"source/_posts/build_own_x/data_base/build_simple_database/Part8_B_tree_left_node_format.md","hash":"78f1559391e7577b5ca517b1021aef871cd83eba","modified":1550902257201},{"_id":"source/_posts/build_own_x/data_base/build_simple_database/Part9_binary_search_and_duplicate_keys.md","hash":"bd88392368d77eeb0ea1d2cb7ecf19fd9f4d49dd","modified":1550926362043},{"_id":"source/_posts/build_own_x/data_base/build_simple_database/Readme_Index.md","hash":"894e82264b200b2ec7fde9927b0a64ff133c63b6","modified":1548639465967},{"_id":"source/_posts/build_own_x/data_base/build_simple_database/模块功能概述.md","hash":"28d3e1603669ddebdfd7ba212c15cb043ba525e9","modified":1535549983199},{"_id":"source/_posts/frontend/css/grid_learn/learn_css_grid.md","hash":"d6f3c5effc4794de1a9666eeddde3e44bbae4db4","modified":1535888535520},{"_id":"themes/cafe/.git/logs/refs/heads/master","hash":"39a4c4e7657bb026c149e103b54fc178d9914982","modified":1535966113912},{"_id":"themes/cafe/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1535966113911},{"_id":"themes/cafe/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1535966113958},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1535966113964},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1535966113959},{"_id":"themes/cafe/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1535966113966},{"_id":"themes/cafe/.git/logs/refs/remotes/origin/HEAD","hash":"39a4c4e7657bb026c149e103b54fc178d9914982","modified":1535966113910},{"_id":"source/_posts/backend/go/fsm/状态机架构图 2.jpg","hash":"be3faabff179bf434eca02bf13e7bd4ece56a1f9","modified":1559091958688},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1535966113962},{"_id":"themes/cafe/assets/pc-display.gif","hash":"fb84eb2ba958b1e02ad5e178a6f367a561cd9252","modified":1535966113936},{"_id":"themes/cafe/assets/mobie-display.gif","hash":"d20f7aa46d9bf618ba1ebaf9b6bda71b030f0ce9","modified":1535966113933},{"_id":"themes/cafe/.git/objects/pack/pack-2f29a3ae11d14c7053023e0568be947fc67f5b01.pack","hash":"4d23c3502ebc01b8363e1f9752a6942b3920def3","modified":1535966113893}],"Category":[{"name":"devops","_id":"cjy2hcgr900068seon8tcbb9p"},{"name":"backend","_id":"cjy2hcgrs000b8seowe9ebsjz"},{"name":"Mac","_id":"cjy2hcgrz000h8seo5ecevht8"},{"name":"alg","_id":"cjy2hcgtt00138seo71ruc95k"},{"name":"frontend","_id":"cjy2hcgvz002r8seocx3bqava"},{"name":"flutter","_id":"cjy2hcgw4002v8seojxw0q164"},{"name":"build-own-x","_id":"cjy2hcgyb004o8seou6q0tti7"},{"name":"learn notebook","parent":"cjy2hcgvz002r8seocx3bqava","_id":"cjy2hcgzg005w8seo5qqogbjl"}],"Data":[],"Page":[{"title":"categories","date":"2018-08-29T12:07:03.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-08-29 20:07:03\ntype: \"categories\"\n---\n","updated":"2018-08-29T12:11:52.380Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjy2hcgma00008seok5ur9fb7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-08-29T12:11:19.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-08-29 20:11:19\ntype: \"tags\"\n---\n","updated":"2018-08-29T12:11:36.698Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjy2hcgps00018seo53xllnxe","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"_content":"# 在私有网络上搭建3个以上节点\n\n## Step 1: 创建创世块\n\n## Step 2: 删除旧数据\n\n## Step 3: 重新初始化创世块\n\n## Step 4: 发现每个节点的enode地址\n\n## Step 5: 在每个节点上创建static-nodes.json文件\n\n## Step 6: 启动私人网络\n\n## Step 7: 在私网上挖掘","source":"_posts/block_chain/在私有网络上搭建3个以上节点.md","raw":"# 在私有网络上搭建3个以上节点\n\n## Step 1: 创建创世块\n\n## Step 2: 删除旧数据\n\n## Step 3: 重新初始化创世块\n\n## Step 4: 发现每个节点的enode地址\n\n## Step 5: 在每个节点上创建static-nodes.json文件\n\n## Step 6: 启动私人网络\n\n## Step 7: 在私网上挖掘","slug":"block_chain/在私有网络上搭建3个以上节点","published":1,"date":"2018-08-29T13:14:48.227Z","updated":"2018-08-29T13:14:48.227Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgqt00028seovimx0kum","content":"<h1 id=\"在私有网络上搭建3个以上节点\"><a href=\"#在私有网络上搭建3个以上节点\" class=\"headerlink\" title=\"在私有网络上搭建3个以上节点\"></a>在私有网络上搭建3个以上节点</h1><h2 id=\"Step-1-创建创世块\"><a href=\"#Step-1-创建创世块\" class=\"headerlink\" title=\"Step 1: 创建创世块\"></a>Step 1: 创建创世块</h2><h2 id=\"Step-2-删除旧数据\"><a href=\"#Step-2-删除旧数据\" class=\"headerlink\" title=\"Step 2: 删除旧数据\"></a>Step 2: 删除旧数据</h2><h2 id=\"Step-3-重新初始化创世块\"><a href=\"#Step-3-重新初始化创世块\" class=\"headerlink\" title=\"Step 3: 重新初始化创世块\"></a>Step 3: 重新初始化创世块</h2><h2 id=\"Step-4-发现每个节点的enode地址\"><a href=\"#Step-4-发现每个节点的enode地址\" class=\"headerlink\" title=\"Step 4: 发现每个节点的enode地址\"></a>Step 4: 发现每个节点的enode地址</h2><h2 id=\"Step-5-在每个节点上创建static-nodes-json文件\"><a href=\"#Step-5-在每个节点上创建static-nodes-json文件\" class=\"headerlink\" title=\"Step 5: 在每个节点上创建static-nodes.json文件\"></a>Step 5: 在每个节点上创建static-nodes.json文件</h2><h2 id=\"Step-6-启动私人网络\"><a href=\"#Step-6-启动私人网络\" class=\"headerlink\" title=\"Step 6: 启动私人网络\"></a>Step 6: 启动私人网络</h2><h2 id=\"Step-7-在私网上挖掘\"><a href=\"#Step-7-在私网上挖掘\" class=\"headerlink\" title=\"Step 7: 在私网上挖掘\"></a>Step 7: 在私网上挖掘</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"在私有网络上搭建3个以上节点\"><a href=\"#在私有网络上搭建3个以上节点\" class=\"headerlink\" title=\"在私有网络上搭建3个以上节点\"></a>在私有网络上搭建3个以上节点</h1><h2 id=\"Step-1-创建创世块\"><a href=\"#Step-1-创建创世块\" class=\"headerlink\" title=\"Step 1: 创建创世块\"></a>Step 1: 创建创世块</h2><h2 id=\"Step-2-删除旧数据\"><a href=\"#Step-2-删除旧数据\" class=\"headerlink\" title=\"Step 2: 删除旧数据\"></a>Step 2: 删除旧数据</h2><h2 id=\"Step-3-重新初始化创世块\"><a href=\"#Step-3-重新初始化创世块\" class=\"headerlink\" title=\"Step 3: 重新初始化创世块\"></a>Step 3: 重新初始化创世块</h2><h2 id=\"Step-4-发现每个节点的enode地址\"><a href=\"#Step-4-发现每个节点的enode地址\" class=\"headerlink\" title=\"Step 4: 发现每个节点的enode地址\"></a>Step 4: 发现每个节点的enode地址</h2><h2 id=\"Step-5-在每个节点上创建static-nodes-json文件\"><a href=\"#Step-5-在每个节点上创建static-nodes-json文件\" class=\"headerlink\" title=\"Step 5: 在每个节点上创建static-nodes.json文件\"></a>Step 5: 在每个节点上创建static-nodes.json文件</h2><h2 id=\"Step-6-启动私人网络\"><a href=\"#Step-6-启动私人网络\" class=\"headerlink\" title=\"Step 6: 启动私人网络\"></a>Step 6: 启动私人网络</h2><h2 id=\"Step-7-在私网上挖掘\"><a href=\"#Step-7-在私网上挖掘\" class=\"headerlink\" title=\"Step 7: 在私网上挖掘\"></a>Step 7: 在私网上挖掘</h2>"},{"_content":"# 正则零宽断言\n\n**(?=exp):零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。**\n\n匹配后面为_path，结果为product\n\n'product_path'.scan\n\n```\n/(product)(?=_path)/\n```\n\n**`vscode` 和 `sublime` 支持**\n\n\n\n**(?<=exp):零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp**\n\n匹配前面为name:，结果为wangfei\n\n'name:wangfei'.scan\n\n```\n/(?<=name:)(wangfei)/\n```\n\n**`vscode` 和 `sublime` 支持**\n\n\n\n**(?!exp):零宽度负预测先行断言，断言此位置的后面不能匹配表达式exp。**\n\n匹配后面不是_path\n\n'product_path'.scan\n\n```\n/(product)(?!_path)/\n```\n\n匹配后面不是_url\n\n'product_path'.scan\n\n```\n/(product)(?!_url)/\n```\n\n**`vscode` 和 `sublime` 支持**\n\n\n\n**(?<!exp):零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp**\n\n匹配前面不是name:\n\n'name:angelica'.scan\n\n```\n/(?<!name:)(angelica)/\n```\n\n匹配前面不是nick_name:\n\n'name:angelica'.scan\n\n```\n/(?<!nick_name:)(angelica)/\n```\n\n**`vscode` 和 `sublime` 支持**\n\n\n\n**参考:**\n\nhttps://www.cnblogs.com/macq/p/6597366.html#bc3","source":"_posts/basic/正则零宽断言.md","raw":"# 正则零宽断言\n\n**(?=exp):零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。**\n\n匹配后面为_path，结果为product\n\n'product_path'.scan\n\n```\n/(product)(?=_path)/\n```\n\n**`vscode` 和 `sublime` 支持**\n\n\n\n**(?<=exp):零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp**\n\n匹配前面为name:，结果为wangfei\n\n'name:wangfei'.scan\n\n```\n/(?<=name:)(wangfei)/\n```\n\n**`vscode` 和 `sublime` 支持**\n\n\n\n**(?!exp):零宽度负预测先行断言，断言此位置的后面不能匹配表达式exp。**\n\n匹配后面不是_path\n\n'product_path'.scan\n\n```\n/(product)(?!_path)/\n```\n\n匹配后面不是_url\n\n'product_path'.scan\n\n```\n/(product)(?!_url)/\n```\n\n**`vscode` 和 `sublime` 支持**\n\n\n\n**(?<!exp):零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp**\n\n匹配前面不是name:\n\n'name:angelica'.scan\n\n```\n/(?<!name:)(angelica)/\n```\n\n匹配前面不是nick_name:\n\n'name:angelica'.scan\n\n```\n/(?<!nick_name:)(angelica)/\n```\n\n**`vscode` 和 `sublime` 支持**\n\n\n\n**参考:**\n\nhttps://www.cnblogs.com/macq/p/6597366.html#bc3","slug":"basic/正则零宽断言","published":1,"date":"2019-07-13T06:31:13.423Z","updated":"2019-07-13T06:42:17.336Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgqz00038seom8s9s3bt","content":"<h1 id=\"正则零宽断言\"><a href=\"#正则零宽断言\" class=\"headerlink\" title=\"正则零宽断言\"></a>正则零宽断言</h1><p><strong>(?=exp):零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。</strong></p>\n<p>匹配后面为_path，结果为product</p>\n<p>‘product_path’.scan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(product)(?=_path)/</span><br></pre></td></tr></table></figure>\n<p><strong><code>vscode</code> 和 <code>sublime</code> 支持</strong></p>\n<p><strong>(?&lt;=exp):零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp</strong></p>\n<p>匹配前面为name:，结果为wangfei</p>\n<p>‘name:wangfei’.scan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(?&lt;=name:)(wangfei)/</span><br></pre></td></tr></table></figure>\n<p><strong><code>vscode</code> 和 <code>sublime</code> 支持</strong></p>\n<p><strong>(?!exp):零宽度负预测先行断言，断言此位置的后面不能匹配表达式exp。</strong></p>\n<p>匹配后面不是_path</p>\n<p>‘product_path’.scan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(product)(?!_path)/</span><br></pre></td></tr></table></figure>\n<p>匹配后面不是_url</p>\n<p>‘product_path’.scan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(product)(?!_url)/</span><br></pre></td></tr></table></figure>\n<p><strong><code>vscode</code> 和 <code>sublime</code> 支持</strong></p>\n<p><strong>(?&lt;!exp):零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp</strong></p>\n<p>匹配前面不是name:</p>\n<p>‘name:angelica’.scan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(?&lt;!name:)(angelica)/</span><br></pre></td></tr></table></figure>\n<p>匹配前面不是nick_name:</p>\n<p>‘name:angelica’.scan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(?&lt;!nick_name:)(angelica)/</span><br></pre></td></tr></table></figure>\n<p><strong><code>vscode</code> 和 <code>sublime</code> 支持</strong></p>\n<p><strong>参考:</strong></p>\n<p><a href=\"https://www.cnblogs.com/macq/p/6597366.html#bc3\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/macq/p/6597366.html#bc3</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"正则零宽断言\"><a href=\"#正则零宽断言\" class=\"headerlink\" title=\"正则零宽断言\"></a>正则零宽断言</h1><p><strong>(?=exp):零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。</strong></p>\n<p>匹配后面为_path，结果为product</p>\n<p>‘product_path’.scan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(product)(?=_path)/</span><br></pre></td></tr></table></figure>\n<p><strong><code>vscode</code> 和 <code>sublime</code> 支持</strong></p>\n<p><strong>(?&lt;=exp):零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp</strong></p>\n<p>匹配前面为name:，结果为wangfei</p>\n<p>‘name:wangfei’.scan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(?&lt;=name:)(wangfei)/</span><br></pre></td></tr></table></figure>\n<p><strong><code>vscode</code> 和 <code>sublime</code> 支持</strong></p>\n<p><strong>(?!exp):零宽度负预测先行断言，断言此位置的后面不能匹配表达式exp。</strong></p>\n<p>匹配后面不是_path</p>\n<p>‘product_path’.scan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(product)(?!_path)/</span><br></pre></td></tr></table></figure>\n<p>匹配后面不是_url</p>\n<p>‘product_path’.scan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(product)(?!_url)/</span><br></pre></td></tr></table></figure>\n<p><strong><code>vscode</code> 和 <code>sublime</code> 支持</strong></p>\n<p><strong>(?&lt;!exp):零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp</strong></p>\n<p>匹配前面不是name:</p>\n<p>‘name:angelica’.scan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(?&lt;!name:)(angelica)/</span><br></pre></td></tr></table></figure>\n<p>匹配前面不是nick_name:</p>\n<p>‘name:angelica’.scan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(?&lt;!nick_name:)(angelica)/</span><br></pre></td></tr></table></figure>\n<p><strong><code>vscode</code> 和 <code>sublime</code> 支持</strong></p>\n<p><strong>参考:</strong></p>\n<p><a href=\"https://www.cnblogs.com/macq/p/6597366.html#bc3\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/macq/p/6597366.html#bc3</a></p>\n"},{"title":"搭建 vpn 服务器","date":"2018-12-03T14:33:29.000Z","_content":"\n## Setp1. install OpenVPN\n\n```sh\n$ sudo apt-get update\n$ sudo apt-get install openvpn easy-rsa\n```\n\n## Setp2. 构建 CA(certificate authority) 目录\n\n使用`make-cadir`拷贝`easy-rsa` 的模板.\n\n```sh\n$ make-cadir ~/openvpn-ca\n```\n\n\n\n## Setp3.  配置 CA 变量\n\n`~/openvpn-ca/vars` 自己喜欢填啥就填啥吧, 不可以空着就是了\n\n```sh\n. . .\nexport KEY_NAME=\"server\" # 服务器的名字\n\nexport KEY_COUNTRY=\"US\"\nexport KEY_PROVINCE=\"CA\"\nexport KEY_CITY=\"SanFrancisco\"\nexport KEY_ORG=\"Fort-Funston\"\nexport KEY_EMAIL=\"me@myhost.mydomain\"\nexport KEY_OU=\"MyOrganizationalUnit\"\n\n. . .\n```\n\n## Setp4. Build the Certificate Authority\n\n```sh\n$ cd ~/openvpn-ca\n$ source vars\n$ ./clean-all\t# 确保干净的环境中操作\n$ ./build-ca\t# 构建CA\n```\n\n## Setp5.  创建服务器证书,key和加密文件\n\n```sh\n$ ./build-key-server server\n$ ./build-dh\n$ openvpn --genkey --secret keys/ta.key\n```\n\n## Setp6. 创建客户端的证书和key pair\n\n```sh\n$ ./build-key client1 # 不需要密码版\n$ ./build-key-pass client1 # 需要密码版\n```\n\n## Setp7. 配置 OpenVPN 服务\n\n### Copy the Files to the OpenVPN Directory\n\n```sh\ncd ~/openvpn-ca/keys\nsudo cp ca.crt server.crt server.key ta.key dh2048.pem /etc/openvpn\n# 拷贝 vpn 服务器\ngunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz | sudo tee /etc/openvpn/server.conf\n```\n\n### 调整 OpenVPN 的配置\n\n**Basic Configuration**\n\n`vi /etc/openvpn/server.conf`\n\n```sh\ntls-auth ta.key 0 # This file is secret\nkey-direction 0\n\ncipher AES-128-CBC\n\nauth SHA256\n\nuser nobody\ngroup nogroup\n\npush \"redirect-gateway def1 bypass-dhcp\"\n\npush \"dhcp-option DNS 208.67.222.222\"\npush \"dhcp-option DNS 208.67.220.220\"\n\nport 443\nproto tcp\n\ncert server.crt\nkey server.key\n```\n\n## Setp8. 调整网络的服务配置\n\n`vi /etc/sysctl.conf`\n\n```sh\nnet.ipv4.ip_forward=1\n```\n\n\n\n### Adjust the UFW Rules to Masquerade Client Connections\n\n防火墙先不考虑\n\n\n\n## Setp9. 开始 OpenVPN 服务器\n\n```sh\nsystemctl start openvpn@server\nsystemctl status openvpn@server\n```\n\n## Setp10. 创建客户端的配置和基础设施\n\n### Creating the Client Config Directory Structure\n\n```sh\nmkdir -p ~/client-configs/files\nchmod 700 ~/client-configs/files\n```\n\n### Creating a Base Configuration\n\n```sh\ncp /usr/share/doc/openvpn/examples/sample-config-files/client.conf ~/client-configs/base.conf\n```\n\n编辑`~/client-configs/base.conf`文件\n\n```text\nremote {server_IP_address} {1194}\n\nproto udp\n\nuser nobody\ngroup nogroup\n\nca ca.crt\ncert client.crt\nkey client.key\n\ncipher AES-128-CBC\nauth SHA256\n\nkey-direction 1\n\n# script-security 2\n# up /etc/openvpn/update-resolv-conf\n# down /etc/openvpn/update-resolv-conf\n```\n\n### Creating a Configuration Generation Script\n\n`vi ~/client-configs/make_config.sh`\n\n内容如下:\n\n```sh\n#!/bin/bash\n\n# First argument: Client identifier\n\nKEY_DIR=~/openvpn-ca/keys\nOUTPUT_DIR=~/client-configs/files\nBASE_CONFIG=~/client-configs/base.conf\n\ncat ${BASE_CONFIG} \\\n    <(echo -e '<ca>') \\\n    ${KEY_DIR}/ca.crt \\\n    <(echo -e '</ca>\\n<cert>') \\\n    ${KEY_DIR}/${1}.crt \\\n    <(echo -e '</cert>\\n<key>') \\\n    ${KEY_DIR}/${1}.key \\\n    <(echo -e '</key>\\n<tls-auth>') \\\n    ${KEY_DIR}/ta.key \\\n    <(echo -e '</tls-auth>') \\\n    > ${OUTPUT_DIR}/${1}.ovpn\n```\n\n```sh\nchmod 700 ~/client-configs/make_config.sh\n```\n\n\n\n## Step 11: Generate Client Configurations\n\n```sh\ncd ~/client-configs\n./make_config.sh client1\nls ~/client-configs/files\n```\n\n**将文件拷贝到目标系统中**\n\n\n\n\n\n\n\n\n\n\n\n参考: https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04","source":"_posts/devops/build_vpn_server.md","raw":"---\ntitle: 搭建 vpn 服务器\ndate: 2018-12-03 22:33:29\ncategories:\n- devops\ntags:\n- vpn 服务器\n---\n\n## Setp1. install OpenVPN\n\n```sh\n$ sudo apt-get update\n$ sudo apt-get install openvpn easy-rsa\n```\n\n## Setp2. 构建 CA(certificate authority) 目录\n\n使用`make-cadir`拷贝`easy-rsa` 的模板.\n\n```sh\n$ make-cadir ~/openvpn-ca\n```\n\n\n\n## Setp3.  配置 CA 变量\n\n`~/openvpn-ca/vars` 自己喜欢填啥就填啥吧, 不可以空着就是了\n\n```sh\n. . .\nexport KEY_NAME=\"server\" # 服务器的名字\n\nexport KEY_COUNTRY=\"US\"\nexport KEY_PROVINCE=\"CA\"\nexport KEY_CITY=\"SanFrancisco\"\nexport KEY_ORG=\"Fort-Funston\"\nexport KEY_EMAIL=\"me@myhost.mydomain\"\nexport KEY_OU=\"MyOrganizationalUnit\"\n\n. . .\n```\n\n## Setp4. Build the Certificate Authority\n\n```sh\n$ cd ~/openvpn-ca\n$ source vars\n$ ./clean-all\t# 确保干净的环境中操作\n$ ./build-ca\t# 构建CA\n```\n\n## Setp5.  创建服务器证书,key和加密文件\n\n```sh\n$ ./build-key-server server\n$ ./build-dh\n$ openvpn --genkey --secret keys/ta.key\n```\n\n## Setp6. 创建客户端的证书和key pair\n\n```sh\n$ ./build-key client1 # 不需要密码版\n$ ./build-key-pass client1 # 需要密码版\n```\n\n## Setp7. 配置 OpenVPN 服务\n\n### Copy the Files to the OpenVPN Directory\n\n```sh\ncd ~/openvpn-ca/keys\nsudo cp ca.crt server.crt server.key ta.key dh2048.pem /etc/openvpn\n# 拷贝 vpn 服务器\ngunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz | sudo tee /etc/openvpn/server.conf\n```\n\n### 调整 OpenVPN 的配置\n\n**Basic Configuration**\n\n`vi /etc/openvpn/server.conf`\n\n```sh\ntls-auth ta.key 0 # This file is secret\nkey-direction 0\n\ncipher AES-128-CBC\n\nauth SHA256\n\nuser nobody\ngroup nogroup\n\npush \"redirect-gateway def1 bypass-dhcp\"\n\npush \"dhcp-option DNS 208.67.222.222\"\npush \"dhcp-option DNS 208.67.220.220\"\n\nport 443\nproto tcp\n\ncert server.crt\nkey server.key\n```\n\n## Setp8. 调整网络的服务配置\n\n`vi /etc/sysctl.conf`\n\n```sh\nnet.ipv4.ip_forward=1\n```\n\n\n\n### Adjust the UFW Rules to Masquerade Client Connections\n\n防火墙先不考虑\n\n\n\n## Setp9. 开始 OpenVPN 服务器\n\n```sh\nsystemctl start openvpn@server\nsystemctl status openvpn@server\n```\n\n## Setp10. 创建客户端的配置和基础设施\n\n### Creating the Client Config Directory Structure\n\n```sh\nmkdir -p ~/client-configs/files\nchmod 700 ~/client-configs/files\n```\n\n### Creating a Base Configuration\n\n```sh\ncp /usr/share/doc/openvpn/examples/sample-config-files/client.conf ~/client-configs/base.conf\n```\n\n编辑`~/client-configs/base.conf`文件\n\n```text\nremote {server_IP_address} {1194}\n\nproto udp\n\nuser nobody\ngroup nogroup\n\nca ca.crt\ncert client.crt\nkey client.key\n\ncipher AES-128-CBC\nauth SHA256\n\nkey-direction 1\n\n# script-security 2\n# up /etc/openvpn/update-resolv-conf\n# down /etc/openvpn/update-resolv-conf\n```\n\n### Creating a Configuration Generation Script\n\n`vi ~/client-configs/make_config.sh`\n\n内容如下:\n\n```sh\n#!/bin/bash\n\n# First argument: Client identifier\n\nKEY_DIR=~/openvpn-ca/keys\nOUTPUT_DIR=~/client-configs/files\nBASE_CONFIG=~/client-configs/base.conf\n\ncat ${BASE_CONFIG} \\\n    <(echo -e '<ca>') \\\n    ${KEY_DIR}/ca.crt \\\n    <(echo -e '</ca>\\n<cert>') \\\n    ${KEY_DIR}/${1}.crt \\\n    <(echo -e '</cert>\\n<key>') \\\n    ${KEY_DIR}/${1}.key \\\n    <(echo -e '</key>\\n<tls-auth>') \\\n    ${KEY_DIR}/ta.key \\\n    <(echo -e '</tls-auth>') \\\n    > ${OUTPUT_DIR}/${1}.ovpn\n```\n\n```sh\nchmod 700 ~/client-configs/make_config.sh\n```\n\n\n\n## Step 11: Generate Client Configurations\n\n```sh\ncd ~/client-configs\n./make_config.sh client1\nls ~/client-configs/files\n```\n\n**将文件拷贝到目标系统中**\n\n\n\n\n\n\n\n\n\n\n\n参考: https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04","slug":"devops/build_vpn_server","published":1,"updated":"2018-12-04T14:29:46.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgr400048seo9juy9izi","content":"<h2 id=\"Setp1-install-OpenVPN\"><a href=\"#Setp1-install-OpenVPN\" class=\"headerlink\" title=\"Setp1. install OpenVPN\"></a>Setp1. install OpenVPN</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install openvpn easy-rsa</span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp2-构建-CA-certificate-authority-目录\"><a href=\"#Setp2-构建-CA-certificate-authority-目录\" class=\"headerlink\" title=\"Setp2. 构建 CA(certificate authority) 目录\"></a>Setp2. 构建 CA(certificate authority) 目录</h2><p>使用<code>make-cadir</code>拷贝<code>easy-rsa</code> 的模板.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make-cadir ~/openvpn-ca</span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp3-配置-CA-变量\"><a href=\"#Setp3-配置-CA-变量\" class=\"headerlink\" title=\"Setp3.  配置 CA 变量\"></a>Setp3.  配置 CA 变量</h2><p><code>~/openvpn-ca/vars</code> 自己喜欢填啥就填啥吧, 不可以空着就是了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\"><span class=\"built_in\">export</span> KEY_NAME=<span class=\"string\">\"server\"</span> <span class=\"comment\"># 服务器的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> KEY_COUNTRY=<span class=\"string\">\"US\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KEY_PROVINCE=<span class=\"string\">\"CA\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KEY_CITY=<span class=\"string\">\"SanFrancisco\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KEY_ORG=<span class=\"string\">\"Fort-Funston\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KEY_EMAIL=<span class=\"string\">\"me@myhost.mydomain\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KEY_OU=<span class=\"string\">\"MyOrganizationalUnit\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp4-Build-the-Certificate-Authority\"><a href=\"#Setp4-Build-the-Certificate-Authority\" class=\"headerlink\" title=\"Setp4. Build the Certificate Authority\"></a>Setp4. Build the Certificate Authority</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/openvpn-ca</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> vars</span><br><span class=\"line\">$ ./clean-all\t<span class=\"comment\"># 确保干净的环境中操作</span></span><br><span class=\"line\">$ ./build-ca\t<span class=\"comment\"># 构建CA</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp5-创建服务器证书-key和加密文件\"><a href=\"#Setp5-创建服务器证书-key和加密文件\" class=\"headerlink\" title=\"Setp5.  创建服务器证书,key和加密文件\"></a>Setp5.  创建服务器证书,key和加密文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./build-key-server server</span><br><span class=\"line\">$ ./build-dh</span><br><span class=\"line\">$ openvpn --genkey --secret keys/ta.key</span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp6-创建客户端的证书和key-pair\"><a href=\"#Setp6-创建客户端的证书和key-pair\" class=\"headerlink\" title=\"Setp6. 创建客户端的证书和key pair\"></a>Setp6. 创建客户端的证书和key pair</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./build-key client1 <span class=\"comment\"># 不需要密码版</span></span><br><span class=\"line\">$ ./build-key-pass client1 <span class=\"comment\"># 需要密码版</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp7-配置-OpenVPN-服务\"><a href=\"#Setp7-配置-OpenVPN-服务\" class=\"headerlink\" title=\"Setp7. 配置 OpenVPN 服务\"></a>Setp7. 配置 OpenVPN 服务</h2><h3 id=\"Copy-the-Files-to-the-OpenVPN-Directory\"><a href=\"#Copy-the-Files-to-the-OpenVPN-Directory\" class=\"headerlink\" title=\"Copy the Files to the OpenVPN Directory\"></a>Copy the Files to the OpenVPN Directory</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/openvpn-ca/keys</span><br><span class=\"line\">sudo cp ca.crt server.crt server.key ta.key dh2048.pem /etc/openvpn</span><br><span class=\"line\"><span class=\"comment\"># 拷贝 vpn 服务器</span></span><br><span class=\"line\">gunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz | sudo tee /etc/openvpn/server.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"调整-OpenVPN-的配置\"><a href=\"#调整-OpenVPN-的配置\" class=\"headerlink\" title=\"调整 OpenVPN 的配置\"></a>调整 OpenVPN 的配置</h3><p><strong>Basic Configuration</strong></p>\n<p><code>vi /etc/openvpn/server.conf</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tls-auth ta.key 0 <span class=\"comment\"># This file is secret</span></span><br><span class=\"line\">key-direction 0</span><br><span class=\"line\"></span><br><span class=\"line\">cipher AES-128-CBC</span><br><span class=\"line\"></span><br><span class=\"line\">auth SHA256</span><br><span class=\"line\"></span><br><span class=\"line\">user nobody</span><br><span class=\"line\">group nogroup</span><br><span class=\"line\"></span><br><span class=\"line\">push <span class=\"string\">\"redirect-gateway def1 bypass-dhcp\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">push <span class=\"string\">\"dhcp-option DNS 208.67.222.222\"</span></span><br><span class=\"line\">push <span class=\"string\">\"dhcp-option DNS 208.67.220.220\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">port 443</span><br><span class=\"line\">proto tcp</span><br><span class=\"line\"></span><br><span class=\"line\">cert server.crt</span><br><span class=\"line\">key server.key</span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp8-调整网络的服务配置\"><a href=\"#Setp8-调整网络的服务配置\" class=\"headerlink\" title=\"Setp8. 调整网络的服务配置\"></a>Setp8. 调整网络的服务配置</h2><p><code>vi /etc/sysctl.conf</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure>\n<h3 id=\"Adjust-the-UFW-Rules-to-Masquerade-Client-Connections\"><a href=\"#Adjust-the-UFW-Rules-to-Masquerade-Client-Connections\" class=\"headerlink\" title=\"Adjust the UFW Rules to Masquerade Client Connections\"></a>Adjust the UFW Rules to Masquerade Client Connections</h3><p>防火墙先不考虑</p>\n<h2 id=\"Setp9-开始-OpenVPN-服务器\"><a href=\"#Setp9-开始-OpenVPN-服务器\" class=\"headerlink\" title=\"Setp9. 开始 OpenVPN 服务器\"></a>Setp9. 开始 OpenVPN 服务器</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start openvpn@server</span><br><span class=\"line\">systemctl status openvpn@server</span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp10-创建客户端的配置和基础设施\"><a href=\"#Setp10-创建客户端的配置和基础设施\" class=\"headerlink\" title=\"Setp10. 创建客户端的配置和基础设施\"></a>Setp10. 创建客户端的配置和基础设施</h2><h3 id=\"Creating-the-Client-Config-Directory-Structure\"><a href=\"#Creating-the-Client-Config-Directory-Structure\" class=\"headerlink\" title=\"Creating the Client Config Directory Structure\"></a>Creating the Client Config Directory Structure</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/client-configs/files</span><br><span class=\"line\">chmod 700 ~/client-configs/files</span><br></pre></td></tr></table></figure>\n<h3 id=\"Creating-a-Base-Configuration\"><a href=\"#Creating-a-Base-Configuration\" class=\"headerlink\" title=\"Creating a Base Configuration\"></a>Creating a Base Configuration</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf ~/client-configs/base.conf</span><br></pre></td></tr></table></figure>\n<p>编辑<code>~/client-configs/base.conf</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote &#123;server_IP_address&#125; &#123;1194&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">proto udp</span><br><span class=\"line\"></span><br><span class=\"line\">user nobody</span><br><span class=\"line\">group nogroup</span><br><span class=\"line\"></span><br><span class=\"line\">ca ca.crt</span><br><span class=\"line\">cert client.crt</span><br><span class=\"line\">key client.key</span><br><span class=\"line\"></span><br><span class=\"line\">cipher AES-128-CBC</span><br><span class=\"line\">auth SHA256</span><br><span class=\"line\"></span><br><span class=\"line\">key-direction 1</span><br><span class=\"line\"></span><br><span class=\"line\"># script-security 2</span><br><span class=\"line\"># up /etc/openvpn/update-resolv-conf</span><br><span class=\"line\"># down /etc/openvpn/update-resolv-conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"Creating-a-Configuration-Generation-Script\"><a href=\"#Creating-a-Configuration-Generation-Script\" class=\"headerlink\" title=\"Creating a Configuration Generation Script\"></a>Creating a Configuration Generation Script</h3><p><code>vi ~/client-configs/make_config.sh</code></p>\n<p>内容如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># First argument: Client identifier</span></span><br><span class=\"line\"></span><br><span class=\"line\">KEY_DIR=~/openvpn-ca/keys</span><br><span class=\"line\">OUTPUT_DIR=~/client-configs/files</span><br><span class=\"line\">BASE_CONFIG=~/client-configs/base.conf</span><br><span class=\"line\"></span><br><span class=\"line\">cat <span class=\"variable\">$&#123;BASE_CONFIG&#125;</span> \\</span><br><span class=\"line\">    &lt;(<span class=\"built_in\">echo</span> -e <span class=\"string\">'&lt;ca&gt;'</span>) \\</span><br><span class=\"line\">    <span class=\"variable\">$&#123;KEY_DIR&#125;</span>/ca.crt \\</span><br><span class=\"line\">    &lt;(<span class=\"built_in\">echo</span> -e <span class=\"string\">'&lt;/ca&gt;\\n&lt;cert&gt;'</span>) \\</span><br><span class=\"line\">    <span class=\"variable\">$&#123;KEY_DIR&#125;</span>/<span class=\"variable\">$&#123;1&#125;</span>.crt \\</span><br><span class=\"line\">    &lt;(<span class=\"built_in\">echo</span> -e <span class=\"string\">'&lt;/cert&gt;\\n&lt;key&gt;'</span>) \\</span><br><span class=\"line\">    <span class=\"variable\">$&#123;KEY_DIR&#125;</span>/<span class=\"variable\">$&#123;1&#125;</span>.key \\</span><br><span class=\"line\">    &lt;(<span class=\"built_in\">echo</span> -e <span class=\"string\">'&lt;/key&gt;\\n&lt;tls-auth&gt;'</span>) \\</span><br><span class=\"line\">    <span class=\"variable\">$&#123;KEY_DIR&#125;</span>/ta.key \\</span><br><span class=\"line\">    &lt;(<span class=\"built_in\">echo</span> -e <span class=\"string\">'&lt;/tls-auth&gt;'</span>) \\</span><br><span class=\"line\">    &gt; <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/<span class=\"variable\">$&#123;1&#125;</span>.ovpn</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 700 ~/client-configs/make_config.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-11-Generate-Client-Configurations\"><a href=\"#Step-11-Generate-Client-Configurations\" class=\"headerlink\" title=\"Step 11: Generate Client Configurations\"></a>Step 11: Generate Client Configurations</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/client-configs</span><br><span class=\"line\">./make_config.sh client1</span><br><span class=\"line\">ls ~/client-configs/files</span><br></pre></td></tr></table></figure>\n<p><strong>将文件拷贝到目标系统中</strong></p>\n<p>参考: <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04\" target=\"_blank\" rel=\"noopener\">https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Setp1-install-OpenVPN\"><a href=\"#Setp1-install-OpenVPN\" class=\"headerlink\" title=\"Setp1. install OpenVPN\"></a>Setp1. install OpenVPN</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install openvpn easy-rsa</span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp2-构建-CA-certificate-authority-目录\"><a href=\"#Setp2-构建-CA-certificate-authority-目录\" class=\"headerlink\" title=\"Setp2. 构建 CA(certificate authority) 目录\"></a>Setp2. 构建 CA(certificate authority) 目录</h2><p>使用<code>make-cadir</code>拷贝<code>easy-rsa</code> 的模板.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make-cadir ~/openvpn-ca</span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp3-配置-CA-变量\"><a href=\"#Setp3-配置-CA-变量\" class=\"headerlink\" title=\"Setp3.  配置 CA 变量\"></a>Setp3.  配置 CA 变量</h2><p><code>~/openvpn-ca/vars</code> 自己喜欢填啥就填啥吧, 不可以空着就是了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\"><span class=\"built_in\">export</span> KEY_NAME=<span class=\"string\">\"server\"</span> <span class=\"comment\"># 服务器的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> KEY_COUNTRY=<span class=\"string\">\"US\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KEY_PROVINCE=<span class=\"string\">\"CA\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KEY_CITY=<span class=\"string\">\"SanFrancisco\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KEY_ORG=<span class=\"string\">\"Fort-Funston\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KEY_EMAIL=<span class=\"string\">\"me@myhost.mydomain\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KEY_OU=<span class=\"string\">\"MyOrganizationalUnit\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp4-Build-the-Certificate-Authority\"><a href=\"#Setp4-Build-the-Certificate-Authority\" class=\"headerlink\" title=\"Setp4. Build the Certificate Authority\"></a>Setp4. Build the Certificate Authority</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/openvpn-ca</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> vars</span><br><span class=\"line\">$ ./clean-all\t<span class=\"comment\"># 确保干净的环境中操作</span></span><br><span class=\"line\">$ ./build-ca\t<span class=\"comment\"># 构建CA</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp5-创建服务器证书-key和加密文件\"><a href=\"#Setp5-创建服务器证书-key和加密文件\" class=\"headerlink\" title=\"Setp5.  创建服务器证书,key和加密文件\"></a>Setp5.  创建服务器证书,key和加密文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./build-key-server server</span><br><span class=\"line\">$ ./build-dh</span><br><span class=\"line\">$ openvpn --genkey --secret keys/ta.key</span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp6-创建客户端的证书和key-pair\"><a href=\"#Setp6-创建客户端的证书和key-pair\" class=\"headerlink\" title=\"Setp6. 创建客户端的证书和key pair\"></a>Setp6. 创建客户端的证书和key pair</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./build-key client1 <span class=\"comment\"># 不需要密码版</span></span><br><span class=\"line\">$ ./build-key-pass client1 <span class=\"comment\"># 需要密码版</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp7-配置-OpenVPN-服务\"><a href=\"#Setp7-配置-OpenVPN-服务\" class=\"headerlink\" title=\"Setp7. 配置 OpenVPN 服务\"></a>Setp7. 配置 OpenVPN 服务</h2><h3 id=\"Copy-the-Files-to-the-OpenVPN-Directory\"><a href=\"#Copy-the-Files-to-the-OpenVPN-Directory\" class=\"headerlink\" title=\"Copy the Files to the OpenVPN Directory\"></a>Copy the Files to the OpenVPN Directory</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/openvpn-ca/keys</span><br><span class=\"line\">sudo cp ca.crt server.crt server.key ta.key dh2048.pem /etc/openvpn</span><br><span class=\"line\"><span class=\"comment\"># 拷贝 vpn 服务器</span></span><br><span class=\"line\">gunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz | sudo tee /etc/openvpn/server.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"调整-OpenVPN-的配置\"><a href=\"#调整-OpenVPN-的配置\" class=\"headerlink\" title=\"调整 OpenVPN 的配置\"></a>调整 OpenVPN 的配置</h3><p><strong>Basic Configuration</strong></p>\n<p><code>vi /etc/openvpn/server.conf</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tls-auth ta.key 0 <span class=\"comment\"># This file is secret</span></span><br><span class=\"line\">key-direction 0</span><br><span class=\"line\"></span><br><span class=\"line\">cipher AES-128-CBC</span><br><span class=\"line\"></span><br><span class=\"line\">auth SHA256</span><br><span class=\"line\"></span><br><span class=\"line\">user nobody</span><br><span class=\"line\">group nogroup</span><br><span class=\"line\"></span><br><span class=\"line\">push <span class=\"string\">\"redirect-gateway def1 bypass-dhcp\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">push <span class=\"string\">\"dhcp-option DNS 208.67.222.222\"</span></span><br><span class=\"line\">push <span class=\"string\">\"dhcp-option DNS 208.67.220.220\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">port 443</span><br><span class=\"line\">proto tcp</span><br><span class=\"line\"></span><br><span class=\"line\">cert server.crt</span><br><span class=\"line\">key server.key</span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp8-调整网络的服务配置\"><a href=\"#Setp8-调整网络的服务配置\" class=\"headerlink\" title=\"Setp8. 调整网络的服务配置\"></a>Setp8. 调整网络的服务配置</h2><p><code>vi /etc/sysctl.conf</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure>\n<h3 id=\"Adjust-the-UFW-Rules-to-Masquerade-Client-Connections\"><a href=\"#Adjust-the-UFW-Rules-to-Masquerade-Client-Connections\" class=\"headerlink\" title=\"Adjust the UFW Rules to Masquerade Client Connections\"></a>Adjust the UFW Rules to Masquerade Client Connections</h3><p>防火墙先不考虑</p>\n<h2 id=\"Setp9-开始-OpenVPN-服务器\"><a href=\"#Setp9-开始-OpenVPN-服务器\" class=\"headerlink\" title=\"Setp9. 开始 OpenVPN 服务器\"></a>Setp9. 开始 OpenVPN 服务器</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start openvpn@server</span><br><span class=\"line\">systemctl status openvpn@server</span><br></pre></td></tr></table></figure>\n<h2 id=\"Setp10-创建客户端的配置和基础设施\"><a href=\"#Setp10-创建客户端的配置和基础设施\" class=\"headerlink\" title=\"Setp10. 创建客户端的配置和基础设施\"></a>Setp10. 创建客户端的配置和基础设施</h2><h3 id=\"Creating-the-Client-Config-Directory-Structure\"><a href=\"#Creating-the-Client-Config-Directory-Structure\" class=\"headerlink\" title=\"Creating the Client Config Directory Structure\"></a>Creating the Client Config Directory Structure</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/client-configs/files</span><br><span class=\"line\">chmod 700 ~/client-configs/files</span><br></pre></td></tr></table></figure>\n<h3 id=\"Creating-a-Base-Configuration\"><a href=\"#Creating-a-Base-Configuration\" class=\"headerlink\" title=\"Creating a Base Configuration\"></a>Creating a Base Configuration</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf ~/client-configs/base.conf</span><br></pre></td></tr></table></figure>\n<p>编辑<code>~/client-configs/base.conf</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote &#123;server_IP_address&#125; &#123;1194&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">proto udp</span><br><span class=\"line\"></span><br><span class=\"line\">user nobody</span><br><span class=\"line\">group nogroup</span><br><span class=\"line\"></span><br><span class=\"line\">ca ca.crt</span><br><span class=\"line\">cert client.crt</span><br><span class=\"line\">key client.key</span><br><span class=\"line\"></span><br><span class=\"line\">cipher AES-128-CBC</span><br><span class=\"line\">auth SHA256</span><br><span class=\"line\"></span><br><span class=\"line\">key-direction 1</span><br><span class=\"line\"></span><br><span class=\"line\"># script-security 2</span><br><span class=\"line\"># up /etc/openvpn/update-resolv-conf</span><br><span class=\"line\"># down /etc/openvpn/update-resolv-conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"Creating-a-Configuration-Generation-Script\"><a href=\"#Creating-a-Configuration-Generation-Script\" class=\"headerlink\" title=\"Creating a Configuration Generation Script\"></a>Creating a Configuration Generation Script</h3><p><code>vi ~/client-configs/make_config.sh</code></p>\n<p>内容如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># First argument: Client identifier</span></span><br><span class=\"line\"></span><br><span class=\"line\">KEY_DIR=~/openvpn-ca/keys</span><br><span class=\"line\">OUTPUT_DIR=~/client-configs/files</span><br><span class=\"line\">BASE_CONFIG=~/client-configs/base.conf</span><br><span class=\"line\"></span><br><span class=\"line\">cat <span class=\"variable\">$&#123;BASE_CONFIG&#125;</span> \\</span><br><span class=\"line\">    &lt;(<span class=\"built_in\">echo</span> -e <span class=\"string\">'&lt;ca&gt;'</span>) \\</span><br><span class=\"line\">    <span class=\"variable\">$&#123;KEY_DIR&#125;</span>/ca.crt \\</span><br><span class=\"line\">    &lt;(<span class=\"built_in\">echo</span> -e <span class=\"string\">'&lt;/ca&gt;\\n&lt;cert&gt;'</span>) \\</span><br><span class=\"line\">    <span class=\"variable\">$&#123;KEY_DIR&#125;</span>/<span class=\"variable\">$&#123;1&#125;</span>.crt \\</span><br><span class=\"line\">    &lt;(<span class=\"built_in\">echo</span> -e <span class=\"string\">'&lt;/cert&gt;\\n&lt;key&gt;'</span>) \\</span><br><span class=\"line\">    <span class=\"variable\">$&#123;KEY_DIR&#125;</span>/<span class=\"variable\">$&#123;1&#125;</span>.key \\</span><br><span class=\"line\">    &lt;(<span class=\"built_in\">echo</span> -e <span class=\"string\">'&lt;/key&gt;\\n&lt;tls-auth&gt;'</span>) \\</span><br><span class=\"line\">    <span class=\"variable\">$&#123;KEY_DIR&#125;</span>/ta.key \\</span><br><span class=\"line\">    &lt;(<span class=\"built_in\">echo</span> -e <span class=\"string\">'&lt;/tls-auth&gt;'</span>) \\</span><br><span class=\"line\">    &gt; <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/<span class=\"variable\">$&#123;1&#125;</span>.ovpn</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 700 ~/client-configs/make_config.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-11-Generate-Client-Configurations\"><a href=\"#Step-11-Generate-Client-Configurations\" class=\"headerlink\" title=\"Step 11: Generate Client Configurations\"></a>Step 11: Generate Client Configurations</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/client-configs</span><br><span class=\"line\">./make_config.sh client1</span><br><span class=\"line\">ls ~/client-configs/files</span><br></pre></td></tr></table></figure>\n<p><strong>将文件拷贝到目标系统中</strong></p>\n<p>参考: <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04\" target=\"_blank\" rel=\"noopener\">https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04</a></p>\n"},{"title":"搭建自己的私有网络","date":"2018-08-29T13:14:48.228Z","_content":"\n## 目标\n\n1. 创建私有的以太网\n2. 在私有网部署一个简单的智能合约\n3. 使用该公约发起交易\n\n**注意事项：** 机子内存要2G及以上\n\n## setp1:  安装环境\n**记录坑：**\n通过 `apt-get install geth` 安装的环境只有 `geth` 命令，无 `bootnode`,  `evm`,  `disasm`,  `rlpdump`,  `ethtest`这些命令。\n\nUbuntu安装方式：\n```sh\nsudo apt-get install software-properties-common\nsudo add-apt-repository -y ppa:ethereum/ethereum\nsudo apt-get update\nsudo apt-get install ethereum\n```\n\n可以选择源码安装：(前提是需要 golang > 1.7)\n```sh\ngit clone https://github.com/ethereum/go-ethereum\ncd go-ethereum\nmake geth\n```\n\n## step2: 创建创世块\n\n创世块是区块链的第一个块并且参数被指定在*genesis.json*文件中，内容如下：\n```json\n{\n\"config\": {\n \"chainId\": 15,\n \"homesteadBlock\": 0,\n \"eip155Block\": 0,\n \"eip158Block\": 0\n  },\n\n \"alloc\"  : {\n \"0x0000000000000000000000000000000000000001\": {\"balance\": \"111111111\"},\n \"0x0000000000000000000000000000000000000002\": {\"balance\": \"222222222\"}\n  },\n\n \"coinbase\"  : \"0x0000000000000000000000000000000000000000\",\n \"difficulty\" : \"0x00001\",\n \"extraData\"  : \"\",\n \"gasLimit\"  : \"0x2fefd8\",\n \"nonce\"  : \"0x0000000000000107\",\n \"mixhash\"  : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n \"timestamp\"  : \"0x00\"\n}\n```\n\n**注意：** `chainId=1` 指向的是以太坊的主链上。因此为您的网络创建唯一的`chainId`非常重要，这样您的客户端就不会混淆私有区块链和主网络.为了说明和测试，将采矿难度(`difficulty`)设置为较低值。还要确保你指定一个唯一的随机数来开始(`nonce`)。`alloc`字段允许您使用Ether预先填充帐户。\n现在到您创建的`genesis.json`文件的目录并初始化`bootnode`节点，您的以太坊客户端可通过该节点加入您的专用网络并与连接到您的专用网络的其他节点进行交互。\n\n```sh\ncd /root/ucsfnet/data\ngeth --datadir=learn init genesis.json \nbootnode --genkey=boot.key \nbootnode --nodekey=boot.key\n```\n没有bootnode的原因：see  step1\n\n## step3: 连接到bootnode上\n\n开一个新终端：\n```sh\nssh root@101.102.103.104\ngeth --datadir=/root/ucsfnet/data --bootnodes=enode://148f3....@101.102.103.104:3031\n```\n将`148f3....`替换为 `step2` 生成的\n```\n$ bootnode --nodekey=boot.key\nINFO [03-14|16:30:33] UDP listener up                          self=enode://c591c837ff804c4bdb6a5a8d02e5343d5f96fbf6e198aaf05f91aeb0a9b781e3b6fb95124ac8e4ee1b99ca64df2c93052c54bc02ee1dada70d38bd4a956d4ac4@[::]:30301\n```\n\n## step4: 创建一个新账号并查询余额\n新开一个终端：\n```sh\ngeth attach /root/ucsfnet/data/geth.ipc \n```\n连接到网络中：\n查看有哪些账户,   创建一个新账号密码为：*mypassword* ,  查询用户余额\n```sh\n> eth.accounts\n[]\n\n> personal.newAccount(\"mypassword\")\n\"0x73c62b30d6dbe998313384f1c98528c1d372b075\"\n\n> web3.fromWei(eth.getBalance(eth.accounts\\[0\\]), \"ether\")\n0\n```\n那个`0x`打头的就是账户地址：*0x73c62b30d6dbe998313384f1c98528c1d372b075*\n\n## step5: 在私链上挖矿\n\n挖矿有2目的：\n> 1.  需要为矿工的算力，提供gas\n> 2. 采矿需要将你的交易写到区块链中\n\n```sh\ngeth --datadir=/root/ucsfnet/data --mine --minerthreads=1 --etherbase=0x...\n```\n*etherbase* 参数应该是`step4`中的钱包地址\n*开始挖矿后会有一段时间加载数据，耗CPU比较严重。*\n\n## step6: 开发一个简单的智能合约\n\n首先需要安装编译器：\n```sh\nsudo add-apt-repository ppa:ethereum/ethereum\nsudo apt-get update\nsudo apt-get install solc\n```\n\n其次，创建合约，并命名为 `greeter.sol`\n\n```solc\ncontract mortal {\n\n/* Define variable owner of the type address*/\n address owner;\n\n/* this function is executed at initialization and sets the owner of the contract */\n function mortal() { owner = msg.sender; }\n\n/* Function to recover the funds on the contract */\n function kill() { if (msg.sender == owner) selfdestruct(owner); }\n}\n\ncontract greeter is mortal {\n /* define variable greeting of the type string */\n string greeting;\n\n/* this runs when the contract is executed */\n function greeter(string _greeting) public {\n greeting = \"UCSFnet lives!\";\n }\n\n/* main function */\n function greet() constant returns (string) {\n return greeting;\n }\n}\n```\n\n编译合约：\n```sh\nsolc --bin --abi  -o /root/test /root/test/greeter.sol\n\n## 输出文件\n$ ls\ngreeter.abi  greeter.bin  greeter.sol  mortal.abi  mortal.bin\n```\n在编译命令行中， `--bin --abi` 是分别生成 EVM（Ethereum Virtual Machine：以太坊虚拟机）字节码 和 ABI（Application Binary Inferface：应用二进制接口）文件。 `-o` 指定生成后存放的路径\n\n**合约内容先不研究**\n\n\n## step7: 部署GREETER合约到私网\n\n```js\nvar _greeting = 'Jie lives!';\n\nvar browser_ballot_sol_greeterContract = web3.eth.contract([{\n    \"constant\": false,\n    \"inputs\": [],\n    \"name\": \"kill\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"type\": \"function\"\n}, {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"greet\",\n    \"outputs\": [{\"name\": \"\", \"type\": \"string\"}],\n    \"payable\": false,\n    \"type\": \"function\"\n}, {\"inputs\": [{\"name\": \"_greeting\", \"type\": \"string\"}], \"payable\": false, \"type\": \"constructor\"}]);\n\nvar browser_ballot_sol_greeter = browser_ballot_sol_greeterContract.new(\n    _greeting,\n\n    {\n\n        from: web3.eth.accounts[0],\n\n        data: '0x6060604052341561000f57600080fd5b6040516103dd3803806103dd833981016040528080518201919050505b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6040805190810160405280600d81526020017f48656c6c6f2c20576f726c642100000000000000000000000000000000000000815250600190805190602001906100b99291906100c1565b505b50610166565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010257805160ff1916838001178555610130565b82800160010185558215610130579182015b8281111561012f578251825591602001919060010190610114565b5b50905061013d9190610141565b5090565b61016391905b8082111561015f576000816000905550600101610147565b5090565b90565b610268806101756000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610049578063cfae32171461005e575b600080fd5b341561005457600080fd5b61005c6100ed565b005b341561006957600080fd5b61007161017f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b25780820151818401525b602081019050610096565b50505050905090810190601f1680156100df5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561017c576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b610187610228565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561021d5780601f106101f25761010080835404028352916020019161021d565b820191906000526020600020905b81548152906001019060200180831161020057829003601f168201915b505050505090505b90565b6020604051908101604052806000815250905600a165627a7a7230582069d50e4318daa30d3f74bb817c3b0cb732c4ec6a493eb108266c548906c8b6d70029',\n\n        gas: '1000000'\n\n    }, function (e, contract) {\n\n        console.log(e, contract);\n\n        if (typeof contract.address !== 'undefined') {\n\n            console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n\n        }\n\n    })\n```\n数据看着填吧，启动一个终端，连接到私链上\n```sh\nssh root@101.102.103.104 \ngeth attach /root/ucsfnet/data/geth.ipc \n> web3.fromWei(eth.getBalance(eth.accounts[0]), \"ether\")\n> personal.unlockAccount(eth.accounts[0], \"mypassword\")\n```\n\n部署合约需要account上有余额，且account处于unlock状态下。\n使用下面的命令载入合约：\n```js\nloadScript('myContract.js')\n```\n\n**注意：**需要有矿工挖矿保证交易被挖到\n将会得到如下内容：\n```text\nContract mined! address: 0xa76d017c3035dcf15e28b315477f3f19ae275433 transactionHash: 0x732e84efc03638767efc9a46738161c04d561a92cc2e631c63287e63ef38995b\n```\n这样合约就部署完成了\n\n## 与合同的交换\n\n```js\n> var abi = '[{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"greet\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_greeting\",\"type\":\"string\"}],\"payable\":false,\"type\":\"constructor\"}]'\n> var abi = JSON.parse(abi)\n> var contract = web3.eth.contract(abi)\n> var c = contract.at(\"0xa76d017c3035dcf15e28b315477f3f19ae275433\")\n> c.greet()\n```\n\n会有一个输出：\n```text\nUCSFnet lives! \n```\n\n 我这输出的是：\"Hello, World!\"  ....\n\n## 博客推荐\n\n[Nice low-level description of networking in Ethereum (uses the Python-based client):](https://ocalog.com/post/10/)\n\n\n[Setting up private network or local cluster](https://github.com/ethereum/go-ethereum/wiki/Setting-up-private-network-or-local-cluster)\n\n[Managing your accounts](https://github.com/ethereum/go-ethereum/wiki/Managing-your-accounts)\n\n[Connecting to the network](https://github.com/ethereum/go-ethereum/wiki/Connecting-to-the-network)\n\n[The Go Ethereum client](https://github.com/ethereum/go-ethereum)\n\n[Official Ethereum command line tool documentation](https://ethereum.org/cli)\n\n\n参考（算是翻译）：\n[How to create a private Ethereum network](https://omarmetwally.blog/2017/07/25/how-to-create-a-private-ethereum-network/)\n\n\n## 下一个目标\nhttps://omarmetwally.blog/2017/09/27/how-to-connect-3-ethereum-nodes-in-a-private-ethereum-network/","source":"_posts/block_chain/搭建自己的私有网络.md","raw":"---\ntitle: 搭建自己的私有网络\ndate: \ncategories:\n- backend\ntags:\n- blockchain\n- 以太坊\n---\n\n## 目标\n\n1. 创建私有的以太网\n2. 在私有网部署一个简单的智能合约\n3. 使用该公约发起交易\n\n**注意事项：** 机子内存要2G及以上\n\n## setp1:  安装环境\n**记录坑：**\n通过 `apt-get install geth` 安装的环境只有 `geth` 命令，无 `bootnode`,  `evm`,  `disasm`,  `rlpdump`,  `ethtest`这些命令。\n\nUbuntu安装方式：\n```sh\nsudo apt-get install software-properties-common\nsudo add-apt-repository -y ppa:ethereum/ethereum\nsudo apt-get update\nsudo apt-get install ethereum\n```\n\n可以选择源码安装：(前提是需要 golang > 1.7)\n```sh\ngit clone https://github.com/ethereum/go-ethereum\ncd go-ethereum\nmake geth\n```\n\n## step2: 创建创世块\n\n创世块是区块链的第一个块并且参数被指定在*genesis.json*文件中，内容如下：\n```json\n{\n\"config\": {\n \"chainId\": 15,\n \"homesteadBlock\": 0,\n \"eip155Block\": 0,\n \"eip158Block\": 0\n  },\n\n \"alloc\"  : {\n \"0x0000000000000000000000000000000000000001\": {\"balance\": \"111111111\"},\n \"0x0000000000000000000000000000000000000002\": {\"balance\": \"222222222\"}\n  },\n\n \"coinbase\"  : \"0x0000000000000000000000000000000000000000\",\n \"difficulty\" : \"0x00001\",\n \"extraData\"  : \"\",\n \"gasLimit\"  : \"0x2fefd8\",\n \"nonce\"  : \"0x0000000000000107\",\n \"mixhash\"  : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n \"timestamp\"  : \"0x00\"\n}\n```\n\n**注意：** `chainId=1` 指向的是以太坊的主链上。因此为您的网络创建唯一的`chainId`非常重要，这样您的客户端就不会混淆私有区块链和主网络.为了说明和测试，将采矿难度(`difficulty`)设置为较低值。还要确保你指定一个唯一的随机数来开始(`nonce`)。`alloc`字段允许您使用Ether预先填充帐户。\n现在到您创建的`genesis.json`文件的目录并初始化`bootnode`节点，您的以太坊客户端可通过该节点加入您的专用网络并与连接到您的专用网络的其他节点进行交互。\n\n```sh\ncd /root/ucsfnet/data\ngeth --datadir=learn init genesis.json \nbootnode --genkey=boot.key \nbootnode --nodekey=boot.key\n```\n没有bootnode的原因：see  step1\n\n## step3: 连接到bootnode上\n\n开一个新终端：\n```sh\nssh root@101.102.103.104\ngeth --datadir=/root/ucsfnet/data --bootnodes=enode://148f3....@101.102.103.104:3031\n```\n将`148f3....`替换为 `step2` 生成的\n```\n$ bootnode --nodekey=boot.key\nINFO [03-14|16:30:33] UDP listener up                          self=enode://c591c837ff804c4bdb6a5a8d02e5343d5f96fbf6e198aaf05f91aeb0a9b781e3b6fb95124ac8e4ee1b99ca64df2c93052c54bc02ee1dada70d38bd4a956d4ac4@[::]:30301\n```\n\n## step4: 创建一个新账号并查询余额\n新开一个终端：\n```sh\ngeth attach /root/ucsfnet/data/geth.ipc \n```\n连接到网络中：\n查看有哪些账户,   创建一个新账号密码为：*mypassword* ,  查询用户余额\n```sh\n> eth.accounts\n[]\n\n> personal.newAccount(\"mypassword\")\n\"0x73c62b30d6dbe998313384f1c98528c1d372b075\"\n\n> web3.fromWei(eth.getBalance(eth.accounts\\[0\\]), \"ether\")\n0\n```\n那个`0x`打头的就是账户地址：*0x73c62b30d6dbe998313384f1c98528c1d372b075*\n\n## step5: 在私链上挖矿\n\n挖矿有2目的：\n> 1.  需要为矿工的算力，提供gas\n> 2. 采矿需要将你的交易写到区块链中\n\n```sh\ngeth --datadir=/root/ucsfnet/data --mine --minerthreads=1 --etherbase=0x...\n```\n*etherbase* 参数应该是`step4`中的钱包地址\n*开始挖矿后会有一段时间加载数据，耗CPU比较严重。*\n\n## step6: 开发一个简单的智能合约\n\n首先需要安装编译器：\n```sh\nsudo add-apt-repository ppa:ethereum/ethereum\nsudo apt-get update\nsudo apt-get install solc\n```\n\n其次，创建合约，并命名为 `greeter.sol`\n\n```solc\ncontract mortal {\n\n/* Define variable owner of the type address*/\n address owner;\n\n/* this function is executed at initialization and sets the owner of the contract */\n function mortal() { owner = msg.sender; }\n\n/* Function to recover the funds on the contract */\n function kill() { if (msg.sender == owner) selfdestruct(owner); }\n}\n\ncontract greeter is mortal {\n /* define variable greeting of the type string */\n string greeting;\n\n/* this runs when the contract is executed */\n function greeter(string _greeting) public {\n greeting = \"UCSFnet lives!\";\n }\n\n/* main function */\n function greet() constant returns (string) {\n return greeting;\n }\n}\n```\n\n编译合约：\n```sh\nsolc --bin --abi  -o /root/test /root/test/greeter.sol\n\n## 输出文件\n$ ls\ngreeter.abi  greeter.bin  greeter.sol  mortal.abi  mortal.bin\n```\n在编译命令行中， `--bin --abi` 是分别生成 EVM（Ethereum Virtual Machine：以太坊虚拟机）字节码 和 ABI（Application Binary Inferface：应用二进制接口）文件。 `-o` 指定生成后存放的路径\n\n**合约内容先不研究**\n\n\n## step7: 部署GREETER合约到私网\n\n```js\nvar _greeting = 'Jie lives!';\n\nvar browser_ballot_sol_greeterContract = web3.eth.contract([{\n    \"constant\": false,\n    \"inputs\": [],\n    \"name\": \"kill\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"type\": \"function\"\n}, {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"greet\",\n    \"outputs\": [{\"name\": \"\", \"type\": \"string\"}],\n    \"payable\": false,\n    \"type\": \"function\"\n}, {\"inputs\": [{\"name\": \"_greeting\", \"type\": \"string\"}], \"payable\": false, \"type\": \"constructor\"}]);\n\nvar browser_ballot_sol_greeter = browser_ballot_sol_greeterContract.new(\n    _greeting,\n\n    {\n\n        from: web3.eth.accounts[0],\n\n        data: '0x6060604052341561000f57600080fd5b6040516103dd3803806103dd833981016040528080518201919050505b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6040805190810160405280600d81526020017f48656c6c6f2c20576f726c642100000000000000000000000000000000000000815250600190805190602001906100b99291906100c1565b505b50610166565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010257805160ff1916838001178555610130565b82800160010185558215610130579182015b8281111561012f578251825591602001919060010190610114565b5b50905061013d9190610141565b5090565b61016391905b8082111561015f576000816000905550600101610147565b5090565b90565b610268806101756000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610049578063cfae32171461005e575b600080fd5b341561005457600080fd5b61005c6100ed565b005b341561006957600080fd5b61007161017f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b25780820151818401525b602081019050610096565b50505050905090810190601f1680156100df5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561017c576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b610187610228565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561021d5780601f106101f25761010080835404028352916020019161021d565b820191906000526020600020905b81548152906001019060200180831161020057829003601f168201915b505050505090505b90565b6020604051908101604052806000815250905600a165627a7a7230582069d50e4318daa30d3f74bb817c3b0cb732c4ec6a493eb108266c548906c8b6d70029',\n\n        gas: '1000000'\n\n    }, function (e, contract) {\n\n        console.log(e, contract);\n\n        if (typeof contract.address !== 'undefined') {\n\n            console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n\n        }\n\n    })\n```\n数据看着填吧，启动一个终端，连接到私链上\n```sh\nssh root@101.102.103.104 \ngeth attach /root/ucsfnet/data/geth.ipc \n> web3.fromWei(eth.getBalance(eth.accounts[0]), \"ether\")\n> personal.unlockAccount(eth.accounts[0], \"mypassword\")\n```\n\n部署合约需要account上有余额，且account处于unlock状态下。\n使用下面的命令载入合约：\n```js\nloadScript('myContract.js')\n```\n\n**注意：**需要有矿工挖矿保证交易被挖到\n将会得到如下内容：\n```text\nContract mined! address: 0xa76d017c3035dcf15e28b315477f3f19ae275433 transactionHash: 0x732e84efc03638767efc9a46738161c04d561a92cc2e631c63287e63ef38995b\n```\n这样合约就部署完成了\n\n## 与合同的交换\n\n```js\n> var abi = '[{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"greet\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_greeting\",\"type\":\"string\"}],\"payable\":false,\"type\":\"constructor\"}]'\n> var abi = JSON.parse(abi)\n> var contract = web3.eth.contract(abi)\n> var c = contract.at(\"0xa76d017c3035dcf15e28b315477f3f19ae275433\")\n> c.greet()\n```\n\n会有一个输出：\n```text\nUCSFnet lives! \n```\n\n 我这输出的是：\"Hello, World!\"  ....\n\n## 博客推荐\n\n[Nice low-level description of networking in Ethereum (uses the Python-based client):](https://ocalog.com/post/10/)\n\n\n[Setting up private network or local cluster](https://github.com/ethereum/go-ethereum/wiki/Setting-up-private-network-or-local-cluster)\n\n[Managing your accounts](https://github.com/ethereum/go-ethereum/wiki/Managing-your-accounts)\n\n[Connecting to the network](https://github.com/ethereum/go-ethereum/wiki/Connecting-to-the-network)\n\n[The Go Ethereum client](https://github.com/ethereum/go-ethereum)\n\n[Official Ethereum command line tool documentation](https://ethereum.org/cli)\n\n\n参考（算是翻译）：\n[How to create a private Ethereum network](https://omarmetwally.blog/2017/07/25/how-to-create-a-private-ethereum-network/)\n\n\n## 下一个目标\nhttps://omarmetwally.blog/2017/09/27/how-to-connect-3-ethereum-nodes-in-a-private-ethereum-network/","slug":"block_chain/搭建自己的私有网络","published":1,"updated":"2018-08-29T13:24:21.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgr600058seo8aerowrt","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ol>\n<li>创建私有的以太网</li>\n<li>在私有网部署一个简单的智能合约</li>\n<li>使用该公约发起交易</li>\n</ol>\n<p><strong>注意事项：</strong> 机子内存要2G及以上</p>\n<h2 id=\"setp1-安装环境\"><a href=\"#setp1-安装环境\" class=\"headerlink\" title=\"setp1:  安装环境\"></a>setp1:  安装环境</h2><p><strong>记录坑：</strong><br>通过 <code>apt-get install geth</code> 安装的环境只有 <code>geth</code> 命令，无 <code>bootnode</code>,  <code>evm</code>,  <code>disasm</code>,  <code>rlpdump</code>,  <code>ethtest</code>这些命令。</p>\n<p>Ubuntu安装方式：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install software-properties-common</span><br><span class=\"line\">sudo add-apt-repository -y ppa:ethereum/ethereum</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install ethereum</span><br></pre></td></tr></table></figure></p>\n<p>可以选择源码安装：(前提是需要 golang &gt; 1.7)<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ethereum/go-ethereum</span><br><span class=\"line\"><span class=\"built_in\">cd</span> go-ethereum</span><br><span class=\"line\">make geth</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"step2-创建创世块\"><a href=\"#step2-创建创世块\" class=\"headerlink\" title=\"step2: 创建创世块\"></a>step2: 创建创世块</h2><p>创世块是区块链的第一个块并且参数被指定在<em>genesis.json</em>文件中，内容如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">\"config\"</span>: &#123;</span><br><span class=\"line\"> <span class=\"attr\">\"chainId\"</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"homesteadBlock\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"eip155Block\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"eip158Block\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"attr\">\"alloc\"</span>  : &#123;</span><br><span class=\"line\"> <span class=\"attr\">\"0x0000000000000000000000000000000000000001\"</span>: &#123;<span class=\"attr\">\"balance\"</span>: <span class=\"string\">\"111111111\"</span>&#125;,</span><br><span class=\"line\"> <span class=\"attr\">\"0x0000000000000000000000000000000000000002\"</span>: &#123;<span class=\"attr\">\"balance\"</span>: <span class=\"string\">\"222222222\"</span>&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"attr\">\"coinbase\"</span>  : <span class=\"string\">\"0x0000000000000000000000000000000000000000\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"difficulty\"</span> : <span class=\"string\">\"0x00001\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"extraData\"</span>  : <span class=\"string\">\"\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"gasLimit\"</span>  : <span class=\"string\">\"0x2fefd8\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"nonce\"</span>  : <span class=\"string\">\"0x0000000000000107\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"mixhash\"</span>  : <span class=\"string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"parentHash\"</span> : <span class=\"string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"timestamp\"</span>  : <span class=\"string\">\"0x00\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong> <code>chainId=1</code> 指向的是以太坊的主链上。因此为您的网络创建唯一的<code>chainId</code>非常重要，这样您的客户端就不会混淆私有区块链和主网络.为了说明和测试，将采矿难度(<code>difficulty</code>)设置为较低值。还要确保你指定一个唯一的随机数来开始(<code>nonce</code>)。<code>alloc</code>字段允许您使用Ether预先填充帐户。<br>现在到您创建的<code>genesis.json</code>文件的目录并初始化<code>bootnode</code>节点，您的以太坊客户端可通过该节点加入您的专用网络并与连接到您的专用网络的其他节点进行交互。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /root/ucsfnet/data</span><br><span class=\"line\">geth --datadir=learn init genesis.json </span><br><span class=\"line\">bootnode --genkey=boot.key </span><br><span class=\"line\">bootnode --nodekey=boot.key</span><br></pre></td></tr></table></figure>\n<p>没有bootnode的原因：see  step1</p>\n<h2 id=\"step3-连接到bootnode上\"><a href=\"#step3-连接到bootnode上\" class=\"headerlink\" title=\"step3: 连接到bootnode上\"></a>step3: 连接到bootnode上</h2><p>开一个新终端：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@101.102.103.104</span><br><span class=\"line\">geth --datadir=/root/ucsfnet/data --bootnodes=enode://148f3....@101.102.103.104:3031</span><br></pre></td></tr></table></figure></p>\n<p>将<code>148f3....</code>替换为 <code>step2</code> 生成的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bootnode --nodekey=boot.key</span><br><span class=\"line\">INFO [03-14|16:30:33] UDP listener up                          self=enode://c591c837ff804c4bdb6a5a8d02e5343d5f96fbf6e198aaf05f91aeb0a9b781e3b6fb95124ac8e4ee1b99ca64df2c93052c54bc02ee1dada70d38bd4a956d4ac4@[::]:30301</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"step4-创建一个新账号并查询余额\"><a href=\"#step4-创建一个新账号并查询余额\" class=\"headerlink\" title=\"step4: 创建一个新账号并查询余额\"></a>step4: 创建一个新账号并查询余额</h2><p>新开一个终端：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geth attach /root/ucsfnet/data/geth.ipc</span><br></pre></td></tr></table></figure></p>\n<p>连接到网络中：<br>查看有哪些账户,   创建一个新账号密码为：<em>mypassword</em> ,  查询用户余额<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.accounts</span><br><span class=\"line\">[]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; personal.newAccount(<span class=\"string\">\"mypassword\"</span>)</span><br><span class=\"line\"><span class=\"string\">\"0x73c62b30d6dbe998313384f1c98528c1d372b075\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; web3.fromWei(eth.getBalance(eth.accounts\\[0\\]), <span class=\"string\">\"ether\"</span>)</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></p>\n<p>那个<code>0x</code>打头的就是账户地址：<em>0x73c62b30d6dbe998313384f1c98528c1d372b075</em></p>\n<h2 id=\"step5-在私链上挖矿\"><a href=\"#step5-在私链上挖矿\" class=\"headerlink\" title=\"step5: 在私链上挖矿\"></a>step5: 在私链上挖矿</h2><p>挖矿有2目的：</p>\n<blockquote>\n<ol>\n<li>需要为矿工的算力，提供gas</li>\n<li>采矿需要将你的交易写到区块链中</li>\n</ol>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geth --datadir=/root/ucsfnet/data --mine --minerthreads=1 --etherbase=0x...</span><br></pre></td></tr></table></figure>\n<p><em>etherbase</em> 参数应该是<code>step4</code>中的钱包地址<br><em>开始挖矿后会有一段时间加载数据，耗CPU比较严重。</em></p>\n<h2 id=\"step6-开发一个简单的智能合约\"><a href=\"#step6-开发一个简单的智能合约\" class=\"headerlink\" title=\"step6: 开发一个简单的智能合约\"></a>step6: 开发一个简单的智能合约</h2><p>首先需要安装编译器：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:ethereum/ethereum</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install solc</span><br></pre></td></tr></table></figure></p>\n<p>其次，创建合约，并命名为 <code>greeter.sol</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract mortal &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Define variable owner of the type address*/</span><br><span class=\"line\"> address owner;</span><br><span class=\"line\"></span><br><span class=\"line\">/* this function is executed at initialization and sets the owner of the contract */</span><br><span class=\"line\"> function mortal() &#123; owner = msg.sender; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Function to recover the funds on the contract */</span><br><span class=\"line\"> function kill() &#123; if (msg.sender == owner) selfdestruct(owner); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract greeter is mortal &#123;</span><br><span class=\"line\"> /* define variable greeting of the type string */</span><br><span class=\"line\"> string greeting;</span><br><span class=\"line\"></span><br><span class=\"line\">/* this runs when the contract is executed */</span><br><span class=\"line\"> function greeter(string _greeting) public &#123;</span><br><span class=\"line\"> greeting = &quot;UCSFnet lives!&quot;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* main function */</span><br><span class=\"line\"> function greet() constant returns (string) &#123;</span><br><span class=\"line\"> return greeting;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译合约：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">solc --bin --abi  -o /root/<span class=\"built_in\">test</span> /root/<span class=\"built_in\">test</span>/greeter.sol</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 输出文件</span></span><br><span class=\"line\">$ ls</span><br><span class=\"line\">greeter.abi  greeter.bin  greeter.sol  mortal.abi  mortal.bin</span><br></pre></td></tr></table></figure></p>\n<p>在编译命令行中， <code>--bin --abi</code> 是分别生成 EVM（Ethereum Virtual Machine：以太坊虚拟机）字节码 和 ABI（Application Binary Inferface：应用二进制接口）文件。 <code>-o</code> 指定生成后存放的路径</p>\n<p><strong>合约内容先不研究</strong></p>\n<h2 id=\"step7-部署GREETER合约到私网\"><a href=\"#step7-部署GREETER合约到私网\" class=\"headerlink\" title=\"step7: 部署GREETER合约到私网\"></a>step7: 部署GREETER合约到私网</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _greeting = <span class=\"string\">'Jie lives!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> browser_ballot_sol_greeterContract = web3.eth.contract([&#123;</span><br><span class=\"line\">    <span class=\"string\">\"constant\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"inputs\"</span>: [],</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"kill\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"outputs\"</span>: [],</span><br><span class=\"line\">    <span class=\"string\">\"payable\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"function\"</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"constant\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"inputs\"</span>: [],</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"greet\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"outputs\"</span>: [&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"string\"</span>&#125;],</span><br><span class=\"line\">    <span class=\"string\">\"payable\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"function\"</span></span><br><span class=\"line\">&#125;, &#123;<span class=\"string\">\"inputs\"</span>: [&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"_greeting\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"string\"</span>&#125;], <span class=\"string\">\"payable\"</span>: <span class=\"literal\">false</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"constructor\"</span>&#125;]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> browser_ballot_sol_greeter = browser_ballot_sol_greeterContract.new(</span><br><span class=\"line\">    _greeting,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">from</span>: web3.eth.accounts[<span class=\"number\">0</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">        data: <span class=\"string\">'0x6060604052341561000f57600080fd5b6040516103dd3803806103dd833981016040528080518201919050505b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6040805190810160405280600d81526020017f48656c6c6f2c20576f726c642100000000000000000000000000000000000000815250600190805190602001906100b99291906100c1565b505b50610166565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010257805160ff1916838001178555610130565b82800160010185558215610130579182015b8281111561012f578251825591602001919060010190610114565b5b50905061013d9190610141565b5090565b61016391905b8082111561015f576000816000905550600101610147565b5090565b90565b610268806101756000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610049578063cfae32171461005e575b600080fd5b341561005457600080fd5b61005c6100ed565b005b341561006957600080fd5b61007161017f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b25780820151818401525b602081019050610096565b50505050905090810190601f1680156100df5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561017c576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b610187610228565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561021d5780601f106101f25761010080835404028352916020019161021d565b820191906000526020600020905b81548152906001019060200180831161020057829003601f168201915b505050505090505b90565b6020604051908101604052806000815250905600a165627a7a7230582069d50e4318daa30d3f74bb817c3b0cb732c4ec6a493eb108266c548906c8b6d70029'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        gas: <span class=\"string\">'1000000'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e, contract</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e, contract);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> contract.address !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Contract mined! address: '</span> + contract.address + <span class=\"string\">' transactionHash: '</span> + contract.transactionHash);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>数据看着填吧，启动一个终端，连接到私链上<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@101.102.103.104 </span><br><span class=\"line\">geth attach /root/ucsfnet/data/geth.ipc </span><br><span class=\"line\">&gt; web3.fromWei(eth.getBalance(eth.accounts[0]), <span class=\"string\">\"ether\"</span>)</span><br><span class=\"line\">&gt; personal.unlockAccount(eth.accounts[0], <span class=\"string\">\"mypassword\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>部署合约需要account上有余额，且account处于unlock状态下。<br>使用下面的命令载入合约：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadScript(<span class=\"string\">'myContract.js'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong>需要有矿工挖矿保证交易被挖到<br>将会得到如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Contract mined! address: 0xa76d017c3035dcf15e28b315477f3f19ae275433 transactionHash: 0x732e84efc03638767efc9a46738161c04d561a92cc2e631c63287e63ef38995b</span><br></pre></td></tr></table></figure></p>\n<p>这样合约就部署完成了</p>\n<h2 id=\"与合同的交换\"><a href=\"#与合同的交换\" class=\"headerlink\" title=\"与合同的交换\"></a>与合同的交换</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">var</span> abi = <span class=\"string\">'[&#123;\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"&#125;,&#123;\"constant\":true,\"inputs\":[],\"name\":\"greet\",\"outputs\":[&#123;\"name\":\"\",\"type\":\"string\"&#125;],\"payable\":false,\"type\":\"function\"&#125;,&#123;\"inputs\":[&#123;\"name\":\"_greeting\",\"type\":\"string\"&#125;],\"payable\":false,\"type\":\"constructor\"&#125;]'</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> abi = <span class=\"built_in\">JSON</span>.parse(abi)</span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> contract = web3.eth.contract(abi)</span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> c = contract.at(<span class=\"string\">\"0xa76d017c3035dcf15e28b315477f3f19ae275433\"</span>)</span><br><span class=\"line\">&gt; c.greet()</span><br></pre></td></tr></table></figure>\n<p>会有一个输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UCSFnet lives!</span><br></pre></td></tr></table></figure></p>\n<p> 我这输出的是：”Hello, World!”  ….</p>\n<h2 id=\"博客推荐\"><a href=\"#博客推荐\" class=\"headerlink\" title=\"博客推荐\"></a>博客推荐</h2><p><a href=\"https://ocalog.com/post/10/\" target=\"_blank\" rel=\"noopener\">Nice low-level description of networking in Ethereum (uses the Python-based client):</a></p>\n<p><a href=\"https://github.com/ethereum/go-ethereum/wiki/Setting-up-private-network-or-local-cluster\" target=\"_blank\" rel=\"noopener\">Setting up private network or local cluster</a></p>\n<p><a href=\"https://github.com/ethereum/go-ethereum/wiki/Managing-your-accounts\" target=\"_blank\" rel=\"noopener\">Managing your accounts</a></p>\n<p><a href=\"https://github.com/ethereum/go-ethereum/wiki/Connecting-to-the-network\" target=\"_blank\" rel=\"noopener\">Connecting to the network</a></p>\n<p><a href=\"https://github.com/ethereum/go-ethereum\" target=\"_blank\" rel=\"noopener\">The Go Ethereum client</a></p>\n<p><a href=\"https://ethereum.org/cli\" target=\"_blank\" rel=\"noopener\">Official Ethereum command line tool documentation</a></p>\n<p>参考（算是翻译）：<br><a href=\"https://omarmetwally.blog/2017/07/25/how-to-create-a-private-ethereum-network/\" target=\"_blank\" rel=\"noopener\">How to create a private Ethereum network</a></p>\n<h2 id=\"下一个目标\"><a href=\"#下一个目标\" class=\"headerlink\" title=\"下一个目标\"></a>下一个目标</h2><p><a href=\"https://omarmetwally.blog/2017/09/27/how-to-connect-3-ethereum-nodes-in-a-private-ethereum-network/\" target=\"_blank\" rel=\"noopener\">https://omarmetwally.blog/2017/09/27/how-to-connect-3-ethereum-nodes-in-a-private-ethereum-network/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ol>\n<li>创建私有的以太网</li>\n<li>在私有网部署一个简单的智能合约</li>\n<li>使用该公约发起交易</li>\n</ol>\n<p><strong>注意事项：</strong> 机子内存要2G及以上</p>\n<h2 id=\"setp1-安装环境\"><a href=\"#setp1-安装环境\" class=\"headerlink\" title=\"setp1:  安装环境\"></a>setp1:  安装环境</h2><p><strong>记录坑：</strong><br>通过 <code>apt-get install geth</code> 安装的环境只有 <code>geth</code> 命令，无 <code>bootnode</code>,  <code>evm</code>,  <code>disasm</code>,  <code>rlpdump</code>,  <code>ethtest</code>这些命令。</p>\n<p>Ubuntu安装方式：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install software-properties-common</span><br><span class=\"line\">sudo add-apt-repository -y ppa:ethereum/ethereum</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install ethereum</span><br></pre></td></tr></table></figure></p>\n<p>可以选择源码安装：(前提是需要 golang &gt; 1.7)<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ethereum/go-ethereum</span><br><span class=\"line\"><span class=\"built_in\">cd</span> go-ethereum</span><br><span class=\"line\">make geth</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"step2-创建创世块\"><a href=\"#step2-创建创世块\" class=\"headerlink\" title=\"step2: 创建创世块\"></a>step2: 创建创世块</h2><p>创世块是区块链的第一个块并且参数被指定在<em>genesis.json</em>文件中，内容如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">\"config\"</span>: &#123;</span><br><span class=\"line\"> <span class=\"attr\">\"chainId\"</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"homesteadBlock\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"eip155Block\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"eip158Block\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"attr\">\"alloc\"</span>  : &#123;</span><br><span class=\"line\"> <span class=\"attr\">\"0x0000000000000000000000000000000000000001\"</span>: &#123;<span class=\"attr\">\"balance\"</span>: <span class=\"string\">\"111111111\"</span>&#125;,</span><br><span class=\"line\"> <span class=\"attr\">\"0x0000000000000000000000000000000000000002\"</span>: &#123;<span class=\"attr\">\"balance\"</span>: <span class=\"string\">\"222222222\"</span>&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"attr\">\"coinbase\"</span>  : <span class=\"string\">\"0x0000000000000000000000000000000000000000\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"difficulty\"</span> : <span class=\"string\">\"0x00001\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"extraData\"</span>  : <span class=\"string\">\"\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"gasLimit\"</span>  : <span class=\"string\">\"0x2fefd8\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"nonce\"</span>  : <span class=\"string\">\"0x0000000000000107\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"mixhash\"</span>  : <span class=\"string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"parentHash\"</span> : <span class=\"string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"timestamp\"</span>  : <span class=\"string\">\"0x00\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong> <code>chainId=1</code> 指向的是以太坊的主链上。因此为您的网络创建唯一的<code>chainId</code>非常重要，这样您的客户端就不会混淆私有区块链和主网络.为了说明和测试，将采矿难度(<code>difficulty</code>)设置为较低值。还要确保你指定一个唯一的随机数来开始(<code>nonce</code>)。<code>alloc</code>字段允许您使用Ether预先填充帐户。<br>现在到您创建的<code>genesis.json</code>文件的目录并初始化<code>bootnode</code>节点，您的以太坊客户端可通过该节点加入您的专用网络并与连接到您的专用网络的其他节点进行交互。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /root/ucsfnet/data</span><br><span class=\"line\">geth --datadir=learn init genesis.json </span><br><span class=\"line\">bootnode --genkey=boot.key </span><br><span class=\"line\">bootnode --nodekey=boot.key</span><br></pre></td></tr></table></figure>\n<p>没有bootnode的原因：see  step1</p>\n<h2 id=\"step3-连接到bootnode上\"><a href=\"#step3-连接到bootnode上\" class=\"headerlink\" title=\"step3: 连接到bootnode上\"></a>step3: 连接到bootnode上</h2><p>开一个新终端：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@101.102.103.104</span><br><span class=\"line\">geth --datadir=/root/ucsfnet/data --bootnodes=enode://148f3....@101.102.103.104:3031</span><br></pre></td></tr></table></figure></p>\n<p>将<code>148f3....</code>替换为 <code>step2</code> 生成的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bootnode --nodekey=boot.key</span><br><span class=\"line\">INFO [03-14|16:30:33] UDP listener up                          self=enode://c591c837ff804c4bdb6a5a8d02e5343d5f96fbf6e198aaf05f91aeb0a9b781e3b6fb95124ac8e4ee1b99ca64df2c93052c54bc02ee1dada70d38bd4a956d4ac4@[::]:30301</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"step4-创建一个新账号并查询余额\"><a href=\"#step4-创建一个新账号并查询余额\" class=\"headerlink\" title=\"step4: 创建一个新账号并查询余额\"></a>step4: 创建一个新账号并查询余额</h2><p>新开一个终端：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geth attach /root/ucsfnet/data/geth.ipc</span><br></pre></td></tr></table></figure></p>\n<p>连接到网络中：<br>查看有哪些账户,   创建一个新账号密码为：<em>mypassword</em> ,  查询用户余额<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.accounts</span><br><span class=\"line\">[]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; personal.newAccount(<span class=\"string\">\"mypassword\"</span>)</span><br><span class=\"line\"><span class=\"string\">\"0x73c62b30d6dbe998313384f1c98528c1d372b075\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; web3.fromWei(eth.getBalance(eth.accounts\\[0\\]), <span class=\"string\">\"ether\"</span>)</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></p>\n<p>那个<code>0x</code>打头的就是账户地址：<em>0x73c62b30d6dbe998313384f1c98528c1d372b075</em></p>\n<h2 id=\"step5-在私链上挖矿\"><a href=\"#step5-在私链上挖矿\" class=\"headerlink\" title=\"step5: 在私链上挖矿\"></a>step5: 在私链上挖矿</h2><p>挖矿有2目的：</p>\n<blockquote>\n<ol>\n<li>需要为矿工的算力，提供gas</li>\n<li>采矿需要将你的交易写到区块链中</li>\n</ol>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geth --datadir=/root/ucsfnet/data --mine --minerthreads=1 --etherbase=0x...</span><br></pre></td></tr></table></figure>\n<p><em>etherbase</em> 参数应该是<code>step4</code>中的钱包地址<br><em>开始挖矿后会有一段时间加载数据，耗CPU比较严重。</em></p>\n<h2 id=\"step6-开发一个简单的智能合约\"><a href=\"#step6-开发一个简单的智能合约\" class=\"headerlink\" title=\"step6: 开发一个简单的智能合约\"></a>step6: 开发一个简单的智能合约</h2><p>首先需要安装编译器：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:ethereum/ethereum</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install solc</span><br></pre></td></tr></table></figure></p>\n<p>其次，创建合约，并命名为 <code>greeter.sol</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract mortal &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Define variable owner of the type address*/</span><br><span class=\"line\"> address owner;</span><br><span class=\"line\"></span><br><span class=\"line\">/* this function is executed at initialization and sets the owner of the contract */</span><br><span class=\"line\"> function mortal() &#123; owner = msg.sender; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Function to recover the funds on the contract */</span><br><span class=\"line\"> function kill() &#123; if (msg.sender == owner) selfdestruct(owner); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract greeter is mortal &#123;</span><br><span class=\"line\"> /* define variable greeting of the type string */</span><br><span class=\"line\"> string greeting;</span><br><span class=\"line\"></span><br><span class=\"line\">/* this runs when the contract is executed */</span><br><span class=\"line\"> function greeter(string _greeting) public &#123;</span><br><span class=\"line\"> greeting = &quot;UCSFnet lives!&quot;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* main function */</span><br><span class=\"line\"> function greet() constant returns (string) &#123;</span><br><span class=\"line\"> return greeting;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译合约：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">solc --bin --abi  -o /root/<span class=\"built_in\">test</span> /root/<span class=\"built_in\">test</span>/greeter.sol</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 输出文件</span></span><br><span class=\"line\">$ ls</span><br><span class=\"line\">greeter.abi  greeter.bin  greeter.sol  mortal.abi  mortal.bin</span><br></pre></td></tr></table></figure></p>\n<p>在编译命令行中， <code>--bin --abi</code> 是分别生成 EVM（Ethereum Virtual Machine：以太坊虚拟机）字节码 和 ABI（Application Binary Inferface：应用二进制接口）文件。 <code>-o</code> 指定生成后存放的路径</p>\n<p><strong>合约内容先不研究</strong></p>\n<h2 id=\"step7-部署GREETER合约到私网\"><a href=\"#step7-部署GREETER合约到私网\" class=\"headerlink\" title=\"step7: 部署GREETER合约到私网\"></a>step7: 部署GREETER合约到私网</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _greeting = <span class=\"string\">'Jie lives!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> browser_ballot_sol_greeterContract = web3.eth.contract([&#123;</span><br><span class=\"line\">    <span class=\"string\">\"constant\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"inputs\"</span>: [],</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"kill\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"outputs\"</span>: [],</span><br><span class=\"line\">    <span class=\"string\">\"payable\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"function\"</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"constant\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"inputs\"</span>: [],</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"greet\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"outputs\"</span>: [&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"string\"</span>&#125;],</span><br><span class=\"line\">    <span class=\"string\">\"payable\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"function\"</span></span><br><span class=\"line\">&#125;, &#123;<span class=\"string\">\"inputs\"</span>: [&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"_greeting\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"string\"</span>&#125;], <span class=\"string\">\"payable\"</span>: <span class=\"literal\">false</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"constructor\"</span>&#125;]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> browser_ballot_sol_greeter = browser_ballot_sol_greeterContract.new(</span><br><span class=\"line\">    _greeting,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">from</span>: web3.eth.accounts[<span class=\"number\">0</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">        data: <span class=\"string\">'0x6060604052341561000f57600080fd5b6040516103dd3803806103dd833981016040528080518201919050505b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6040805190810160405280600d81526020017f48656c6c6f2c20576f726c642100000000000000000000000000000000000000815250600190805190602001906100b99291906100c1565b505b50610166565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010257805160ff1916838001178555610130565b82800160010185558215610130579182015b8281111561012f578251825591602001919060010190610114565b5b50905061013d9190610141565b5090565b61016391905b8082111561015f576000816000905550600101610147565b5090565b90565b610268806101756000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610049578063cfae32171461005e575b600080fd5b341561005457600080fd5b61005c6100ed565b005b341561006957600080fd5b61007161017f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b25780820151818401525b602081019050610096565b50505050905090810190601f1680156100df5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561017c576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b610187610228565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561021d5780601f106101f25761010080835404028352916020019161021d565b820191906000526020600020905b81548152906001019060200180831161020057829003601f168201915b505050505090505b90565b6020604051908101604052806000815250905600a165627a7a7230582069d50e4318daa30d3f74bb817c3b0cb732c4ec6a493eb108266c548906c8b6d70029'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        gas: <span class=\"string\">'1000000'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e, contract</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e, contract);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> contract.address !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Contract mined! address: '</span> + contract.address + <span class=\"string\">' transactionHash: '</span> + contract.transactionHash);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>数据看着填吧，启动一个终端，连接到私链上<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@101.102.103.104 </span><br><span class=\"line\">geth attach /root/ucsfnet/data/geth.ipc </span><br><span class=\"line\">&gt; web3.fromWei(eth.getBalance(eth.accounts[0]), <span class=\"string\">\"ether\"</span>)</span><br><span class=\"line\">&gt; personal.unlockAccount(eth.accounts[0], <span class=\"string\">\"mypassword\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>部署合约需要account上有余额，且account处于unlock状态下。<br>使用下面的命令载入合约：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadScript(<span class=\"string\">'myContract.js'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong>需要有矿工挖矿保证交易被挖到<br>将会得到如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Contract mined! address: 0xa76d017c3035dcf15e28b315477f3f19ae275433 transactionHash: 0x732e84efc03638767efc9a46738161c04d561a92cc2e631c63287e63ef38995b</span><br></pre></td></tr></table></figure></p>\n<p>这样合约就部署完成了</p>\n<h2 id=\"与合同的交换\"><a href=\"#与合同的交换\" class=\"headerlink\" title=\"与合同的交换\"></a>与合同的交换</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">var</span> abi = <span class=\"string\">'[&#123;\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"&#125;,&#123;\"constant\":true,\"inputs\":[],\"name\":\"greet\",\"outputs\":[&#123;\"name\":\"\",\"type\":\"string\"&#125;],\"payable\":false,\"type\":\"function\"&#125;,&#123;\"inputs\":[&#123;\"name\":\"_greeting\",\"type\":\"string\"&#125;],\"payable\":false,\"type\":\"constructor\"&#125;]'</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> abi = <span class=\"built_in\">JSON</span>.parse(abi)</span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> contract = web3.eth.contract(abi)</span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> c = contract.at(<span class=\"string\">\"0xa76d017c3035dcf15e28b315477f3f19ae275433\"</span>)</span><br><span class=\"line\">&gt; c.greet()</span><br></pre></td></tr></table></figure>\n<p>会有一个输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UCSFnet lives!</span><br></pre></td></tr></table></figure></p>\n<p> 我这输出的是：”Hello, World!”  ….</p>\n<h2 id=\"博客推荐\"><a href=\"#博客推荐\" class=\"headerlink\" title=\"博客推荐\"></a>博客推荐</h2><p><a href=\"https://ocalog.com/post/10/\" target=\"_blank\" rel=\"noopener\">Nice low-level description of networking in Ethereum (uses the Python-based client):</a></p>\n<p><a href=\"https://github.com/ethereum/go-ethereum/wiki/Setting-up-private-network-or-local-cluster\" target=\"_blank\" rel=\"noopener\">Setting up private network or local cluster</a></p>\n<p><a href=\"https://github.com/ethereum/go-ethereum/wiki/Managing-your-accounts\" target=\"_blank\" rel=\"noopener\">Managing your accounts</a></p>\n<p><a href=\"https://github.com/ethereum/go-ethereum/wiki/Connecting-to-the-network\" target=\"_blank\" rel=\"noopener\">Connecting to the network</a></p>\n<p><a href=\"https://github.com/ethereum/go-ethereum\" target=\"_blank\" rel=\"noopener\">The Go Ethereum client</a></p>\n<p><a href=\"https://ethereum.org/cli\" target=\"_blank\" rel=\"noopener\">Official Ethereum command line tool documentation</a></p>\n<p>参考（算是翻译）：<br><a href=\"https://omarmetwally.blog/2017/07/25/how-to-create-a-private-ethereum-network/\" target=\"_blank\" rel=\"noopener\">How to create a private Ethereum network</a></p>\n<h2 id=\"下一个目标\"><a href=\"#下一个目标\" class=\"headerlink\" title=\"下一个目标\"></a>下一个目标</h2><p><a href=\"https://omarmetwally.blog/2017/09/27/how-to-connect-3-ethereum-nodes-in-a-private-ethereum-network/\" target=\"_blank\" rel=\"noopener\">https://omarmetwally.blog/2017/09/27/how-to-connect-3-ethereum-nodes-in-a-private-ethereum-network/</a></p>\n"},{"title":"Mac 上防火墙的倒腾","date":"2018-11-30T07:03:26.000Z","_content":"\n\n\n### 80端口转8080端口\n\n```txt\n首先在 /etc/pf.anchors/ 新建一个 http 文件内容如下:\nrdr pass on lo0 inet proto tcp from any to any port 80 -> 127.0.0.1 port 8080\n\n然后使用 pfctl 命令检测配置文件\nsudo pfctl -vnf /etc/pf.anchors/http\n如果没有报错(正确的打印了配置信息, 没有明显的出错信息), 即修改pf的主配置文件/etc/pf.conf, 来引入这个转发规则:\n\n在\nrdr-anchor \"com.apple/*\"\n下, 添加如下 anchor 声明:\nrdr-anchor \"http-forwarding\"\n\npf.conf对指令的顺序有严格要求, 否则会报出 Rules must be in order: options, normalization, queueing, translation, filtering 的错误, 所以相同的指令需要放在一起.\n\n再在\nload anchor \"com.apple\" from \"/etc/pf.anchors/com.apple\"\n下, 添加 anchor 引入:\nload anchor \"http-forwarding\" from \"/etc/pf.anchors/http\"\n\n最后, 导入并允许运行 pf\n\nsudo pfctl -ef /etc/pf.conf\n\n如果需要开机启动, 则需要为 /System/Library/LaunchDaemons/com.apple.pfctl.plist 针对 pfctl 的启动项, 新增一个 -e (允许) 参数, 这样, pf 规则开机机器可以生效了.\n```\n\n\n\n### pf 的一些用法\n\n在网上发现的一些例子:\n\n```sh\nvi /etc/pf.conf\n#对外的网络卡\next_if = \"sis0\"\n#对内的网络卡\nint_if = \"rl0\"\n\n#频宽控管\n#定义 std_out 总频宽 512Kb\n#altq on $ext_if cbq bandwidth 512Kb queue { std_out }\n#定义 std_out 队列频宽 256Kb，使用预设队列\n#queue std_out bandwith 256Kb cbq (default)\n#定义 std_in 总频宽 2Mb\n#altq on $int_if cbq bandwidth 2Mb queue { std_in }\n#假设频宽足够的话，可以从父队列借用额外的频宽\n#queue std_in bandwidth 768Kb cbq (brrrow)\n\n#对外开放的服务 \nopen_services = \"{80, 443}\"\n#内部私有的 IP\npriv_nets = \"{ 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 }\"\n\n# options\n#设定拒绝联机封包的处理 方式\nset block-policy return\n#\nset optimization aggressive\n\n#纪录 $ext_if\nset loginterface $ext_if\n\n# scrub\n#整理封包\nscrub in all\n\n#nat\n#NAT 地址转译处理\nnat on $ext_if from $int_if:network to any -> $ext_if\n\n#ftp-proxy\n#ftp-proxy 重新 导向\nrdr on $int_if proto tcp from any to any port 21 -> 127.0.0.1 port 8021\n#rdr on $ext_if proto tcp from any to 140.111.152.13 port 21 -> 192.168.13.253 port 21\n#Transparent Proxy Server\nrdr on rl0 proto tcp from 192.168.13.0/24 to any 80 -> 127.0.0.1 port 3128\n\n#阻挡可疑封包在 $ext_if 网卡进出\nantispoof log quick for $ext_if\n\n#阻挡所有进出的封包\nblock all\n\n#开放 loopback\npass quick on lo0 all\n\n#拒绝内部私有 IP 对 $ext_if 网络卡联机\nblock drop in quick on $ext_if from $priv_nets to any\nblock drop out quick on $ext_if from any to $priv_nets\n\n#开放对外的 80, 443 埠\npass in on $ext_if inet proto tcp from any to $ext_if port $open_services flags S/SA keep state\n#只容许 140.111.152.0/24 网段对本机做 22 埠联机\npass in on $ext_if inet proto tcp from 140.111.152.0/24 to $ext_if port 22 flags S/SA keep state\n\n#开放内部网络对外联机\n#pass in on $inf_if proto rcp from any to any queue std_in\npass in on $int_if from $int_if:network to any keep state\npass out on $int_if from any to $int_if:network keep state\n\n#开放对外网络的联机\n#pass out $ext_if proto tcp from any to any queue std_out\npass out on $ext_if proto tcp all modulate state flags S/SA\npass out on $ext_if proto { udp, icmp } all keep state\n\n启动 PF，并读取 pf 规则\npfctl -e;pfctl -f /etc/pf.conf\n```\n\n\n\n\n\n参考:\n\nhttp://www.voidcn.com/article/p-bioqbvvf-cx.html\n\nhttps://my.oschina.net/china008/blog/343049\n\nPF 防火墙详解: http://blog.chinaunix.net/uid-20674714-id-90862.html\n\n","source":"_posts/mac/防火墙问题.md","raw":"---\ntitle: Mac 上防火墙的倒腾\ndate: 2018-11-30 15:03:26\ncategories:\n- Mac\ntags:\n- Mac\n- 日常杂记\n---\n\n\n\n### 80端口转8080端口\n\n```txt\n首先在 /etc/pf.anchors/ 新建一个 http 文件内容如下:\nrdr pass on lo0 inet proto tcp from any to any port 80 -> 127.0.0.1 port 8080\n\n然后使用 pfctl 命令检测配置文件\nsudo pfctl -vnf /etc/pf.anchors/http\n如果没有报错(正确的打印了配置信息, 没有明显的出错信息), 即修改pf的主配置文件/etc/pf.conf, 来引入这个转发规则:\n\n在\nrdr-anchor \"com.apple/*\"\n下, 添加如下 anchor 声明:\nrdr-anchor \"http-forwarding\"\n\npf.conf对指令的顺序有严格要求, 否则会报出 Rules must be in order: options, normalization, queueing, translation, filtering 的错误, 所以相同的指令需要放在一起.\n\n再在\nload anchor \"com.apple\" from \"/etc/pf.anchors/com.apple\"\n下, 添加 anchor 引入:\nload anchor \"http-forwarding\" from \"/etc/pf.anchors/http\"\n\n最后, 导入并允许运行 pf\n\nsudo pfctl -ef /etc/pf.conf\n\n如果需要开机启动, 则需要为 /System/Library/LaunchDaemons/com.apple.pfctl.plist 针对 pfctl 的启动项, 新增一个 -e (允许) 参数, 这样, pf 规则开机机器可以生效了.\n```\n\n\n\n### pf 的一些用法\n\n在网上发现的一些例子:\n\n```sh\nvi /etc/pf.conf\n#对外的网络卡\next_if = \"sis0\"\n#对内的网络卡\nint_if = \"rl0\"\n\n#频宽控管\n#定义 std_out 总频宽 512Kb\n#altq on $ext_if cbq bandwidth 512Kb queue { std_out }\n#定义 std_out 队列频宽 256Kb，使用预设队列\n#queue std_out bandwith 256Kb cbq (default)\n#定义 std_in 总频宽 2Mb\n#altq on $int_if cbq bandwidth 2Mb queue { std_in }\n#假设频宽足够的话，可以从父队列借用额外的频宽\n#queue std_in bandwidth 768Kb cbq (brrrow)\n\n#对外开放的服务 \nopen_services = \"{80, 443}\"\n#内部私有的 IP\npriv_nets = \"{ 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 }\"\n\n# options\n#设定拒绝联机封包的处理 方式\nset block-policy return\n#\nset optimization aggressive\n\n#纪录 $ext_if\nset loginterface $ext_if\n\n# scrub\n#整理封包\nscrub in all\n\n#nat\n#NAT 地址转译处理\nnat on $ext_if from $int_if:network to any -> $ext_if\n\n#ftp-proxy\n#ftp-proxy 重新 导向\nrdr on $int_if proto tcp from any to any port 21 -> 127.0.0.1 port 8021\n#rdr on $ext_if proto tcp from any to 140.111.152.13 port 21 -> 192.168.13.253 port 21\n#Transparent Proxy Server\nrdr on rl0 proto tcp from 192.168.13.0/24 to any 80 -> 127.0.0.1 port 3128\n\n#阻挡可疑封包在 $ext_if 网卡进出\nantispoof log quick for $ext_if\n\n#阻挡所有进出的封包\nblock all\n\n#开放 loopback\npass quick on lo0 all\n\n#拒绝内部私有 IP 对 $ext_if 网络卡联机\nblock drop in quick on $ext_if from $priv_nets to any\nblock drop out quick on $ext_if from any to $priv_nets\n\n#开放对外的 80, 443 埠\npass in on $ext_if inet proto tcp from any to $ext_if port $open_services flags S/SA keep state\n#只容许 140.111.152.0/24 网段对本机做 22 埠联机\npass in on $ext_if inet proto tcp from 140.111.152.0/24 to $ext_if port 22 flags S/SA keep state\n\n#开放内部网络对外联机\n#pass in on $inf_if proto rcp from any to any queue std_in\npass in on $int_if from $int_if:network to any keep state\npass out on $int_if from any to $int_if:network keep state\n\n#开放对外网络的联机\n#pass out $ext_if proto tcp from any to any queue std_out\npass out on $ext_if proto tcp all modulate state flags S/SA\npass out on $ext_if proto { udp, icmp } all keep state\n\n启动 PF，并读取 pf 规则\npfctl -e;pfctl -f /etc/pf.conf\n```\n\n\n\n\n\n参考:\n\nhttp://www.voidcn.com/article/p-bioqbvvf-cx.html\n\nhttps://my.oschina.net/china008/blog/343049\n\nPF 防火墙详解: http://blog.chinaunix.net/uid-20674714-id-90862.html\n\n","slug":"mac/防火墙问题","published":1,"updated":"2018-11-30T08:08:31.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgre00088seoxytuopk1","content":"<h3 id=\"80端口转8080端口\"><a href=\"#80端口转8080端口\" class=\"headerlink\" title=\"80端口转8080端口\"></a>80端口转8080端口</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先在 /etc/pf.anchors/ 新建一个 http 文件内容如下:</span><br><span class=\"line\">rdr pass on lo0 inet proto tcp from any to any port 80 -&gt; 127.0.0.1 port 8080</span><br><span class=\"line\"></span><br><span class=\"line\">然后使用 pfctl 命令检测配置文件</span><br><span class=\"line\">sudo pfctl -vnf /etc/pf.anchors/http</span><br><span class=\"line\">如果没有报错(正确的打印了配置信息, 没有明显的出错信息), 即修改pf的主配置文件/etc/pf.conf, 来引入这个转发规则:</span><br><span class=\"line\"></span><br><span class=\"line\">在</span><br><span class=\"line\">rdr-anchor &quot;com.apple/*&quot;</span><br><span class=\"line\">下, 添加如下 anchor 声明:</span><br><span class=\"line\">rdr-anchor &quot;http-forwarding&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">pf.conf对指令的顺序有严格要求, 否则会报出 Rules must be in order: options, normalization, queueing, translation, filtering 的错误, 所以相同的指令需要放在一起.</span><br><span class=\"line\"></span><br><span class=\"line\">再在</span><br><span class=\"line\">load anchor &quot;com.apple&quot; from &quot;/etc/pf.anchors/com.apple&quot;</span><br><span class=\"line\">下, 添加 anchor 引入:</span><br><span class=\"line\">load anchor &quot;http-forwarding&quot; from &quot;/etc/pf.anchors/http&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">最后, 导入并允许运行 pf</span><br><span class=\"line\"></span><br><span class=\"line\">sudo pfctl -ef /etc/pf.conf</span><br><span class=\"line\"></span><br><span class=\"line\">如果需要开机启动, 则需要为 /System/Library/LaunchDaemons/com.apple.pfctl.plist 针对 pfctl 的启动项, 新增一个 -e (允许) 参数, 这样, pf 规则开机机器可以生效了.</span><br></pre></td></tr></table></figure>\n<h3 id=\"pf-的一些用法\"><a href=\"#pf-的一些用法\" class=\"headerlink\" title=\"pf 的一些用法\"></a>pf 的一些用法</h3><p>在网上发现的一些例子:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/pf.conf</span><br><span class=\"line\"><span class=\"comment\">#对外的网络卡</span></span><br><span class=\"line\">ext_if = <span class=\"string\">\"sis0\"</span></span><br><span class=\"line\"><span class=\"comment\">#对内的网络卡</span></span><br><span class=\"line\">int_if = <span class=\"string\">\"rl0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#频宽控管</span></span><br><span class=\"line\"><span class=\"comment\">#定义 std_out 总频宽 512Kb</span></span><br><span class=\"line\"><span class=\"comment\">#altq on $ext_if cbq bandwidth 512Kb queue &#123; std_out &#125;</span></span><br><span class=\"line\"><span class=\"comment\">#定义 std_out 队列频宽 256Kb，使用预设队列</span></span><br><span class=\"line\"><span class=\"comment\">#queue std_out bandwith 256Kb cbq (default)</span></span><br><span class=\"line\"><span class=\"comment\">#定义 std_in 总频宽 2Mb</span></span><br><span class=\"line\"><span class=\"comment\">#altq on $int_if cbq bandwidth 2Mb queue &#123; std_in &#125;</span></span><br><span class=\"line\"><span class=\"comment\">#假设频宽足够的话，可以从父队列借用额外的频宽</span></span><br><span class=\"line\"><span class=\"comment\">#queue std_in bandwidth 768Kb cbq (brrrow)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#对外开放的服务 </span></span><br><span class=\"line\">open_services = <span class=\"string\">\"&#123;80, 443&#125;\"</span></span><br><span class=\"line\"><span class=\"comment\">#内部私有的 IP</span></span><br><span class=\"line\">priv_nets = <span class=\"string\">\"&#123; 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 &#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># options</span></span><br><span class=\"line\"><span class=\"comment\">#设定拒绝联机封包的处理 方式</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> block-policy <span class=\"built_in\">return</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> optimization aggressive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#纪录 $ext_if</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> loginterface <span class=\"variable\">$ext_if</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># scrub</span></span><br><span class=\"line\"><span class=\"comment\">#整理封包</span></span><br><span class=\"line\">scrub <span class=\"keyword\">in</span> all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#nat</span></span><br><span class=\"line\"><span class=\"comment\">#NAT 地址转译处理</span></span><br><span class=\"line\">nat on <span class=\"variable\">$ext_if</span> from <span class=\"variable\">$int_if</span>:network to any -&gt; <span class=\"variable\">$ext_if</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ftp-proxy</span></span><br><span class=\"line\"><span class=\"comment\">#ftp-proxy 重新 导向</span></span><br><span class=\"line\">rdr on <span class=\"variable\">$int_if</span> proto tcp from any to any port 21 -&gt; 127.0.0.1 port 8021</span><br><span class=\"line\"><span class=\"comment\">#rdr on $ext_if proto tcp from any to 140.111.152.13 port 21 -&gt; 192.168.13.253 port 21</span></span><br><span class=\"line\"><span class=\"comment\">#Transparent Proxy Server</span></span><br><span class=\"line\">rdr on rl0 proto tcp from 192.168.13.0/24 to any 80 -&gt; 127.0.0.1 port 3128</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#阻挡可疑封包在 $ext_if 网卡进出</span></span><br><span class=\"line\">antispoof <span class=\"built_in\">log</span> quick <span class=\"keyword\">for</span> <span class=\"variable\">$ext_if</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#阻挡所有进出的封包</span></span><br><span class=\"line\">block all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开放 loopback</span></span><br><span class=\"line\">pass quick on lo0 all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#拒绝内部私有 IP 对 $ext_if 网络卡联机</span></span><br><span class=\"line\">block drop <span class=\"keyword\">in</span> quick on <span class=\"variable\">$ext_if</span> from <span class=\"variable\">$priv_nets</span> to any</span><br><span class=\"line\">block drop out quick on <span class=\"variable\">$ext_if</span> from any to <span class=\"variable\">$priv_nets</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开放对外的 80, 443 埠</span></span><br><span class=\"line\">pass <span class=\"keyword\">in</span> on <span class=\"variable\">$ext_if</span> inet proto tcp from any to <span class=\"variable\">$ext_if</span> port <span class=\"variable\">$open_services</span> flags S/SA keep state</span><br><span class=\"line\"><span class=\"comment\">#只容许 140.111.152.0/24 网段对本机做 22 埠联机</span></span><br><span class=\"line\">pass <span class=\"keyword\">in</span> on <span class=\"variable\">$ext_if</span> inet proto tcp from 140.111.152.0/24 to <span class=\"variable\">$ext_if</span> port 22 flags S/SA keep state</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开放内部网络对外联机</span></span><br><span class=\"line\"><span class=\"comment\">#pass in on $inf_if proto rcp from any to any queue std_in</span></span><br><span class=\"line\">pass <span class=\"keyword\">in</span> on <span class=\"variable\">$int_if</span> from <span class=\"variable\">$int_if</span>:network to any keep state</span><br><span class=\"line\">pass out on <span class=\"variable\">$int_if</span> from any to <span class=\"variable\">$int_if</span>:network keep state</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开放对外网络的联机</span></span><br><span class=\"line\"><span class=\"comment\">#pass out $ext_if proto tcp from any to any queue std_out</span></span><br><span class=\"line\">pass out on <span class=\"variable\">$ext_if</span> proto tcp all modulate state flags S/SA</span><br><span class=\"line\">pass out on <span class=\"variable\">$ext_if</span> proto &#123; udp, icmp &#125; all keep state</span><br><span class=\"line\"></span><br><span class=\"line\">启动 PF，并读取 pf 规则</span><br><span class=\"line\">pfctl -e;pfctl -f /etc/pf.conf</span><br></pre></td></tr></table></figure>\n<p>参考:</p>\n<p><a href=\"http://www.voidcn.com/article/p-bioqbvvf-cx.html\" target=\"_blank\" rel=\"noopener\">http://www.voidcn.com/article/p-bioqbvvf-cx.html</a></p>\n<p><a href=\"https://my.oschina.net/china008/blog/343049\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/china008/blog/343049</a></p>\n<p>PF 防火墙详解: <a href=\"http://blog.chinaunix.net/uid-20674714-id-90862.html\" target=\"_blank\" rel=\"noopener\">http://blog.chinaunix.net/uid-20674714-id-90862.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"80端口转8080端口\"><a href=\"#80端口转8080端口\" class=\"headerlink\" title=\"80端口转8080端口\"></a>80端口转8080端口</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先在 /etc/pf.anchors/ 新建一个 http 文件内容如下:</span><br><span class=\"line\">rdr pass on lo0 inet proto tcp from any to any port 80 -&gt; 127.0.0.1 port 8080</span><br><span class=\"line\"></span><br><span class=\"line\">然后使用 pfctl 命令检测配置文件</span><br><span class=\"line\">sudo pfctl -vnf /etc/pf.anchors/http</span><br><span class=\"line\">如果没有报错(正确的打印了配置信息, 没有明显的出错信息), 即修改pf的主配置文件/etc/pf.conf, 来引入这个转发规则:</span><br><span class=\"line\"></span><br><span class=\"line\">在</span><br><span class=\"line\">rdr-anchor &quot;com.apple/*&quot;</span><br><span class=\"line\">下, 添加如下 anchor 声明:</span><br><span class=\"line\">rdr-anchor &quot;http-forwarding&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">pf.conf对指令的顺序有严格要求, 否则会报出 Rules must be in order: options, normalization, queueing, translation, filtering 的错误, 所以相同的指令需要放在一起.</span><br><span class=\"line\"></span><br><span class=\"line\">再在</span><br><span class=\"line\">load anchor &quot;com.apple&quot; from &quot;/etc/pf.anchors/com.apple&quot;</span><br><span class=\"line\">下, 添加 anchor 引入:</span><br><span class=\"line\">load anchor &quot;http-forwarding&quot; from &quot;/etc/pf.anchors/http&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">最后, 导入并允许运行 pf</span><br><span class=\"line\"></span><br><span class=\"line\">sudo pfctl -ef /etc/pf.conf</span><br><span class=\"line\"></span><br><span class=\"line\">如果需要开机启动, 则需要为 /System/Library/LaunchDaemons/com.apple.pfctl.plist 针对 pfctl 的启动项, 新增一个 -e (允许) 参数, 这样, pf 规则开机机器可以生效了.</span><br></pre></td></tr></table></figure>\n<h3 id=\"pf-的一些用法\"><a href=\"#pf-的一些用法\" class=\"headerlink\" title=\"pf 的一些用法\"></a>pf 的一些用法</h3><p>在网上发现的一些例子:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/pf.conf</span><br><span class=\"line\"><span class=\"comment\">#对外的网络卡</span></span><br><span class=\"line\">ext_if = <span class=\"string\">\"sis0\"</span></span><br><span class=\"line\"><span class=\"comment\">#对内的网络卡</span></span><br><span class=\"line\">int_if = <span class=\"string\">\"rl0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#频宽控管</span></span><br><span class=\"line\"><span class=\"comment\">#定义 std_out 总频宽 512Kb</span></span><br><span class=\"line\"><span class=\"comment\">#altq on $ext_if cbq bandwidth 512Kb queue &#123; std_out &#125;</span></span><br><span class=\"line\"><span class=\"comment\">#定义 std_out 队列频宽 256Kb，使用预设队列</span></span><br><span class=\"line\"><span class=\"comment\">#queue std_out bandwith 256Kb cbq (default)</span></span><br><span class=\"line\"><span class=\"comment\">#定义 std_in 总频宽 2Mb</span></span><br><span class=\"line\"><span class=\"comment\">#altq on $int_if cbq bandwidth 2Mb queue &#123; std_in &#125;</span></span><br><span class=\"line\"><span class=\"comment\">#假设频宽足够的话，可以从父队列借用额外的频宽</span></span><br><span class=\"line\"><span class=\"comment\">#queue std_in bandwidth 768Kb cbq (brrrow)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#对外开放的服务 </span></span><br><span class=\"line\">open_services = <span class=\"string\">\"&#123;80, 443&#125;\"</span></span><br><span class=\"line\"><span class=\"comment\">#内部私有的 IP</span></span><br><span class=\"line\">priv_nets = <span class=\"string\">\"&#123; 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 &#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># options</span></span><br><span class=\"line\"><span class=\"comment\">#设定拒绝联机封包的处理 方式</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> block-policy <span class=\"built_in\">return</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> optimization aggressive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#纪录 $ext_if</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> loginterface <span class=\"variable\">$ext_if</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># scrub</span></span><br><span class=\"line\"><span class=\"comment\">#整理封包</span></span><br><span class=\"line\">scrub <span class=\"keyword\">in</span> all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#nat</span></span><br><span class=\"line\"><span class=\"comment\">#NAT 地址转译处理</span></span><br><span class=\"line\">nat on <span class=\"variable\">$ext_if</span> from <span class=\"variable\">$int_if</span>:network to any -&gt; <span class=\"variable\">$ext_if</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ftp-proxy</span></span><br><span class=\"line\"><span class=\"comment\">#ftp-proxy 重新 导向</span></span><br><span class=\"line\">rdr on <span class=\"variable\">$int_if</span> proto tcp from any to any port 21 -&gt; 127.0.0.1 port 8021</span><br><span class=\"line\"><span class=\"comment\">#rdr on $ext_if proto tcp from any to 140.111.152.13 port 21 -&gt; 192.168.13.253 port 21</span></span><br><span class=\"line\"><span class=\"comment\">#Transparent Proxy Server</span></span><br><span class=\"line\">rdr on rl0 proto tcp from 192.168.13.0/24 to any 80 -&gt; 127.0.0.1 port 3128</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#阻挡可疑封包在 $ext_if 网卡进出</span></span><br><span class=\"line\">antispoof <span class=\"built_in\">log</span> quick <span class=\"keyword\">for</span> <span class=\"variable\">$ext_if</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#阻挡所有进出的封包</span></span><br><span class=\"line\">block all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开放 loopback</span></span><br><span class=\"line\">pass quick on lo0 all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#拒绝内部私有 IP 对 $ext_if 网络卡联机</span></span><br><span class=\"line\">block drop <span class=\"keyword\">in</span> quick on <span class=\"variable\">$ext_if</span> from <span class=\"variable\">$priv_nets</span> to any</span><br><span class=\"line\">block drop out quick on <span class=\"variable\">$ext_if</span> from any to <span class=\"variable\">$priv_nets</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开放对外的 80, 443 埠</span></span><br><span class=\"line\">pass <span class=\"keyword\">in</span> on <span class=\"variable\">$ext_if</span> inet proto tcp from any to <span class=\"variable\">$ext_if</span> port <span class=\"variable\">$open_services</span> flags S/SA keep state</span><br><span class=\"line\"><span class=\"comment\">#只容许 140.111.152.0/24 网段对本机做 22 埠联机</span></span><br><span class=\"line\">pass <span class=\"keyword\">in</span> on <span class=\"variable\">$ext_if</span> inet proto tcp from 140.111.152.0/24 to <span class=\"variable\">$ext_if</span> port 22 flags S/SA keep state</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开放内部网络对外联机</span></span><br><span class=\"line\"><span class=\"comment\">#pass in on $inf_if proto rcp from any to any queue std_in</span></span><br><span class=\"line\">pass <span class=\"keyword\">in</span> on <span class=\"variable\">$int_if</span> from <span class=\"variable\">$int_if</span>:network to any keep state</span><br><span class=\"line\">pass out on <span class=\"variable\">$int_if</span> from any to <span class=\"variable\">$int_if</span>:network keep state</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开放对外网络的联机</span></span><br><span class=\"line\"><span class=\"comment\">#pass out $ext_if proto tcp from any to any queue std_out</span></span><br><span class=\"line\">pass out on <span class=\"variable\">$ext_if</span> proto tcp all modulate state flags S/SA</span><br><span class=\"line\">pass out on <span class=\"variable\">$ext_if</span> proto &#123; udp, icmp &#125; all keep state</span><br><span class=\"line\"></span><br><span class=\"line\">启动 PF，并读取 pf 规则</span><br><span class=\"line\">pfctl -e;pfctl -f /etc/pf.conf</span><br></pre></td></tr></table></figure>\n<p>参考:</p>\n<p><a href=\"http://www.voidcn.com/article/p-bioqbvvf-cx.html\" target=\"_blank\" rel=\"noopener\">http://www.voidcn.com/article/p-bioqbvvf-cx.html</a></p>\n<p><a href=\"https://my.oschina.net/china008/blog/343049\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/china008/blog/343049</a></p>\n<p>PF 防火墙详解: <a href=\"http://blog.chinaunix.net/uid-20674714-id-90862.html\" target=\"_blank\" rel=\"noopener\">http://blog.chinaunix.net/uid-20674714-id-90862.html</a></p>\n"},{"title":"搭建 shadowsocks 服务器","date":"2018-12-07T07:28:31.000Z","_content":"\n## install\n\n```\napt-get install python-pip\npip install shadowsocks\n```\n\n\n\n## start service\n\n```shell\nssserver -p 443 -k password -m rc4-md5\n```\n\n如果要后台运行：\n\n```shell\nsudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start\n```\n\n如果要停止：\n\n```shell\nsudo ssserver -d stop\n```\n\n如果要检查日志：\n\n```sh\nsudo less /var/log/shadowsocks.log\n```\n\n\n\n\n\n### 启动示例\n\n```sh\nssserver -p 8837 -k passwd --user nobody -d start\n```\n\n","source":"_posts/devops/shadowsocks_server.md","raw":"---\ntitle: 搭建 shadowsocks 服务器\ndate: 2018-12-07 15:28:31\ncategories:\n- devops\ntags:\n- shadowsocks 服务器\n---\n\n## install\n\n```\napt-get install python-pip\npip install shadowsocks\n```\n\n\n\n## start service\n\n```shell\nssserver -p 443 -k password -m rc4-md5\n```\n\n如果要后台运行：\n\n```shell\nsudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start\n```\n\n如果要停止：\n\n```shell\nsudo ssserver -d stop\n```\n\n如果要检查日志：\n\n```sh\nsudo less /var/log/shadowsocks.log\n```\n\n\n\n\n\n### 启动示例\n\n```sh\nssserver -p 8837 -k passwd --user nobody -d start\n```\n\n","slug":"devops/shadowsocks_server","published":1,"updated":"2019-07-03T04:51:50.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgrk00098seocwoql82w","content":"<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install python-pip</span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<h2 id=\"start-service\"><a href=\"#start-service\" class=\"headerlink\" title=\"start service\"></a>start service</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -p 443 -k password -m rc4-md5</span><br></pre></td></tr></table></figure>\n<p>如果要后台运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start</span><br></pre></td></tr></table></figure>\n<p>如果要停止：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ssserver -d stop</span><br></pre></td></tr></table></figure>\n<p>如果要检查日志：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo less /var/<span class=\"built_in\">log</span>/shadowsocks.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动示例\"><a href=\"#启动示例\" class=\"headerlink\" title=\"启动示例\"></a>启动示例</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -p 8837 -k passwd --user nobody -d start</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install python-pip</span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<h2 id=\"start-service\"><a href=\"#start-service\" class=\"headerlink\" title=\"start service\"></a>start service</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -p 443 -k password -m rc4-md5</span><br></pre></td></tr></table></figure>\n<p>如果要后台运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start</span><br></pre></td></tr></table></figure>\n<p>如果要停止：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ssserver -d stop</span><br></pre></td></tr></table></figure>\n<p>如果要检查日志：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo less /var/<span class=\"built_in\">log</span>/shadowsocks.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动示例\"><a href=\"#启动示例\" class=\"headerlink\" title=\"启动示例\"></a>启动示例</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -p 8837 -k passwd --user nobody -d start</span><br></pre></td></tr></table></figure>\n"},{"title":"个人软件安装记录(linux-ubuntu)","date":"2018-09-04T01:51:07.000Z","_content":"\n\n```sh\napt-get install -y git\n\napt-get install -y tree\n\napt-get install -y wget\n\n## zsh\nsh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n\n## zsh config\nplugins=(\n  git\n  z\n  wd\n  zsh-autosuggestions\n  docker\n  docker-compose\n)\n\n## zsh install zsh-autosuggestions\ngit clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n\n## 持续增加中...\n```\n\n","source":"_posts/self_doc/个人软件安装记录-linux.md","raw":"---\ntitle: 个人软件安装记录(linux-ubuntu)\ndate: 2018-09-04 09:51:07\ntags:\n - tools安装\n---\n\n\n```sh\napt-get install -y git\n\napt-get install -y tree\n\napt-get install -y wget\n\n## zsh\nsh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n\n## zsh config\nplugins=(\n  git\n  z\n  wd\n  zsh-autosuggestions\n  docker\n  docker-compose\n)\n\n## zsh install zsh-autosuggestions\ngit clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n\n## 持续增加中...\n```\n\n","slug":"self_doc/个人软件安装记录-linux","published":1,"updated":"2018-12-07T07:13:05.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgrq000a8seoxlcolviv","content":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install -y git</span><br><span class=\"line\"></span><br><span class=\"line\">apt-get install -y tree</span><br><span class=\"line\"></span><br><span class=\"line\">apt-get install -y wget</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## zsh</span></span><br><span class=\"line\">sh -c <span class=\"string\">\"<span class=\"variable\">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## zsh config</span></span><br><span class=\"line\">plugins=(</span><br><span class=\"line\">  git</span><br><span class=\"line\">  z</span><br><span class=\"line\">  wd</span><br><span class=\"line\">  zsh-autosuggestions</span><br><span class=\"line\">  docker</span><br><span class=\"line\">  docker-compose</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## zsh install zsh-autosuggestions</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class=\"variable\">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 持续增加中...</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install -y git</span><br><span class=\"line\"></span><br><span class=\"line\">apt-get install -y tree</span><br><span class=\"line\"></span><br><span class=\"line\">apt-get install -y wget</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## zsh</span></span><br><span class=\"line\">sh -c <span class=\"string\">\"<span class=\"variable\">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## zsh config</span></span><br><span class=\"line\">plugins=(</span><br><span class=\"line\">  git</span><br><span class=\"line\">  z</span><br><span class=\"line\">  wd</span><br><span class=\"line\">  zsh-autosuggestions</span><br><span class=\"line\">  docker</span><br><span class=\"line\">  docker-compose</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## zsh install zsh-autosuggestions</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class=\"variable\">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 持续增加中...</span></span><br></pre></td></tr></table></figure>\n"},{"title":"supervisor 使用","date":"2018-08-29T13:15:52.434Z","_content":"\n\n### install\n\n```sh\napt-get install -y supervisor\n```\n\n\n\n### 启动命令\n\n```sh\n/usr/bin/python /usr/bin/supervisord -c /etc/supervisor/supervisord.conf\n```\n\n\n\n### 配置\n\n安装完后的默认配置 `/etc/supervisor/supervisord.conf`\n\n```conf\n; supervisor config file\n\n[unix_http_server]\nfile=/var/run/supervisor.sock   ; (the path to the socket file)\nchmod=0700                       ; sockef file mode (default 0700)\n\n[supervisord]\nlogfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)\npidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)\nchildlogdir=/var/log/supervisor            ; ('AUTO' child log dir, default $TEMP)\nenvironment=IPADDRESS=\"172.16.6.6\", HOST_NAME=\"i-nom0vro7\"\n\n; the below section must remain in the config file for RPC\n; (supervisorctl/web interface) to work, additional interfaces may be\n; added by defining them in separate rpcinterface: sections\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[supervisorctl]\nserverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket\n\n; The [include] section can just contain the \"files\" setting.  This\n; setting can list multiple files (separated by whitespace or\n; newlines).  It can also contain wildcards.  The filenames are\n; interpreted as relative to this file.  Included files *cannot*\n; include files themselves.\n\n[include]\nfiles = /etc/supervisor/conf.d/*.conf\n```\n\n\n\n需要监控的进程\n\n- consul 微服务守护进程\n- coupon_web 守护进程\n- coupon_gateway 守护进程\n- coupon_trig 守护进程\n- coupon_bot 守护进程\n\n\n\n配置如下: (在 conf.d 目录下)\n\n##### consul 守护进程:\n```conf\n[program:consul] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作\nautorestart=True      ; 程序异常退出后自动重启\nautostart=True        ; 在 supervisord 启动的时候也自动启动\nredirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false\ncommand=consul agent -data-dir /data/consul -node=common-conpous.0.13 -bind=172.16.0.13 -join=172.16.0.210 1>/data/logs/out.log 2>&1  ; 启动命令，与手动在命令行启动的命令是一样的\nuser=root           ; 用哪个用户启动\ndirectory=/data/caiqiu  ; 程序的启动目录\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile = /data/logs/supervisord_consul.log\n```\n\n##### coupon_web 守护进程:\n```conf\n[program:coupon_web] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作\nautorestart=True      ; 程序异常退出后自动重启\nautostart=True        ; 在 supervisord 启动的时候也自动启动\nredirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false\ncommand=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-web-1.0.0-SNAPSHOT.jar --server.port=8080 --server.address=172.16.0.13 --spring.profiles.active=dev --server.tomcat.max-thread=500\nuser=root           ; 用哪个用户启动\ndirectory=/data/caiqiu  ; 程序的启动目录\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile=/data/logs/supervisord_coupon_web.log\n```\n\n##### coupon_gateway 守护进程:\n```conf\n[program:coupon_gateway] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作\nautorestart=True      ; 程序异常退出后自动重启\nautostart=True        ; 在 supervisord 启动的时候也自动启动\nredirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false\ncommand=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-gateway-1.0.0-SNAPSHOT.jar --server.port=9090 --server.address=172.16.0.13 --spring.profiles.active=dev --server.tomcat.max-thread=500\nuser=root           ; 用哪个用户启动\ndirectory=/data/caiqiu  ; 程序的启动目录\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile=/data/logs/supervisord_coupon_gateway.log\n```\n\n##### coupon_trig 守护进程:\n```conf\n[program:coupon_trig] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作\nautorestart=True      ; 程序异常退出后自动重启\nautostart=True        ; 在 supervisord 启动的时候也自动启动\nredirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false\ncommand=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-trig-1.0.0-SNAPSHOT.jar --server.port=8090 --server.address=172.16.0.13 --spring.profiles.active=dev --server.tomcat.max-thread=500\nuser=root           ; 用哪个用户启动\ndirectory=/data/caiqiu  ; 程序的启动目录\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile=/data/logs/supervisord_coupon_trig.log\n```\n\n##### coupon_bot 守护进程:\n```conf\n[program:coupon_bot] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作\nautorestart=True      ; 程序异常退出后自动重启\nautostart=True        ; 在 supervisord 启动的时候也自动启动\nredirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false\ncommand=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-bot-1.0.0-SNAPSHOT.jar --spring.profiles.active=dev --server.tomcat.max-thread=500\nuser=root           ; 用哪个用户启动\ndirectory=/data/caiqiu  ; 程序的启动目录\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile=/data/logs/supervisord_coupon_bot.log\n```\n\n\n#### supervisorctl 命令\n\n```sh\nsupervisorctl status  # 查看 supervisorctl 的状态\n# account_gateway                  RUNNING    pid 22892, uptime 1 day, 19:17:42\n# account_web                      RUNNING    pid 22912, uptime 1 day, 19:17:41\n# consul                           RUNNING    pid 22849, uptime 1 day, 19:17:51\n\nsupervisorctl reload  # 重新载入 supervisorctl 配置, 并且使其生效\n\nsupervisorctl help    # 帮助文档\n# default commands (type help <topic>):\n# =====================================\n# add    clear  fg        open  quit    remove  restart   start   stop  update\n# avail  exit   maintail  pid   reload  reread  shutdown  status  tail  version\n```\n\n\n\n\n\n","source":"_posts/devops/supervisor_learn.md","raw":"---\ntitle: supervisor 使用\ndate: \ncategories:\n- devops\ntags:\n- supervisor\n---\n\n\n### install\n\n```sh\napt-get install -y supervisor\n```\n\n\n\n### 启动命令\n\n```sh\n/usr/bin/python /usr/bin/supervisord -c /etc/supervisor/supervisord.conf\n```\n\n\n\n### 配置\n\n安装完后的默认配置 `/etc/supervisor/supervisord.conf`\n\n```conf\n; supervisor config file\n\n[unix_http_server]\nfile=/var/run/supervisor.sock   ; (the path to the socket file)\nchmod=0700                       ; sockef file mode (default 0700)\n\n[supervisord]\nlogfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)\npidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)\nchildlogdir=/var/log/supervisor            ; ('AUTO' child log dir, default $TEMP)\nenvironment=IPADDRESS=\"172.16.6.6\", HOST_NAME=\"i-nom0vro7\"\n\n; the below section must remain in the config file for RPC\n; (supervisorctl/web interface) to work, additional interfaces may be\n; added by defining them in separate rpcinterface: sections\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[supervisorctl]\nserverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket\n\n; The [include] section can just contain the \"files\" setting.  This\n; setting can list multiple files (separated by whitespace or\n; newlines).  It can also contain wildcards.  The filenames are\n; interpreted as relative to this file.  Included files *cannot*\n; include files themselves.\n\n[include]\nfiles = /etc/supervisor/conf.d/*.conf\n```\n\n\n\n需要监控的进程\n\n- consul 微服务守护进程\n- coupon_web 守护进程\n- coupon_gateway 守护进程\n- coupon_trig 守护进程\n- coupon_bot 守护进程\n\n\n\n配置如下: (在 conf.d 目录下)\n\n##### consul 守护进程:\n```conf\n[program:consul] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作\nautorestart=True      ; 程序异常退出后自动重启\nautostart=True        ; 在 supervisord 启动的时候也自动启动\nredirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false\ncommand=consul agent -data-dir /data/consul -node=common-conpous.0.13 -bind=172.16.0.13 -join=172.16.0.210 1>/data/logs/out.log 2>&1  ; 启动命令，与手动在命令行启动的命令是一样的\nuser=root           ; 用哪个用户启动\ndirectory=/data/caiqiu  ; 程序的启动目录\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile = /data/logs/supervisord_consul.log\n```\n\n##### coupon_web 守护进程:\n```conf\n[program:coupon_web] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作\nautorestart=True      ; 程序异常退出后自动重启\nautostart=True        ; 在 supervisord 启动的时候也自动启动\nredirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false\ncommand=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-web-1.0.0-SNAPSHOT.jar --server.port=8080 --server.address=172.16.0.13 --spring.profiles.active=dev --server.tomcat.max-thread=500\nuser=root           ; 用哪个用户启动\ndirectory=/data/caiqiu  ; 程序的启动目录\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile=/data/logs/supervisord_coupon_web.log\n```\n\n##### coupon_gateway 守护进程:\n```conf\n[program:coupon_gateway] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作\nautorestart=True      ; 程序异常退出后自动重启\nautostart=True        ; 在 supervisord 启动的时候也自动启动\nredirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false\ncommand=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-gateway-1.0.0-SNAPSHOT.jar --server.port=9090 --server.address=172.16.0.13 --spring.profiles.active=dev --server.tomcat.max-thread=500\nuser=root           ; 用哪个用户启动\ndirectory=/data/caiqiu  ; 程序的启动目录\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile=/data/logs/supervisord_coupon_gateway.log\n```\n\n##### coupon_trig 守护进程:\n```conf\n[program:coupon_trig] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作\nautorestart=True      ; 程序异常退出后自动重启\nautostart=True        ; 在 supervisord 启动的时候也自动启动\nredirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false\ncommand=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-trig-1.0.0-SNAPSHOT.jar --server.port=8090 --server.address=172.16.0.13 --spring.profiles.active=dev --server.tomcat.max-thread=500\nuser=root           ; 用哪个用户启动\ndirectory=/data/caiqiu  ; 程序的启动目录\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile=/data/logs/supervisord_coupon_trig.log\n```\n\n##### coupon_bot 守护进程:\n```conf\n[program:coupon_bot] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作\nautorestart=True      ; 程序异常退出后自动重启\nautostart=True        ; 在 supervisord 启动的时候也自动启动\nredirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false\ncommand=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-bot-1.0.0-SNAPSHOT.jar --spring.profiles.active=dev --server.tomcat.max-thread=500\nuser=root           ; 用哪个用户启动\ndirectory=/data/caiqiu  ; 程序的启动目录\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile=/data/logs/supervisord_coupon_bot.log\n```\n\n\n#### supervisorctl 命令\n\n```sh\nsupervisorctl status  # 查看 supervisorctl 的状态\n# account_gateway                  RUNNING    pid 22892, uptime 1 day, 19:17:42\n# account_web                      RUNNING    pid 22912, uptime 1 day, 19:17:41\n# consul                           RUNNING    pid 22849, uptime 1 day, 19:17:51\n\nsupervisorctl reload  # 重新载入 supervisorctl 配置, 并且使其生效\n\nsupervisorctl help    # 帮助文档\n# default commands (type help <topic>):\n# =====================================\n# add    clear  fg        open  quit    remove  restart   start   stop  update\n# avail  exit   maintail  pid   reload  reread  shutdown  status  tail  version\n```\n\n\n\n\n\n","slug":"devops/supervisor_learn","published":1,"updated":"2018-08-29T13:30:56.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgru000e8seoh6jsuo1x","content":"<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install -y supervisor</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/python /usr/bin/supervisord -c /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>安装完后的默认配置 <code>/etc/supervisor/supervisord.conf</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; supervisor config file</span><br><span class=\"line\"></span><br><span class=\"line\">[unix_http_server]</span><br><span class=\"line\">file=/var/run/supervisor.sock   ; (the path to the socket file)</span><br><span class=\"line\">chmod=0700                       ; sockef file mode (default 0700)</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisord]</span><br><span class=\"line\">logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)</span><br><span class=\"line\">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class=\"line\">childlogdir=/var/log/supervisor            ; (&apos;AUTO&apos; child log dir, default $TEMP)</span><br><span class=\"line\">environment=IPADDRESS=&quot;172.16.6.6&quot;, HOST_NAME=&quot;i-nom0vro7&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">; the below section must remain in the config file for RPC</span><br><span class=\"line\">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class=\"line\">; added by defining them in separate rpcinterface: sections</span><br><span class=\"line\">[rpcinterface:supervisor]</span><br><span class=\"line\">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisorctl]</span><br><span class=\"line\">serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket</span><br><span class=\"line\"></span><br><span class=\"line\">; The [include] section can just contain the &quot;files&quot; setting.  This</span><br><span class=\"line\">; setting can list multiple files (separated by whitespace or</span><br><span class=\"line\">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class=\"line\">; interpreted as relative to this file.  Included files *cannot*</span><br><span class=\"line\">; include files themselves.</span><br><span class=\"line\"></span><br><span class=\"line\">[include]</span><br><span class=\"line\">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure>\n<p>需要监控的进程</p>\n<ul>\n<li>consul 微服务守护进程</li>\n<li>coupon_web 守护进程</li>\n<li>coupon_gateway 守护进程</li>\n<li>coupon_trig 守护进程</li>\n<li>coupon_bot 守护进程</li>\n</ul>\n<p>配置如下: (在 conf.d 目录下)</p>\n<h5 id=\"consul-守护进程\"><a href=\"#consul-守护进程\" class=\"headerlink\" title=\"consul 守护进程:\"></a>consul 守护进程:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:consul] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作</span><br><span class=\"line\">autorestart=True      ; 程序异常退出后自动重启</span><br><span class=\"line\">autostart=True        ; 在 supervisord 启动的时候也自动启动</span><br><span class=\"line\">redirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class=\"line\">command=consul agent -data-dir /data/consul -node=common-conpous.0.13 -bind=172.16.0.13 -join=172.16.0.210 1&gt;/data/logs/out.log 2&gt;&amp;1  ; 启动命令，与手动在命令行启动的命令是一样的</span><br><span class=\"line\">user=root           ; 用哪个用户启动</span><br><span class=\"line\">directory=/data/caiqiu  ; 程序的启动目录</span><br><span class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile = /data/logs/supervisord_consul.log</span><br></pre></td></tr></table></figure>\n<h5 id=\"coupon-web-守护进程\"><a href=\"#coupon-web-守护进程\" class=\"headerlink\" title=\"coupon_web 守护进程:\"></a>coupon_web 守护进程:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:coupon_web] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作</span><br><span class=\"line\">autorestart=True      ; 程序异常退出后自动重启</span><br><span class=\"line\">autostart=True        ; 在 supervisord 启动的时候也自动启动</span><br><span class=\"line\">redirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class=\"line\">command=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-web-1.0.0-SNAPSHOT.jar --server.port=8080 --server.address=172.16.0.13 --spring.profiles.active=dev --server.tomcat.max-thread=500</span><br><span class=\"line\">user=root           ; 用哪个用户启动</span><br><span class=\"line\">directory=/data/caiqiu  ; 程序的启动目录</span><br><span class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile=/data/logs/supervisord_coupon_web.log</span><br></pre></td></tr></table></figure>\n<h5 id=\"coupon-gateway-守护进程\"><a href=\"#coupon-gateway-守护进程\" class=\"headerlink\" title=\"coupon_gateway 守护进程:\"></a>coupon_gateway 守护进程:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:coupon_gateway] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作</span><br><span class=\"line\">autorestart=True      ; 程序异常退出后自动重启</span><br><span class=\"line\">autostart=True        ; 在 supervisord 启动的时候也自动启动</span><br><span class=\"line\">redirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class=\"line\">command=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-gateway-1.0.0-SNAPSHOT.jar --server.port=9090 --server.address=172.16.0.13 --spring.profiles.active=dev --server.tomcat.max-thread=500</span><br><span class=\"line\">user=root           ; 用哪个用户启动</span><br><span class=\"line\">directory=/data/caiqiu  ; 程序的启动目录</span><br><span class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile=/data/logs/supervisord_coupon_gateway.log</span><br></pre></td></tr></table></figure>\n<h5 id=\"coupon-trig-守护进程\"><a href=\"#coupon-trig-守护进程\" class=\"headerlink\" title=\"coupon_trig 守护进程:\"></a>coupon_trig 守护进程:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:coupon_trig] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作</span><br><span class=\"line\">autorestart=True      ; 程序异常退出后自动重启</span><br><span class=\"line\">autostart=True        ; 在 supervisord 启动的时候也自动启动</span><br><span class=\"line\">redirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class=\"line\">command=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-trig-1.0.0-SNAPSHOT.jar --server.port=8090 --server.address=172.16.0.13 --spring.profiles.active=dev --server.tomcat.max-thread=500</span><br><span class=\"line\">user=root           ; 用哪个用户启动</span><br><span class=\"line\">directory=/data/caiqiu  ; 程序的启动目录</span><br><span class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile=/data/logs/supervisord_coupon_trig.log</span><br></pre></td></tr></table></figure>\n<h5 id=\"coupon-bot-守护进程\"><a href=\"#coupon-bot-守护进程\" class=\"headerlink\" title=\"coupon_bot 守护进程:\"></a>coupon_bot 守护进程:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:coupon_bot] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作</span><br><span class=\"line\">autorestart=True      ; 程序异常退出后自动重启</span><br><span class=\"line\">autostart=True        ; 在 supervisord 启动的时候也自动启动</span><br><span class=\"line\">redirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class=\"line\">command=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-bot-1.0.0-SNAPSHOT.jar --spring.profiles.active=dev --server.tomcat.max-thread=500</span><br><span class=\"line\">user=root           ; 用哪个用户启动</span><br><span class=\"line\">directory=/data/caiqiu  ; 程序的启动目录</span><br><span class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile=/data/logs/supervisord_coupon_bot.log</span><br></pre></td></tr></table></figure>\n<h4 id=\"supervisorctl-命令\"><a href=\"#supervisorctl-命令\" class=\"headerlink\" title=\"supervisorctl 命令\"></a>supervisorctl 命令</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl status  <span class=\"comment\"># 查看 supervisorctl 的状态</span></span><br><span class=\"line\"><span class=\"comment\"># account_gateway                  RUNNING    pid 22892, uptime 1 day, 19:17:42</span></span><br><span class=\"line\"><span class=\"comment\"># account_web                      RUNNING    pid 22912, uptime 1 day, 19:17:41</span></span><br><span class=\"line\"><span class=\"comment\"># consul                           RUNNING    pid 22849, uptime 1 day, 19:17:51</span></span><br><span class=\"line\"></span><br><span class=\"line\">supervisorctl reload  <span class=\"comment\"># 重新载入 supervisorctl 配置, 并且使其生效</span></span><br><span class=\"line\"></span><br><span class=\"line\">supervisorctl <span class=\"built_in\">help</span>    <span class=\"comment\"># 帮助文档</span></span><br><span class=\"line\"><span class=\"comment\"># default commands (type help &lt;topic&gt;):</span></span><br><span class=\"line\"><span class=\"comment\"># =====================================</span></span><br><span class=\"line\"><span class=\"comment\"># add    clear  fg        open  quit    remove  restart   start   stop  update</span></span><br><span class=\"line\"><span class=\"comment\"># avail  exit   maintail  pid   reload  reread  shutdown  status  tail  version</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install -y supervisor</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/python /usr/bin/supervisord -c /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>安装完后的默认配置 <code>/etc/supervisor/supervisord.conf</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; supervisor config file</span><br><span class=\"line\"></span><br><span class=\"line\">[unix_http_server]</span><br><span class=\"line\">file=/var/run/supervisor.sock   ; (the path to the socket file)</span><br><span class=\"line\">chmod=0700                       ; sockef file mode (default 0700)</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisord]</span><br><span class=\"line\">logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)</span><br><span class=\"line\">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class=\"line\">childlogdir=/var/log/supervisor            ; (&apos;AUTO&apos; child log dir, default $TEMP)</span><br><span class=\"line\">environment=IPADDRESS=&quot;172.16.6.6&quot;, HOST_NAME=&quot;i-nom0vro7&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">; the below section must remain in the config file for RPC</span><br><span class=\"line\">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class=\"line\">; added by defining them in separate rpcinterface: sections</span><br><span class=\"line\">[rpcinterface:supervisor]</span><br><span class=\"line\">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisorctl]</span><br><span class=\"line\">serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket</span><br><span class=\"line\"></span><br><span class=\"line\">; The [include] section can just contain the &quot;files&quot; setting.  This</span><br><span class=\"line\">; setting can list multiple files (separated by whitespace or</span><br><span class=\"line\">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class=\"line\">; interpreted as relative to this file.  Included files *cannot*</span><br><span class=\"line\">; include files themselves.</span><br><span class=\"line\"></span><br><span class=\"line\">[include]</span><br><span class=\"line\">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure>\n<p>需要监控的进程</p>\n<ul>\n<li>consul 微服务守护进程</li>\n<li>coupon_web 守护进程</li>\n<li>coupon_gateway 守护进程</li>\n<li>coupon_trig 守护进程</li>\n<li>coupon_bot 守护进程</li>\n</ul>\n<p>配置如下: (在 conf.d 目录下)</p>\n<h5 id=\"consul-守护进程\"><a href=\"#consul-守护进程\" class=\"headerlink\" title=\"consul 守护进程:\"></a>consul 守护进程:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:consul] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作</span><br><span class=\"line\">autorestart=True      ; 程序异常退出后自动重启</span><br><span class=\"line\">autostart=True        ; 在 supervisord 启动的时候也自动启动</span><br><span class=\"line\">redirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class=\"line\">command=consul agent -data-dir /data/consul -node=common-conpous.0.13 -bind=172.16.0.13 -join=172.16.0.210 1&gt;/data/logs/out.log 2&gt;&amp;1  ; 启动命令，与手动在命令行启动的命令是一样的</span><br><span class=\"line\">user=root           ; 用哪个用户启动</span><br><span class=\"line\">directory=/data/caiqiu  ; 程序的启动目录</span><br><span class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile = /data/logs/supervisord_consul.log</span><br></pre></td></tr></table></figure>\n<h5 id=\"coupon-web-守护进程\"><a href=\"#coupon-web-守护进程\" class=\"headerlink\" title=\"coupon_web 守护进程:\"></a>coupon_web 守护进程:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:coupon_web] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作</span><br><span class=\"line\">autorestart=True      ; 程序异常退出后自动重启</span><br><span class=\"line\">autostart=True        ; 在 supervisord 启动的时候也自动启动</span><br><span class=\"line\">redirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class=\"line\">command=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-web-1.0.0-SNAPSHOT.jar --server.port=8080 --server.address=172.16.0.13 --spring.profiles.active=dev --server.tomcat.max-thread=500</span><br><span class=\"line\">user=root           ; 用哪个用户启动</span><br><span class=\"line\">directory=/data/caiqiu  ; 程序的启动目录</span><br><span class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile=/data/logs/supervisord_coupon_web.log</span><br></pre></td></tr></table></figure>\n<h5 id=\"coupon-gateway-守护进程\"><a href=\"#coupon-gateway-守护进程\" class=\"headerlink\" title=\"coupon_gateway 守护进程:\"></a>coupon_gateway 守护进程:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:coupon_gateway] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作</span><br><span class=\"line\">autorestart=True      ; 程序异常退出后自动重启</span><br><span class=\"line\">autostart=True        ; 在 supervisord 启动的时候也自动启动</span><br><span class=\"line\">redirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class=\"line\">command=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-gateway-1.0.0-SNAPSHOT.jar --server.port=9090 --server.address=172.16.0.13 --spring.profiles.active=dev --server.tomcat.max-thread=500</span><br><span class=\"line\">user=root           ; 用哪个用户启动</span><br><span class=\"line\">directory=/data/caiqiu  ; 程序的启动目录</span><br><span class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile=/data/logs/supervisord_coupon_gateway.log</span><br></pre></td></tr></table></figure>\n<h5 id=\"coupon-trig-守护进程\"><a href=\"#coupon-trig-守护进程\" class=\"headerlink\" title=\"coupon_trig 守护进程:\"></a>coupon_trig 守护进程:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:coupon_trig] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作</span><br><span class=\"line\">autorestart=True      ; 程序异常退出后自动重启</span><br><span class=\"line\">autostart=True        ; 在 supervisord 启动的时候也自动启动</span><br><span class=\"line\">redirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class=\"line\">command=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-trig-1.0.0-SNAPSHOT.jar --server.port=8090 --server.address=172.16.0.13 --spring.profiles.active=dev --server.tomcat.max-thread=500</span><br><span class=\"line\">user=root           ; 用哪个用户启动</span><br><span class=\"line\">directory=/data/caiqiu  ; 程序的启动目录</span><br><span class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile=/data/logs/supervisord_coupon_trig.log</span><br></pre></td></tr></table></figure>\n<h5 id=\"coupon-bot-守护进程\"><a href=\"#coupon-bot-守护进程\" class=\"headerlink\" title=\"coupon_bot 守护进程:\"></a>coupon_bot 守护进程:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:coupon_bot] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作</span><br><span class=\"line\">autorestart=True      ; 程序异常退出后自动重启</span><br><span class=\"line\">autostart=True        ; 在 supervisord 启动的时候也自动启动</span><br><span class=\"line\">redirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class=\"line\">command=java -jar -Xms512m -Xmx1024m /data/common-coupon/aries-coupon-bot-1.0.0-SNAPSHOT.jar --spring.profiles.active=dev --server.tomcat.max-thread=500</span><br><span class=\"line\">user=root           ; 用哪个用户启动</span><br><span class=\"line\">directory=/data/caiqiu  ; 程序的启动目录</span><br><span class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile=/data/logs/supervisord_coupon_bot.log</span><br></pre></td></tr></table></figure>\n<h4 id=\"supervisorctl-命令\"><a href=\"#supervisorctl-命令\" class=\"headerlink\" title=\"supervisorctl 命令\"></a>supervisorctl 命令</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl status  <span class=\"comment\"># 查看 supervisorctl 的状态</span></span><br><span class=\"line\"><span class=\"comment\"># account_gateway                  RUNNING    pid 22892, uptime 1 day, 19:17:42</span></span><br><span class=\"line\"><span class=\"comment\"># account_web                      RUNNING    pid 22912, uptime 1 day, 19:17:41</span></span><br><span class=\"line\"><span class=\"comment\"># consul                           RUNNING    pid 22849, uptime 1 day, 19:17:51</span></span><br><span class=\"line\"></span><br><span class=\"line\">supervisorctl reload  <span class=\"comment\"># 重新载入 supervisorctl 配置, 并且使其生效</span></span><br><span class=\"line\"></span><br><span class=\"line\">supervisorctl <span class=\"built_in\">help</span>    <span class=\"comment\"># 帮助文档</span></span><br><span class=\"line\"><span class=\"comment\"># default commands (type help &lt;topic&gt;):</span></span><br><span class=\"line\"><span class=\"comment\"># =====================================</span></span><br><span class=\"line\"><span class=\"comment\"># add    clear  fg        open  quit    remove  restart   start   stop  update</span></span><br><span class=\"line\"><span class=\"comment\"># avail  exit   maintail  pid   reload  reread  shutdown  status  tail  version</span></span><br></pre></td></tr></table></figure>\n"},{"title":"个人软件安装记录(mac osx)","date":"2018-08-31T07:54:58.000Z","_content":"\n```shell\n## tree install\nbrew install tree\n\n## apidoc install\nnpm install apidoc -g\n\n## zsh\nsh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n\n## zsh config\nplugins=(\n  git\n  z\n  wd\n  zsh-autosuggestions\n  docker\n  docker-compose\n)\n\n## zsh install zsh-autosuggestions\ngit clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n\n## 持续增加中...\n```\n\n","source":"_posts/self_doc/个人软件安装记录.md","raw":"---\ntitle: 个人软件安装记录(mac osx)\ndate: 2018-08-31 15:54:58\ntags:\n - tools安装\n---\n\n```shell\n## tree install\nbrew install tree\n\n## apidoc install\nnpm install apidoc -g\n\n## zsh\nsh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n\n## zsh config\nplugins=(\n  git\n  z\n  wd\n  zsh-autosuggestions\n  docker\n  docker-compose\n)\n\n## zsh install zsh-autosuggestions\ngit clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n\n## 持续增加中...\n```\n\n","slug":"self_doc/个人软件安装记录","published":1,"updated":"2018-12-07T07:13:08.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgry000f8seo7ux22fri","content":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># tree install</span></span></span><br><span class=\"line\">brew install tree</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># apidoc install</span></span></span><br><span class=\"line\">npm install apidoc -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># zsh</span></span></span><br><span class=\"line\">sh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># zsh config</span></span></span><br><span class=\"line\">plugins=(</span><br><span class=\"line\">  git</span><br><span class=\"line\">  z</span><br><span class=\"line\">  wd</span><br><span class=\"line\">  zsh-autosuggestions</span><br><span class=\"line\">  docker</span><br><span class=\"line\">  docker-compose</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># zsh install zsh-autosuggestions</span></span></span><br><span class=\"line\">git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 持续增加中...</span></span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># tree install</span></span></span><br><span class=\"line\">brew install tree</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># apidoc install</span></span></span><br><span class=\"line\">npm install apidoc -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># zsh</span></span></span><br><span class=\"line\">sh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># zsh config</span></span></span><br><span class=\"line\">plugins=(</span><br><span class=\"line\">  git</span><br><span class=\"line\">  z</span><br><span class=\"line\">  wd</span><br><span class=\"line\">  zsh-autosuggestions</span><br><span class=\"line\">  docker</span><br><span class=\"line\">  docker-compose</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># zsh install zsh-autosuggestions</span></span></span><br><span class=\"line\">git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 持续增加中...</span></span></span><br></pre></td></tr></table></figure>\n"},{"title":"动态规划","date":"2018-08-29T13:18:44.000Z","_content":"\n动态规划求解的一般思路： <br>\n　　判断问题的子结构（也可看作状态），当具有最优子结构时，动态规划可能适用。<br>\n　　求解重叠子问题。一个递归算法不断地调用同一问题，递归可以转化为查表从而利用子问题的解。分治法则不同，每次递归都产生新的问题。<br>\n　　重新构造一个最优解。<br>\n\n**最优子结构?**\n","source":"_posts/alg/DynamicProgramming/动态规划总结.md","raw":"---\ntitle: 动态规划\ndate: 2018-08-29 21:18:44\ncategories:\n- alg\ntags:\n- 动态规划\n---\n\n动态规划求解的一般思路： <br>\n　　判断问题的子结构（也可看作状态），当具有最优子结构时，动态规划可能适用。<br>\n　　求解重叠子问题。一个递归算法不断地调用同一问题，递归可以转化为查表从而利用子问题的解。分治法则不同，每次递归都产生新的问题。<br>\n　　重新构造一个最优解。<br>\n\n**最优子结构?**\n","slug":"alg/DynamicProgramming/动态规划总结","published":1,"updated":"2018-08-29T13:20:51.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgtn00118seo769zi1oi","content":"<p>动态规划求解的一般思路： <br><br>　　判断问题的子结构（也可看作状态），当具有最优子结构时，动态规划可能适用。<br><br>　　求解重叠子问题。一个递归算法不断地调用同一问题，递归可以转化为查表从而利用子问题的解。分治法则不同，每次递归都产生新的问题。<br><br>　　重新构造一个最优解。<br></p>\n<p><strong>最优子结构?</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>动态规划求解的一般思路： <br><br>　　判断问题的子结构（也可看作状态），当具有最优子结构时，动态规划可能适用。<br><br>　　求解重叠子问题。一个递归算法不断地调用同一问题，递归可以转化为查表从而利用子问题的解。分治法则不同，每次递归都产生新的问题。<br><br>　　重新构造一个最优解。<br></p>\n<p><strong>最优子结构?</strong></p>\n"},{"title":"动态规划题集","date":"2018-08-29T13:18:44.000Z","_content":"\n摘录：https://www.geeksforgeeks.org/dynamic-programming/\n\n\n\n[‘Recent Articles’ on Dynamic Programming](https://www.geeksforgeeks.org/category/algorithm/dynamic-programming/)\n\n**Topics:**\n\n- [Basic Concepts](https://www.geeksforgeeks.org/dynamic-programming/#concepts)\n- [Advanced Concepts](https://www.geeksforgeeks.org/dynamic-programming/#advanced)\n- [Basic Problems](https://www.geeksforgeeks.org/dynamic-programming/#basicProblems)\n\n- [Intermediate Problems](https://www.geeksforgeeks.org/dynamic-programming/#mediumProblems)\n- [Hard Problems](https://www.geeksforgeeks.org/dynamic-programming/#hardProblems)\n- [Quick Links](https://www.geeksforgeeks.org/dynamic-programming/#quick)\n\n**Basic Concepts:**\n\n1. [Overlapping Subproblems Property](https://www.geeksforgeeks.org/dynamic-programming-set-1/)\n2. [Optimal Substructure Property](https://www.geeksforgeeks.org/dynamic-programming-set-2-optimal-substructure-property/)\n3. [How to solve a Dynamic Programming Problem ?](https://www.geeksforgeeks.org/solve-dynamic-programming-problem/)\n4. [Tabulation vs Memoizatation](https://www.geeksforgeeks.org/tabulation-vs-memoizatation/)\n\n**Advanced Concepts :**\n\n1. [Bitmasking and Dynamic Programming | Set 1](https://www.geeksforgeeks.org/bitmasking-and-dynamic-programming-set-1-count-ways-to-assign-unique-cap-to-every-person/)\n2. [Digit DP | Introduction](https://www.geeksforgeeks.org/digit-dp-introduction/)\n\n\n\n**Basic Problems :**\n\n1. - [x] &nbsp;&nbsp; [Fibonacci numbers](https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/)\n2. - [ ] &nbsp;&nbsp; [Binomial Coefficient](https://www.geeksforgeeks.org/dynamic-programming-set-9-binomial-coefficient/)\n3. - [ ] &nbsp;&nbsp; [Longest Common Subsequence](https://www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/)\n4. - [ ] &nbsp;&nbsp; [Longest Repeated Subsequence](https://www.geeksforgeeks.org/longest-repeated-subsequence/)\n5. - [ ] &nbsp;&nbsp; [Largest Sum Contiguous Subarray](https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/)\n6. - [ ] &nbsp;&nbsp; [Ugly numbers](https://www.geeksforgeeks.org/ugly-numbers/)\n7. - [ ] &nbsp;&nbsp; [Maximum size square sub-matrix with all 1s](https://www.geeksforgeeks.org/maximum-size-sub-matrix-with-all-1s-in-a-binary-matrix/)\n8. - [ ] &nbsp;&nbsp; [Longest Increasing Subsequence](https://www.geeksforgeeks.org/dynamic-programming-set-3-longest-increasing-subsequence/)\n9. - [ ] &nbsp;&nbsp; [Min Cost Path](https://www.geeksforgeeks.org/dynamic-programming-set-6-min-cost-path/)\n10. - [ ] &nbsp;&nbsp; [Coin change problem](https://www.geeksforgeeks.org/dynamic-programming-set-7-coin-change/)\n11. - [ ] &nbsp;&nbsp; [Minimum number of edits ( operations ) require to convert string 1 to string 2](https://www.geeksforgeeks.org/dynamic-programming-set-5-edit-distance/)\n12. - [ ] &nbsp;&nbsp; [Cutting a Rod](https://www.geeksforgeeks.org/dynamic-programming-set-13-cutting-a-rod/)\n13. - [ ] &nbsp;&nbsp; [Subset Sum Problem](https://www.geeksforgeeks.org/dynamic-programming-subset-sum-problem/)\n14. - [ ] &nbsp;&nbsp; [Minimum number of jumps to reach end](https://www.geeksforgeeks.org/minimum-number-of-jumps-to-reach-end-of-a-given-array/)\n15. - [ ] &nbsp;&nbsp; [Assembly line scheduling](https://www.geeksforgeeks.org/dynamic-programming-set-34-assembly-line-scheduling/)\n16. - [ ] &nbsp;&nbsp; [Maximum Sum Increasing Subsequence](https://www.geeksforgeeks.org/dynamic-programming-set-14-maximum-sum-increasing-subsequence/)\n17. - [ ] &nbsp;&nbsp; [Maximum Length Chain of Pairs](https://www.geeksforgeeks.org/dynamic-programming-set-20-maximum-length-chain-of-pairs/)\n18. - [ ] &nbsp;&nbsp; [Longest Common Substring](https://www.geeksforgeeks.org/longest-common-substring/)\n19. - [ ] &nbsp;&nbsp; [Count all possible paths from top left to bottom right of a mXn matrix](https://www.geeksforgeeks.org/count-possible-paths-top-left-bottom-right-nxm-matrix/)\n20. - [ ] &nbsp;&nbsp; [nth Catalan Number](https://www.geeksforgeeks.org/program-nth-catalan-number/)\n21. - [ ] &nbsp;&nbsp; [Count number of ways to reach a given score in a game](https://www.geeksforgeeks.org/count-number-ways-reach-given-score-game/)\n22. - [ ] &nbsp;&nbsp; [Tiling Problem](https://www.geeksforgeeks.org/tiling-problem/)\n23. - [ ] &nbsp;&nbsp; [Count even length binary sequences with same sum of first and second half bits](https://www.geeksforgeeks.org/count-even-length-binary-sequences-with-same-sum-of-first-and-second-half-bits/)\n24. - [ ] &nbsp;&nbsp; [Find number of solutions of a linear equation of n variables](https://www.geeksforgeeks.org/find-number-of-solutions-of-a-linear-equation-of-n-variables/)\n25. - [ ] &nbsp;&nbsp; [Bell Numbers (Number of ways to Partition a Set)](https://www.geeksforgeeks.org/bell-numbers-number-of-ways-to-partition-a-set/)\n26. - [ ] &nbsp;&nbsp; [Compute nCr % p](https://www.geeksforgeeks.org/compute-ncr-p-set-1-introduction-and-dynamic-programming-solution/)\n27. - [ ] &nbsp;&nbsp; [Permutation Coefficient](https://www.geeksforgeeks.org/permutation-coefficient/)\n28. - [ ] &nbsp;&nbsp; [Count number of ways to fill a “n x 4” grid using “1 x 4” tiles](https://www.geeksforgeeks.org/count-number-of-ways-to-fill-a-n-x-4-grid-using-1-x-4-tiles/)\n29. - [ ] &nbsp;&nbsp; [A Space Optimized Solution of LCS](https://www.geeksforgeeks.org/space-optimized-solution-lcs/)\n30. - [ ] &nbsp;&nbsp; [Find maximum length Snake sequence](https://www.geeksforgeeks.org/find-maximum-length-snake-sequence/)\n31. - [ ] &nbsp;&nbsp; [Minimum cost to fill given weight in a bag](https://www.geeksforgeeks.org/minimum-cost-to-fill-given-weight-in-a-bag/)\n32. - [ ] &nbsp;&nbsp; [Choice of area](https://www.geeksforgeeks.org/game-theory-choice-area/)\n33. - [ ] &nbsp;&nbsp; [Maximum weight path ending at any element of last row in a matrix](https://www.geeksforgeeks.org/maximum-weight-path-ending-element-last-row-matrix/)\n34. - [ ] &nbsp;&nbsp; [Recursively break a number in 3 parts to get maximum sum](https://www.geeksforgeeks.org/recursively-break-number-3-parts-get-maximum-sum/)\n35. - [ ] &nbsp;&nbsp; [Path with maximum average value](https://www.geeksforgeeks.org/path-maximum-average-value/)\n36. - [ ] &nbsp;&nbsp; [Maximum sum of pairs with specific difference](https://www.geeksforgeeks.org/maximum-sum-pairs-specific-difference/)\n37. - [ ] &nbsp;&nbsp; [Maximum subsequence sum such that no three are consecutive](https://www.geeksforgeeks.org/maximum-subsequence-sum-such-that-no-three-are-consecutive/)\n38. - [ ] &nbsp;&nbsp; [Longest subsequence such that difference between adjacents is one](https://www.geeksforgeeks.org/longest-subsequence-such-that-difference-between-adjacents-is-one/)\n39. - [ ] &nbsp;&nbsp; [Maximum path sum for each position with jumps under divisibility condition](https://www.geeksforgeeks.org/maximum-path-sum-position-jumps-divisibility-condition/)\n40. - [ ] &nbsp;&nbsp; [Maximum sum Bi-tonic Sub-sequence](https://www.geeksforgeeks.org/maximum-sum-bi-tonic-sub-sequence/)\n41. - [ ] &nbsp;&nbsp; [LCS (Longest Common Subsequence) of three strings](https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/)\n42. - [ ] &nbsp;&nbsp; [Maximum path sum in a triangle](https://www.geeksforgeeks.org/maximum-path-sum-triangle/)\n43. - [ ] &nbsp;&nbsp; [Friends Pairing Problem](https://www.geeksforgeeks.org/friends-pairing-problem/)\n44. - [ ] &nbsp;&nbsp; [Size of array after repeated deletion of LIS](https://www.geeksforgeeks.org/size-array-repeated-deletion-lis/)\n45. - [ ] &nbsp;&nbsp; [Minimum steps to minimize n as per given condition](https://www.geeksforgeeks.org/minimum-steps-minimize-n-per-given-condition/)\n46. - [ ] &nbsp;&nbsp; [Maximum path sum that starting with any cell of 0-th row and ending with any cell of (N-1)-th row](https://www.geeksforgeeks.org/maximum-path-sum-starting-cell-0-th-row-ending-cell-n-1-th-row/)\n47. - [ ] &nbsp;&nbsp; [Gold Mine Problem](https://www.geeksforgeeks.org/gold-mine-problem/)\n48. - [ ] &nbsp;&nbsp; [Find number of endless points](https://www.geeksforgeeks.org/find-number-endless-points/)\n49. - [ ] &nbsp;&nbsp; [Perfect Sum Problem (Print all subsets with given sum)](https://www.geeksforgeeks.org/perfect-sum-problem-print-subsets-given-sum/)\n50. - [ ] &nbsp;&nbsp; [Maximum sum of a path in a Right Number Triangle](https://www.geeksforgeeks.org/maximum-sum-path-right-number-triangle/)\n51. - [ ] &nbsp;&nbsp; [Subset with sum divisible by m](https://www.geeksforgeeks.org/subset-sum-divisible-m/)\n\n\n\n**Intermediate Problems :**\n\n1. - [ ] &nbsp;&nbsp; [0-1 Knapsack Problem](https://www.geeksforgeeks.org/dynamic-programming-set-10-0-1-knapsack-problem/)\n2. - [ ] &nbsp;&nbsp; [Length of the longest substring without repeating characters](https://www.geeksforgeeks.org/length-of-the-longest-substring-without-repeating-characters/)\n3. - [ ] &nbsp;&nbsp; [Count number of ways to reach destination in a Maze](https://www.geeksforgeeks.org/count-number-ways-reach-destination-maze/)\n4. - [ ] &nbsp;&nbsp; [Super Ugly Number (Number whose prime factors are in given set)](https://www.geeksforgeeks.org/super-ugly-number-number-whose-prime-factors-given-set/)\n5. - [ ] &nbsp;&nbsp; [Count number of ways to partition a set into k subsets](https://www.geeksforgeeks.org/count-number-of-ways-to-partition-a-set-into-k-subsets/)\n6. - [ ] &nbsp;&nbsp; [Longest Palindromic Subsequence](https://www.geeksforgeeks.org/dynamic-programming-set-12-longest-palindromic-subsequence/)\n7. - [ ] &nbsp;&nbsp; [Egg Dropping Puzzle](https://www.geeksforgeeks.org/dynamic-programming-set-11-egg-dropping-puzzle/)\n8. - [ ] &nbsp;&nbsp; [Weighted job scheduling](https://www.geeksforgeeks.org/weighted-job-scheduling/)\n9. - [ ] &nbsp;&nbsp; [Longest Bitonic Subsequence](https://www.geeksforgeeks.org/dynamic-programming-set-15-longest-bitonic-subsequence/)\n10. - [ ] &nbsp;&nbsp; [Floyd Warshall Algorithm](https://www.geeksforgeeks.org/dynamic-programming-set-16-floyd-warshall-algorithm/)\n11. - [ ] &nbsp;&nbsp; [Partition Problem](https://www.geeksforgeeks.org/dynamic-programming-set-18-partition-problem/)\n12. - [ ] &nbsp;&nbsp; [Variations of LIS](https://www.geeksforgeeks.org/dynamic-programming-set-14-variations-of-lis/)\n13. - [ ] &nbsp;&nbsp; [Box-Stacking Problem](https://www.geeksforgeeks.org/dynamic-programming-set-21-box-stacking-problem/)\n14. - [ ] &nbsp;&nbsp; [Bellman–Ford Algorithm](https://www.geeksforgeeks.org/dynamic-programming-set-23-bellman-ford-algorithm/)\n15. - [ ] &nbsp;&nbsp; [Optimal Binary Search Tree](https://www.geeksforgeeks.org/dynamic-programming-set-24-optimal-binary-search-tree/)\n16. - [ ] &nbsp;&nbsp; [Largest Independent Set Problem](https://www.geeksforgeeks.org/largest-independent-set-problem/)\n17. - [ ] &nbsp;&nbsp; [Minimum insertions to form a palindrome](https://www.geeksforgeeks.org/dynamic-programming-set-28-minimum-insertions-to-form-a-palindrome/)\n18. - [ ] &nbsp;&nbsp; [Minimum number of deletions to make a string palindrome](https://www.geeksforgeeks.org/minimum-number-deletions-make-string-palindrome/)\n19. - [ ] &nbsp;&nbsp; [Maximum Product Cutting](https://www.geeksforgeeks.org/dynamic-programming-set-36-cut-a-rope-to-maximize-product/)\n20. - [ ] &nbsp;&nbsp; [Clustering/Partitioning an array such that sum of square differences is minimum](https://www.geeksforgeeks.org/clusteringpartitioning-an-array-such-that-sum-of-square-differences-is-minimum/)\n21. - [ ] &nbsp;&nbsp; [Maximum decimal value path in a binary matrix](https://www.geeksforgeeks.org/maximum-decimal-value-path-in-a-binary-matrix/)\n22. - [ ] &nbsp;&nbsp; [Count Derangements (Permutation such that no element appears in its original position)](https://www.geeksforgeeks.org/count-derangements-permutation-such-that-no-element-appears-in-its-original-position/)\n23. - [ ] &nbsp;&nbsp; [Dice Throw Problem](https://www.geeksforgeeks.org/dice-throw-problem/)\n24. - [ ] &nbsp;&nbsp; [Optimal Strategy for a game](https://www.geeksforgeeks.org/dynamic-programming-set-31-optimal-strategy-for-a-game/)\n25. - [ ] &nbsp;&nbsp; [Word Break Problem](https://www.geeksforgeeks.org/dynamic-programming-set-32-word-break-problem/)\n26. - [ ] &nbsp;&nbsp; [Remove minimum elements from either side such that 2*min becomes more than max](https://www.geeksforgeeks.org/remove-minimum-elements-either-side-2min-max/)\n27. - [ ] &nbsp;&nbsp; [Count number of binary strings without consecutive 1’s](https://www.geeksforgeeks.org/count-number-binary-strings-without-consecutive-1s/)\n28. - [ ] &nbsp;&nbsp; [Count Possible Decodings of a given Digit Sequence](https://www.geeksforgeeks.org/count-possible-decodings-given-digit-sequence/)\n29. - [ ] &nbsp;&nbsp; [Count all possible walks from a source to a destination with exactly k edges](https://www.geeksforgeeks.org/count-possible-paths-source-destination-exactly-k-edges/)\n30. - [ ] &nbsp;&nbsp; [Shortest path with exactly k edges in a directed and weighted graph](https://www.geeksforgeeks.org/shortest-path-exactly-k-edges-directed-weighted-graph/)\n31. - [ ] &nbsp;&nbsp; [Longest Even Length Substring such that Sum of First and Second Half is same](https://www.geeksforgeeks.org/longest-even-length-substring-sum-first-second-half/)\n32. - [ ] &nbsp;&nbsp; [Vertex Cover Problem](https://www.geeksforgeeks.org/vertex-cover-problem-set-2-dynamic-programming-solution-tree/)\n33. - [ ] &nbsp;&nbsp; [Find the minimum cost to reach destination using a train](https://www.geeksforgeeks.org/find-the-minimum-cost-to-reach-a-destination-where-every-station-is-connected-in-one-direction/)\n34. - [ ] &nbsp;&nbsp; [Maximum profit by buying and selling a share at most twice](https://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-most-twice/)\n35. - [ ] &nbsp;&nbsp; [Count possible ways to construct buildings](https://www.geeksforgeeks.org/count-possible-ways-to-construct-buildings/)\n36. - [ ] &nbsp;&nbsp; [Compute sum of digits in all numbers from 1 to n](https://www.geeksforgeeks.org/count-sum-of-digits-in-numbers-from-1-to-n/)\n37. - [ ] &nbsp;&nbsp; [Shortest Common Supersequence](https://www.geeksforgeeks.org/shortest-common-supersequence/)\n38. - [ ] &nbsp;&nbsp; [Minimum number of coins that make a given value](https://www.geeksforgeeks.org/find-minimum-number-of-coins-that-make-a-change/)\n39. - [ ] &nbsp;&nbsp; [Minimum number of squares whose sum equals to given number n](https://www.geeksforgeeks.org/minimum-number-of-squares-whose-sum-equals-to-given-number-n/)\n40. - [ ] &nbsp;&nbsp; [length of the longest consecutive path from a given starting character](https://www.geeksforgeeks.org/find-length-of-the-longest-consecutive-path-in-a-character-matrix/)\n41. - [ ] &nbsp;&nbsp; [Total number of non-decreasing numbers with n digits](https://www.geeksforgeeks.org/total-number-of-non-decreasing-numbers-with-n-digits/)\n42. - [ ] &nbsp;&nbsp; [Minimum Initial Points to Reach Destination](https://www.geeksforgeeks.org/minimum-positive-points-to-reach-destination/)\n43. - [ ] &nbsp;&nbsp; [Count of n digit numbers whose sum of digits equals to given sum](https://www.geeksforgeeks.org/count-of-n-digit-numbers-whose-sum-of-digits-equals-to-given-sum/)\n44. - [ ] &nbsp;&nbsp; [Count total number of N digit numbers such that the difference between sum of even and odd digits is 1](https://www.geeksforgeeks.org/count-total-number-of-n-digit-numbers-such-that-the-difference-between-the-sum-of-even-digits-and-odd-digits-is-1/)\n45. - [ ] &nbsp;&nbsp; [Count ways to assign unique cap to every person](https://www.geeksforgeeks.org/bitmasking-and-dynamic-programming-set-1-count-ways-to-assign-unique-cap-to-every-person/)\n46. - [ ] &nbsp;&nbsp; [Longest Repeating Subsequence](https://www.geeksforgeeks.org/longest-repeating-subsequence/)\n47. - [ ] &nbsp;&nbsp; [Find the longest path in a matrix with given constraints](https://www.geeksforgeeks.org/find-the-longest-path-in-a-matrix-with-given-constraints/)\n48. - [ ] &nbsp;&nbsp; [Number of paths with exactly k coins](https://www.geeksforgeeks.org/number-of-paths-with-exactly-k-coins/)\n49. - [ ] &nbsp;&nbsp; [Collect maximum coins before hitting a dead end](https://www.geeksforgeeks.org/collect-maximum-coins-before-hitting-a-dead-end/)\n50. - [ ] &nbsp;&nbsp; [Count number of paths with at-most k turns](https://www.geeksforgeeks.org/count-number-of-paths-with-k-turns/)\n51. - [ ] &nbsp;&nbsp; [Partition a set into two subsets such that the difference of subset sums is minimum](https://www.geeksforgeeks.org/partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum/)\n52. - [ ] &nbsp;&nbsp; [Longest Zig-Zag Subsequence](https://www.geeksforgeeks.org/longest-zig-zag-subsequence/)\n53. - [ ] &nbsp;&nbsp; [Largest sum Zigzag sequence in a matrix](https://www.geeksforgeeks.org/largest-sum-zig-zag-sequence-in-a-matrix/)\n54. - [ ] &nbsp;&nbsp; [Count number of subsets having a particular XOR value](https://www.geeksforgeeks.org/count-number-of-subsets-having-a-particular-xor-value/)\n55. - [ ] &nbsp;&nbsp; [Weighted Job Scheduling in O(n Log n) time](https://www.geeksforgeeks.org/weighted-job-scheduling-log-n-time/)\n56. - [ ] &nbsp;&nbsp; [Ways to arrange Balls such that adjacent balls are of different types](https://www.geeksforgeeks.org/ways-to-arrange-balls-such-that-adjacent-balls-are-of-different-types/)\n57. - [ ] &nbsp;&nbsp; [Minimum time to finish tasks without skipping two consecutive](https://www.geeksforgeeks.org/minimum-time-to-finish-tasks-without-skipping-two-consecutive/)\n58. - [ ] &nbsp;&nbsp; [Find if string is K-Palindrome or not | Set 1](https://www.geeksforgeeks.org/find-if-string-is-k-palindrome-or-not/)\n59. - [ ] &nbsp;&nbsp; [Find if string is K-Palindrome or not | Set 2](https://www.geeksforgeeks.org/find-if-string-is-k-palindrome-or-not-set-2/)\n60. - [ ] &nbsp;&nbsp; [Wildcard Pattern Matching](https://www.geeksforgeeks.org/wildcard-pattern-matching/)\n61. - [ ] &nbsp;&nbsp; [Longest Common Increasing Subsequence (LCS + LIS)](https://www.geeksforgeeks.org/longest-common-increasing-subsequence-lcs-lis/)\n62. - [ ] &nbsp;&nbsp; [Printing Longest Common Subsequence | Set 2 (Printing All)](https://www.geeksforgeeks.org/printing-longest-common-subsequence-set-2-printing/)\n63. - [ ] &nbsp;&nbsp; [High-effort vs. Low-effort Tasks Problem](https://www.geeksforgeeks.org/dynamic-programming-high-effort-vs-low-effort-tasks-problem/)\n64. - [ ] &nbsp;&nbsp; [Find minimum adjustment cost of an array](https://www.geeksforgeeks.org/find-minimum-adjustment-cost-of-an-array/)\n65. - [ ] &nbsp;&nbsp; [Find Jobs involved in Weighted Job Scheduling](https://www.geeksforgeeks.org/find-jobs-involved-in-weighted-job-scheduling/)\n66. - [ ] &nbsp;&nbsp; [Minimum Cost To Make Two Strings Identical](https://www.geeksforgeeks.org/minimum-cost-make-two-strings-identical/)\n67. - [ ] &nbsp;&nbsp; [Find number of times a string occurs as a subsequence in given string](https://www.geeksforgeeks.org/find-number-times-string-occurs-given-string/)\n68. - [ ] &nbsp;&nbsp; [Count digit groupings of a number with given constraints](https://www.geeksforgeeks.org/count-groupings-number-sum-digits-every-sub-group-less-equals-immediate-right-sub-group/)\n69. - [ ] &nbsp;&nbsp; [Non-crossing lines to connect points in a circle](https://www.geeksforgeeks.org/non-crossing-lines-connect-points-circle/)\n70. - [ ] &nbsp;&nbsp; [Count Distinct Subsequences](https://www.geeksforgeeks.org/count-distinct-subsequences/)\n71. - [ ] &nbsp;&nbsp; [Find minimum sum such that one of every three consecutive elements is taken](https://www.geeksforgeeks.org/find-minimum-sum-one-every-three-consecutive-elements-taken/)\n72. - [ ] &nbsp;&nbsp; [Count distinct occurrences as a subsequence](https://www.geeksforgeeks.org/count-distinct-occurrences-as-a-subsequence/)\n73. - [ ] &nbsp;&nbsp; [Number of permutation with K inversions](https://www.geeksforgeeks.org/number-of-permutation-with-k-inversions/)\n74. - [ ] &nbsp;&nbsp; [Print all longest common sub-sequences in lexicographical order](https://www.geeksforgeeks.org/print-longest-common-sub-sequences-lexicographical-order/)\n75. - [ ] &nbsp;&nbsp; [Find all distinct subset (or subsequence) sums of an array](https://www.geeksforgeeks.org/find-distinct-subset-subsequence-sums-array/)\n76. - [ ] &nbsp;&nbsp; [Count All Palindromic Subsequence in a given String](https://www.geeksforgeeks.org/count-palindromic-subsequence-given-string/)\n77. - [ ] &nbsp;&nbsp; [Maximum sum alternating subsequence](https://www.geeksforgeeks.org/maximum-sum-alternating-subsequence-sum/)\n78. - [ ] &nbsp;&nbsp; [Sum of average of all subsets](https://www.geeksforgeeks.org/sum-average-subsets/)\n79. - [ ] &nbsp;&nbsp; [Minimum and Maximum values of an expression with * and +](https://www.geeksforgeeks.org/minimum-maximum-values-expression/)\n80. - [ ] &nbsp;&nbsp; [Minimum sum subsequence such that at least one of every four consecutive elements is picked](https://www.geeksforgeeks.org/minimum-sum-subsequence-least-one-every-four-consecutive-elements-picked/)\n81. - [ ] &nbsp;&nbsp; [Ways to write n as sum of two or more positive integers](https://www.geeksforgeeks.org/ways-to-write-n-as-sum-of-two-or-more-positive-integers/)\n82. - [ ] &nbsp;&nbsp; [Unbounded Knapsack (Repetition of items allowed)](https://www.geeksforgeeks.org/unbounded-knapsack-repetition-items-allowed/)\n83. - [ ] &nbsp;&nbsp; [Finding the maximum square sub-matrix with all equal elements](https://www.geeksforgeeks.org/finding-the-maximum-square-sub-matrix-with-all-equal-elements/)\n84. - [ ] &nbsp;&nbsp; [Find Maximum dot product of two arrays with insertion of 0’s](https://www.geeksforgeeks.org/find-maximum-dot-product-two-arrays-insertion-0s/)\n85. - [ ] &nbsp;&nbsp; [Maximum points collected by two persons allowed to meet once](https://www.geeksforgeeks.org/maximum-points-collected-by-two-persons-allowed-to-meet-once/)\n86. - [ ] &nbsp;&nbsp; [Minimum Sum Path In 3-D Array](https://www.geeksforgeeks.org/minimum-sum-path-3-d-array/)\n87. - [ ] &nbsp;&nbsp; [Count binary strings with k times appearing adjacent two set bits](https://www.geeksforgeeks.org/count-binary-strings-k-times-appearing-adjacent-two-set-bits/)\n88. - [ ] &nbsp;&nbsp; [Highway Billboard Problem](https://www.geeksforgeeks.org/highway-billboard-problem/)\n89. - [ ] &nbsp;&nbsp; [Probability of getting at least K heads in N tosses of Coins](https://www.geeksforgeeks.org/probability-getting-least-k-heads-n-tosses-coins/)\n90. - [ ] &nbsp;&nbsp; [Count of strings that can be formed using a, b and c under given constraints](https://www.geeksforgeeks.org/count-strings-can-formed-using-b-c-given-constraints/)\n91. - [ ] &nbsp;&nbsp; [Modify array to maximize sum of adjacent differences](https://www.geeksforgeeks.org/modify-array-to-maximize-sum-of-adjacent-differences/)\n92. - [ ] &nbsp;&nbsp; [Temple Offerings](https://www.geeksforgeeks.org/temple-offerings/)\n93. - [ ] &nbsp;&nbsp; [Longest alternating subsequence](https://www.geeksforgeeks.org/longest-alternating-subsequence/)\n94. - [ ] &nbsp;&nbsp; [Minimum steps to delete a string after repeated deletion of palindrome substrings](https://www.geeksforgeeks.org/minimum-steps-to-delete-a-string-after-repeated-deletion-of-palindrome-substrings/)\n95. - [ ] &nbsp;&nbsp; [Minimum number of deletions to make a sorted sequence](https://www.geeksforgeeks.org/minimum-number-deletions-make-sorted-sequence/)\n96. - [ ] &nbsp;&nbsp; [Count number of ways to jump to reach end](https://www.geeksforgeeks.org/count-number-ways-jump-reach-end/)\n97. - [ ] &nbsp;&nbsp; [Shortest Uncommon Subsequence](https://www.geeksforgeeks.org/shortest-uncommon-subsequence/)\n98. - [ ] &nbsp;&nbsp; [Minimum insertions to sort an array](https://www.geeksforgeeks.org/minimum-insertions-sort-array/)\n99. - [ ] &nbsp;&nbsp; [Dynamic Programming | Building Bridges](https://www.geeksforgeeks.org/dynamic-programming-building-bridges/)\n100. - [ ] &nbsp;&nbsp; [Check if any valid sequence is divisible by M](https://www.geeksforgeeks.org/check-valid-sequence-divisible-m/)\n101. - [ ] &nbsp;&nbsp; [Rencontres Number](https://www.geeksforgeeks.org/rencontres-number-counting-partial-derangements/)\n\n \n\n**Hard Problems :**\n\n1. - [ ] &nbsp;&nbsp; [Palindrome Partitioning](https://www.geeksforgeeks.org/dynamic-programming-set-17-palindrome-partitioning/)\n2. - [ ] &nbsp;&nbsp; [Word Wrap Problem](https://www.geeksforgeeks.org/dynamic-programming-set-18-word-wrap/)\n3. - [ ] &nbsp;&nbsp; [Maximum sum rectangle in a 2D matrix](https://www.geeksforgeeks.org/dynamic-programming-set-27-max-sum-rectangle-in-a-2d-matrix/)\n4. - [ ] &nbsp;&nbsp; [Matrix Chain Multiplication](https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/)\n5. - [ ] &nbsp;&nbsp; [Longest Geometric Progression](https://www.geeksforgeeks.org/longest-geometric-progression/)\n6. - [ ] &nbsp;&nbsp; [Find all combinations of k-bit numbers with n bits set where 1 <= n <= k in sorted order](https://www.geeksforgeeks.org/find-combinations-k-bit-numbers-n-bits-set-1-n-k-sorted-order/)\n7. - [ ] &nbsp;&nbsp; [Find if a string is interleaved of two other strings](https://www.geeksforgeeks.org/check-whether-a-given-string-is-an-interleaving-of-two-other-given-strings-set-2/)\n8. - [ ] &nbsp;&nbsp; [Longest Arithmetic Progression](https://www.geeksforgeeks.org/length-of-the-longest-arithmatic-progression-in-a-sorted-array/)\n9. - [ ] &nbsp;&nbsp; [Boolean Parenthesization Problem](https://www.geeksforgeeks.org/dynamic-programming-set-37-boolean-parenthesization-problem/)\n10. - [ ] &nbsp;&nbsp; [Mobile Numeric Keypad Problem](https://www.geeksforgeeks.org/mobile-numeric-keypad-problem/)\n11. - [ ] &nbsp;&nbsp; [Minimum Cost Polygon Triangulation](https://www.geeksforgeeks.org/minimum-cost-polygon-triangulation/)\n12. - [ ] &nbsp;&nbsp; [How to print maximum number of A’s using given four keys](https://www.geeksforgeeks.org/how-to-print-maximum-number-of-a-using-given-four-keys/)\n13. - [ ] &nbsp;&nbsp; [Smallest length string with repeated replacement of two distinct adjacent](https://www.geeksforgeeks.org/smallest-length-string-with-repeated-replacement-of-two-distinct-adjacent/)\n14. - [ ] &nbsp;&nbsp; [Collect maximum points in a grid using two traversals](https://www.geeksforgeeks.org/collect-maximum-points-in-a-grid-using-two-traversals/)\n15. - [ ] &nbsp;&nbsp; [Maximum weight transformation of a given string](https://www.geeksforgeeks.org/maximum-weight-transformation-of-a-given-string/)\n16. - [ ] &nbsp;&nbsp; [Find minimum possible size of array with given rules for removing elements](https://www.geeksforgeeks.org/find-minimum-possible-size-of-array-with-given-rules-for-removal/)\n17. - [ ] &nbsp;&nbsp; [Maximum profit by buying and selling a share at most k times](https://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-most-k-times/)\n18. - [ ] &nbsp;&nbsp; [Number of subsequences in a string divisible by n](https://www.geeksforgeeks.org/number-subsequences-string-divisible-n/)\n19. - [ ] &nbsp;&nbsp; [Maximize arr[j\\] – arr[i] + arr[l] – arr[k], such that i < j < k < l](https://www.geeksforgeeks.org/maximize-arrj-arri-arrl-arrk-such-that-i-j-k-l/)\n20. - [ ] &nbsp;&nbsp; [A Space Optimized DP solution for 0-1 Knapsack Problem](https://www.geeksforgeeks.org/space-optimized-dp-solution-0-1-knapsack-problem/)\n21. - [ ] &nbsp;&nbsp; [Longest repeating and non-overlapping substring](https://www.geeksforgeeks.org/longest-repeating-and-non-overlapping-substring/)\n22. - [ ] &nbsp;&nbsp; [All ways to add parenthesis for evaluation](https://www.geeksforgeeks.org/all-ways-to-add-parenthesis-for-evaluation/)\n23. - [ ] &nbsp;&nbsp; [Number of palindromic paths in a matrix](https://www.geeksforgeeks.org/number-of-palindromic-paths-in-a-matrix/)\n24. - [ ] &nbsp;&nbsp; [Minimum cost to sort strings using reversal operations of different costs](https://www.geeksforgeeks.org/minimum-cost-sort-strings-using-reversal-operations-different-costs/)\n25. - [ ] &nbsp;&nbsp; [Minimum number of elements which are not part of Increasing or decreasing subsequence in array](https://www.geeksforgeeks.org/minimum-number-of-elements-which-are-not-part-of-increasing-or-decreasing-subsequence-in-array/)\n26. - [ ] &nbsp;&nbsp; [Printing brackets in Matrix Chain Multiplication Problem](https://www.geeksforgeeks.org/printing-brackets-matrix-chain-multiplication-problem/)\n27. - [ ] &nbsp;&nbsp; [Check if all people can vote on two machines](https://www.geeksforgeeks.org/check-people-can-vote-two-machines/)\n28. - [ ] &nbsp;&nbsp; [Probability of Knight to remain in the chessboard](https://www.geeksforgeeks.org/probability-knight-remain-chessboard/)\n29. - [ ] &nbsp;&nbsp; [Count of AP (Arithmetic Progression) Subsequences in an array](https://www.geeksforgeeks.org/count-arithmetic-progression-subsequences-array/)\n30. - [ ] &nbsp;&nbsp; [Number of subsequences of the form a^i b^j c^k](https://www.geeksforgeeks.org/number-subsequences-form-ai-bj-ck/)\n31. - [ ] &nbsp;&nbsp; [Count ways to increase LCS length of two strings by one](https://www.geeksforgeeks.org/count-ways-increase-lcs-length-two-strings-one/)\n32. - [ ] &nbsp;&nbsp; [Count of arrays in which all adjacent elements are such that one of them divide the another](https://www.geeksforgeeks.org/count-arrays-adjacent-elements-one-divide-another/)\n33. - [ ] &nbsp;&nbsp; [Dynamic Programming on Trees](https://www.geeksforgeeks.org/dynamic-programming-trees-set-2/)\n34. - [ ] &nbsp;&nbsp; [Check whether row or column swaps produce maximum size binary sub-matrix with all 1s](https://www.geeksforgeeks.org/check-whether-row-column-swap-produces-maximum-size-binary-sub-matrix-1s/)\n\n ","source":"_posts/alg/DynamicProgramming/题集.md","raw":"---\ntitle: 动态规划题集\ndate: 2018-08-29 21:18:44\ncategories:\n- alg\ntags:\n- 动态规划\n- 题集\n---\n\n摘录：https://www.geeksforgeeks.org/dynamic-programming/\n\n\n\n[‘Recent Articles’ on Dynamic Programming](https://www.geeksforgeeks.org/category/algorithm/dynamic-programming/)\n\n**Topics:**\n\n- [Basic Concepts](https://www.geeksforgeeks.org/dynamic-programming/#concepts)\n- [Advanced Concepts](https://www.geeksforgeeks.org/dynamic-programming/#advanced)\n- [Basic Problems](https://www.geeksforgeeks.org/dynamic-programming/#basicProblems)\n\n- [Intermediate Problems](https://www.geeksforgeeks.org/dynamic-programming/#mediumProblems)\n- [Hard Problems](https://www.geeksforgeeks.org/dynamic-programming/#hardProblems)\n- [Quick Links](https://www.geeksforgeeks.org/dynamic-programming/#quick)\n\n**Basic Concepts:**\n\n1. [Overlapping Subproblems Property](https://www.geeksforgeeks.org/dynamic-programming-set-1/)\n2. [Optimal Substructure Property](https://www.geeksforgeeks.org/dynamic-programming-set-2-optimal-substructure-property/)\n3. [How to solve a Dynamic Programming Problem ?](https://www.geeksforgeeks.org/solve-dynamic-programming-problem/)\n4. [Tabulation vs Memoizatation](https://www.geeksforgeeks.org/tabulation-vs-memoizatation/)\n\n**Advanced Concepts :**\n\n1. [Bitmasking and Dynamic Programming | Set 1](https://www.geeksforgeeks.org/bitmasking-and-dynamic-programming-set-1-count-ways-to-assign-unique-cap-to-every-person/)\n2. [Digit DP | Introduction](https://www.geeksforgeeks.org/digit-dp-introduction/)\n\n\n\n**Basic Problems :**\n\n1. - [x] &nbsp;&nbsp; [Fibonacci numbers](https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/)\n2. - [ ] &nbsp;&nbsp; [Binomial Coefficient](https://www.geeksforgeeks.org/dynamic-programming-set-9-binomial-coefficient/)\n3. - [ ] &nbsp;&nbsp; [Longest Common Subsequence](https://www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/)\n4. - [ ] &nbsp;&nbsp; [Longest Repeated Subsequence](https://www.geeksforgeeks.org/longest-repeated-subsequence/)\n5. - [ ] &nbsp;&nbsp; [Largest Sum Contiguous Subarray](https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/)\n6. - [ ] &nbsp;&nbsp; [Ugly numbers](https://www.geeksforgeeks.org/ugly-numbers/)\n7. - [ ] &nbsp;&nbsp; [Maximum size square sub-matrix with all 1s](https://www.geeksforgeeks.org/maximum-size-sub-matrix-with-all-1s-in-a-binary-matrix/)\n8. - [ ] &nbsp;&nbsp; [Longest Increasing Subsequence](https://www.geeksforgeeks.org/dynamic-programming-set-3-longest-increasing-subsequence/)\n9. - [ ] &nbsp;&nbsp; [Min Cost Path](https://www.geeksforgeeks.org/dynamic-programming-set-6-min-cost-path/)\n10. - [ ] &nbsp;&nbsp; [Coin change problem](https://www.geeksforgeeks.org/dynamic-programming-set-7-coin-change/)\n11. - [ ] &nbsp;&nbsp; [Minimum number of edits ( operations ) require to convert string 1 to string 2](https://www.geeksforgeeks.org/dynamic-programming-set-5-edit-distance/)\n12. - [ ] &nbsp;&nbsp; [Cutting a Rod](https://www.geeksforgeeks.org/dynamic-programming-set-13-cutting-a-rod/)\n13. - [ ] &nbsp;&nbsp; [Subset Sum Problem](https://www.geeksforgeeks.org/dynamic-programming-subset-sum-problem/)\n14. - [ ] &nbsp;&nbsp; [Minimum number of jumps to reach end](https://www.geeksforgeeks.org/minimum-number-of-jumps-to-reach-end-of-a-given-array/)\n15. - [ ] &nbsp;&nbsp; [Assembly line scheduling](https://www.geeksforgeeks.org/dynamic-programming-set-34-assembly-line-scheduling/)\n16. - [ ] &nbsp;&nbsp; [Maximum Sum Increasing Subsequence](https://www.geeksforgeeks.org/dynamic-programming-set-14-maximum-sum-increasing-subsequence/)\n17. - [ ] &nbsp;&nbsp; [Maximum Length Chain of Pairs](https://www.geeksforgeeks.org/dynamic-programming-set-20-maximum-length-chain-of-pairs/)\n18. - [ ] &nbsp;&nbsp; [Longest Common Substring](https://www.geeksforgeeks.org/longest-common-substring/)\n19. - [ ] &nbsp;&nbsp; [Count all possible paths from top left to bottom right of a mXn matrix](https://www.geeksforgeeks.org/count-possible-paths-top-left-bottom-right-nxm-matrix/)\n20. - [ ] &nbsp;&nbsp; [nth Catalan Number](https://www.geeksforgeeks.org/program-nth-catalan-number/)\n21. - [ ] &nbsp;&nbsp; [Count number of ways to reach a given score in a game](https://www.geeksforgeeks.org/count-number-ways-reach-given-score-game/)\n22. - [ ] &nbsp;&nbsp; [Tiling Problem](https://www.geeksforgeeks.org/tiling-problem/)\n23. - [ ] &nbsp;&nbsp; [Count even length binary sequences with same sum of first and second half bits](https://www.geeksforgeeks.org/count-even-length-binary-sequences-with-same-sum-of-first-and-second-half-bits/)\n24. - [ ] &nbsp;&nbsp; [Find number of solutions of a linear equation of n variables](https://www.geeksforgeeks.org/find-number-of-solutions-of-a-linear-equation-of-n-variables/)\n25. - [ ] &nbsp;&nbsp; [Bell Numbers (Number of ways to Partition a Set)](https://www.geeksforgeeks.org/bell-numbers-number-of-ways-to-partition-a-set/)\n26. - [ ] &nbsp;&nbsp; [Compute nCr % p](https://www.geeksforgeeks.org/compute-ncr-p-set-1-introduction-and-dynamic-programming-solution/)\n27. - [ ] &nbsp;&nbsp; [Permutation Coefficient](https://www.geeksforgeeks.org/permutation-coefficient/)\n28. - [ ] &nbsp;&nbsp; [Count number of ways to fill a “n x 4” grid using “1 x 4” tiles](https://www.geeksforgeeks.org/count-number-of-ways-to-fill-a-n-x-4-grid-using-1-x-4-tiles/)\n29. - [ ] &nbsp;&nbsp; [A Space Optimized Solution of LCS](https://www.geeksforgeeks.org/space-optimized-solution-lcs/)\n30. - [ ] &nbsp;&nbsp; [Find maximum length Snake sequence](https://www.geeksforgeeks.org/find-maximum-length-snake-sequence/)\n31. - [ ] &nbsp;&nbsp; [Minimum cost to fill given weight in a bag](https://www.geeksforgeeks.org/minimum-cost-to-fill-given-weight-in-a-bag/)\n32. - [ ] &nbsp;&nbsp; [Choice of area](https://www.geeksforgeeks.org/game-theory-choice-area/)\n33. - [ ] &nbsp;&nbsp; [Maximum weight path ending at any element of last row in a matrix](https://www.geeksforgeeks.org/maximum-weight-path-ending-element-last-row-matrix/)\n34. - [ ] &nbsp;&nbsp; [Recursively break a number in 3 parts to get maximum sum](https://www.geeksforgeeks.org/recursively-break-number-3-parts-get-maximum-sum/)\n35. - [ ] &nbsp;&nbsp; [Path with maximum average value](https://www.geeksforgeeks.org/path-maximum-average-value/)\n36. - [ ] &nbsp;&nbsp; [Maximum sum of pairs with specific difference](https://www.geeksforgeeks.org/maximum-sum-pairs-specific-difference/)\n37. - [ ] &nbsp;&nbsp; [Maximum subsequence sum such that no three are consecutive](https://www.geeksforgeeks.org/maximum-subsequence-sum-such-that-no-three-are-consecutive/)\n38. - [ ] &nbsp;&nbsp; [Longest subsequence such that difference between adjacents is one](https://www.geeksforgeeks.org/longest-subsequence-such-that-difference-between-adjacents-is-one/)\n39. - [ ] &nbsp;&nbsp; [Maximum path sum for each position with jumps under divisibility condition](https://www.geeksforgeeks.org/maximum-path-sum-position-jumps-divisibility-condition/)\n40. - [ ] &nbsp;&nbsp; [Maximum sum Bi-tonic Sub-sequence](https://www.geeksforgeeks.org/maximum-sum-bi-tonic-sub-sequence/)\n41. - [ ] &nbsp;&nbsp; [LCS (Longest Common Subsequence) of three strings](https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/)\n42. - [ ] &nbsp;&nbsp; [Maximum path sum in a triangle](https://www.geeksforgeeks.org/maximum-path-sum-triangle/)\n43. - [ ] &nbsp;&nbsp; [Friends Pairing Problem](https://www.geeksforgeeks.org/friends-pairing-problem/)\n44. - [ ] &nbsp;&nbsp; [Size of array after repeated deletion of LIS](https://www.geeksforgeeks.org/size-array-repeated-deletion-lis/)\n45. - [ ] &nbsp;&nbsp; [Minimum steps to minimize n as per given condition](https://www.geeksforgeeks.org/minimum-steps-minimize-n-per-given-condition/)\n46. - [ ] &nbsp;&nbsp; [Maximum path sum that starting with any cell of 0-th row and ending with any cell of (N-1)-th row](https://www.geeksforgeeks.org/maximum-path-sum-starting-cell-0-th-row-ending-cell-n-1-th-row/)\n47. - [ ] &nbsp;&nbsp; [Gold Mine Problem](https://www.geeksforgeeks.org/gold-mine-problem/)\n48. - [ ] &nbsp;&nbsp; [Find number of endless points](https://www.geeksforgeeks.org/find-number-endless-points/)\n49. - [ ] &nbsp;&nbsp; [Perfect Sum Problem (Print all subsets with given sum)](https://www.geeksforgeeks.org/perfect-sum-problem-print-subsets-given-sum/)\n50. - [ ] &nbsp;&nbsp; [Maximum sum of a path in a Right Number Triangle](https://www.geeksforgeeks.org/maximum-sum-path-right-number-triangle/)\n51. - [ ] &nbsp;&nbsp; [Subset with sum divisible by m](https://www.geeksforgeeks.org/subset-sum-divisible-m/)\n\n\n\n**Intermediate Problems :**\n\n1. - [ ] &nbsp;&nbsp; [0-1 Knapsack Problem](https://www.geeksforgeeks.org/dynamic-programming-set-10-0-1-knapsack-problem/)\n2. - [ ] &nbsp;&nbsp; [Length of the longest substring without repeating characters](https://www.geeksforgeeks.org/length-of-the-longest-substring-without-repeating-characters/)\n3. - [ ] &nbsp;&nbsp; [Count number of ways to reach destination in a Maze](https://www.geeksforgeeks.org/count-number-ways-reach-destination-maze/)\n4. - [ ] &nbsp;&nbsp; [Super Ugly Number (Number whose prime factors are in given set)](https://www.geeksforgeeks.org/super-ugly-number-number-whose-prime-factors-given-set/)\n5. - [ ] &nbsp;&nbsp; [Count number of ways to partition a set into k subsets](https://www.geeksforgeeks.org/count-number-of-ways-to-partition-a-set-into-k-subsets/)\n6. - [ ] &nbsp;&nbsp; [Longest Palindromic Subsequence](https://www.geeksforgeeks.org/dynamic-programming-set-12-longest-palindromic-subsequence/)\n7. - [ ] &nbsp;&nbsp; [Egg Dropping Puzzle](https://www.geeksforgeeks.org/dynamic-programming-set-11-egg-dropping-puzzle/)\n8. - [ ] &nbsp;&nbsp; [Weighted job scheduling](https://www.geeksforgeeks.org/weighted-job-scheduling/)\n9. - [ ] &nbsp;&nbsp; [Longest Bitonic Subsequence](https://www.geeksforgeeks.org/dynamic-programming-set-15-longest-bitonic-subsequence/)\n10. - [ ] &nbsp;&nbsp; [Floyd Warshall Algorithm](https://www.geeksforgeeks.org/dynamic-programming-set-16-floyd-warshall-algorithm/)\n11. - [ ] &nbsp;&nbsp; [Partition Problem](https://www.geeksforgeeks.org/dynamic-programming-set-18-partition-problem/)\n12. - [ ] &nbsp;&nbsp; [Variations of LIS](https://www.geeksforgeeks.org/dynamic-programming-set-14-variations-of-lis/)\n13. - [ ] &nbsp;&nbsp; [Box-Stacking Problem](https://www.geeksforgeeks.org/dynamic-programming-set-21-box-stacking-problem/)\n14. - [ ] &nbsp;&nbsp; [Bellman–Ford Algorithm](https://www.geeksforgeeks.org/dynamic-programming-set-23-bellman-ford-algorithm/)\n15. - [ ] &nbsp;&nbsp; [Optimal Binary Search Tree](https://www.geeksforgeeks.org/dynamic-programming-set-24-optimal-binary-search-tree/)\n16. - [ ] &nbsp;&nbsp; [Largest Independent Set Problem](https://www.geeksforgeeks.org/largest-independent-set-problem/)\n17. - [ ] &nbsp;&nbsp; [Minimum insertions to form a palindrome](https://www.geeksforgeeks.org/dynamic-programming-set-28-minimum-insertions-to-form-a-palindrome/)\n18. - [ ] &nbsp;&nbsp; [Minimum number of deletions to make a string palindrome](https://www.geeksforgeeks.org/minimum-number-deletions-make-string-palindrome/)\n19. - [ ] &nbsp;&nbsp; [Maximum Product Cutting](https://www.geeksforgeeks.org/dynamic-programming-set-36-cut-a-rope-to-maximize-product/)\n20. - [ ] &nbsp;&nbsp; [Clustering/Partitioning an array such that sum of square differences is minimum](https://www.geeksforgeeks.org/clusteringpartitioning-an-array-such-that-sum-of-square-differences-is-minimum/)\n21. - [ ] &nbsp;&nbsp; [Maximum decimal value path in a binary matrix](https://www.geeksforgeeks.org/maximum-decimal-value-path-in-a-binary-matrix/)\n22. - [ ] &nbsp;&nbsp; [Count Derangements (Permutation such that no element appears in its original position)](https://www.geeksforgeeks.org/count-derangements-permutation-such-that-no-element-appears-in-its-original-position/)\n23. - [ ] &nbsp;&nbsp; [Dice Throw Problem](https://www.geeksforgeeks.org/dice-throw-problem/)\n24. - [ ] &nbsp;&nbsp; [Optimal Strategy for a game](https://www.geeksforgeeks.org/dynamic-programming-set-31-optimal-strategy-for-a-game/)\n25. - [ ] &nbsp;&nbsp; [Word Break Problem](https://www.geeksforgeeks.org/dynamic-programming-set-32-word-break-problem/)\n26. - [ ] &nbsp;&nbsp; [Remove minimum elements from either side such that 2*min becomes more than max](https://www.geeksforgeeks.org/remove-minimum-elements-either-side-2min-max/)\n27. - [ ] &nbsp;&nbsp; [Count number of binary strings without consecutive 1’s](https://www.geeksforgeeks.org/count-number-binary-strings-without-consecutive-1s/)\n28. - [ ] &nbsp;&nbsp; [Count Possible Decodings of a given Digit Sequence](https://www.geeksforgeeks.org/count-possible-decodings-given-digit-sequence/)\n29. - [ ] &nbsp;&nbsp; [Count all possible walks from a source to a destination with exactly k edges](https://www.geeksforgeeks.org/count-possible-paths-source-destination-exactly-k-edges/)\n30. - [ ] &nbsp;&nbsp; [Shortest path with exactly k edges in a directed and weighted graph](https://www.geeksforgeeks.org/shortest-path-exactly-k-edges-directed-weighted-graph/)\n31. - [ ] &nbsp;&nbsp; [Longest Even Length Substring such that Sum of First and Second Half is same](https://www.geeksforgeeks.org/longest-even-length-substring-sum-first-second-half/)\n32. - [ ] &nbsp;&nbsp; [Vertex Cover Problem](https://www.geeksforgeeks.org/vertex-cover-problem-set-2-dynamic-programming-solution-tree/)\n33. - [ ] &nbsp;&nbsp; [Find the minimum cost to reach destination using a train](https://www.geeksforgeeks.org/find-the-minimum-cost-to-reach-a-destination-where-every-station-is-connected-in-one-direction/)\n34. - [ ] &nbsp;&nbsp; [Maximum profit by buying and selling a share at most twice](https://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-most-twice/)\n35. - [ ] &nbsp;&nbsp; [Count possible ways to construct buildings](https://www.geeksforgeeks.org/count-possible-ways-to-construct-buildings/)\n36. - [ ] &nbsp;&nbsp; [Compute sum of digits in all numbers from 1 to n](https://www.geeksforgeeks.org/count-sum-of-digits-in-numbers-from-1-to-n/)\n37. - [ ] &nbsp;&nbsp; [Shortest Common Supersequence](https://www.geeksforgeeks.org/shortest-common-supersequence/)\n38. - [ ] &nbsp;&nbsp; [Minimum number of coins that make a given value](https://www.geeksforgeeks.org/find-minimum-number-of-coins-that-make-a-change/)\n39. - [ ] &nbsp;&nbsp; [Minimum number of squares whose sum equals to given number n](https://www.geeksforgeeks.org/minimum-number-of-squares-whose-sum-equals-to-given-number-n/)\n40. - [ ] &nbsp;&nbsp; [length of the longest consecutive path from a given starting character](https://www.geeksforgeeks.org/find-length-of-the-longest-consecutive-path-in-a-character-matrix/)\n41. - [ ] &nbsp;&nbsp; [Total number of non-decreasing numbers with n digits](https://www.geeksforgeeks.org/total-number-of-non-decreasing-numbers-with-n-digits/)\n42. - [ ] &nbsp;&nbsp; [Minimum Initial Points to Reach Destination](https://www.geeksforgeeks.org/minimum-positive-points-to-reach-destination/)\n43. - [ ] &nbsp;&nbsp; [Count of n digit numbers whose sum of digits equals to given sum](https://www.geeksforgeeks.org/count-of-n-digit-numbers-whose-sum-of-digits-equals-to-given-sum/)\n44. - [ ] &nbsp;&nbsp; [Count total number of N digit numbers such that the difference between sum of even and odd digits is 1](https://www.geeksforgeeks.org/count-total-number-of-n-digit-numbers-such-that-the-difference-between-the-sum-of-even-digits-and-odd-digits-is-1/)\n45. - [ ] &nbsp;&nbsp; [Count ways to assign unique cap to every person](https://www.geeksforgeeks.org/bitmasking-and-dynamic-programming-set-1-count-ways-to-assign-unique-cap-to-every-person/)\n46. - [ ] &nbsp;&nbsp; [Longest Repeating Subsequence](https://www.geeksforgeeks.org/longest-repeating-subsequence/)\n47. - [ ] &nbsp;&nbsp; [Find the longest path in a matrix with given constraints](https://www.geeksforgeeks.org/find-the-longest-path-in-a-matrix-with-given-constraints/)\n48. - [ ] &nbsp;&nbsp; [Number of paths with exactly k coins](https://www.geeksforgeeks.org/number-of-paths-with-exactly-k-coins/)\n49. - [ ] &nbsp;&nbsp; [Collect maximum coins before hitting a dead end](https://www.geeksforgeeks.org/collect-maximum-coins-before-hitting-a-dead-end/)\n50. - [ ] &nbsp;&nbsp; [Count number of paths with at-most k turns](https://www.geeksforgeeks.org/count-number-of-paths-with-k-turns/)\n51. - [ ] &nbsp;&nbsp; [Partition a set into two subsets such that the difference of subset sums is minimum](https://www.geeksforgeeks.org/partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum/)\n52. - [ ] &nbsp;&nbsp; [Longest Zig-Zag Subsequence](https://www.geeksforgeeks.org/longest-zig-zag-subsequence/)\n53. - [ ] &nbsp;&nbsp; [Largest sum Zigzag sequence in a matrix](https://www.geeksforgeeks.org/largest-sum-zig-zag-sequence-in-a-matrix/)\n54. - [ ] &nbsp;&nbsp; [Count number of subsets having a particular XOR value](https://www.geeksforgeeks.org/count-number-of-subsets-having-a-particular-xor-value/)\n55. - [ ] &nbsp;&nbsp; [Weighted Job Scheduling in O(n Log n) time](https://www.geeksforgeeks.org/weighted-job-scheduling-log-n-time/)\n56. - [ ] &nbsp;&nbsp; [Ways to arrange Balls such that adjacent balls are of different types](https://www.geeksforgeeks.org/ways-to-arrange-balls-such-that-adjacent-balls-are-of-different-types/)\n57. - [ ] &nbsp;&nbsp; [Minimum time to finish tasks without skipping two consecutive](https://www.geeksforgeeks.org/minimum-time-to-finish-tasks-without-skipping-two-consecutive/)\n58. - [ ] &nbsp;&nbsp; [Find if string is K-Palindrome or not | Set 1](https://www.geeksforgeeks.org/find-if-string-is-k-palindrome-or-not/)\n59. - [ ] &nbsp;&nbsp; [Find if string is K-Palindrome or not | Set 2](https://www.geeksforgeeks.org/find-if-string-is-k-palindrome-or-not-set-2/)\n60. - [ ] &nbsp;&nbsp; [Wildcard Pattern Matching](https://www.geeksforgeeks.org/wildcard-pattern-matching/)\n61. - [ ] &nbsp;&nbsp; [Longest Common Increasing Subsequence (LCS + LIS)](https://www.geeksforgeeks.org/longest-common-increasing-subsequence-lcs-lis/)\n62. - [ ] &nbsp;&nbsp; [Printing Longest Common Subsequence | Set 2 (Printing All)](https://www.geeksforgeeks.org/printing-longest-common-subsequence-set-2-printing/)\n63. - [ ] &nbsp;&nbsp; [High-effort vs. Low-effort Tasks Problem](https://www.geeksforgeeks.org/dynamic-programming-high-effort-vs-low-effort-tasks-problem/)\n64. - [ ] &nbsp;&nbsp; [Find minimum adjustment cost of an array](https://www.geeksforgeeks.org/find-minimum-adjustment-cost-of-an-array/)\n65. - [ ] &nbsp;&nbsp; [Find Jobs involved in Weighted Job Scheduling](https://www.geeksforgeeks.org/find-jobs-involved-in-weighted-job-scheduling/)\n66. - [ ] &nbsp;&nbsp; [Minimum Cost To Make Two Strings Identical](https://www.geeksforgeeks.org/minimum-cost-make-two-strings-identical/)\n67. - [ ] &nbsp;&nbsp; [Find number of times a string occurs as a subsequence in given string](https://www.geeksforgeeks.org/find-number-times-string-occurs-given-string/)\n68. - [ ] &nbsp;&nbsp; [Count digit groupings of a number with given constraints](https://www.geeksforgeeks.org/count-groupings-number-sum-digits-every-sub-group-less-equals-immediate-right-sub-group/)\n69. - [ ] &nbsp;&nbsp; [Non-crossing lines to connect points in a circle](https://www.geeksforgeeks.org/non-crossing-lines-connect-points-circle/)\n70. - [ ] &nbsp;&nbsp; [Count Distinct Subsequences](https://www.geeksforgeeks.org/count-distinct-subsequences/)\n71. - [ ] &nbsp;&nbsp; [Find minimum sum such that one of every three consecutive elements is taken](https://www.geeksforgeeks.org/find-minimum-sum-one-every-three-consecutive-elements-taken/)\n72. - [ ] &nbsp;&nbsp; [Count distinct occurrences as a subsequence](https://www.geeksforgeeks.org/count-distinct-occurrences-as-a-subsequence/)\n73. - [ ] &nbsp;&nbsp; [Number of permutation with K inversions](https://www.geeksforgeeks.org/number-of-permutation-with-k-inversions/)\n74. - [ ] &nbsp;&nbsp; [Print all longest common sub-sequences in lexicographical order](https://www.geeksforgeeks.org/print-longest-common-sub-sequences-lexicographical-order/)\n75. - [ ] &nbsp;&nbsp; [Find all distinct subset (or subsequence) sums of an array](https://www.geeksforgeeks.org/find-distinct-subset-subsequence-sums-array/)\n76. - [ ] &nbsp;&nbsp; [Count All Palindromic Subsequence in a given String](https://www.geeksforgeeks.org/count-palindromic-subsequence-given-string/)\n77. - [ ] &nbsp;&nbsp; [Maximum sum alternating subsequence](https://www.geeksforgeeks.org/maximum-sum-alternating-subsequence-sum/)\n78. - [ ] &nbsp;&nbsp; [Sum of average of all subsets](https://www.geeksforgeeks.org/sum-average-subsets/)\n79. - [ ] &nbsp;&nbsp; [Minimum and Maximum values of an expression with * and +](https://www.geeksforgeeks.org/minimum-maximum-values-expression/)\n80. - [ ] &nbsp;&nbsp; [Minimum sum subsequence such that at least one of every four consecutive elements is picked](https://www.geeksforgeeks.org/minimum-sum-subsequence-least-one-every-four-consecutive-elements-picked/)\n81. - [ ] &nbsp;&nbsp; [Ways to write n as sum of two or more positive integers](https://www.geeksforgeeks.org/ways-to-write-n-as-sum-of-two-or-more-positive-integers/)\n82. - [ ] &nbsp;&nbsp; [Unbounded Knapsack (Repetition of items allowed)](https://www.geeksforgeeks.org/unbounded-knapsack-repetition-items-allowed/)\n83. - [ ] &nbsp;&nbsp; [Finding the maximum square sub-matrix with all equal elements](https://www.geeksforgeeks.org/finding-the-maximum-square-sub-matrix-with-all-equal-elements/)\n84. - [ ] &nbsp;&nbsp; [Find Maximum dot product of two arrays with insertion of 0’s](https://www.geeksforgeeks.org/find-maximum-dot-product-two-arrays-insertion-0s/)\n85. - [ ] &nbsp;&nbsp; [Maximum points collected by two persons allowed to meet once](https://www.geeksforgeeks.org/maximum-points-collected-by-two-persons-allowed-to-meet-once/)\n86. - [ ] &nbsp;&nbsp; [Minimum Sum Path In 3-D Array](https://www.geeksforgeeks.org/minimum-sum-path-3-d-array/)\n87. - [ ] &nbsp;&nbsp; [Count binary strings with k times appearing adjacent two set bits](https://www.geeksforgeeks.org/count-binary-strings-k-times-appearing-adjacent-two-set-bits/)\n88. - [ ] &nbsp;&nbsp; [Highway Billboard Problem](https://www.geeksforgeeks.org/highway-billboard-problem/)\n89. - [ ] &nbsp;&nbsp; [Probability of getting at least K heads in N tosses of Coins](https://www.geeksforgeeks.org/probability-getting-least-k-heads-n-tosses-coins/)\n90. - [ ] &nbsp;&nbsp; [Count of strings that can be formed using a, b and c under given constraints](https://www.geeksforgeeks.org/count-strings-can-formed-using-b-c-given-constraints/)\n91. - [ ] &nbsp;&nbsp; [Modify array to maximize sum of adjacent differences](https://www.geeksforgeeks.org/modify-array-to-maximize-sum-of-adjacent-differences/)\n92. - [ ] &nbsp;&nbsp; [Temple Offerings](https://www.geeksforgeeks.org/temple-offerings/)\n93. - [ ] &nbsp;&nbsp; [Longest alternating subsequence](https://www.geeksforgeeks.org/longest-alternating-subsequence/)\n94. - [ ] &nbsp;&nbsp; [Minimum steps to delete a string after repeated deletion of palindrome substrings](https://www.geeksforgeeks.org/minimum-steps-to-delete-a-string-after-repeated-deletion-of-palindrome-substrings/)\n95. - [ ] &nbsp;&nbsp; [Minimum number of deletions to make a sorted sequence](https://www.geeksforgeeks.org/minimum-number-deletions-make-sorted-sequence/)\n96. - [ ] &nbsp;&nbsp; [Count number of ways to jump to reach end](https://www.geeksforgeeks.org/count-number-ways-jump-reach-end/)\n97. - [ ] &nbsp;&nbsp; [Shortest Uncommon Subsequence](https://www.geeksforgeeks.org/shortest-uncommon-subsequence/)\n98. - [ ] &nbsp;&nbsp; [Minimum insertions to sort an array](https://www.geeksforgeeks.org/minimum-insertions-sort-array/)\n99. - [ ] &nbsp;&nbsp; [Dynamic Programming | Building Bridges](https://www.geeksforgeeks.org/dynamic-programming-building-bridges/)\n100. - [ ] &nbsp;&nbsp; [Check if any valid sequence is divisible by M](https://www.geeksforgeeks.org/check-valid-sequence-divisible-m/)\n101. - [ ] &nbsp;&nbsp; [Rencontres Number](https://www.geeksforgeeks.org/rencontres-number-counting-partial-derangements/)\n\n \n\n**Hard Problems :**\n\n1. - [ ] &nbsp;&nbsp; [Palindrome Partitioning](https://www.geeksforgeeks.org/dynamic-programming-set-17-palindrome-partitioning/)\n2. - [ ] &nbsp;&nbsp; [Word Wrap Problem](https://www.geeksforgeeks.org/dynamic-programming-set-18-word-wrap/)\n3. - [ ] &nbsp;&nbsp; [Maximum sum rectangle in a 2D matrix](https://www.geeksforgeeks.org/dynamic-programming-set-27-max-sum-rectangle-in-a-2d-matrix/)\n4. - [ ] &nbsp;&nbsp; [Matrix Chain Multiplication](https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/)\n5. - [ ] &nbsp;&nbsp; [Longest Geometric Progression](https://www.geeksforgeeks.org/longest-geometric-progression/)\n6. - [ ] &nbsp;&nbsp; [Find all combinations of k-bit numbers with n bits set where 1 <= n <= k in sorted order](https://www.geeksforgeeks.org/find-combinations-k-bit-numbers-n-bits-set-1-n-k-sorted-order/)\n7. - [ ] &nbsp;&nbsp; [Find if a string is interleaved of two other strings](https://www.geeksforgeeks.org/check-whether-a-given-string-is-an-interleaving-of-two-other-given-strings-set-2/)\n8. - [ ] &nbsp;&nbsp; [Longest Arithmetic Progression](https://www.geeksforgeeks.org/length-of-the-longest-arithmatic-progression-in-a-sorted-array/)\n9. - [ ] &nbsp;&nbsp; [Boolean Parenthesization Problem](https://www.geeksforgeeks.org/dynamic-programming-set-37-boolean-parenthesization-problem/)\n10. - [ ] &nbsp;&nbsp; [Mobile Numeric Keypad Problem](https://www.geeksforgeeks.org/mobile-numeric-keypad-problem/)\n11. - [ ] &nbsp;&nbsp; [Minimum Cost Polygon Triangulation](https://www.geeksforgeeks.org/minimum-cost-polygon-triangulation/)\n12. - [ ] &nbsp;&nbsp; [How to print maximum number of A’s using given four keys](https://www.geeksforgeeks.org/how-to-print-maximum-number-of-a-using-given-four-keys/)\n13. - [ ] &nbsp;&nbsp; [Smallest length string with repeated replacement of two distinct adjacent](https://www.geeksforgeeks.org/smallest-length-string-with-repeated-replacement-of-two-distinct-adjacent/)\n14. - [ ] &nbsp;&nbsp; [Collect maximum points in a grid using two traversals](https://www.geeksforgeeks.org/collect-maximum-points-in-a-grid-using-two-traversals/)\n15. - [ ] &nbsp;&nbsp; [Maximum weight transformation of a given string](https://www.geeksforgeeks.org/maximum-weight-transformation-of-a-given-string/)\n16. - [ ] &nbsp;&nbsp; [Find minimum possible size of array with given rules for removing elements](https://www.geeksforgeeks.org/find-minimum-possible-size-of-array-with-given-rules-for-removal/)\n17. - [ ] &nbsp;&nbsp; [Maximum profit by buying and selling a share at most k times](https://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-most-k-times/)\n18. - [ ] &nbsp;&nbsp; [Number of subsequences in a string divisible by n](https://www.geeksforgeeks.org/number-subsequences-string-divisible-n/)\n19. - [ ] &nbsp;&nbsp; [Maximize arr[j\\] – arr[i] + arr[l] – arr[k], such that i < j < k < l](https://www.geeksforgeeks.org/maximize-arrj-arri-arrl-arrk-such-that-i-j-k-l/)\n20. - [ ] &nbsp;&nbsp; [A Space Optimized DP solution for 0-1 Knapsack Problem](https://www.geeksforgeeks.org/space-optimized-dp-solution-0-1-knapsack-problem/)\n21. - [ ] &nbsp;&nbsp; [Longest repeating and non-overlapping substring](https://www.geeksforgeeks.org/longest-repeating-and-non-overlapping-substring/)\n22. - [ ] &nbsp;&nbsp; [All ways to add parenthesis for evaluation](https://www.geeksforgeeks.org/all-ways-to-add-parenthesis-for-evaluation/)\n23. - [ ] &nbsp;&nbsp; [Number of palindromic paths in a matrix](https://www.geeksforgeeks.org/number-of-palindromic-paths-in-a-matrix/)\n24. - [ ] &nbsp;&nbsp; [Minimum cost to sort strings using reversal operations of different costs](https://www.geeksforgeeks.org/minimum-cost-sort-strings-using-reversal-operations-different-costs/)\n25. - [ ] &nbsp;&nbsp; [Minimum number of elements which are not part of Increasing or decreasing subsequence in array](https://www.geeksforgeeks.org/minimum-number-of-elements-which-are-not-part-of-increasing-or-decreasing-subsequence-in-array/)\n26. - [ ] &nbsp;&nbsp; [Printing brackets in Matrix Chain Multiplication Problem](https://www.geeksforgeeks.org/printing-brackets-matrix-chain-multiplication-problem/)\n27. - [ ] &nbsp;&nbsp; [Check if all people can vote on two machines](https://www.geeksforgeeks.org/check-people-can-vote-two-machines/)\n28. - [ ] &nbsp;&nbsp; [Probability of Knight to remain in the chessboard](https://www.geeksforgeeks.org/probability-knight-remain-chessboard/)\n29. - [ ] &nbsp;&nbsp; [Count of AP (Arithmetic Progression) Subsequences in an array](https://www.geeksforgeeks.org/count-arithmetic-progression-subsequences-array/)\n30. - [ ] &nbsp;&nbsp; [Number of subsequences of the form a^i b^j c^k](https://www.geeksforgeeks.org/number-subsequences-form-ai-bj-ck/)\n31. - [ ] &nbsp;&nbsp; [Count ways to increase LCS length of two strings by one](https://www.geeksforgeeks.org/count-ways-increase-lcs-length-two-strings-one/)\n32. - [ ] &nbsp;&nbsp; [Count of arrays in which all adjacent elements are such that one of them divide the another](https://www.geeksforgeeks.org/count-arrays-adjacent-elements-one-divide-another/)\n33. - [ ] &nbsp;&nbsp; [Dynamic Programming on Trees](https://www.geeksforgeeks.org/dynamic-programming-trees-set-2/)\n34. - [ ] &nbsp;&nbsp; [Check whether row or column swaps produce maximum size binary sub-matrix with all 1s](https://www.geeksforgeeks.org/check-whether-row-column-swap-produces-maximum-size-binary-sub-matrix-1s/)\n\n ","slug":"alg/DynamicProgramming/题集","published":1,"updated":"2018-08-29T13:20:52.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgtr00128seobedseh3v","content":"<p>摘录：<a href=\"https://www.geeksforgeeks.org/dynamic-programming/\" target=\"_blank\" rel=\"noopener\">https://www.geeksforgeeks.org/dynamic-programming/</a></p>\n<p><a href=\"https://www.geeksforgeeks.org/category/algorithm/dynamic-programming/\" target=\"_blank\" rel=\"noopener\">‘Recent Articles’ on Dynamic Programming</a></p>\n<p><strong>Topics:</strong></p>\n<ul>\n<li><a href=\"https://www.geeksforgeeks.org/dynamic-programming/#concepts\" target=\"_blank\" rel=\"noopener\">Basic Concepts</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/dynamic-programming/#advanced\" target=\"_blank\" rel=\"noopener\">Advanced Concepts</a></li>\n<li><p><a href=\"https://www.geeksforgeeks.org/dynamic-programming/#basicProblems\" target=\"_blank\" rel=\"noopener\">Basic Problems</a></p>\n</li>\n<li><p><a href=\"https://www.geeksforgeeks.org/dynamic-programming/#mediumProblems\" target=\"_blank\" rel=\"noopener\">Intermediate Problems</a></p>\n</li>\n<li><a href=\"https://www.geeksforgeeks.org/dynamic-programming/#hardProblems\" target=\"_blank\" rel=\"noopener\">Hard Problems</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/dynamic-programming/#quick\" target=\"_blank\" rel=\"noopener\">Quick Links</a></li>\n</ul>\n<p><strong>Basic Concepts:</strong></p>\n<ol>\n<li><a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-1/\" target=\"_blank\" rel=\"noopener\">Overlapping Subproblems Property</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-2-optimal-substructure-property/\" target=\"_blank\" rel=\"noopener\">Optimal Substructure Property</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/solve-dynamic-programming-problem/\" target=\"_blank\" rel=\"noopener\">How to solve a Dynamic Programming Problem ?</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/tabulation-vs-memoizatation/\" target=\"_blank\" rel=\"noopener\">Tabulation vs Memoizatation</a></li>\n</ol>\n<p><strong>Advanced Concepts :</strong></p>\n<ol>\n<li><a href=\"https://www.geeksforgeeks.org/bitmasking-and-dynamic-programming-set-1-count-ways-to-assign-unique-cap-to-every-person/\" target=\"_blank\" rel=\"noopener\">Bitmasking and Dynamic Programming | Set 1</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/digit-dp-introduction/\" target=\"_blank\" rel=\"noopener\">Digit DP | Introduction</a></li>\n</ol>\n<p><strong>Basic Problems :</strong></p>\n<ol>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/\" target=\"_blank\" rel=\"noopener\">Fibonacci numbers</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-9-binomial-coefficient/\" target=\"_blank\" rel=\"noopener\">Binomial Coefficient</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest Common Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-repeated-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest Repeated Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/\" target=\"_blank\" rel=\"noopener\">Largest Sum Contiguous Subarray</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/ugly-numbers/\" target=\"_blank\" rel=\"noopener\">Ugly numbers</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-size-sub-matrix-with-all-1s-in-a-binary-matrix/\" target=\"_blank\" rel=\"noopener\">Maximum size square sub-matrix with all 1s</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-3-longest-increasing-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest Increasing Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-6-min-cost-path/\" target=\"_blank\" rel=\"noopener\">Min Cost Path</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-7-coin-change/\" target=\"_blank\" rel=\"noopener\">Coin change problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-5-edit-distance/\" target=\"_blank\" rel=\"noopener\">Minimum number of edits ( operations ) require to convert string 1 to string 2</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-13-cutting-a-rod/\" target=\"_blank\" rel=\"noopener\">Cutting a Rod</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-subset-sum-problem/\" target=\"_blank\" rel=\"noopener\">Subset Sum Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-number-of-jumps-to-reach-end-of-a-given-array/\" target=\"_blank\" rel=\"noopener\">Minimum number of jumps to reach end</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-34-assembly-line-scheduling/\" target=\"_blank\" rel=\"noopener\">Assembly line scheduling</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-14-maximum-sum-increasing-subsequence/\" target=\"_blank\" rel=\"noopener\">Maximum Sum Increasing Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-20-maximum-length-chain-of-pairs/\" target=\"_blank\" rel=\"noopener\">Maximum Length Chain of Pairs</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-common-substring/\" target=\"_blank\" rel=\"noopener\">Longest Common Substring</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-possible-paths-top-left-bottom-right-nxm-matrix/\" target=\"_blank\" rel=\"noopener\">Count all possible paths from top left to bottom right of a mXn matrix</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/program-nth-catalan-number/\" target=\"_blank\" rel=\"noopener\">nth Catalan Number</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-ways-reach-given-score-game/\" target=\"_blank\" rel=\"noopener\">Count number of ways to reach a given score in a game</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/tiling-problem/\" target=\"_blank\" rel=\"noopener\">Tiling Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-even-length-binary-sequences-with-same-sum-of-first-and-second-half-bits/\" target=\"_blank\" rel=\"noopener\">Count even length binary sequences with same sum of first and second half bits</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-number-of-solutions-of-a-linear-equation-of-n-variables/\" target=\"_blank\" rel=\"noopener\">Find number of solutions of a linear equation of n variables</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/bell-numbers-number-of-ways-to-partition-a-set/\" target=\"_blank\" rel=\"noopener\">Bell Numbers (Number of ways to Partition a Set)</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/compute-ncr-p-set-1-introduction-and-dynamic-programming-solution/\" target=\"_blank\" rel=\"noopener\">Compute nCr % p</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/permutation-coefficient/\" target=\"_blank\" rel=\"noopener\">Permutation Coefficient</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-of-ways-to-fill-a-n-x-4-grid-using-1-x-4-tiles/\" target=\"_blank\" rel=\"noopener\">Count number of ways to fill a “n x 4” grid using “1 x 4” tiles</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/space-optimized-solution-lcs/\" target=\"_blank\" rel=\"noopener\">A Space Optimized Solution of LCS</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-maximum-length-snake-sequence/\" target=\"_blank\" rel=\"noopener\">Find maximum length Snake sequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-cost-to-fill-given-weight-in-a-bag/\" target=\"_blank\" rel=\"noopener\">Minimum cost to fill given weight in a bag</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/game-theory-choice-area/\" target=\"_blank\" rel=\"noopener\">Choice of area</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-weight-path-ending-element-last-row-matrix/\" target=\"_blank\" rel=\"noopener\">Maximum weight path ending at any element of last row in a matrix</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/recursively-break-number-3-parts-get-maximum-sum/\" target=\"_blank\" rel=\"noopener\">Recursively break a number in 3 parts to get maximum sum</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/path-maximum-average-value/\" target=\"_blank\" rel=\"noopener\">Path with maximum average value</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-sum-pairs-specific-difference/\" target=\"_blank\" rel=\"noopener\">Maximum sum of pairs with specific difference</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-subsequence-sum-such-that-no-three-are-consecutive/\" target=\"_blank\" rel=\"noopener\">Maximum subsequence sum such that no three are consecutive</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-subsequence-such-that-difference-between-adjacents-is-one/\" target=\"_blank\" rel=\"noopener\">Longest subsequence such that difference between adjacents is one</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-path-sum-position-jumps-divisibility-condition/\" target=\"_blank\" rel=\"noopener\">Maximum path sum for each position with jumps under divisibility condition</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-sum-bi-tonic-sub-sequence/\" target=\"_blank\" rel=\"noopener\">Maximum sum Bi-tonic Sub-sequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\" target=\"_blank\" rel=\"noopener\">LCS (Longest Common Subsequence) of three strings</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-path-sum-triangle/\" target=\"_blank\" rel=\"noopener\">Maximum path sum in a triangle</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/friends-pairing-problem/\" target=\"_blank\" rel=\"noopener\">Friends Pairing Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/size-array-repeated-deletion-lis/\" target=\"_blank\" rel=\"noopener\">Size of array after repeated deletion of LIS</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-steps-minimize-n-per-given-condition/\" target=\"_blank\" rel=\"noopener\">Minimum steps to minimize n as per given condition</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-path-sum-starting-cell-0-th-row-ending-cell-n-1-th-row/\" target=\"_blank\" rel=\"noopener\">Maximum path sum that starting with any cell of 0-th row and ending with any cell of (N-1)-th row</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/gold-mine-problem/\" target=\"_blank\" rel=\"noopener\">Gold Mine Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-number-endless-points/\" target=\"_blank\" rel=\"noopener\">Find number of endless points</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/perfect-sum-problem-print-subsets-given-sum/\" target=\"_blank\" rel=\"noopener\">Perfect Sum Problem (Print all subsets with given sum)</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-sum-path-right-number-triangle/\" target=\"_blank\" rel=\"noopener\">Maximum sum of a path in a Right Number Triangle</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/subset-sum-divisible-m/\" target=\"_blank\" rel=\"noopener\">Subset with sum divisible by m</a></li>\n</ul>\n</li>\n</ol>\n<p><strong>Intermediate Problems :</strong></p>\n<ol>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-10-0-1-knapsack-problem/\" target=\"_blank\" rel=\"noopener\">0-1 Knapsack Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/length-of-the-longest-substring-without-repeating-characters/\" target=\"_blank\" rel=\"noopener\">Length of the longest substring without repeating characters</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-ways-reach-destination-maze/\" target=\"_blank\" rel=\"noopener\">Count number of ways to reach destination in a Maze</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/super-ugly-number-number-whose-prime-factors-given-set/\" target=\"_blank\" rel=\"noopener\">Super Ugly Number (Number whose prime factors are in given set)</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-of-ways-to-partition-a-set-into-k-subsets/\" target=\"_blank\" rel=\"noopener\">Count number of ways to partition a set into k subsets</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-12-longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest Palindromic Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-11-egg-dropping-puzzle/\" target=\"_blank\" rel=\"noopener\">Egg Dropping Puzzle</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/weighted-job-scheduling/\" target=\"_blank\" rel=\"noopener\">Weighted job scheduling</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-15-longest-bitonic-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest Bitonic Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-16-floyd-warshall-algorithm/\" target=\"_blank\" rel=\"noopener\">Floyd Warshall Algorithm</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-18-partition-problem/\" target=\"_blank\" rel=\"noopener\">Partition Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-14-variations-of-lis/\" target=\"_blank\" rel=\"noopener\">Variations of LIS</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-21-box-stacking-problem/\" target=\"_blank\" rel=\"noopener\">Box-Stacking Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-23-bellman-ford-algorithm/\" target=\"_blank\" rel=\"noopener\">Bellman–Ford Algorithm</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-24-optimal-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">Optimal Binary Search Tree</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/largest-independent-set-problem/\" target=\"_blank\" rel=\"noopener\">Largest Independent Set Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-28-minimum-insertions-to-form-a-palindrome/\" target=\"_blank\" rel=\"noopener\">Minimum insertions to form a palindrome</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-number-deletions-make-string-palindrome/\" target=\"_blank\" rel=\"noopener\">Minimum number of deletions to make a string palindrome</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-36-cut-a-rope-to-maximize-product/\" target=\"_blank\" rel=\"noopener\">Maximum Product Cutting</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/clusteringpartitioning-an-array-such-that-sum-of-square-differences-is-minimum/\" target=\"_blank\" rel=\"noopener\">Clustering/Partitioning an array such that sum of square differences is minimum</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-decimal-value-path-in-a-binary-matrix/\" target=\"_blank\" rel=\"noopener\">Maximum decimal value path in a binary matrix</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-derangements-permutation-such-that-no-element-appears-in-its-original-position/\" target=\"_blank\" rel=\"noopener\">Count Derangements (Permutation such that no element appears in its original position)</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dice-throw-problem/\" target=\"_blank\" rel=\"noopener\">Dice Throw Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-31-optimal-strategy-for-a-game/\" target=\"_blank\" rel=\"noopener\">Optimal Strategy for a game</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-32-word-break-problem/\" target=\"_blank\" rel=\"noopener\">Word Break Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/remove-minimum-elements-either-side-2min-max/\" target=\"_blank\" rel=\"noopener\">Remove minimum elements from either side such that 2*min becomes more than max</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-binary-strings-without-consecutive-1s/\" target=\"_blank\" rel=\"noopener\">Count number of binary strings without consecutive 1’s</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-possible-decodings-given-digit-sequence/\" target=\"_blank\" rel=\"noopener\">Count Possible Decodings of a given Digit Sequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-possible-paths-source-destination-exactly-k-edges/\" target=\"_blank\" rel=\"noopener\">Count all possible walks from a source to a destination with exactly k edges</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/shortest-path-exactly-k-edges-directed-weighted-graph/\" target=\"_blank\" rel=\"noopener\">Shortest path with exactly k edges in a directed and weighted graph</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-even-length-substring-sum-first-second-half/\" target=\"_blank\" rel=\"noopener\">Longest Even Length Substring such that Sum of First and Second Half is same</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/vertex-cover-problem-set-2-dynamic-programming-solution-tree/\" target=\"_blank\" rel=\"noopener\">Vertex Cover Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-the-minimum-cost-to-reach-a-destination-where-every-station-is-connected-in-one-direction/\" target=\"_blank\" rel=\"noopener\">Find the minimum cost to reach destination using a train</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-most-twice/\" target=\"_blank\" rel=\"noopener\">Maximum profit by buying and selling a share at most twice</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-possible-ways-to-construct-buildings/\" target=\"_blank\" rel=\"noopener\">Count possible ways to construct buildings</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-sum-of-digits-in-numbers-from-1-to-n/\" target=\"_blank\" rel=\"noopener\">Compute sum of digits in all numbers from 1 to n</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/shortest-common-supersequence/\" target=\"_blank\" rel=\"noopener\">Shortest Common Supersequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-minimum-number-of-coins-that-make-a-change/\" target=\"_blank\" rel=\"noopener\">Minimum number of coins that make a given value</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-number-of-squares-whose-sum-equals-to-given-number-n/\" target=\"_blank\" rel=\"noopener\">Minimum number of squares whose sum equals to given number n</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-length-of-the-longest-consecutive-path-in-a-character-matrix/\" target=\"_blank\" rel=\"noopener\">length of the longest consecutive path from a given starting character</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/total-number-of-non-decreasing-numbers-with-n-digits/\" target=\"_blank\" rel=\"noopener\">Total number of non-decreasing numbers with n digits</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-positive-points-to-reach-destination/\" target=\"_blank\" rel=\"noopener\">Minimum Initial Points to Reach Destination</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-of-n-digit-numbers-whose-sum-of-digits-equals-to-given-sum/\" target=\"_blank\" rel=\"noopener\">Count of n digit numbers whose sum of digits equals to given sum</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-total-number-of-n-digit-numbers-such-that-the-difference-between-the-sum-of-even-digits-and-odd-digits-is-1/\" target=\"_blank\" rel=\"noopener\">Count total number of N digit numbers such that the difference between sum of even and odd digits is 1</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/bitmasking-and-dynamic-programming-set-1-count-ways-to-assign-unique-cap-to-every-person/\" target=\"_blank\" rel=\"noopener\">Count ways to assign unique cap to every person</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-repeating-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest Repeating Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-the-longest-path-in-a-matrix-with-given-constraints/\" target=\"_blank\" rel=\"noopener\">Find the longest path in a matrix with given constraints</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/number-of-paths-with-exactly-k-coins/\" target=\"_blank\" rel=\"noopener\">Number of paths with exactly k coins</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/collect-maximum-coins-before-hitting-a-dead-end/\" target=\"_blank\" rel=\"noopener\">Collect maximum coins before hitting a dead end</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-of-paths-with-k-turns/\" target=\"_blank\" rel=\"noopener\">Count number of paths with at-most k turns</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum/\" target=\"_blank\" rel=\"noopener\">Partition a set into two subsets such that the difference of subset sums is minimum</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-zig-zag-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest Zig-Zag Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/largest-sum-zig-zag-sequence-in-a-matrix/\" target=\"_blank\" rel=\"noopener\">Largest sum Zigzag sequence in a matrix</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-of-subsets-having-a-particular-xor-value/\" target=\"_blank\" rel=\"noopener\">Count number of subsets having a particular XOR value</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/weighted-job-scheduling-log-n-time/\" target=\"_blank\" rel=\"noopener\">Weighted Job Scheduling in O(n Log n) time</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/ways-to-arrange-balls-such-that-adjacent-balls-are-of-different-types/\" target=\"_blank\" rel=\"noopener\">Ways to arrange Balls such that adjacent balls are of different types</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-time-to-finish-tasks-without-skipping-two-consecutive/\" target=\"_blank\" rel=\"noopener\">Minimum time to finish tasks without skipping two consecutive</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-if-string-is-k-palindrome-or-not/\" target=\"_blank\" rel=\"noopener\">Find if string is K-Palindrome or not | Set 1</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-if-string-is-k-palindrome-or-not-set-2/\" target=\"_blank\" rel=\"noopener\">Find if string is K-Palindrome or not | Set 2</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/wildcard-pattern-matching/\" target=\"_blank\" rel=\"noopener\">Wildcard Pattern Matching</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-common-increasing-subsequence-lcs-lis/\" target=\"_blank\" rel=\"noopener\">Longest Common Increasing Subsequence (LCS + LIS)</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/printing-longest-common-subsequence-set-2-printing/\" target=\"_blank\" rel=\"noopener\">Printing Longest Common Subsequence | Set 2 (Printing All)</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-high-effort-vs-low-effort-tasks-problem/\" target=\"_blank\" rel=\"noopener\">High-effort vs. Low-effort Tasks Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-minimum-adjustment-cost-of-an-array/\" target=\"_blank\" rel=\"noopener\">Find minimum adjustment cost of an array</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-jobs-involved-in-weighted-job-scheduling/\" target=\"_blank\" rel=\"noopener\">Find Jobs involved in Weighted Job Scheduling</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-cost-make-two-strings-identical/\" target=\"_blank\" rel=\"noopener\">Minimum Cost To Make Two Strings Identical</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-number-times-string-occurs-given-string/\" target=\"_blank\" rel=\"noopener\">Find number of times a string occurs as a subsequence in given string</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-groupings-number-sum-digits-every-sub-group-less-equals-immediate-right-sub-group/\" target=\"_blank\" rel=\"noopener\">Count digit groupings of a number with given constraints</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/non-crossing-lines-connect-points-circle/\" target=\"_blank\" rel=\"noopener\">Non-crossing lines to connect points in a circle</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-distinct-subsequences/\" target=\"_blank\" rel=\"noopener\">Count Distinct Subsequences</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-minimum-sum-one-every-three-consecutive-elements-taken/\" target=\"_blank\" rel=\"noopener\">Find minimum sum such that one of every three consecutive elements is taken</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-distinct-occurrences-as-a-subsequence/\" target=\"_blank\" rel=\"noopener\">Count distinct occurrences as a subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/number-of-permutation-with-k-inversions/\" target=\"_blank\" rel=\"noopener\">Number of permutation with K inversions</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/print-longest-common-sub-sequences-lexicographical-order/\" target=\"_blank\" rel=\"noopener\">Print all longest common sub-sequences in lexicographical order</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-distinct-subset-subsequence-sums-array/\" target=\"_blank\" rel=\"noopener\">Find all distinct subset (or subsequence) sums of an array</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-palindromic-subsequence-given-string/\" target=\"_blank\" rel=\"noopener\">Count All Palindromic Subsequence in a given String</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-sum-alternating-subsequence-sum/\" target=\"_blank\" rel=\"noopener\">Maximum sum alternating subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/sum-average-subsets/\" target=\"_blank\" rel=\"noopener\">Sum of average of all subsets</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-maximum-values-expression/\" target=\"_blank\" rel=\"noopener\">Minimum and Maximum values of an expression with * and +</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-sum-subsequence-least-one-every-four-consecutive-elements-picked/\" target=\"_blank\" rel=\"noopener\">Minimum sum subsequence such that at least one of every four consecutive elements is picked</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/ways-to-write-n-as-sum-of-two-or-more-positive-integers/\" target=\"_blank\" rel=\"noopener\">Ways to write n as sum of two or more positive integers</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/unbounded-knapsack-repetition-items-allowed/\" target=\"_blank\" rel=\"noopener\">Unbounded Knapsack (Repetition of items allowed)</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/finding-the-maximum-square-sub-matrix-with-all-equal-elements/\" target=\"_blank\" rel=\"noopener\">Finding the maximum square sub-matrix with all equal elements</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-maximum-dot-product-two-arrays-insertion-0s/\" target=\"_blank\" rel=\"noopener\">Find Maximum dot product of two arrays with insertion of 0’s</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-points-collected-by-two-persons-allowed-to-meet-once/\" target=\"_blank\" rel=\"noopener\">Maximum points collected by two persons allowed to meet once</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-sum-path-3-d-array/\" target=\"_blank\" rel=\"noopener\">Minimum Sum Path In 3-D Array</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-binary-strings-k-times-appearing-adjacent-two-set-bits/\" target=\"_blank\" rel=\"noopener\">Count binary strings with k times appearing adjacent two set bits</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/highway-billboard-problem/\" target=\"_blank\" rel=\"noopener\">Highway Billboard Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/probability-getting-least-k-heads-n-tosses-coins/\" target=\"_blank\" rel=\"noopener\">Probability of getting at least K heads in N tosses of Coins</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-strings-can-formed-using-b-c-given-constraints/\" target=\"_blank\" rel=\"noopener\">Count of strings that can be formed using a, b and c under given constraints</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/modify-array-to-maximize-sum-of-adjacent-differences/\" target=\"_blank\" rel=\"noopener\">Modify array to maximize sum of adjacent differences</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/temple-offerings/\" target=\"_blank\" rel=\"noopener\">Temple Offerings</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-alternating-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest alternating subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-steps-to-delete-a-string-after-repeated-deletion-of-palindrome-substrings/\" target=\"_blank\" rel=\"noopener\">Minimum steps to delete a string after repeated deletion of palindrome substrings</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-number-deletions-make-sorted-sequence/\" target=\"_blank\" rel=\"noopener\">Minimum number of deletions to make a sorted sequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-ways-jump-reach-end/\" target=\"_blank\" rel=\"noopener\">Count number of ways to jump to reach end</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/shortest-uncommon-subsequence/\" target=\"_blank\" rel=\"noopener\">Shortest Uncommon Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-insertions-sort-array/\" target=\"_blank\" rel=\"noopener\">Minimum insertions to sort an array</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-building-bridges/\" target=\"_blank\" rel=\"noopener\">Dynamic Programming | Building Bridges</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/check-valid-sequence-divisible-m/\" target=\"_blank\" rel=\"noopener\">Check if any valid sequence is divisible by M</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/rencontres-number-counting-partial-derangements/\" target=\"_blank\" rel=\"noopener\">Rencontres Number</a></li>\n</ul>\n</li>\n</ol>\n<p><strong>Hard Problems :</strong></p>\n<ol>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-17-palindrome-partitioning/\" target=\"_blank\" rel=\"noopener\">Palindrome Partitioning</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-18-word-wrap/\" target=\"_blank\" rel=\"noopener\">Word Wrap Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-27-max-sum-rectangle-in-a-2d-matrix/\" target=\"_blank\" rel=\"noopener\">Maximum sum rectangle in a 2D matrix</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\" target=\"_blank\" rel=\"noopener\">Matrix Chain Multiplication</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-geometric-progression/\" target=\"_blank\" rel=\"noopener\">Longest Geometric Progression</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-combinations-k-bit-numbers-n-bits-set-1-n-k-sorted-order/\" target=\"_blank\" rel=\"noopener\">Find all combinations of k-bit numbers with n bits set where 1 &lt;= n &lt;= k in sorted order</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/check-whether-a-given-string-is-an-interleaving-of-two-other-given-strings-set-2/\" target=\"_blank\" rel=\"noopener\">Find if a string is interleaved of two other strings</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/length-of-the-longest-arithmatic-progression-in-a-sorted-array/\" target=\"_blank\" rel=\"noopener\">Longest Arithmetic Progression</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-37-boolean-parenthesization-problem/\" target=\"_blank\" rel=\"noopener\">Boolean Parenthesization Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/mobile-numeric-keypad-problem/\" target=\"_blank\" rel=\"noopener\">Mobile Numeric Keypad Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-cost-polygon-triangulation/\" target=\"_blank\" rel=\"noopener\">Minimum Cost Polygon Triangulation</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/how-to-print-maximum-number-of-a-using-given-four-keys/\" target=\"_blank\" rel=\"noopener\">How to print maximum number of A’s using given four keys</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/smallest-length-string-with-repeated-replacement-of-two-distinct-adjacent/\" target=\"_blank\" rel=\"noopener\">Smallest length string with repeated replacement of two distinct adjacent</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/collect-maximum-points-in-a-grid-using-two-traversals/\" target=\"_blank\" rel=\"noopener\">Collect maximum points in a grid using two traversals</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-weight-transformation-of-a-given-string/\" target=\"_blank\" rel=\"noopener\">Maximum weight transformation of a given string</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-minimum-possible-size-of-array-with-given-rules-for-removal/\" target=\"_blank\" rel=\"noopener\">Find minimum possible size of array with given rules for removing elements</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-most-k-times/\" target=\"_blank\" rel=\"noopener\">Maximum profit by buying and selling a share at most k times</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/number-subsequences-string-divisible-n/\" target=\"_blank\" rel=\"noopener\">Number of subsequences in a string divisible by n</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximize-arrj-arri-arrl-arrk-such-that-i-j-k-l/\" target=\"_blank\" rel=\"noopener\">Maximize arr[j] – arr[i] + arr[l] – arr[k], such that i &lt; j &lt; k &lt; l</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/space-optimized-dp-solution-0-1-knapsack-problem/\" target=\"_blank\" rel=\"noopener\">A Space Optimized DP solution for 0-1 Knapsack Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-repeating-and-non-overlapping-substring/\" target=\"_blank\" rel=\"noopener\">Longest repeating and non-overlapping substring</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/all-ways-to-add-parenthesis-for-evaluation/\" target=\"_blank\" rel=\"noopener\">All ways to add parenthesis for evaluation</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/number-of-palindromic-paths-in-a-matrix/\" target=\"_blank\" rel=\"noopener\">Number of palindromic paths in a matrix</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-cost-sort-strings-using-reversal-operations-different-costs/\" target=\"_blank\" rel=\"noopener\">Minimum cost to sort strings using reversal operations of different costs</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-number-of-elements-which-are-not-part-of-increasing-or-decreasing-subsequence-in-array/\" target=\"_blank\" rel=\"noopener\">Minimum number of elements which are not part of Increasing or decreasing subsequence in array</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/printing-brackets-matrix-chain-multiplication-problem/\" target=\"_blank\" rel=\"noopener\">Printing brackets in Matrix Chain Multiplication Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/check-people-can-vote-two-machines/\" target=\"_blank\" rel=\"noopener\">Check if all people can vote on two machines</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/probability-knight-remain-chessboard/\" target=\"_blank\" rel=\"noopener\">Probability of Knight to remain in the chessboard</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-arithmetic-progression-subsequences-array/\" target=\"_blank\" rel=\"noopener\">Count of AP (Arithmetic Progression) Subsequences in an array</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/number-subsequences-form-ai-bj-ck/\" target=\"_blank\" rel=\"noopener\">Number of subsequences of the form a^i b^j c^k</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-ways-increase-lcs-length-two-strings-one/\" target=\"_blank\" rel=\"noopener\">Count ways to increase LCS length of two strings by one</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-arrays-adjacent-elements-one-divide-another/\" target=\"_blank\" rel=\"noopener\">Count of arrays in which all adjacent elements are such that one of them divide the another</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-trees-set-2/\" target=\"_blank\" rel=\"noopener\">Dynamic Programming on Trees</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/check-whether-row-column-swap-produces-maximum-size-binary-sub-matrix-1s/\" target=\"_blank\" rel=\"noopener\">Check whether row or column swaps produce maximum size binary sub-matrix with all 1s</a></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>摘录：<a href=\"https://www.geeksforgeeks.org/dynamic-programming/\" target=\"_blank\" rel=\"noopener\">https://www.geeksforgeeks.org/dynamic-programming/</a></p>\n<p><a href=\"https://www.geeksforgeeks.org/category/algorithm/dynamic-programming/\" target=\"_blank\" rel=\"noopener\">‘Recent Articles’ on Dynamic Programming</a></p>\n<p><strong>Topics:</strong></p>\n<ul>\n<li><a href=\"https://www.geeksforgeeks.org/dynamic-programming/#concepts\" target=\"_blank\" rel=\"noopener\">Basic Concepts</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/dynamic-programming/#advanced\" target=\"_blank\" rel=\"noopener\">Advanced Concepts</a></li>\n<li><p><a href=\"https://www.geeksforgeeks.org/dynamic-programming/#basicProblems\" target=\"_blank\" rel=\"noopener\">Basic Problems</a></p>\n</li>\n<li><p><a href=\"https://www.geeksforgeeks.org/dynamic-programming/#mediumProblems\" target=\"_blank\" rel=\"noopener\">Intermediate Problems</a></p>\n</li>\n<li><a href=\"https://www.geeksforgeeks.org/dynamic-programming/#hardProblems\" target=\"_blank\" rel=\"noopener\">Hard Problems</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/dynamic-programming/#quick\" target=\"_blank\" rel=\"noopener\">Quick Links</a></li>\n</ul>\n<p><strong>Basic Concepts:</strong></p>\n<ol>\n<li><a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-1/\" target=\"_blank\" rel=\"noopener\">Overlapping Subproblems Property</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-2-optimal-substructure-property/\" target=\"_blank\" rel=\"noopener\">Optimal Substructure Property</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/solve-dynamic-programming-problem/\" target=\"_blank\" rel=\"noopener\">How to solve a Dynamic Programming Problem ?</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/tabulation-vs-memoizatation/\" target=\"_blank\" rel=\"noopener\">Tabulation vs Memoizatation</a></li>\n</ol>\n<p><strong>Advanced Concepts :</strong></p>\n<ol>\n<li><a href=\"https://www.geeksforgeeks.org/bitmasking-and-dynamic-programming-set-1-count-ways-to-assign-unique-cap-to-every-person/\" target=\"_blank\" rel=\"noopener\">Bitmasking and Dynamic Programming | Set 1</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/digit-dp-introduction/\" target=\"_blank\" rel=\"noopener\">Digit DP | Introduction</a></li>\n</ol>\n<p><strong>Basic Problems :</strong></p>\n<ol>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/\" target=\"_blank\" rel=\"noopener\">Fibonacci numbers</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-9-binomial-coefficient/\" target=\"_blank\" rel=\"noopener\">Binomial Coefficient</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest Common Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-repeated-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest Repeated Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/\" target=\"_blank\" rel=\"noopener\">Largest Sum Contiguous Subarray</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/ugly-numbers/\" target=\"_blank\" rel=\"noopener\">Ugly numbers</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-size-sub-matrix-with-all-1s-in-a-binary-matrix/\" target=\"_blank\" rel=\"noopener\">Maximum size square sub-matrix with all 1s</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-3-longest-increasing-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest Increasing Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-6-min-cost-path/\" target=\"_blank\" rel=\"noopener\">Min Cost Path</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-7-coin-change/\" target=\"_blank\" rel=\"noopener\">Coin change problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-5-edit-distance/\" target=\"_blank\" rel=\"noopener\">Minimum number of edits ( operations ) require to convert string 1 to string 2</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-13-cutting-a-rod/\" target=\"_blank\" rel=\"noopener\">Cutting a Rod</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-subset-sum-problem/\" target=\"_blank\" rel=\"noopener\">Subset Sum Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-number-of-jumps-to-reach-end-of-a-given-array/\" target=\"_blank\" rel=\"noopener\">Minimum number of jumps to reach end</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-34-assembly-line-scheduling/\" target=\"_blank\" rel=\"noopener\">Assembly line scheduling</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-14-maximum-sum-increasing-subsequence/\" target=\"_blank\" rel=\"noopener\">Maximum Sum Increasing Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-20-maximum-length-chain-of-pairs/\" target=\"_blank\" rel=\"noopener\">Maximum Length Chain of Pairs</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-common-substring/\" target=\"_blank\" rel=\"noopener\">Longest Common Substring</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-possible-paths-top-left-bottom-right-nxm-matrix/\" target=\"_blank\" rel=\"noopener\">Count all possible paths from top left to bottom right of a mXn matrix</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/program-nth-catalan-number/\" target=\"_blank\" rel=\"noopener\">nth Catalan Number</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-ways-reach-given-score-game/\" target=\"_blank\" rel=\"noopener\">Count number of ways to reach a given score in a game</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/tiling-problem/\" target=\"_blank\" rel=\"noopener\">Tiling Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-even-length-binary-sequences-with-same-sum-of-first-and-second-half-bits/\" target=\"_blank\" rel=\"noopener\">Count even length binary sequences with same sum of first and second half bits</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-number-of-solutions-of-a-linear-equation-of-n-variables/\" target=\"_blank\" rel=\"noopener\">Find number of solutions of a linear equation of n variables</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/bell-numbers-number-of-ways-to-partition-a-set/\" target=\"_blank\" rel=\"noopener\">Bell Numbers (Number of ways to Partition a Set)</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/compute-ncr-p-set-1-introduction-and-dynamic-programming-solution/\" target=\"_blank\" rel=\"noopener\">Compute nCr % p</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/permutation-coefficient/\" target=\"_blank\" rel=\"noopener\">Permutation Coefficient</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-of-ways-to-fill-a-n-x-4-grid-using-1-x-4-tiles/\" target=\"_blank\" rel=\"noopener\">Count number of ways to fill a “n x 4” grid using “1 x 4” tiles</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/space-optimized-solution-lcs/\" target=\"_blank\" rel=\"noopener\">A Space Optimized Solution of LCS</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-maximum-length-snake-sequence/\" target=\"_blank\" rel=\"noopener\">Find maximum length Snake sequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-cost-to-fill-given-weight-in-a-bag/\" target=\"_blank\" rel=\"noopener\">Minimum cost to fill given weight in a bag</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/game-theory-choice-area/\" target=\"_blank\" rel=\"noopener\">Choice of area</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-weight-path-ending-element-last-row-matrix/\" target=\"_blank\" rel=\"noopener\">Maximum weight path ending at any element of last row in a matrix</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/recursively-break-number-3-parts-get-maximum-sum/\" target=\"_blank\" rel=\"noopener\">Recursively break a number in 3 parts to get maximum sum</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/path-maximum-average-value/\" target=\"_blank\" rel=\"noopener\">Path with maximum average value</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-sum-pairs-specific-difference/\" target=\"_blank\" rel=\"noopener\">Maximum sum of pairs with specific difference</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-subsequence-sum-such-that-no-three-are-consecutive/\" target=\"_blank\" rel=\"noopener\">Maximum subsequence sum such that no three are consecutive</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-subsequence-such-that-difference-between-adjacents-is-one/\" target=\"_blank\" rel=\"noopener\">Longest subsequence such that difference between adjacents is one</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-path-sum-position-jumps-divisibility-condition/\" target=\"_blank\" rel=\"noopener\">Maximum path sum for each position with jumps under divisibility condition</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-sum-bi-tonic-sub-sequence/\" target=\"_blank\" rel=\"noopener\">Maximum sum Bi-tonic Sub-sequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\" target=\"_blank\" rel=\"noopener\">LCS (Longest Common Subsequence) of three strings</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-path-sum-triangle/\" target=\"_blank\" rel=\"noopener\">Maximum path sum in a triangle</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/friends-pairing-problem/\" target=\"_blank\" rel=\"noopener\">Friends Pairing Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/size-array-repeated-deletion-lis/\" target=\"_blank\" rel=\"noopener\">Size of array after repeated deletion of LIS</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-steps-minimize-n-per-given-condition/\" target=\"_blank\" rel=\"noopener\">Minimum steps to minimize n as per given condition</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-path-sum-starting-cell-0-th-row-ending-cell-n-1-th-row/\" target=\"_blank\" rel=\"noopener\">Maximum path sum that starting with any cell of 0-th row and ending with any cell of (N-1)-th row</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/gold-mine-problem/\" target=\"_blank\" rel=\"noopener\">Gold Mine Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-number-endless-points/\" target=\"_blank\" rel=\"noopener\">Find number of endless points</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/perfect-sum-problem-print-subsets-given-sum/\" target=\"_blank\" rel=\"noopener\">Perfect Sum Problem (Print all subsets with given sum)</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-sum-path-right-number-triangle/\" target=\"_blank\" rel=\"noopener\">Maximum sum of a path in a Right Number Triangle</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/subset-sum-divisible-m/\" target=\"_blank\" rel=\"noopener\">Subset with sum divisible by m</a></li>\n</ul>\n</li>\n</ol>\n<p><strong>Intermediate Problems :</strong></p>\n<ol>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-10-0-1-knapsack-problem/\" target=\"_blank\" rel=\"noopener\">0-1 Knapsack Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/length-of-the-longest-substring-without-repeating-characters/\" target=\"_blank\" rel=\"noopener\">Length of the longest substring without repeating characters</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-ways-reach-destination-maze/\" target=\"_blank\" rel=\"noopener\">Count number of ways to reach destination in a Maze</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/super-ugly-number-number-whose-prime-factors-given-set/\" target=\"_blank\" rel=\"noopener\">Super Ugly Number (Number whose prime factors are in given set)</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-of-ways-to-partition-a-set-into-k-subsets/\" target=\"_blank\" rel=\"noopener\">Count number of ways to partition a set into k subsets</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-12-longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest Palindromic Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-11-egg-dropping-puzzle/\" target=\"_blank\" rel=\"noopener\">Egg Dropping Puzzle</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/weighted-job-scheduling/\" target=\"_blank\" rel=\"noopener\">Weighted job scheduling</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-15-longest-bitonic-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest Bitonic Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-16-floyd-warshall-algorithm/\" target=\"_blank\" rel=\"noopener\">Floyd Warshall Algorithm</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-18-partition-problem/\" target=\"_blank\" rel=\"noopener\">Partition Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-14-variations-of-lis/\" target=\"_blank\" rel=\"noopener\">Variations of LIS</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-21-box-stacking-problem/\" target=\"_blank\" rel=\"noopener\">Box-Stacking Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-23-bellman-ford-algorithm/\" target=\"_blank\" rel=\"noopener\">Bellman–Ford Algorithm</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-24-optimal-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">Optimal Binary Search Tree</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/largest-independent-set-problem/\" target=\"_blank\" rel=\"noopener\">Largest Independent Set Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-28-minimum-insertions-to-form-a-palindrome/\" target=\"_blank\" rel=\"noopener\">Minimum insertions to form a palindrome</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-number-deletions-make-string-palindrome/\" target=\"_blank\" rel=\"noopener\">Minimum number of deletions to make a string palindrome</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-36-cut-a-rope-to-maximize-product/\" target=\"_blank\" rel=\"noopener\">Maximum Product Cutting</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/clusteringpartitioning-an-array-such-that-sum-of-square-differences-is-minimum/\" target=\"_blank\" rel=\"noopener\">Clustering/Partitioning an array such that sum of square differences is minimum</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-decimal-value-path-in-a-binary-matrix/\" target=\"_blank\" rel=\"noopener\">Maximum decimal value path in a binary matrix</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-derangements-permutation-such-that-no-element-appears-in-its-original-position/\" target=\"_blank\" rel=\"noopener\">Count Derangements (Permutation such that no element appears in its original position)</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dice-throw-problem/\" target=\"_blank\" rel=\"noopener\">Dice Throw Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-31-optimal-strategy-for-a-game/\" target=\"_blank\" rel=\"noopener\">Optimal Strategy for a game</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-32-word-break-problem/\" target=\"_blank\" rel=\"noopener\">Word Break Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/remove-minimum-elements-either-side-2min-max/\" target=\"_blank\" rel=\"noopener\">Remove minimum elements from either side such that 2*min becomes more than max</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-binary-strings-without-consecutive-1s/\" target=\"_blank\" rel=\"noopener\">Count number of binary strings without consecutive 1’s</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-possible-decodings-given-digit-sequence/\" target=\"_blank\" rel=\"noopener\">Count Possible Decodings of a given Digit Sequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-possible-paths-source-destination-exactly-k-edges/\" target=\"_blank\" rel=\"noopener\">Count all possible walks from a source to a destination with exactly k edges</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/shortest-path-exactly-k-edges-directed-weighted-graph/\" target=\"_blank\" rel=\"noopener\">Shortest path with exactly k edges in a directed and weighted graph</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-even-length-substring-sum-first-second-half/\" target=\"_blank\" rel=\"noopener\">Longest Even Length Substring such that Sum of First and Second Half is same</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/vertex-cover-problem-set-2-dynamic-programming-solution-tree/\" target=\"_blank\" rel=\"noopener\">Vertex Cover Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-the-minimum-cost-to-reach-a-destination-where-every-station-is-connected-in-one-direction/\" target=\"_blank\" rel=\"noopener\">Find the minimum cost to reach destination using a train</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-most-twice/\" target=\"_blank\" rel=\"noopener\">Maximum profit by buying and selling a share at most twice</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-possible-ways-to-construct-buildings/\" target=\"_blank\" rel=\"noopener\">Count possible ways to construct buildings</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-sum-of-digits-in-numbers-from-1-to-n/\" target=\"_blank\" rel=\"noopener\">Compute sum of digits in all numbers from 1 to n</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/shortest-common-supersequence/\" target=\"_blank\" rel=\"noopener\">Shortest Common Supersequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-minimum-number-of-coins-that-make-a-change/\" target=\"_blank\" rel=\"noopener\">Minimum number of coins that make a given value</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-number-of-squares-whose-sum-equals-to-given-number-n/\" target=\"_blank\" rel=\"noopener\">Minimum number of squares whose sum equals to given number n</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-length-of-the-longest-consecutive-path-in-a-character-matrix/\" target=\"_blank\" rel=\"noopener\">length of the longest consecutive path from a given starting character</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/total-number-of-non-decreasing-numbers-with-n-digits/\" target=\"_blank\" rel=\"noopener\">Total number of non-decreasing numbers with n digits</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-positive-points-to-reach-destination/\" target=\"_blank\" rel=\"noopener\">Minimum Initial Points to Reach Destination</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-of-n-digit-numbers-whose-sum-of-digits-equals-to-given-sum/\" target=\"_blank\" rel=\"noopener\">Count of n digit numbers whose sum of digits equals to given sum</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-total-number-of-n-digit-numbers-such-that-the-difference-between-the-sum-of-even-digits-and-odd-digits-is-1/\" target=\"_blank\" rel=\"noopener\">Count total number of N digit numbers such that the difference between sum of even and odd digits is 1</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/bitmasking-and-dynamic-programming-set-1-count-ways-to-assign-unique-cap-to-every-person/\" target=\"_blank\" rel=\"noopener\">Count ways to assign unique cap to every person</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-repeating-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest Repeating Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-the-longest-path-in-a-matrix-with-given-constraints/\" target=\"_blank\" rel=\"noopener\">Find the longest path in a matrix with given constraints</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/number-of-paths-with-exactly-k-coins/\" target=\"_blank\" rel=\"noopener\">Number of paths with exactly k coins</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/collect-maximum-coins-before-hitting-a-dead-end/\" target=\"_blank\" rel=\"noopener\">Collect maximum coins before hitting a dead end</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-of-paths-with-k-turns/\" target=\"_blank\" rel=\"noopener\">Count number of paths with at-most k turns</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum/\" target=\"_blank\" rel=\"noopener\">Partition a set into two subsets such that the difference of subset sums is minimum</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-zig-zag-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest Zig-Zag Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/largest-sum-zig-zag-sequence-in-a-matrix/\" target=\"_blank\" rel=\"noopener\">Largest sum Zigzag sequence in a matrix</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-of-subsets-having-a-particular-xor-value/\" target=\"_blank\" rel=\"noopener\">Count number of subsets having a particular XOR value</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/weighted-job-scheduling-log-n-time/\" target=\"_blank\" rel=\"noopener\">Weighted Job Scheduling in O(n Log n) time</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/ways-to-arrange-balls-such-that-adjacent-balls-are-of-different-types/\" target=\"_blank\" rel=\"noopener\">Ways to arrange Balls such that adjacent balls are of different types</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-time-to-finish-tasks-without-skipping-two-consecutive/\" target=\"_blank\" rel=\"noopener\">Minimum time to finish tasks without skipping two consecutive</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-if-string-is-k-palindrome-or-not/\" target=\"_blank\" rel=\"noopener\">Find if string is K-Palindrome or not | Set 1</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-if-string-is-k-palindrome-or-not-set-2/\" target=\"_blank\" rel=\"noopener\">Find if string is K-Palindrome or not | Set 2</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/wildcard-pattern-matching/\" target=\"_blank\" rel=\"noopener\">Wildcard Pattern Matching</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-common-increasing-subsequence-lcs-lis/\" target=\"_blank\" rel=\"noopener\">Longest Common Increasing Subsequence (LCS + LIS)</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/printing-longest-common-subsequence-set-2-printing/\" target=\"_blank\" rel=\"noopener\">Printing Longest Common Subsequence | Set 2 (Printing All)</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-high-effort-vs-low-effort-tasks-problem/\" target=\"_blank\" rel=\"noopener\">High-effort vs. Low-effort Tasks Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-minimum-adjustment-cost-of-an-array/\" target=\"_blank\" rel=\"noopener\">Find minimum adjustment cost of an array</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-jobs-involved-in-weighted-job-scheduling/\" target=\"_blank\" rel=\"noopener\">Find Jobs involved in Weighted Job Scheduling</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-cost-make-two-strings-identical/\" target=\"_blank\" rel=\"noopener\">Minimum Cost To Make Two Strings Identical</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-number-times-string-occurs-given-string/\" target=\"_blank\" rel=\"noopener\">Find number of times a string occurs as a subsequence in given string</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-groupings-number-sum-digits-every-sub-group-less-equals-immediate-right-sub-group/\" target=\"_blank\" rel=\"noopener\">Count digit groupings of a number with given constraints</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/non-crossing-lines-connect-points-circle/\" target=\"_blank\" rel=\"noopener\">Non-crossing lines to connect points in a circle</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-distinct-subsequences/\" target=\"_blank\" rel=\"noopener\">Count Distinct Subsequences</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-minimum-sum-one-every-three-consecutive-elements-taken/\" target=\"_blank\" rel=\"noopener\">Find minimum sum such that one of every three consecutive elements is taken</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-distinct-occurrences-as-a-subsequence/\" target=\"_blank\" rel=\"noopener\">Count distinct occurrences as a subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/number-of-permutation-with-k-inversions/\" target=\"_blank\" rel=\"noopener\">Number of permutation with K inversions</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/print-longest-common-sub-sequences-lexicographical-order/\" target=\"_blank\" rel=\"noopener\">Print all longest common sub-sequences in lexicographical order</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-distinct-subset-subsequence-sums-array/\" target=\"_blank\" rel=\"noopener\">Find all distinct subset (or subsequence) sums of an array</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-palindromic-subsequence-given-string/\" target=\"_blank\" rel=\"noopener\">Count All Palindromic Subsequence in a given String</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-sum-alternating-subsequence-sum/\" target=\"_blank\" rel=\"noopener\">Maximum sum alternating subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/sum-average-subsets/\" target=\"_blank\" rel=\"noopener\">Sum of average of all subsets</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-maximum-values-expression/\" target=\"_blank\" rel=\"noopener\">Minimum and Maximum values of an expression with * and +</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-sum-subsequence-least-one-every-four-consecutive-elements-picked/\" target=\"_blank\" rel=\"noopener\">Minimum sum subsequence such that at least one of every four consecutive elements is picked</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/ways-to-write-n-as-sum-of-two-or-more-positive-integers/\" target=\"_blank\" rel=\"noopener\">Ways to write n as sum of two or more positive integers</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/unbounded-knapsack-repetition-items-allowed/\" target=\"_blank\" rel=\"noopener\">Unbounded Knapsack (Repetition of items allowed)</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/finding-the-maximum-square-sub-matrix-with-all-equal-elements/\" target=\"_blank\" rel=\"noopener\">Finding the maximum square sub-matrix with all equal elements</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-maximum-dot-product-two-arrays-insertion-0s/\" target=\"_blank\" rel=\"noopener\">Find Maximum dot product of two arrays with insertion of 0’s</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-points-collected-by-two-persons-allowed-to-meet-once/\" target=\"_blank\" rel=\"noopener\">Maximum points collected by two persons allowed to meet once</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-sum-path-3-d-array/\" target=\"_blank\" rel=\"noopener\">Minimum Sum Path In 3-D Array</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-binary-strings-k-times-appearing-adjacent-two-set-bits/\" target=\"_blank\" rel=\"noopener\">Count binary strings with k times appearing adjacent two set bits</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/highway-billboard-problem/\" target=\"_blank\" rel=\"noopener\">Highway Billboard Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/probability-getting-least-k-heads-n-tosses-coins/\" target=\"_blank\" rel=\"noopener\">Probability of getting at least K heads in N tosses of Coins</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-strings-can-formed-using-b-c-given-constraints/\" target=\"_blank\" rel=\"noopener\">Count of strings that can be formed using a, b and c under given constraints</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/modify-array-to-maximize-sum-of-adjacent-differences/\" target=\"_blank\" rel=\"noopener\">Modify array to maximize sum of adjacent differences</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/temple-offerings/\" target=\"_blank\" rel=\"noopener\">Temple Offerings</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-alternating-subsequence/\" target=\"_blank\" rel=\"noopener\">Longest alternating subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-steps-to-delete-a-string-after-repeated-deletion-of-palindrome-substrings/\" target=\"_blank\" rel=\"noopener\">Minimum steps to delete a string after repeated deletion of palindrome substrings</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-number-deletions-make-sorted-sequence/\" target=\"_blank\" rel=\"noopener\">Minimum number of deletions to make a sorted sequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-number-ways-jump-reach-end/\" target=\"_blank\" rel=\"noopener\">Count number of ways to jump to reach end</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/shortest-uncommon-subsequence/\" target=\"_blank\" rel=\"noopener\">Shortest Uncommon Subsequence</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-insertions-sort-array/\" target=\"_blank\" rel=\"noopener\">Minimum insertions to sort an array</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-building-bridges/\" target=\"_blank\" rel=\"noopener\">Dynamic Programming | Building Bridges</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/check-valid-sequence-divisible-m/\" target=\"_blank\" rel=\"noopener\">Check if any valid sequence is divisible by M</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/rencontres-number-counting-partial-derangements/\" target=\"_blank\" rel=\"noopener\">Rencontres Number</a></li>\n</ul>\n</li>\n</ol>\n<p><strong>Hard Problems :</strong></p>\n<ol>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-17-palindrome-partitioning/\" target=\"_blank\" rel=\"noopener\">Palindrome Partitioning</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-18-word-wrap/\" target=\"_blank\" rel=\"noopener\">Word Wrap Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-27-max-sum-rectangle-in-a-2d-matrix/\" target=\"_blank\" rel=\"noopener\">Maximum sum rectangle in a 2D matrix</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\" target=\"_blank\" rel=\"noopener\">Matrix Chain Multiplication</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-geometric-progression/\" target=\"_blank\" rel=\"noopener\">Longest Geometric Progression</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-combinations-k-bit-numbers-n-bits-set-1-n-k-sorted-order/\" target=\"_blank\" rel=\"noopener\">Find all combinations of k-bit numbers with n bits set where 1 &lt;= n &lt;= k in sorted order</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/check-whether-a-given-string-is-an-interleaving-of-two-other-given-strings-set-2/\" target=\"_blank\" rel=\"noopener\">Find if a string is interleaved of two other strings</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/length-of-the-longest-arithmatic-progression-in-a-sorted-array/\" target=\"_blank\" rel=\"noopener\">Longest Arithmetic Progression</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-37-boolean-parenthesization-problem/\" target=\"_blank\" rel=\"noopener\">Boolean Parenthesization Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/mobile-numeric-keypad-problem/\" target=\"_blank\" rel=\"noopener\">Mobile Numeric Keypad Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-cost-polygon-triangulation/\" target=\"_blank\" rel=\"noopener\">Minimum Cost Polygon Triangulation</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/how-to-print-maximum-number-of-a-using-given-four-keys/\" target=\"_blank\" rel=\"noopener\">How to print maximum number of A’s using given four keys</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/smallest-length-string-with-repeated-replacement-of-two-distinct-adjacent/\" target=\"_blank\" rel=\"noopener\">Smallest length string with repeated replacement of two distinct adjacent</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/collect-maximum-points-in-a-grid-using-two-traversals/\" target=\"_blank\" rel=\"noopener\">Collect maximum points in a grid using two traversals</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-weight-transformation-of-a-given-string/\" target=\"_blank\" rel=\"noopener\">Maximum weight transformation of a given string</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/find-minimum-possible-size-of-array-with-given-rules-for-removal/\" target=\"_blank\" rel=\"noopener\">Find minimum possible size of array with given rules for removing elements</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-most-k-times/\" target=\"_blank\" rel=\"noopener\">Maximum profit by buying and selling a share at most k times</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/number-subsequences-string-divisible-n/\" target=\"_blank\" rel=\"noopener\">Number of subsequences in a string divisible by n</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/maximize-arrj-arri-arrl-arrk-such-that-i-j-k-l/\" target=\"_blank\" rel=\"noopener\">Maximize arr[j] – arr[i] + arr[l] – arr[k], such that i &lt; j &lt; k &lt; l</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/space-optimized-dp-solution-0-1-knapsack-problem/\" target=\"_blank\" rel=\"noopener\">A Space Optimized DP solution for 0-1 Knapsack Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/longest-repeating-and-non-overlapping-substring/\" target=\"_blank\" rel=\"noopener\">Longest repeating and non-overlapping substring</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/all-ways-to-add-parenthesis-for-evaluation/\" target=\"_blank\" rel=\"noopener\">All ways to add parenthesis for evaluation</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/number-of-palindromic-paths-in-a-matrix/\" target=\"_blank\" rel=\"noopener\">Number of palindromic paths in a matrix</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-cost-sort-strings-using-reversal-operations-different-costs/\" target=\"_blank\" rel=\"noopener\">Minimum cost to sort strings using reversal operations of different costs</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/minimum-number-of-elements-which-are-not-part-of-increasing-or-decreasing-subsequence-in-array/\" target=\"_blank\" rel=\"noopener\">Minimum number of elements which are not part of Increasing or decreasing subsequence in array</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/printing-brackets-matrix-chain-multiplication-problem/\" target=\"_blank\" rel=\"noopener\">Printing brackets in Matrix Chain Multiplication Problem</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/check-people-can-vote-two-machines/\" target=\"_blank\" rel=\"noopener\">Check if all people can vote on two machines</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/probability-knight-remain-chessboard/\" target=\"_blank\" rel=\"noopener\">Probability of Knight to remain in the chessboard</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-arithmetic-progression-subsequences-array/\" target=\"_blank\" rel=\"noopener\">Count of AP (Arithmetic Progression) Subsequences in an array</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/number-subsequences-form-ai-bj-ck/\" target=\"_blank\" rel=\"noopener\">Number of subsequences of the form a^i b^j c^k</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-ways-increase-lcs-length-two-strings-one/\" target=\"_blank\" rel=\"noopener\">Count ways to increase LCS length of two strings by one</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/count-arrays-adjacent-elements-one-divide-another/\" target=\"_blank\" rel=\"noopener\">Count of arrays in which all adjacent elements are such that one of them divide the another</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/dynamic-programming-trees-set-2/\" target=\"_blank\" rel=\"noopener\">Dynamic Programming on Trees</a></li>\n</ul>\n</li>\n<li><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> &nbsp;&nbsp; <a href=\"https://www.geeksforgeeks.org/check-whether-row-column-swap-produces-maximum-size-binary-sub-matrix-1s/\" target=\"_blank\" rel=\"noopener\">Check whether row or column swaps produce maximum size binary sub-matrix with all 1s</a></li>\n</ul>\n</li>\n</ol>\n"},{"title":"Program for Fibonacci numbers","date":"2018-08-29T13:18:44.000Z","_content":"\n\n来源：https://www.cdn.geeksforgeeks.org/program-for-nth-fibonacci-number/\n\nThe Fibonacci numbers are the numbers in the following integer sequence.\n\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ……..\n\nIn mathematical terms, the sequence Fn of Fibonacci numbers is defined by the recurrence relation\n\n```\n    Fn = Fn-1 + Fn-2\n```\n\nwith seed values\n\n```\n   F0 = 0 and F1 = 1.\n```\n\n![fibonacci-sequence](https://www.geeksforgeeks.org/wp-content/uploads/fibonacci-sequence.png)\n\nGiven a number n, print n-th Fibonacci Number.\n\n```\nInput  : n = 2\nOutput : 1\n\nInput  : n = 9\nOutput : 34\n```\n\n\n\n","source":"_posts/alg/DynamicProgramming/1_1_Fibonacci numbers.md","raw":"---\ntitle: Program for Fibonacci numbers\ndate: 2018-08-29 21:18:44\ncategories:\n- alg\ntags:\n- 动态规划\n---\n\n\n来源：https://www.cdn.geeksforgeeks.org/program-for-nth-fibonacci-number/\n\nThe Fibonacci numbers are the numbers in the following integer sequence.\n\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ……..\n\nIn mathematical terms, the sequence Fn of Fibonacci numbers is defined by the recurrence relation\n\n```\n    Fn = Fn-1 + Fn-2\n```\n\nwith seed values\n\n```\n   F0 = 0 and F1 = 1.\n```\n\n![fibonacci-sequence](https://www.geeksforgeeks.org/wp-content/uploads/fibonacci-sequence.png)\n\nGiven a number n, print n-th Fibonacci Number.\n\n```\nInput  : n = 2\nOutput : 1\n\nInput  : n = 9\nOutput : 34\n```\n\n\n\n","slug":"alg/DynamicProgramming/1_1_Fibonacci numbers","published":1,"updated":"2018-08-29T13:20:49.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgtv00158seozh4v8cgr","content":"<p>来源：<a href=\"https://www.cdn.geeksforgeeks.org/program-for-nth-fibonacci-number/\" target=\"_blank\" rel=\"noopener\">https://www.cdn.geeksforgeeks.org/program-for-nth-fibonacci-number/</a></p>\n<p>The Fibonacci numbers are the numbers in the following integer sequence.</p>\n<p>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ……..</p>\n<p>In mathematical terms, the sequence Fn of Fibonacci numbers is defined by the recurrence relation</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fn = Fn-1 + Fn-2</span><br></pre></td></tr></table></figure>\n<p>with seed values</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F0 = 0 and F1 = 1.</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/fibonacci-sequence.png\" alt=\"fibonacci-sequence\"></p>\n<p>Given a number n, print n-th Fibonacci Number.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input  : n = 2</span><br><span class=\"line\">Output : 1</span><br><span class=\"line\"></span><br><span class=\"line\">Input  : n = 9</span><br><span class=\"line\">Output : 34</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>来源：<a href=\"https://www.cdn.geeksforgeeks.org/program-for-nth-fibonacci-number/\" target=\"_blank\" rel=\"noopener\">https://www.cdn.geeksforgeeks.org/program-for-nth-fibonacci-number/</a></p>\n<p>The Fibonacci numbers are the numbers in the following integer sequence.</p>\n<p>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ……..</p>\n<p>In mathematical terms, the sequence Fn of Fibonacci numbers is defined by the recurrence relation</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fn = Fn-1 + Fn-2</span><br></pre></td></tr></table></figure>\n<p>with seed values</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F0 = 0 and F1 = 1.</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/fibonacci-sequence.png\" alt=\"fibonacci-sequence\"></p>\n<p>Given a number n, print n-th Fibonacci Number.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input  : n = 2</span><br><span class=\"line\">Output : 1</span><br><span class=\"line\"></span><br><span class=\"line\">Input  : n = 9</span><br><span class=\"line\">Output : 34</span><br></pre></td></tr></table></figure>\n"},{"_content":"# CCI 算法\n\nCCI（Commodity Channel lndex）顺势指标是测量股价是否已超出常态分布范围的一个指数。由唐纳德·R.兰伯特（DonaldLambert）所创，属于超买超卖类指标中较特殊的一种，波动于正无限大和负无限小之间。\n\n## 计算公式\n\n系统默认n为14\n\n\n\n$TP = \\frac{最高价 + 最低价 + 收盘价}{3}$\n\n\n\n$MA = \\frac{\\sum\\limits_{k=1}^{n} TP(i)}{n}$\n\n\n\nMD = 最近n日 (MA - TP)的绝对值的累计和 ÷ n\n\n可能不太准确...\n\n$MD = \\frac{MA - TP}{n}​$\n\n\n\n$CCI(n) = \\frac{TP - MA}{MD} * 0.015$\n\n\n\n## 使用方法\n\n**1,观察CCI范围**\n\n当CCI从0~+100的正常范围内，由下往上突破+100时，[股指](https://baike.baidu.com/item/%E8%82%A1%E6%8C%87)或[股价](https://baike.baidu.com/item/%E8%82%A1%E4%BB%B7)有可能出现强势上涨，是买入的时机；当CCI从+100之上，由上往下跌破+100，股指或股价[短线](https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF)有可能出现[回调](https://baike.baidu.com/item/%E5%9B%9E%E8%B0%83/9837525)，是卖出的时机。当CCI从0~-100的正常范围内，由上往下跌破-100时，股指或股价有可能出现弱势下跌，是抛出的时机。当CCI从-100的下方，由下往上突破-100时，有可能出现反弹，可逢低买入。\n\n**2, CCI运用也可以用[顶背离](https://baike.baidu.com/item/%E9%A1%B6%E8%83%8C%E7%A6%BB)来判断[短线头部](https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF%E5%A4%B4%E9%83%A8)的出现，用[底背离](https://baike.baidu.com/item/%E5%BA%95%E8%83%8C%E7%A6%BB)来判断短线底部的到来**\n\n当股指或股价创出新高，而CCI没有同步创出新高时，[顶背离](https://baike.baidu.com/item/%E9%A1%B6%E8%83%8C%E7%A6%BB)出现，[短线](https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF)[股指](https://baike.baidu.com/item/%E8%82%A1%E6%8C%87/3342555)或股价有可能出现[回挡](https://baike.baidu.com/item/%E5%9B%9E%E6%8C%A1)，可逢高卖出；当股指或股价创出新低，而CCI没有同步创出新低时，底背离出现，短线股指或股价有可能出现反弹，可逢低买入。\n\n\n\n## 应用技巧\n\n1、如果CCI指标一直上行突破了100的话,表示此时的股市进入了异常波动的阶段,可能伴随着较大的[成交量](https://baike.baidu.com/item/%E6%88%90%E4%BA%A4%E9%87%8F),可以进行中短线的投资者,此时的[买入](https://baike.baidu.com/item/%E4%B9%B0%E5%85%A5)信号比较明显.\n\n2、反之如果CCI指标向下突破了-100,则代表此时的股市进入了新一轮的下跌趋势,此时可以选择不要操作,保持观望的态度面对市场.\n\n3、如果CCI指标从上行突破100又回到100之内的正常范围,则代表股价这一阶段的上涨行情已经疲软,投资者可以在此时选择卖出.反之CCI突破-100又回到正常范围,则代表[下跌趋势](https://baike.baidu.com/item/%E4%B8%8B%E8%B7%8C%E8%B6%8B%E5%8A%BF)已经结束,观察一段时间可能有转折的信号出现,可以先少量买入.\n\n注意[CCI指标](https://baike.baidu.com/item/CCI%E6%8C%87%E6%A0%87)主要用来判断100到-100范围之外的行情趋势,在这之间的趋势分析应用 [CCI指标](https://baike.baidu.com/item/CCI%E6%8C%87%E6%A0%87)没有作用和意义,可以选择[KDJ指标](https://baike.baidu.com/item/KDJ%E6%8C%87%E6%A0%87)来分析.另外CCI指标是进行[短线操作](https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF%E6%93%8D%E4%BD%9C)的投资者比较实用的武器,可以很快帮助交易者找到准确的[交易信号](https://baike.baidu.com/item/%E4%BA%A4%E6%98%93%E4%BF%A1%E5%8F%B7). [2] \n\n\n\n\n**参考：**\n\n[CCI百度百科(https://baike.baidu.com/item/CCI%E9%A1%BA%E5%8A%BF%E6%8C%87%E6%A0%87/6982196)","source":"_posts/alg/finance/cci.md","raw":"# CCI 算法\n\nCCI（Commodity Channel lndex）顺势指标是测量股价是否已超出常态分布范围的一个指数。由唐纳德·R.兰伯特（DonaldLambert）所创，属于超买超卖类指标中较特殊的一种，波动于正无限大和负无限小之间。\n\n## 计算公式\n\n系统默认n为14\n\n\n\n$TP = \\frac{最高价 + 最低价 + 收盘价}{3}$\n\n\n\n$MA = \\frac{\\sum\\limits_{k=1}^{n} TP(i)}{n}$\n\n\n\nMD = 最近n日 (MA - TP)的绝对值的累计和 ÷ n\n\n可能不太准确...\n\n$MD = \\frac{MA - TP}{n}​$\n\n\n\n$CCI(n) = \\frac{TP - MA}{MD} * 0.015$\n\n\n\n## 使用方法\n\n**1,观察CCI范围**\n\n当CCI从0~+100的正常范围内，由下往上突破+100时，[股指](https://baike.baidu.com/item/%E8%82%A1%E6%8C%87)或[股价](https://baike.baidu.com/item/%E8%82%A1%E4%BB%B7)有可能出现强势上涨，是买入的时机；当CCI从+100之上，由上往下跌破+100，股指或股价[短线](https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF)有可能出现[回调](https://baike.baidu.com/item/%E5%9B%9E%E8%B0%83/9837525)，是卖出的时机。当CCI从0~-100的正常范围内，由上往下跌破-100时，股指或股价有可能出现弱势下跌，是抛出的时机。当CCI从-100的下方，由下往上突破-100时，有可能出现反弹，可逢低买入。\n\n**2, CCI运用也可以用[顶背离](https://baike.baidu.com/item/%E9%A1%B6%E8%83%8C%E7%A6%BB)来判断[短线头部](https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF%E5%A4%B4%E9%83%A8)的出现，用[底背离](https://baike.baidu.com/item/%E5%BA%95%E8%83%8C%E7%A6%BB)来判断短线底部的到来**\n\n当股指或股价创出新高，而CCI没有同步创出新高时，[顶背离](https://baike.baidu.com/item/%E9%A1%B6%E8%83%8C%E7%A6%BB)出现，[短线](https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF)[股指](https://baike.baidu.com/item/%E8%82%A1%E6%8C%87/3342555)或股价有可能出现[回挡](https://baike.baidu.com/item/%E5%9B%9E%E6%8C%A1)，可逢高卖出；当股指或股价创出新低，而CCI没有同步创出新低时，底背离出现，短线股指或股价有可能出现反弹，可逢低买入。\n\n\n\n## 应用技巧\n\n1、如果CCI指标一直上行突破了100的话,表示此时的股市进入了异常波动的阶段,可能伴随着较大的[成交量](https://baike.baidu.com/item/%E6%88%90%E4%BA%A4%E9%87%8F),可以进行中短线的投资者,此时的[买入](https://baike.baidu.com/item/%E4%B9%B0%E5%85%A5)信号比较明显.\n\n2、反之如果CCI指标向下突破了-100,则代表此时的股市进入了新一轮的下跌趋势,此时可以选择不要操作,保持观望的态度面对市场.\n\n3、如果CCI指标从上行突破100又回到100之内的正常范围,则代表股价这一阶段的上涨行情已经疲软,投资者可以在此时选择卖出.反之CCI突破-100又回到正常范围,则代表[下跌趋势](https://baike.baidu.com/item/%E4%B8%8B%E8%B7%8C%E8%B6%8B%E5%8A%BF)已经结束,观察一段时间可能有转折的信号出现,可以先少量买入.\n\n注意[CCI指标](https://baike.baidu.com/item/CCI%E6%8C%87%E6%A0%87)主要用来判断100到-100范围之外的行情趋势,在这之间的趋势分析应用 [CCI指标](https://baike.baidu.com/item/CCI%E6%8C%87%E6%A0%87)没有作用和意义,可以选择[KDJ指标](https://baike.baidu.com/item/KDJ%E6%8C%87%E6%A0%87)来分析.另外CCI指标是进行[短线操作](https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF%E6%93%8D%E4%BD%9C)的投资者比较实用的武器,可以很快帮助交易者找到准确的[交易信号](https://baike.baidu.com/item/%E4%BA%A4%E6%98%93%E4%BF%A1%E5%8F%B7). [2] \n\n\n\n\n**参考：**\n\n[CCI百度百科(https://baike.baidu.com/item/CCI%E9%A1%BA%E5%8A%BF%E6%8C%87%E6%A0%87/6982196)","slug":"alg/finance/cci","published":1,"date":"2019-06-26T15:03:32.836Z","updated":"2019-06-27T01:24:45.557Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgtx00168seoxlghivhe","content":"<h1 id=\"CCI-算法\"><a href=\"#CCI-算法\" class=\"headerlink\" title=\"CCI 算法\"></a>CCI 算法</h1><p>CCI（Commodity Channel lndex）顺势指标是测量股价是否已超出常态分布范围的一个指数。由唐纳德·R.兰伯特（DonaldLambert）所创，属于超买超卖类指标中较特殊的一种，波动于正无限大和负无限小之间。</p>\n<h2 id=\"计算公式\"><a href=\"#计算公式\" class=\"headerlink\" title=\"计算公式\"></a>计算公式</h2><p>系统默认n为14</p>\n<p>$TP = \\frac{最高价 + 最低价 + 收盘价}{3}$</p>\n<p>$MA = \\frac{\\sum\\limits_{k=1}^{n} TP(i)}{n}$</p>\n<p>MD = 最近n日 (MA - TP)的绝对值的累计和 ÷ n</p>\n<p>可能不太准确…</p>\n<p>$MD = \\frac{MA - TP}{n}​$</p>\n<p>$CCI(n) = \\frac{TP - MA}{MD} * 0.015$</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p><strong>1,观察CCI范围</strong></p>\n<p>当CCI从0~+100的正常范围内，由下往上突破+100时，<a href=\"https://baike.baidu.com/item/%E8%82%A1%E6%8C%87\" target=\"_blank\" rel=\"noopener\">股指</a>或<a href=\"https://baike.baidu.com/item/%E8%82%A1%E4%BB%B7\" target=\"_blank\" rel=\"noopener\">股价</a>有可能出现强势上涨，是买入的时机；当CCI从+100之上，由上往下跌破+100，股指或股价<a href=\"https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF\" target=\"_blank\" rel=\"noopener\">短线</a>有可能出现<a href=\"https://baike.baidu.com/item/%E5%9B%9E%E8%B0%83/9837525\" target=\"_blank\" rel=\"noopener\">回调</a>，是卖出的时机。当CCI从0~-100的正常范围内，由上往下跌破-100时，股指或股价有可能出现弱势下跌，是抛出的时机。当CCI从-100的下方，由下往上突破-100时，有可能出现反弹，可逢低买入。</p>\n<p><strong>2, CCI运用也可以用<a href=\"https://baike.baidu.com/item/%E9%A1%B6%E8%83%8C%E7%A6%BB\" target=\"_blank\" rel=\"noopener\">顶背离</a>来判断<a href=\"https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF%E5%A4%B4%E9%83%A8\" target=\"_blank\" rel=\"noopener\">短线头部</a>的出现，用<a href=\"https://baike.baidu.com/item/%E5%BA%95%E8%83%8C%E7%A6%BB\" target=\"_blank\" rel=\"noopener\">底背离</a>来判断短线底部的到来</strong></p>\n<p>当股指或股价创出新高，而CCI没有同步创出新高时，<a href=\"https://baike.baidu.com/item/%E9%A1%B6%E8%83%8C%E7%A6%BB\" target=\"_blank\" rel=\"noopener\">顶背离</a>出现，<a href=\"https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF\" target=\"_blank\" rel=\"noopener\">短线</a><a href=\"https://baike.baidu.com/item/%E8%82%A1%E6%8C%87/3342555\" target=\"_blank\" rel=\"noopener\">股指</a>或股价有可能出现<a href=\"https://baike.baidu.com/item/%E5%9B%9E%E6%8C%A1\" target=\"_blank\" rel=\"noopener\">回挡</a>，可逢高卖出；当股指或股价创出新低，而CCI没有同步创出新低时，底背离出现，短线股指或股价有可能出现反弹，可逢低买入。</p>\n<h2 id=\"应用技巧\"><a href=\"#应用技巧\" class=\"headerlink\" title=\"应用技巧\"></a>应用技巧</h2><p>1、如果CCI指标一直上行突破了100的话,表示此时的股市进入了异常波动的阶段,可能伴随着较大的<a href=\"https://baike.baidu.com/item/%E6%88%90%E4%BA%A4%E9%87%8F\" target=\"_blank\" rel=\"noopener\">成交量</a>,可以进行中短线的投资者,此时的<a href=\"https://baike.baidu.com/item/%E4%B9%B0%E5%85%A5\" target=\"_blank\" rel=\"noopener\">买入</a>信号比较明显.</p>\n<p>2、反之如果CCI指标向下突破了-100,则代表此时的股市进入了新一轮的下跌趋势,此时可以选择不要操作,保持观望的态度面对市场.</p>\n<p>3、如果CCI指标从上行突破100又回到100之内的正常范围,则代表股价这一阶段的上涨行情已经疲软,投资者可以在此时选择卖出.反之CCI突破-100又回到正常范围,则代表<a href=\"https://baike.baidu.com/item/%E4%B8%8B%E8%B7%8C%E8%B6%8B%E5%8A%BF\" target=\"_blank\" rel=\"noopener\">下跌趋势</a>已经结束,观察一段时间可能有转折的信号出现,可以先少量买入.</p>\n<p>注意<a href=\"https://baike.baidu.com/item/CCI%E6%8C%87%E6%A0%87\" target=\"_blank\" rel=\"noopener\">CCI指标</a>主要用来判断100到-100范围之外的行情趋势,在这之间的趋势分析应用 <a href=\"https://baike.baidu.com/item/CCI%E6%8C%87%E6%A0%87\" target=\"_blank\" rel=\"noopener\">CCI指标</a>没有作用和意义,可以选择<a href=\"https://baike.baidu.com/item/KDJ%E6%8C%87%E6%A0%87\" target=\"_blank\" rel=\"noopener\">KDJ指标</a>来分析.另外CCI指标是进行<a href=\"https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF%E6%93%8D%E4%BD%9C\" target=\"_blank\" rel=\"noopener\">短线操作</a>的投资者比较实用的武器,可以很快帮助交易者找到准确的<a href=\"https://baike.baidu.com/item/%E4%BA%A4%E6%98%93%E4%BF%A1%E5%8F%B7\" target=\"_blank\" rel=\"noopener\">交易信号</a>. [2] </p>\n<p><strong>参考：</strong></p>\n<p>[CCI百度百科(<a href=\"https://baike.baidu.com/item/CCI%E9%A1%BA%E5%8A%BF%E6%8C%87%E6%A0%87/6982196\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/CCI%E9%A1%BA%E5%8A%BF%E6%8C%87%E6%A0%87/6982196</a>)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CCI-算法\"><a href=\"#CCI-算法\" class=\"headerlink\" title=\"CCI 算法\"></a>CCI 算法</h1><p>CCI（Commodity Channel lndex）顺势指标是测量股价是否已超出常态分布范围的一个指数。由唐纳德·R.兰伯特（DonaldLambert）所创，属于超买超卖类指标中较特殊的一种，波动于正无限大和负无限小之间。</p>\n<h2 id=\"计算公式\"><a href=\"#计算公式\" class=\"headerlink\" title=\"计算公式\"></a>计算公式</h2><p>系统默认n为14</p>\n<p>$TP = \\frac{最高价 + 最低价 + 收盘价}{3}$</p>\n<p>$MA = \\frac{\\sum\\limits_{k=1}^{n} TP(i)}{n}$</p>\n<p>MD = 最近n日 (MA - TP)的绝对值的累计和 ÷ n</p>\n<p>可能不太准确…</p>\n<p>$MD = \\frac{MA - TP}{n}​$</p>\n<p>$CCI(n) = \\frac{TP - MA}{MD} * 0.015$</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p><strong>1,观察CCI范围</strong></p>\n<p>当CCI从0~+100的正常范围内，由下往上突破+100时，<a href=\"https://baike.baidu.com/item/%E8%82%A1%E6%8C%87\" target=\"_blank\" rel=\"noopener\">股指</a>或<a href=\"https://baike.baidu.com/item/%E8%82%A1%E4%BB%B7\" target=\"_blank\" rel=\"noopener\">股价</a>有可能出现强势上涨，是买入的时机；当CCI从+100之上，由上往下跌破+100，股指或股价<a href=\"https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF\" target=\"_blank\" rel=\"noopener\">短线</a>有可能出现<a href=\"https://baike.baidu.com/item/%E5%9B%9E%E8%B0%83/9837525\" target=\"_blank\" rel=\"noopener\">回调</a>，是卖出的时机。当CCI从0~-100的正常范围内，由上往下跌破-100时，股指或股价有可能出现弱势下跌，是抛出的时机。当CCI从-100的下方，由下往上突破-100时，有可能出现反弹，可逢低买入。</p>\n<p><strong>2, CCI运用也可以用<a href=\"https://baike.baidu.com/item/%E9%A1%B6%E8%83%8C%E7%A6%BB\" target=\"_blank\" rel=\"noopener\">顶背离</a>来判断<a href=\"https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF%E5%A4%B4%E9%83%A8\" target=\"_blank\" rel=\"noopener\">短线头部</a>的出现，用<a href=\"https://baike.baidu.com/item/%E5%BA%95%E8%83%8C%E7%A6%BB\" target=\"_blank\" rel=\"noopener\">底背离</a>来判断短线底部的到来</strong></p>\n<p>当股指或股价创出新高，而CCI没有同步创出新高时，<a href=\"https://baike.baidu.com/item/%E9%A1%B6%E8%83%8C%E7%A6%BB\" target=\"_blank\" rel=\"noopener\">顶背离</a>出现，<a href=\"https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF\" target=\"_blank\" rel=\"noopener\">短线</a><a href=\"https://baike.baidu.com/item/%E8%82%A1%E6%8C%87/3342555\" target=\"_blank\" rel=\"noopener\">股指</a>或股价有可能出现<a href=\"https://baike.baidu.com/item/%E5%9B%9E%E6%8C%A1\" target=\"_blank\" rel=\"noopener\">回挡</a>，可逢高卖出；当股指或股价创出新低，而CCI没有同步创出新低时，底背离出现，短线股指或股价有可能出现反弹，可逢低买入。</p>\n<h2 id=\"应用技巧\"><a href=\"#应用技巧\" class=\"headerlink\" title=\"应用技巧\"></a>应用技巧</h2><p>1、如果CCI指标一直上行突破了100的话,表示此时的股市进入了异常波动的阶段,可能伴随着较大的<a href=\"https://baike.baidu.com/item/%E6%88%90%E4%BA%A4%E9%87%8F\" target=\"_blank\" rel=\"noopener\">成交量</a>,可以进行中短线的投资者,此时的<a href=\"https://baike.baidu.com/item/%E4%B9%B0%E5%85%A5\" target=\"_blank\" rel=\"noopener\">买入</a>信号比较明显.</p>\n<p>2、反之如果CCI指标向下突破了-100,则代表此时的股市进入了新一轮的下跌趋势,此时可以选择不要操作,保持观望的态度面对市场.</p>\n<p>3、如果CCI指标从上行突破100又回到100之内的正常范围,则代表股价这一阶段的上涨行情已经疲软,投资者可以在此时选择卖出.反之CCI突破-100又回到正常范围,则代表<a href=\"https://baike.baidu.com/item/%E4%B8%8B%E8%B7%8C%E8%B6%8B%E5%8A%BF\" target=\"_blank\" rel=\"noopener\">下跌趋势</a>已经结束,观察一段时间可能有转折的信号出现,可以先少量买入.</p>\n<p>注意<a href=\"https://baike.baidu.com/item/CCI%E6%8C%87%E6%A0%87\" target=\"_blank\" rel=\"noopener\">CCI指标</a>主要用来判断100到-100范围之外的行情趋势,在这之间的趋势分析应用 <a href=\"https://baike.baidu.com/item/CCI%E6%8C%87%E6%A0%87\" target=\"_blank\" rel=\"noopener\">CCI指标</a>没有作用和意义,可以选择<a href=\"https://baike.baidu.com/item/KDJ%E6%8C%87%E6%A0%87\" target=\"_blank\" rel=\"noopener\">KDJ指标</a>来分析.另外CCI指标是进行<a href=\"https://baike.baidu.com/item/%E7%9F%AD%E7%BA%BF%E6%93%8D%E4%BD%9C\" target=\"_blank\" rel=\"noopener\">短线操作</a>的投资者比较实用的武器,可以很快帮助交易者找到准确的<a href=\"https://baike.baidu.com/item/%E4%BA%A4%E6%98%93%E4%BF%A1%E5%8F%B7\" target=\"_blank\" rel=\"noopener\">交易信号</a>. [2] </p>\n<p><strong>参考：</strong></p>\n<p>[CCI百度百科(<a href=\"https://baike.baidu.com/item/CCI%E9%A1%BA%E5%8A%BF%E6%8C%87%E6%A0%87/6982196\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/CCI%E9%A1%BA%E5%8A%BF%E6%8C%87%E6%A0%87/6982196</a>)</p>\n"},{"_content":"\n\n# BIAS\n\n\n\nBIAS(乖离率), 又称偏离率，简称Y值, 是通过计算市场指数或收盘价与某条移动平均线之间的差距百分比，以反映一定时期内价格与其MA偏离程度的指标，从而得出价格在剧烈波动时因偏离移动平均趋势而造成回档或反弹的可能性，以及价格在正常波动范围内移动而形成继续原有势的可信度。\n\n乖离率，是用百分比来表示价格与MA间的偏离程度(差距率)。\n\n乖离率曲线(BIAS)，是将各BIAS值连成线，得到的一条以0值为横向中轴之波动伸延的曲线。\n\n\n\n## 计算方法\n\n1. 计算方法 一\n\n$$BIAS(乖离率) = \\frac{当日收盘价-N日平均价}{N日平均价} * 100 \\%$$\n\n其中N，一般5、6、10、12、24、30和72。在实际运用中，短线使用6日乖离率较为有效，中线则放大为10日或12日。\n\n\n\n2. 计算方法 二\n\n$BIAS=(EMA(收盘价, N) - \\frac{MA(收盘价, M)}{MA(收盘价, M)}) * 100$\n\n其中，N取超短周期，例如4，7，9，12等；M为大周期，例如，38，57，137，254，526等；\n\n\n\n## 使用技巧\n\n1. 当取N的值为6:\n\n1) 如果指数和平均线之间的乖离率达到6%以上,则表示该阶段处于超买区,投资者可以在此进行卖出的操作,如果指数与平均线之间的乖离率达到6%以下时为则显示为超卖区,投资者可在此进行买入操作.\n\n2) 如果指数和均线乖离率达8%以上时为超买区,投资者可以考虑卖出;指数和平均线间的乖离率达到-3%以下时为超卖区,是交易者进行买进的时机.\n\n2. 当N取值12时;\n\n1) 指数和12日平均线间的乖离率达5%以上时为超买区域,是投资者卖出的时机;指数和12日平均线乖离率达-5%以下时为超卖区,是交易买进的时机.\n\n2)指数与12日平均线乖离率达6%以上时为超买区,是交易卖出的时机;指数与12日平均线的乖离率达-4%以下时为超卖区,看做是交易买进的时机.\n\n3. 如果汇市处于不断上升的时候,可以选择在高价处的正乖离率点卖出操作;反之汇市不断下降,可以选择在最低价的负乖离率数卖出操作.\n\n4. 如果遇到汇率在不断下跌的同时,负乖离率增大,空头方向可以在此处进行平仓的操作,比较安全.另外在乖离率等于零以后出现反弹,则可以进行卖出的操作.\n\n\n\n## 组合应用\n\n\n\n在技术性[反弹](https://baike.baidu.com/item/%E5%8F%8D%E5%BC%B9)[行情](https://baike.baidu.com/item/%E8%A1%8C%E6%83%85)中乖离率指标适合与随机指标组合运用，KD指标和BIAS指标可以使得反弹行情中的操作变得及时准确。在反弹行情中，BIAS指标的功用是确认[股价](https://baike.baidu.com/item/%E8%82%A1%E4%BB%B7)是否[超跌](https://baike.baidu.com/item/%E8%B6%85%E8%B7%8C)，而KD指标的作用是显示[个股](https://baike.baidu.com/item/%E4%B8%AA%E8%82%A1)是否有拐头向上的动能，两者的结合有利于投资者准确判断出抢反弹的最佳时机。具体的应用原则：\n\n1. 将BIAS指标的参数设置为24日，将KD指标的参数设置为9；3；3。\n\n2. [BIAS指标](https://baike.baidu.com/item/BIAS%E6%8C%87%E6%A0%87)要小于-6，这只是确认该股超跌的初选条件。\n\n3. KD指标产生黄金交叉，K线上穿D线。\n\n4. KD交叉同时，KD指标中的D值要小于16。\n\n\n\n第二种组合，乖离率指标与[布林线指标](https://baike.baidu.com/item/%E5%B8%83%E6%9E%97%E7%BA%BF%E6%8C%87%E6%A0%87)的结合运用适合在[超跌反弹](https://baike.baidu.com/item/%E8%B6%85%E8%B7%8C%E5%8F%8D%E5%BC%B9)行情中的买入：对于这类反弹行情，投资者不宜采用追涨，而要结合技术分析方法，运用BIAS和布林线指标的组合分析，把握[个股](https://baike.baidu.com/item/%E4%B8%AA%E8%82%A1)进出时机。具体方法是：\n\n1. 当BIAS的三条[短期均线](https://baike.baidu.com/item/%E7%9F%AD%E6%9C%9F%E5%9D%87%E7%BA%BF)全部小于0时；\n\n2. [股价](https://baike.baidu.com/item/%E8%82%A1%E4%BB%B7)也已经触及BOLL的下轨线LB；\n\n3. [布林线](https://baike.baidu.com/item/%E5%B8%83%E6%9E%97%E7%BA%BF)正处于不断收敛状态中的；\n\n4. BIAS的短期均线上穿长期均线，并且成交量逐渐放大的。\n\n当符合上述条件时，[投资者](https://baike.baidu.com/item/%E6%8A%95%E8%B5%84%E8%80%85)可以积极择股买入。\n\n\n\n**参考**\n\n[https://baike.baidu.com/item/乖离率/420286](https://baike.baidu.com/item/%E4%B9%96%E7%A6%BB%E7%8E%87/420286)\n\n","source":"_posts/alg/finance/bias.md","raw":"\n\n# BIAS\n\n\n\nBIAS(乖离率), 又称偏离率，简称Y值, 是通过计算市场指数或收盘价与某条移动平均线之间的差距百分比，以反映一定时期内价格与其MA偏离程度的指标，从而得出价格在剧烈波动时因偏离移动平均趋势而造成回档或反弹的可能性，以及价格在正常波动范围内移动而形成继续原有势的可信度。\n\n乖离率，是用百分比来表示价格与MA间的偏离程度(差距率)。\n\n乖离率曲线(BIAS)，是将各BIAS值连成线，得到的一条以0值为横向中轴之波动伸延的曲线。\n\n\n\n## 计算方法\n\n1. 计算方法 一\n\n$$BIAS(乖离率) = \\frac{当日收盘价-N日平均价}{N日平均价} * 100 \\%$$\n\n其中N，一般5、6、10、12、24、30和72。在实际运用中，短线使用6日乖离率较为有效，中线则放大为10日或12日。\n\n\n\n2. 计算方法 二\n\n$BIAS=(EMA(收盘价, N) - \\frac{MA(收盘价, M)}{MA(收盘价, M)}) * 100$\n\n其中，N取超短周期，例如4，7，9，12等；M为大周期，例如，38，57，137，254，526等；\n\n\n\n## 使用技巧\n\n1. 当取N的值为6:\n\n1) 如果指数和平均线之间的乖离率达到6%以上,则表示该阶段处于超买区,投资者可以在此进行卖出的操作,如果指数与平均线之间的乖离率达到6%以下时为则显示为超卖区,投资者可在此进行买入操作.\n\n2) 如果指数和均线乖离率达8%以上时为超买区,投资者可以考虑卖出;指数和平均线间的乖离率达到-3%以下时为超卖区,是交易者进行买进的时机.\n\n2. 当N取值12时;\n\n1) 指数和12日平均线间的乖离率达5%以上时为超买区域,是投资者卖出的时机;指数和12日平均线乖离率达-5%以下时为超卖区,是交易买进的时机.\n\n2)指数与12日平均线乖离率达6%以上时为超买区,是交易卖出的时机;指数与12日平均线的乖离率达-4%以下时为超卖区,看做是交易买进的时机.\n\n3. 如果汇市处于不断上升的时候,可以选择在高价处的正乖离率点卖出操作;反之汇市不断下降,可以选择在最低价的负乖离率数卖出操作.\n\n4. 如果遇到汇率在不断下跌的同时,负乖离率增大,空头方向可以在此处进行平仓的操作,比较安全.另外在乖离率等于零以后出现反弹,则可以进行卖出的操作.\n\n\n\n## 组合应用\n\n\n\n在技术性[反弹](https://baike.baidu.com/item/%E5%8F%8D%E5%BC%B9)[行情](https://baike.baidu.com/item/%E8%A1%8C%E6%83%85)中乖离率指标适合与随机指标组合运用，KD指标和BIAS指标可以使得反弹行情中的操作变得及时准确。在反弹行情中，BIAS指标的功用是确认[股价](https://baike.baidu.com/item/%E8%82%A1%E4%BB%B7)是否[超跌](https://baike.baidu.com/item/%E8%B6%85%E8%B7%8C)，而KD指标的作用是显示[个股](https://baike.baidu.com/item/%E4%B8%AA%E8%82%A1)是否有拐头向上的动能，两者的结合有利于投资者准确判断出抢反弹的最佳时机。具体的应用原则：\n\n1. 将BIAS指标的参数设置为24日，将KD指标的参数设置为9；3；3。\n\n2. [BIAS指标](https://baike.baidu.com/item/BIAS%E6%8C%87%E6%A0%87)要小于-6，这只是确认该股超跌的初选条件。\n\n3. KD指标产生黄金交叉，K线上穿D线。\n\n4. KD交叉同时，KD指标中的D值要小于16。\n\n\n\n第二种组合，乖离率指标与[布林线指标](https://baike.baidu.com/item/%E5%B8%83%E6%9E%97%E7%BA%BF%E6%8C%87%E6%A0%87)的结合运用适合在[超跌反弹](https://baike.baidu.com/item/%E8%B6%85%E8%B7%8C%E5%8F%8D%E5%BC%B9)行情中的买入：对于这类反弹行情，投资者不宜采用追涨，而要结合技术分析方法，运用BIAS和布林线指标的组合分析，把握[个股](https://baike.baidu.com/item/%E4%B8%AA%E8%82%A1)进出时机。具体方法是：\n\n1. 当BIAS的三条[短期均线](https://baike.baidu.com/item/%E7%9F%AD%E6%9C%9F%E5%9D%87%E7%BA%BF)全部小于0时；\n\n2. [股价](https://baike.baidu.com/item/%E8%82%A1%E4%BB%B7)也已经触及BOLL的下轨线LB；\n\n3. [布林线](https://baike.baidu.com/item/%E5%B8%83%E6%9E%97%E7%BA%BF)正处于不断收敛状态中的；\n\n4. BIAS的短期均线上穿长期均线，并且成交量逐渐放大的。\n\n当符合上述条件时，[投资者](https://baike.baidu.com/item/%E6%8A%95%E8%B5%84%E8%80%85)可以积极择股买入。\n\n\n\n**参考**\n\n[https://baike.baidu.com/item/乖离率/420286](https://baike.baidu.com/item/%E4%B9%96%E7%A6%BB%E7%8E%87/420286)\n\n","slug":"alg/finance/bias","published":1,"date":"2019-06-29T14:20:13.239Z","updated":"2019-07-06T06:03:36.254Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgtz00178seo3nz45mld","content":"<h1 id=\"BIAS\"><a href=\"#BIAS\" class=\"headerlink\" title=\"BIAS\"></a>BIAS</h1><p>BIAS(乖离率), 又称偏离率，简称Y值, 是通过计算市场指数或收盘价与某条移动平均线之间的差距百分比，以反映一定时期内价格与其MA偏离程度的指标，从而得出价格在剧烈波动时因偏离移动平均趋势而造成回档或反弹的可能性，以及价格在正常波动范围内移动而形成继续原有势的可信度。</p>\n<p>乖离率，是用百分比来表示价格与MA间的偏离程度(差距率)。</p>\n<p>乖离率曲线(BIAS)，是将各BIAS值连成线，得到的一条以0值为横向中轴之波动伸延的曲线。</p>\n<h2 id=\"计算方法\"><a href=\"#计算方法\" class=\"headerlink\" title=\"计算方法\"></a>计算方法</h2><ol>\n<li>计算方法 一</li>\n</ol>\n<p>$$BIAS(乖离率) = \\frac{当日收盘价-N日平均价}{N日平均价} * 100 \\%$$</p>\n<p>其中N，一般5、6、10、12、24、30和72。在实际运用中，短线使用6日乖离率较为有效，中线则放大为10日或12日。</p>\n<ol start=\"2\">\n<li>计算方法 二</li>\n</ol>\n<p>$BIAS=(EMA(收盘价, N) - \\frac{MA(收盘价, M)}{MA(收盘价, M)}) * 100$</p>\n<p>其中，N取超短周期，例如4，7，9，12等；M为大周期，例如，38，57，137，254，526等；</p>\n<h2 id=\"使用技巧\"><a href=\"#使用技巧\" class=\"headerlink\" title=\"使用技巧\"></a>使用技巧</h2><ol>\n<li>当取N的值为6:</li>\n</ol>\n<p>1) 如果指数和平均线之间的乖离率达到6%以上,则表示该阶段处于超买区,投资者可以在此进行卖出的操作,如果指数与平均线之间的乖离率达到6%以下时为则显示为超卖区,投资者可在此进行买入操作.</p>\n<p>2) 如果指数和均线乖离率达8%以上时为超买区,投资者可以考虑卖出;指数和平均线间的乖离率达到-3%以下时为超卖区,是交易者进行买进的时机.</p>\n<ol start=\"2\">\n<li>当N取值12时;</li>\n</ol>\n<p>1) 指数和12日平均线间的乖离率达5%以上时为超买区域,是投资者卖出的时机;指数和12日平均线乖离率达-5%以下时为超卖区,是交易买进的时机.</p>\n<p>2)指数与12日平均线乖离率达6%以上时为超买区,是交易卖出的时机;指数与12日平均线的乖离率达-4%以下时为超卖区,看做是交易买进的时机.</p>\n<ol start=\"3\">\n<li><p>如果汇市处于不断上升的时候,可以选择在高价处的正乖离率点卖出操作;反之汇市不断下降,可以选择在最低价的负乖离率数卖出操作.</p>\n</li>\n<li><p>如果遇到汇率在不断下跌的同时,负乖离率增大,空头方向可以在此处进行平仓的操作,比较安全.另外在乖离率等于零以后出现反弹,则可以进行卖出的操作.</p>\n</li>\n</ol>\n<h2 id=\"组合应用\"><a href=\"#组合应用\" class=\"headerlink\" title=\"组合应用\"></a>组合应用</h2><p>在技术性<a href=\"https://baike.baidu.com/item/%E5%8F%8D%E5%BC%B9\" target=\"_blank\" rel=\"noopener\">反弹</a><a href=\"https://baike.baidu.com/item/%E8%A1%8C%E6%83%85\" target=\"_blank\" rel=\"noopener\">行情</a>中乖离率指标适合与随机指标组合运用，KD指标和BIAS指标可以使得反弹行情中的操作变得及时准确。在反弹行情中，BIAS指标的功用是确认<a href=\"https://baike.baidu.com/item/%E8%82%A1%E4%BB%B7\" target=\"_blank\" rel=\"noopener\">股价</a>是否<a href=\"https://baike.baidu.com/item/%E8%B6%85%E8%B7%8C\" target=\"_blank\" rel=\"noopener\">超跌</a>，而KD指标的作用是显示<a href=\"https://baike.baidu.com/item/%E4%B8%AA%E8%82%A1\" target=\"_blank\" rel=\"noopener\">个股</a>是否有拐头向上的动能，两者的结合有利于投资者准确判断出抢反弹的最佳时机。具体的应用原则：</p>\n<ol>\n<li><p>将BIAS指标的参数设置为24日，将KD指标的参数设置为9；3；3。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/BIAS%E6%8C%87%E6%A0%87\" target=\"_blank\" rel=\"noopener\">BIAS指标</a>要小于-6，这只是确认该股超跌的初选条件。</p>\n</li>\n<li><p>KD指标产生黄金交叉，K线上穿D线。</p>\n</li>\n<li><p>KD交叉同时，KD指标中的D值要小于16。</p>\n</li>\n</ol>\n<p>第二种组合，乖离率指标与<a href=\"https://baike.baidu.com/item/%E5%B8%83%E6%9E%97%E7%BA%BF%E6%8C%87%E6%A0%87\" target=\"_blank\" rel=\"noopener\">布林线指标</a>的结合运用适合在<a href=\"https://baike.baidu.com/item/%E8%B6%85%E8%B7%8C%E5%8F%8D%E5%BC%B9\" target=\"_blank\" rel=\"noopener\">超跌反弹</a>行情中的买入：对于这类反弹行情，投资者不宜采用追涨，而要结合技术分析方法，运用BIAS和布林线指标的组合分析，把握<a href=\"https://baike.baidu.com/item/%E4%B8%AA%E8%82%A1\" target=\"_blank\" rel=\"noopener\">个股</a>进出时机。具体方法是：</p>\n<ol>\n<li><p>当BIAS的三条<a href=\"https://baike.baidu.com/item/%E7%9F%AD%E6%9C%9F%E5%9D%87%E7%BA%BF\" target=\"_blank\" rel=\"noopener\">短期均线</a>全部小于0时；</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E8%82%A1%E4%BB%B7\" target=\"_blank\" rel=\"noopener\">股价</a>也已经触及BOLL的下轨线LB；</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E5%B8%83%E6%9E%97%E7%BA%BF\" target=\"_blank\" rel=\"noopener\">布林线</a>正处于不断收敛状态中的；</p>\n</li>\n<li><p>BIAS的短期均线上穿长期均线，并且成交量逐渐放大的。</p>\n</li>\n</ol>\n<p>当符合上述条件时，<a href=\"https://baike.baidu.com/item/%E6%8A%95%E8%B5%84%E8%80%85\" target=\"_blank\" rel=\"noopener\">投资者</a>可以积极择股买入。</p>\n<p><strong>参考</strong></p>\n<p><a href=\"https://baike.baidu.com/item/%E4%B9%96%E7%A6%BB%E7%8E%87/420286\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/乖离率/420286</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"BIAS\"><a href=\"#BIAS\" class=\"headerlink\" title=\"BIAS\"></a>BIAS</h1><p>BIAS(乖离率), 又称偏离率，简称Y值, 是通过计算市场指数或收盘价与某条移动平均线之间的差距百分比，以反映一定时期内价格与其MA偏离程度的指标，从而得出价格在剧烈波动时因偏离移动平均趋势而造成回档或反弹的可能性，以及价格在正常波动范围内移动而形成继续原有势的可信度。</p>\n<p>乖离率，是用百分比来表示价格与MA间的偏离程度(差距率)。</p>\n<p>乖离率曲线(BIAS)，是将各BIAS值连成线，得到的一条以0值为横向中轴之波动伸延的曲线。</p>\n<h2 id=\"计算方法\"><a href=\"#计算方法\" class=\"headerlink\" title=\"计算方法\"></a>计算方法</h2><ol>\n<li>计算方法 一</li>\n</ol>\n<p>$$BIAS(乖离率) = \\frac{当日收盘价-N日平均价}{N日平均价} * 100 \\%$$</p>\n<p>其中N，一般5、6、10、12、24、30和72。在实际运用中，短线使用6日乖离率较为有效，中线则放大为10日或12日。</p>\n<ol start=\"2\">\n<li>计算方法 二</li>\n</ol>\n<p>$BIAS=(EMA(收盘价, N) - \\frac{MA(收盘价, M)}{MA(收盘价, M)}) * 100$</p>\n<p>其中，N取超短周期，例如4，7，9，12等；M为大周期，例如，38，57，137，254，526等；</p>\n<h2 id=\"使用技巧\"><a href=\"#使用技巧\" class=\"headerlink\" title=\"使用技巧\"></a>使用技巧</h2><ol>\n<li>当取N的值为6:</li>\n</ol>\n<p>1) 如果指数和平均线之间的乖离率达到6%以上,则表示该阶段处于超买区,投资者可以在此进行卖出的操作,如果指数与平均线之间的乖离率达到6%以下时为则显示为超卖区,投资者可在此进行买入操作.</p>\n<p>2) 如果指数和均线乖离率达8%以上时为超买区,投资者可以考虑卖出;指数和平均线间的乖离率达到-3%以下时为超卖区,是交易者进行买进的时机.</p>\n<ol start=\"2\">\n<li>当N取值12时;</li>\n</ol>\n<p>1) 指数和12日平均线间的乖离率达5%以上时为超买区域,是投资者卖出的时机;指数和12日平均线乖离率达-5%以下时为超卖区,是交易买进的时机.</p>\n<p>2)指数与12日平均线乖离率达6%以上时为超买区,是交易卖出的时机;指数与12日平均线的乖离率达-4%以下时为超卖区,看做是交易买进的时机.</p>\n<ol start=\"3\">\n<li><p>如果汇市处于不断上升的时候,可以选择在高价处的正乖离率点卖出操作;反之汇市不断下降,可以选择在最低价的负乖离率数卖出操作.</p>\n</li>\n<li><p>如果遇到汇率在不断下跌的同时,负乖离率增大,空头方向可以在此处进行平仓的操作,比较安全.另外在乖离率等于零以后出现反弹,则可以进行卖出的操作.</p>\n</li>\n</ol>\n<h2 id=\"组合应用\"><a href=\"#组合应用\" class=\"headerlink\" title=\"组合应用\"></a>组合应用</h2><p>在技术性<a href=\"https://baike.baidu.com/item/%E5%8F%8D%E5%BC%B9\" target=\"_blank\" rel=\"noopener\">反弹</a><a href=\"https://baike.baidu.com/item/%E8%A1%8C%E6%83%85\" target=\"_blank\" rel=\"noopener\">行情</a>中乖离率指标适合与随机指标组合运用，KD指标和BIAS指标可以使得反弹行情中的操作变得及时准确。在反弹行情中，BIAS指标的功用是确认<a href=\"https://baike.baidu.com/item/%E8%82%A1%E4%BB%B7\" target=\"_blank\" rel=\"noopener\">股价</a>是否<a href=\"https://baike.baidu.com/item/%E8%B6%85%E8%B7%8C\" target=\"_blank\" rel=\"noopener\">超跌</a>，而KD指标的作用是显示<a href=\"https://baike.baidu.com/item/%E4%B8%AA%E8%82%A1\" target=\"_blank\" rel=\"noopener\">个股</a>是否有拐头向上的动能，两者的结合有利于投资者准确判断出抢反弹的最佳时机。具体的应用原则：</p>\n<ol>\n<li><p>将BIAS指标的参数设置为24日，将KD指标的参数设置为9；3；3。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/BIAS%E6%8C%87%E6%A0%87\" target=\"_blank\" rel=\"noopener\">BIAS指标</a>要小于-6，这只是确认该股超跌的初选条件。</p>\n</li>\n<li><p>KD指标产生黄金交叉，K线上穿D线。</p>\n</li>\n<li><p>KD交叉同时，KD指标中的D值要小于16。</p>\n</li>\n</ol>\n<p>第二种组合，乖离率指标与<a href=\"https://baike.baidu.com/item/%E5%B8%83%E6%9E%97%E7%BA%BF%E6%8C%87%E6%A0%87\" target=\"_blank\" rel=\"noopener\">布林线指标</a>的结合运用适合在<a href=\"https://baike.baidu.com/item/%E8%B6%85%E8%B7%8C%E5%8F%8D%E5%BC%B9\" target=\"_blank\" rel=\"noopener\">超跌反弹</a>行情中的买入：对于这类反弹行情，投资者不宜采用追涨，而要结合技术分析方法，运用BIAS和布林线指标的组合分析，把握<a href=\"https://baike.baidu.com/item/%E4%B8%AA%E8%82%A1\" target=\"_blank\" rel=\"noopener\">个股</a>进出时机。具体方法是：</p>\n<ol>\n<li><p>当BIAS的三条<a href=\"https://baike.baidu.com/item/%E7%9F%AD%E6%9C%9F%E5%9D%87%E7%BA%BF\" target=\"_blank\" rel=\"noopener\">短期均线</a>全部小于0时；</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E8%82%A1%E4%BB%B7\" target=\"_blank\" rel=\"noopener\">股价</a>也已经触及BOLL的下轨线LB；</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E5%B8%83%E6%9E%97%E7%BA%BF\" target=\"_blank\" rel=\"noopener\">布林线</a>正处于不断收敛状态中的；</p>\n</li>\n<li><p>BIAS的短期均线上穿长期均线，并且成交量逐渐放大的。</p>\n</li>\n</ol>\n<p>当符合上述条件时，<a href=\"https://baike.baidu.com/item/%E6%8A%95%E8%B5%84%E8%80%85\" target=\"_blank\" rel=\"noopener\">投资者</a>可以积极择股买入。</p>\n<p><strong>参考</strong></p>\n<p><a href=\"https://baike.baidu.com/item/%E4%B9%96%E7%A6%BB%E7%8E%87/420286\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/乖离率/420286</a></p>\n"},{"_content":"# KDJ 指标\n\nKDJ指标又叫[随机指标](https://baike.baidu.com/item/%E9%9A%8F%E6%9C%BA%E6%8C%87%E6%A0%87/9401249)，是一种相当新颖、实用的技术分析指标，它起先用于期货市场的分析，后被广泛用于股市的中短期趋势分析，是期货和股票市场上最常用的技术分析工具。\n\n\n\n## 计算方法\n\n\n\n$RSV(n) = \\frac{Cn - Ln}{Hn - Ln} * 100​$\n\n公式中，**Cn为第n日收盘价**；**Ln为n日内的最低价**；**Hn为n日内的最高价**\n\n\n\n其次，计算K值与D值：\n\n$K(n) = \\frac{2}{3} * K(n - 1) + \\frac{1}{3} * RSV(n)​$\n\n\n\n$D(n) = \\frac{2}{3} * D(n-1) + \\frac{1}{3} * K(n)​$\n\n\n\n若无前一日K 值与D值，则可分别用50来代替。\n\n\n\n$J(n) = 3*K(n) - 2*D(n)​$\n\n\n\n## 使用技巧\n\n1. K与D值永远介于0到100之间。D大于80时，行情呈现超买现象。D小于20时，行情呈现超卖现象。\n\n2. 上涨趋势中，K值大于D值，K线向上突破D线时，为买进信号。下跌趋势中，K值小于D值，K线向下跌破D线时，为卖出信号。\n\n3. KD指标不仅能反映出市场的超买超卖程度，还能通过交叉突破发出买卖信号。\n4. KD指标不适于发行量小、交易不活跃的股票，但是KD指标对大盘和热门大盘股有极高准确性。\n5. 当随机指标与股价出现背离时，一般为转势的信号。??\n6. K值和D值上升或者下跌的速度减弱，倾斜度趋于平缓是短期转势的预警信号。\n\n\n\n**参考:**\n\n[KDJ-百度百科](<https://baike.baidu.com/item/KDJ%E6%8C%87%E6%A0%87>)\n\n","source":"_posts/alg/finance/kdj.md","raw":"# KDJ 指标\n\nKDJ指标又叫[随机指标](https://baike.baidu.com/item/%E9%9A%8F%E6%9C%BA%E6%8C%87%E6%A0%87/9401249)，是一种相当新颖、实用的技术分析指标，它起先用于期货市场的分析，后被广泛用于股市的中短期趋势分析，是期货和股票市场上最常用的技术分析工具。\n\n\n\n## 计算方法\n\n\n\n$RSV(n) = \\frac{Cn - Ln}{Hn - Ln} * 100​$\n\n公式中，**Cn为第n日收盘价**；**Ln为n日内的最低价**；**Hn为n日内的最高价**\n\n\n\n其次，计算K值与D值：\n\n$K(n) = \\frac{2}{3} * K(n - 1) + \\frac{1}{3} * RSV(n)​$\n\n\n\n$D(n) = \\frac{2}{3} * D(n-1) + \\frac{1}{3} * K(n)​$\n\n\n\n若无前一日K 值与D值，则可分别用50来代替。\n\n\n\n$J(n) = 3*K(n) - 2*D(n)​$\n\n\n\n## 使用技巧\n\n1. K与D值永远介于0到100之间。D大于80时，行情呈现超买现象。D小于20时，行情呈现超卖现象。\n\n2. 上涨趋势中，K值大于D值，K线向上突破D线时，为买进信号。下跌趋势中，K值小于D值，K线向下跌破D线时，为卖出信号。\n\n3. KD指标不仅能反映出市场的超买超卖程度，还能通过交叉突破发出买卖信号。\n4. KD指标不适于发行量小、交易不活跃的股票，但是KD指标对大盘和热门大盘股有极高准确性。\n5. 当随机指标与股价出现背离时，一般为转势的信号。??\n6. K值和D值上升或者下跌的速度减弱，倾斜度趋于平缓是短期转势的预警信号。\n\n\n\n**参考:**\n\n[KDJ-百度百科](<https://baike.baidu.com/item/KDJ%E6%8C%87%E6%A0%87>)\n\n","slug":"alg/finance/kdj","published":1,"date":"2019-06-27T01:32:16.198Z","updated":"2019-06-30T14:24:49.914Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgu3001b8seo7ol737cm","content":"<h1 id=\"KDJ-指标\"><a href=\"#KDJ-指标\" class=\"headerlink\" title=\"KDJ 指标\"></a>KDJ 指标</h1><p>KDJ指标又叫<a href=\"https://baike.baidu.com/item/%E9%9A%8F%E6%9C%BA%E6%8C%87%E6%A0%87/9401249\" target=\"_blank\" rel=\"noopener\">随机指标</a>，是一种相当新颖、实用的技术分析指标，它起先用于期货市场的分析，后被广泛用于股市的中短期趋势分析，是期货和股票市场上最常用的技术分析工具。</p>\n<h2 id=\"计算方法\"><a href=\"#计算方法\" class=\"headerlink\" title=\"计算方法\"></a>计算方法</h2><p>$RSV(n) = \\frac{Cn - Ln}{Hn - Ln} * 100​$</p>\n<p>公式中，<strong>Cn为第n日收盘价</strong>；<strong>Ln为n日内的最低价</strong>；<strong>Hn为n日内的最高价</strong></p>\n<p>其次，计算K值与D值：</p>\n<p>$K(n) = \\frac{2}{3} <em> K(n - 1) + \\frac{1}{3} </em> RSV(n)​$</p>\n<p>$D(n) = \\frac{2}{3} <em> D(n-1) + \\frac{1}{3} </em> K(n)​$</p>\n<p>若无前一日K 值与D值，则可分别用50来代替。</p>\n<p>$J(n) = 3<em>K(n) - 2</em>D(n)​$</p>\n<h2 id=\"使用技巧\"><a href=\"#使用技巧\" class=\"headerlink\" title=\"使用技巧\"></a>使用技巧</h2><ol>\n<li><p>K与D值永远介于0到100之间。D大于80时，行情呈现超买现象。D小于20时，行情呈现超卖现象。</p>\n</li>\n<li><p>上涨趋势中，K值大于D值，K线向上突破D线时，为买进信号。下跌趋势中，K值小于D值，K线向下跌破D线时，为卖出信号。</p>\n</li>\n<li><p>KD指标不仅能反映出市场的超买超卖程度，还能通过交叉突破发出买卖信号。</p>\n</li>\n<li>KD指标不适于发行量小、交易不活跃的股票，但是KD指标对大盘和热门大盘股有极高准确性。</li>\n<li>当随机指标与股价出现背离时，一般为转势的信号。??</li>\n<li>K值和D值上升或者下跌的速度减弱，倾斜度趋于平缓是短期转势的预警信号。</li>\n</ol>\n<p><strong>参考:</strong></p>\n<p><a href=\"https://baike.baidu.com/item/KDJ%E6%8C%87%E6%A0%87\" target=\"_blank\" rel=\"noopener\">KDJ-百度百科</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"KDJ-指标\"><a href=\"#KDJ-指标\" class=\"headerlink\" title=\"KDJ 指标\"></a>KDJ 指标</h1><p>KDJ指标又叫<a href=\"https://baike.baidu.com/item/%E9%9A%8F%E6%9C%BA%E6%8C%87%E6%A0%87/9401249\" target=\"_blank\" rel=\"noopener\">随机指标</a>，是一种相当新颖、实用的技术分析指标，它起先用于期货市场的分析，后被广泛用于股市的中短期趋势分析，是期货和股票市场上最常用的技术分析工具。</p>\n<h2 id=\"计算方法\"><a href=\"#计算方法\" class=\"headerlink\" title=\"计算方法\"></a>计算方法</h2><p>$RSV(n) = \\frac{Cn - Ln}{Hn - Ln} * 100​$</p>\n<p>公式中，<strong>Cn为第n日收盘价</strong>；<strong>Ln为n日内的最低价</strong>；<strong>Hn为n日内的最高价</strong></p>\n<p>其次，计算K值与D值：</p>\n<p>$K(n) = \\frac{2}{3} <em> K(n - 1) + \\frac{1}{3} </em> RSV(n)​$</p>\n<p>$D(n) = \\frac{2}{3} <em> D(n-1) + \\frac{1}{3} </em> K(n)​$</p>\n<p>若无前一日K 值与D值，则可分别用50来代替。</p>\n<p>$J(n) = 3<em>K(n) - 2</em>D(n)​$</p>\n<h2 id=\"使用技巧\"><a href=\"#使用技巧\" class=\"headerlink\" title=\"使用技巧\"></a>使用技巧</h2><ol>\n<li><p>K与D值永远介于0到100之间。D大于80时，行情呈现超买现象。D小于20时，行情呈现超卖现象。</p>\n</li>\n<li><p>上涨趋势中，K值大于D值，K线向上突破D线时，为买进信号。下跌趋势中，K值小于D值，K线向下跌破D线时，为卖出信号。</p>\n</li>\n<li><p>KD指标不仅能反映出市场的超买超卖程度，还能通过交叉突破发出买卖信号。</p>\n</li>\n<li>KD指标不适于发行量小、交易不活跃的股票，但是KD指标对大盘和热门大盘股有极高准确性。</li>\n<li>当随机指标与股价出现背离时，一般为转势的信号。??</li>\n<li>K值和D值上升或者下跌的速度减弱，倾斜度趋于平缓是短期转势的预警信号。</li>\n</ol>\n<p><strong>参考:</strong></p>\n<p><a href=\"https://baike.baidu.com/item/KDJ%E6%8C%87%E6%A0%87\" target=\"_blank\" rel=\"noopener\">KDJ-百度百科</a></p>\n"},{"_content":"涉及的算法：\n\n- [x] 1. MACD\n- [x] 2. KDJ\n- [ ] 3. RSI\n- [ ] 4. BOLL\n- [ ] 5. WR\n- [ ] 6. DMI\n- [ ] 7. BBIBOLL\n- [ ] 8. ROC\n- [ ] 9. PSY\n- [ ] 10. OBV\n- [ ] 11. WVAD\n- [x] 12. CCI\n- [ ] 13. TRIX\n- [ ] 14. DMA\n- [ ] 15. EXPMA\n- [x] 16. BIAS\n- [ ] 17. ASI\n- [ ] 18. VR\n- [ ] 19. EMV\n- [ ] 20. BRAR","source":"_posts/alg/finance/alg_list.md","raw":"涉及的算法：\n\n- [x] 1. MACD\n- [x] 2. KDJ\n- [ ] 3. RSI\n- [ ] 4. BOLL\n- [ ] 5. WR\n- [ ] 6. DMI\n- [ ] 7. BBIBOLL\n- [ ] 8. ROC\n- [ ] 9. PSY\n- [ ] 10. OBV\n- [ ] 11. WVAD\n- [x] 12. CCI\n- [ ] 13. TRIX\n- [ ] 14. DMA\n- [ ] 15. EXPMA\n- [x] 16. BIAS\n- [ ] 17. ASI\n- [ ] 18. VR\n- [ ] 19. EMV\n- [ ] 20. BRAR","slug":"alg/finance/alg_list","published":1,"date":"2019-06-26T15:02:55.603Z","updated":"2019-07-02T15:06:55.577Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgu5001c8seonepjlic8","content":"<p>涉及的算法：</p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 1. MACD</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 2. KDJ</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 3. RSI</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 4. BOLL</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 5. WR</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 6. DMI</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 7. BBIBOLL</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 8. ROC</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 9. PSY</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 10. OBV</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 11. WVAD</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 12. CCI</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 13. TRIX</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 14. DMA</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 15. EXPMA</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 16. BIAS</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 17. ASI</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 18. VR</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 19. EMV</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 20. BRAR</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>涉及的算法：</p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 1. MACD</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 2. KDJ</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 3. RSI</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 4. BOLL</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 5. WR</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 6. DMI</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 7. BBIBOLL</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 8. ROC</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 9. PSY</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 10. OBV</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 11. WVAD</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 12. CCI</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 13. TRIX</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 14. DMA</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 15. EXPMA</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 16. BIAS</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 17. ASI</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 18. VR</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 19. EMV</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 20. BRAR</li>\n</ul>\n"},{"_content":"# RSI 指标\n\nRSI ( Relative Strength Index ) 相对强弱指数RSI是根据一定时期内上涨点数和涨跌点数之和的比率制作出的一种技术曲线。能够反映出市场在一定时期内的景气程度. 由威尔斯.威尔德（Welles Wilder)最早应用于期货买卖，后来人们发现在众多的图表技术分析中，强弱指标的理论和实践极其适合于股票市场的短线投资，于是被用于股票升跌的测量和分析中。该分析指标的设计是以三条线来反映价格走势的强弱，这种图形可以为投资者提供操作依据，非常适合做短线差价操作。\n\n\n\n参考:\n\n[RSI-百度百科](https://baike.baidu.com/item/RSI/6130115)\n\n","source":"_posts/alg/finance/rsi.md","raw":"# RSI 指标\n\nRSI ( Relative Strength Index ) 相对强弱指数RSI是根据一定时期内上涨点数和涨跌点数之和的比率制作出的一种技术曲线。能够反映出市场在一定时期内的景气程度. 由威尔斯.威尔德（Welles Wilder)最早应用于期货买卖，后来人们发现在众多的图表技术分析中，强弱指标的理论和实践极其适合于股票市场的短线投资，于是被用于股票升跌的测量和分析中。该分析指标的设计是以三条线来反映价格走势的强弱，这种图形可以为投资者提供操作依据，非常适合做短线差价操作。\n\n\n\n参考:\n\n[RSI-百度百科](https://baike.baidu.com/item/RSI/6130115)\n\n","slug":"alg/finance/rsi","published":1,"date":"2019-07-02T14:13:34.599Z","updated":"2019-07-02T14:55:16.600Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgu8001g8seow8gg23fe","content":"<h1 id=\"RSI-指标\"><a href=\"#RSI-指标\" class=\"headerlink\" title=\"RSI 指标\"></a>RSI 指标</h1><p>RSI ( Relative Strength Index ) 相对强弱指数RSI是根据一定时期内上涨点数和涨跌点数之和的比率制作出的一种技术曲线。能够反映出市场在一定时期内的景气程度. 由威尔斯.威尔德（Welles Wilder)最早应用于期货买卖，后来人们发现在众多的图表技术分析中，强弱指标的理论和实践极其适合于股票市场的短线投资，于是被用于股票升跌的测量和分析中。该分析指标的设计是以三条线来反映价格走势的强弱，这种图形可以为投资者提供操作依据，非常适合做短线差价操作。</p>\n<p>参考:</p>\n<p><a href=\"https://baike.baidu.com/item/RSI/6130115\" target=\"_blank\" rel=\"noopener\">RSI-百度百科</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"RSI-指标\"><a href=\"#RSI-指标\" class=\"headerlink\" title=\"RSI 指标\"></a>RSI 指标</h1><p>RSI ( Relative Strength Index ) 相对强弱指数RSI是根据一定时期内上涨点数和涨跌点数之和的比率制作出的一种技术曲线。能够反映出市场在一定时期内的景气程度. 由威尔斯.威尔德（Welles Wilder)最早应用于期货买卖，后来人们发现在众多的图表技术分析中，强弱指标的理论和实践极其适合于股票市场的短线投资，于是被用于股票升跌的测量和分析中。该分析指标的设计是以三条线来反映价格走势的强弱，这种图形可以为投资者提供操作依据，非常适合做短线差价操作。</p>\n<p>参考:</p>\n<p><a href=\"https://baike.baidu.com/item/RSI/6130115\" target=\"_blank\" rel=\"noopener\">RSI-百度百科</a></p>\n"},{"_content":"# MACD 指标\n\nMACD ( Moving Average Convergence / Divergence ) 称为异同移动平均线, 是从双指数移动平均线发展而来的，由快的指数移动平均线（EMA12）减去慢的指数移动平均线（EMA26）得到快线DIF，再用2×（快线DIF-DIF的9日加权移动均线DEA）得到MACD柱. \n\n\n\n## MACD的计算过程\n\n**1、计算移动平均值（EMA）**\n\n$S_n: 今日收盘价​$\n\n12日EMA的算式为\n\n$EMA_{12}(n) = EMA_{12}(n - 1) * \\frac{11}{13} + S_n * \\frac{2}{13}​$\n\n\n\n26日EMA的算式为\n\n$EMA_{26}(n) = EMA_{26}(n - 1) * \\frac{25}{27} + S_n * \\frac{2}{27}​$\n\n\n\n**2、计算离差值（DIF）**\n\n$DIF(n) = EMA_{12}(n) - EMA_{26}(n)​$\n\n\n\n**3、计算DIF的9日EMA**\n\n根据离差值计算其9日的EMA，即离差平均值，是所求的MACD值。为了不与指标原名相混淆，此值又名DEA或DEM.\n\n$DEA(n) = DEA(n-1) * \\frac{8}{10} + DIF(n)*\\frac{2}{10}​$\n\n计算出的DIF和DEA的数值均为正值或负值。\n\n$MACD柱状图 = (DIF - DEA) * 2​$\n\n\n\n## 可参考方案\n\n1. 当DIF和DEA均大于0(即在图形上表示为它们处于零线以上)并向上移动时，一般表示为行情处于[多头行情](https://baike.baidu.com/item/%E5%A4%9A%E5%A4%B4%E8%A1%8C%E6%83%85)中，可以买入[开仓](https://baike.baidu.com/item/%E5%BC%80%E4%BB%93)或[多头持仓](https://baike.baidu.com/item/%E5%A4%9A%E5%A4%B4%E6%8C%81%E4%BB%93)；\n\n2. 当DIF和DEA均小于0(即在图形上表示为它们处于零线以下)并向下移动时，一般表示为行情处于[空头行情](https://baike.baidu.com/item/%E7%A9%BA%E5%A4%B4%E8%A1%8C%E6%83%85)中，可以卖出开仓或观望。\n\n3. 当DIF和DEA均大于0(即在图形上表示为它们处于零线以上)但都向下移动时，一般表示为行情处于下跌阶段，可以卖出开仓和观望；\n\n4. 当DIF和DEA均小于0时(即在图形上表示为它们处于零线以下)但向上移动时，一般表示为行情即将上涨，股票将上涨，可以买入开仓或多头持仓。\n\n\n\n其买卖原则为：\n\n1. DIF、DEA均为正，DIF向上突破DEA，买入信号参考。\n\n2. DIF、DEA均为负，DIF向下跌破DEA，卖出信号参考。\n\n3. DIF线与K线发生背离，行情可能出现反转信号。\n\n4. DIF、DEA的值从正数变成负数，或者从负数变成正数并不是交易信号，因为它们落后于市场。\n\n\n\n## 基本用法\n\n1. MACD[金叉](https://baike.baidu.com/item/%E9%87%91%E5%8F%89)：DIFF 由下向上突破 DEA，为买入信号。\n\n2. MACD[死叉](https://baike.baidu.com/item/%E6%AD%BB%E5%8F%89)：DIFF 由上向下突破 DEA，为卖出信号。\n\n3. MACD 绿转红：MACD 值由负变正，市场由[空头](https://baike.baidu.com/item/%E7%A9%BA%E5%A4%B4/13825859)转为多头。\n\n4. MACD 红转绿：MACD 值由正变负，市场由多头转为空头。\n\n5. DIFF 与 DEA 均为正值,即都在零轴线以上时，大势属[多头市场](https://baike.baidu.com/item/%E5%A4%9A%E5%A4%B4%E5%B8%82%E5%9C%BA)，DIFF 向上突破 DEA，可作买入信号。\n\n6. DIFF 与 DEA 均为负值,即都在零轴线以下时，大势属[空头市场](https://baike.baidu.com/item/%E7%A9%BA%E5%A4%B4%E5%B8%82%E5%9C%BA)，DIFF 向下跌破 DEA，可作卖出信号。\n\n7. 当 DEA 线与 K 线趋势发生[背离](https://baike.baidu.com/item/%E8%83%8C%E7%A6%BB/3696078)时为反转信号。\n\n8. DEA 在盘整局面时失误率较高,但如果配合[RSI](https://baike.baidu.com/item/RSI) 及[KD](https://baike.baidu.com/item/KD)j指标可适当弥补缺点。\n\n\n\n\n\n\n\n**参考:**\n\n[MACD-百度百科](<https://baike.baidu.com/item/MACD%E6%8C%87%E6%A0%87/6271283?fromtitle=MACD&fromid=3334786>)\n\n","source":"_posts/alg/finance/macd.md","raw":"# MACD 指标\n\nMACD ( Moving Average Convergence / Divergence ) 称为异同移动平均线, 是从双指数移动平均线发展而来的，由快的指数移动平均线（EMA12）减去慢的指数移动平均线（EMA26）得到快线DIF，再用2×（快线DIF-DIF的9日加权移动均线DEA）得到MACD柱. \n\n\n\n## MACD的计算过程\n\n**1、计算移动平均值（EMA）**\n\n$S_n: 今日收盘价​$\n\n12日EMA的算式为\n\n$EMA_{12}(n) = EMA_{12}(n - 1) * \\frac{11}{13} + S_n * \\frac{2}{13}​$\n\n\n\n26日EMA的算式为\n\n$EMA_{26}(n) = EMA_{26}(n - 1) * \\frac{25}{27} + S_n * \\frac{2}{27}​$\n\n\n\n**2、计算离差值（DIF）**\n\n$DIF(n) = EMA_{12}(n) - EMA_{26}(n)​$\n\n\n\n**3、计算DIF的9日EMA**\n\n根据离差值计算其9日的EMA，即离差平均值，是所求的MACD值。为了不与指标原名相混淆，此值又名DEA或DEM.\n\n$DEA(n) = DEA(n-1) * \\frac{8}{10} + DIF(n)*\\frac{2}{10}​$\n\n计算出的DIF和DEA的数值均为正值或负值。\n\n$MACD柱状图 = (DIF - DEA) * 2​$\n\n\n\n## 可参考方案\n\n1. 当DIF和DEA均大于0(即在图形上表示为它们处于零线以上)并向上移动时，一般表示为行情处于[多头行情](https://baike.baidu.com/item/%E5%A4%9A%E5%A4%B4%E8%A1%8C%E6%83%85)中，可以买入[开仓](https://baike.baidu.com/item/%E5%BC%80%E4%BB%93)或[多头持仓](https://baike.baidu.com/item/%E5%A4%9A%E5%A4%B4%E6%8C%81%E4%BB%93)；\n\n2. 当DIF和DEA均小于0(即在图形上表示为它们处于零线以下)并向下移动时，一般表示为行情处于[空头行情](https://baike.baidu.com/item/%E7%A9%BA%E5%A4%B4%E8%A1%8C%E6%83%85)中，可以卖出开仓或观望。\n\n3. 当DIF和DEA均大于0(即在图形上表示为它们处于零线以上)但都向下移动时，一般表示为行情处于下跌阶段，可以卖出开仓和观望；\n\n4. 当DIF和DEA均小于0时(即在图形上表示为它们处于零线以下)但向上移动时，一般表示为行情即将上涨，股票将上涨，可以买入开仓或多头持仓。\n\n\n\n其买卖原则为：\n\n1. DIF、DEA均为正，DIF向上突破DEA，买入信号参考。\n\n2. DIF、DEA均为负，DIF向下跌破DEA，卖出信号参考。\n\n3. DIF线与K线发生背离，行情可能出现反转信号。\n\n4. DIF、DEA的值从正数变成负数，或者从负数变成正数并不是交易信号，因为它们落后于市场。\n\n\n\n## 基本用法\n\n1. MACD[金叉](https://baike.baidu.com/item/%E9%87%91%E5%8F%89)：DIFF 由下向上突破 DEA，为买入信号。\n\n2. MACD[死叉](https://baike.baidu.com/item/%E6%AD%BB%E5%8F%89)：DIFF 由上向下突破 DEA，为卖出信号。\n\n3. MACD 绿转红：MACD 值由负变正，市场由[空头](https://baike.baidu.com/item/%E7%A9%BA%E5%A4%B4/13825859)转为多头。\n\n4. MACD 红转绿：MACD 值由正变负，市场由多头转为空头。\n\n5. DIFF 与 DEA 均为正值,即都在零轴线以上时，大势属[多头市场](https://baike.baidu.com/item/%E5%A4%9A%E5%A4%B4%E5%B8%82%E5%9C%BA)，DIFF 向上突破 DEA，可作买入信号。\n\n6. DIFF 与 DEA 均为负值,即都在零轴线以下时，大势属[空头市场](https://baike.baidu.com/item/%E7%A9%BA%E5%A4%B4%E5%B8%82%E5%9C%BA)，DIFF 向下跌破 DEA，可作卖出信号。\n\n7. 当 DEA 线与 K 线趋势发生[背离](https://baike.baidu.com/item/%E8%83%8C%E7%A6%BB/3696078)时为反转信号。\n\n8. DEA 在盘整局面时失误率较高,但如果配合[RSI](https://baike.baidu.com/item/RSI) 及[KD](https://baike.baidu.com/item/KD)j指标可适当弥补缺点。\n\n\n\n\n\n\n\n**参考:**\n\n[MACD-百度百科](<https://baike.baidu.com/item/MACD%E6%8C%87%E6%A0%87/6271283?fromtitle=MACD&fromid=3334786>)\n\n","slug":"alg/finance/macd","published":1,"date":"2019-06-27T15:43:36.269Z","updated":"2019-07-01T01:31:59.159Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgub001h8seoh2sn6kub","content":"<h1 id=\"MACD-指标\"><a href=\"#MACD-指标\" class=\"headerlink\" title=\"MACD 指标\"></a>MACD 指标</h1><p>MACD ( Moving Average Convergence / Divergence ) 称为异同移动平均线, 是从双指数移动平均线发展而来的，由快的指数移动平均线（EMA12）减去慢的指数移动平均线（EMA26）得到快线DIF，再用2×（快线DIF-DIF的9日加权移动均线DEA）得到MACD柱. </p>\n<h2 id=\"MACD的计算过程\"><a href=\"#MACD的计算过程\" class=\"headerlink\" title=\"MACD的计算过程\"></a>MACD的计算过程</h2><p><strong>1、计算移动平均值（EMA）</strong></p>\n<p>$S_n: 今日收盘价​$</p>\n<p>12日EMA的算式为</p>\n<p>$EMA_{12}(n) = EMA_{12}(n - 1) <em> \\frac{11}{13} + S_n </em> \\frac{2}{13}​$</p>\n<p>26日EMA的算式为</p>\n<p>$EMA_{26}(n) = EMA_{26}(n - 1) <em> \\frac{25}{27} + S_n </em> \\frac{2}{27}​$</p>\n<p><strong>2、计算离差值（DIF）</strong></p>\n<p>$DIF(n) = EMA_{12}(n) - EMA_{26}(n)​$</p>\n<p><strong>3、计算DIF的9日EMA</strong></p>\n<p>根据离差值计算其9日的EMA，即离差平均值，是所求的MACD值。为了不与指标原名相混淆，此值又名DEA或DEM.</p>\n<p>$DEA(n) = DEA(n-1) <em> \\frac{8}{10} + DIF(n)</em>\\frac{2}{10}​$</p>\n<p>计算出的DIF和DEA的数值均为正值或负值。</p>\n<p>$MACD柱状图 = (DIF - DEA) * 2​$</p>\n<h2 id=\"可参考方案\"><a href=\"#可参考方案\" class=\"headerlink\" title=\"可参考方案\"></a>可参考方案</h2><ol>\n<li><p>当DIF和DEA均大于0(即在图形上表示为它们处于零线以上)并向上移动时，一般表示为行情处于<a href=\"https://baike.baidu.com/item/%E5%A4%9A%E5%A4%B4%E8%A1%8C%E6%83%85\" target=\"_blank\" rel=\"noopener\">多头行情</a>中，可以买入<a href=\"https://baike.baidu.com/item/%E5%BC%80%E4%BB%93\" target=\"_blank\" rel=\"noopener\">开仓</a>或<a href=\"https://baike.baidu.com/item/%E5%A4%9A%E5%A4%B4%E6%8C%81%E4%BB%93\" target=\"_blank\" rel=\"noopener\">多头持仓</a>；</p>\n</li>\n<li><p>当DIF和DEA均小于0(即在图形上表示为它们处于零线以下)并向下移动时，一般表示为行情处于<a href=\"https://baike.baidu.com/item/%E7%A9%BA%E5%A4%B4%E8%A1%8C%E6%83%85\" target=\"_blank\" rel=\"noopener\">空头行情</a>中，可以卖出开仓或观望。</p>\n</li>\n<li><p>当DIF和DEA均大于0(即在图形上表示为它们处于零线以上)但都向下移动时，一般表示为行情处于下跌阶段，可以卖出开仓和观望；</p>\n</li>\n<li><p>当DIF和DEA均小于0时(即在图形上表示为它们处于零线以下)但向上移动时，一般表示为行情即将上涨，股票将上涨，可以买入开仓或多头持仓。</p>\n</li>\n</ol>\n<p>其买卖原则为：</p>\n<ol>\n<li><p>DIF、DEA均为正，DIF向上突破DEA，买入信号参考。</p>\n</li>\n<li><p>DIF、DEA均为负，DIF向下跌破DEA，卖出信号参考。</p>\n</li>\n<li><p>DIF线与K线发生背离，行情可能出现反转信号。</p>\n</li>\n<li><p>DIF、DEA的值从正数变成负数，或者从负数变成正数并不是交易信号，因为它们落后于市场。</p>\n</li>\n</ol>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><ol>\n<li><p>MACD<a href=\"https://baike.baidu.com/item/%E9%87%91%E5%8F%89\" target=\"_blank\" rel=\"noopener\">金叉</a>：DIFF 由下向上突破 DEA，为买入信号。</p>\n</li>\n<li><p>MACD<a href=\"https://baike.baidu.com/item/%E6%AD%BB%E5%8F%89\" target=\"_blank\" rel=\"noopener\">死叉</a>：DIFF 由上向下突破 DEA，为卖出信号。</p>\n</li>\n<li><p>MACD 绿转红：MACD 值由负变正，市场由<a href=\"https://baike.baidu.com/item/%E7%A9%BA%E5%A4%B4/13825859\" target=\"_blank\" rel=\"noopener\">空头</a>转为多头。</p>\n</li>\n<li><p>MACD 红转绿：MACD 值由正变负，市场由多头转为空头。</p>\n</li>\n<li><p>DIFF 与 DEA 均为正值,即都在零轴线以上时，大势属<a href=\"https://baike.baidu.com/item/%E5%A4%9A%E5%A4%B4%E5%B8%82%E5%9C%BA\" target=\"_blank\" rel=\"noopener\">多头市场</a>，DIFF 向上突破 DEA，可作买入信号。</p>\n</li>\n<li><p>DIFF 与 DEA 均为负值,即都在零轴线以下时，大势属<a href=\"https://baike.baidu.com/item/%E7%A9%BA%E5%A4%B4%E5%B8%82%E5%9C%BA\" target=\"_blank\" rel=\"noopener\">空头市场</a>，DIFF 向下跌破 DEA，可作卖出信号。</p>\n</li>\n<li><p>当 DEA 线与 K 线趋势发生<a href=\"https://baike.baidu.com/item/%E8%83%8C%E7%A6%BB/3696078\" target=\"_blank\" rel=\"noopener\">背离</a>时为反转信号。</p>\n</li>\n<li><p>DEA 在盘整局面时失误率较高,但如果配合<a href=\"https://baike.baidu.com/item/RSI\" target=\"_blank\" rel=\"noopener\">RSI</a> 及<a href=\"https://baike.baidu.com/item/KD\" target=\"_blank\" rel=\"noopener\">KD</a>j指标可适当弥补缺点。</p>\n</li>\n</ol>\n<p><strong>参考:</strong></p>\n<p><a href=\"https://baike.baidu.com/item/MACD%E6%8C%87%E6%A0%87/6271283?fromtitle=MACD&amp;fromid=3334786\" target=\"_blank\" rel=\"noopener\">MACD-百度百科</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MACD-指标\"><a href=\"#MACD-指标\" class=\"headerlink\" title=\"MACD 指标\"></a>MACD 指标</h1><p>MACD ( Moving Average Convergence / Divergence ) 称为异同移动平均线, 是从双指数移动平均线发展而来的，由快的指数移动平均线（EMA12）减去慢的指数移动平均线（EMA26）得到快线DIF，再用2×（快线DIF-DIF的9日加权移动均线DEA）得到MACD柱. </p>\n<h2 id=\"MACD的计算过程\"><a href=\"#MACD的计算过程\" class=\"headerlink\" title=\"MACD的计算过程\"></a>MACD的计算过程</h2><p><strong>1、计算移动平均值（EMA）</strong></p>\n<p>$S_n: 今日收盘价​$</p>\n<p>12日EMA的算式为</p>\n<p>$EMA_{12}(n) = EMA_{12}(n - 1) <em> \\frac{11}{13} + S_n </em> \\frac{2}{13}​$</p>\n<p>26日EMA的算式为</p>\n<p>$EMA_{26}(n) = EMA_{26}(n - 1) <em> \\frac{25}{27} + S_n </em> \\frac{2}{27}​$</p>\n<p><strong>2、计算离差值（DIF）</strong></p>\n<p>$DIF(n) = EMA_{12}(n) - EMA_{26}(n)​$</p>\n<p><strong>3、计算DIF的9日EMA</strong></p>\n<p>根据离差值计算其9日的EMA，即离差平均值，是所求的MACD值。为了不与指标原名相混淆，此值又名DEA或DEM.</p>\n<p>$DEA(n) = DEA(n-1) <em> \\frac{8}{10} + DIF(n)</em>\\frac{2}{10}​$</p>\n<p>计算出的DIF和DEA的数值均为正值或负值。</p>\n<p>$MACD柱状图 = (DIF - DEA) * 2​$</p>\n<h2 id=\"可参考方案\"><a href=\"#可参考方案\" class=\"headerlink\" title=\"可参考方案\"></a>可参考方案</h2><ol>\n<li><p>当DIF和DEA均大于0(即在图形上表示为它们处于零线以上)并向上移动时，一般表示为行情处于<a href=\"https://baike.baidu.com/item/%E5%A4%9A%E5%A4%B4%E8%A1%8C%E6%83%85\" target=\"_blank\" rel=\"noopener\">多头行情</a>中，可以买入<a href=\"https://baike.baidu.com/item/%E5%BC%80%E4%BB%93\" target=\"_blank\" rel=\"noopener\">开仓</a>或<a href=\"https://baike.baidu.com/item/%E5%A4%9A%E5%A4%B4%E6%8C%81%E4%BB%93\" target=\"_blank\" rel=\"noopener\">多头持仓</a>；</p>\n</li>\n<li><p>当DIF和DEA均小于0(即在图形上表示为它们处于零线以下)并向下移动时，一般表示为行情处于<a href=\"https://baike.baidu.com/item/%E7%A9%BA%E5%A4%B4%E8%A1%8C%E6%83%85\" target=\"_blank\" rel=\"noopener\">空头行情</a>中，可以卖出开仓或观望。</p>\n</li>\n<li><p>当DIF和DEA均大于0(即在图形上表示为它们处于零线以上)但都向下移动时，一般表示为行情处于下跌阶段，可以卖出开仓和观望；</p>\n</li>\n<li><p>当DIF和DEA均小于0时(即在图形上表示为它们处于零线以下)但向上移动时，一般表示为行情即将上涨，股票将上涨，可以买入开仓或多头持仓。</p>\n</li>\n</ol>\n<p>其买卖原则为：</p>\n<ol>\n<li><p>DIF、DEA均为正，DIF向上突破DEA，买入信号参考。</p>\n</li>\n<li><p>DIF、DEA均为负，DIF向下跌破DEA，卖出信号参考。</p>\n</li>\n<li><p>DIF线与K线发生背离，行情可能出现反转信号。</p>\n</li>\n<li><p>DIF、DEA的值从正数变成负数，或者从负数变成正数并不是交易信号，因为它们落后于市场。</p>\n</li>\n</ol>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><ol>\n<li><p>MACD<a href=\"https://baike.baidu.com/item/%E9%87%91%E5%8F%89\" target=\"_blank\" rel=\"noopener\">金叉</a>：DIFF 由下向上突破 DEA，为买入信号。</p>\n</li>\n<li><p>MACD<a href=\"https://baike.baidu.com/item/%E6%AD%BB%E5%8F%89\" target=\"_blank\" rel=\"noopener\">死叉</a>：DIFF 由上向下突破 DEA，为卖出信号。</p>\n</li>\n<li><p>MACD 绿转红：MACD 值由负变正，市场由<a href=\"https://baike.baidu.com/item/%E7%A9%BA%E5%A4%B4/13825859\" target=\"_blank\" rel=\"noopener\">空头</a>转为多头。</p>\n</li>\n<li><p>MACD 红转绿：MACD 值由正变负，市场由多头转为空头。</p>\n</li>\n<li><p>DIFF 与 DEA 均为正值,即都在零轴线以上时，大势属<a href=\"https://baike.baidu.com/item/%E5%A4%9A%E5%A4%B4%E5%B8%82%E5%9C%BA\" target=\"_blank\" rel=\"noopener\">多头市场</a>，DIFF 向上突破 DEA，可作买入信号。</p>\n</li>\n<li><p>DIFF 与 DEA 均为负值,即都在零轴线以下时，大势属<a href=\"https://baike.baidu.com/item/%E7%A9%BA%E5%A4%B4%E5%B8%82%E5%9C%BA\" target=\"_blank\" rel=\"noopener\">空头市场</a>，DIFF 向下跌破 DEA，可作卖出信号。</p>\n</li>\n<li><p>当 DEA 线与 K 线趋势发生<a href=\"https://baike.baidu.com/item/%E8%83%8C%E7%A6%BB/3696078\" target=\"_blank\" rel=\"noopener\">背离</a>时为反转信号。</p>\n</li>\n<li><p>DEA 在盘整局面时失误率较高,但如果配合<a href=\"https://baike.baidu.com/item/RSI\" target=\"_blank\" rel=\"noopener\">RSI</a> 及<a href=\"https://baike.baidu.com/item/KD\" target=\"_blank\" rel=\"noopener\">KD</a>j指标可适当弥补缺点。</p>\n</li>\n</ol>\n<p><strong>参考:</strong></p>\n<p><a href=\"https://baike.baidu.com/item/MACD%E6%8C%87%E6%A0%87/6271283?fromtitle=MACD&amp;fromid=3334786\" target=\"_blank\" rel=\"noopener\">MACD-百度百科</a></p>\n"},{"_content":"## leader选取问题\n\n**触发条件：**\n\n1. 一般情况下，追随者接到领导者的心跳时，把ElectionTimeout清零，不会触发；\n2. 领导者故障，追随者的ElectionTimeout超时发生时，会变成候选者，触发领导人选取；\n\n\n\n**候选操作过程：**\n\n> 追随者自增当前任期，转换为Candidate，对自己投票，并发起RequestVote RPC，等待下面三种情形发生；\n\n1. 获得超过半数服务器的投票，赢得选举，成为领导者；\n2. 另一台服务器赢得选举，并接收到对应的心跳，成为追随者；\n3. 选举超时，没有任何一台服务器赢得选举，自增当前任期，重新发起选举；\n\n\n\n\n\n\n\n","source":"_posts/alg/raft/3_raft领导选取.md","raw":"## leader选取问题\n\n**触发条件：**\n\n1. 一般情况下，追随者接到领导者的心跳时，把ElectionTimeout清零，不会触发；\n2. 领导者故障，追随者的ElectionTimeout超时发生时，会变成候选者，触发领导人选取；\n\n\n\n**候选操作过程：**\n\n> 追随者自增当前任期，转换为Candidate，对自己投票，并发起RequestVote RPC，等待下面三种情形发生；\n\n1. 获得超过半数服务器的投票，赢得选举，成为领导者；\n2. 另一台服务器赢得选举，并接收到对应的心跳，成为追随者；\n3. 选举超时，没有任何一台服务器赢得选举，自增当前任期，重新发起选举；\n\n\n\n\n\n\n\n","slug":"alg/raft/3_raft领导选取","published":1,"date":"2018-10-25T10:35:09.100Z","updated":"2018-12-22T08:17:02.789Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgug001k8seom7rr6jre","content":"<h2 id=\"leader选取问题\"><a href=\"#leader选取问题\" class=\"headerlink\" title=\"leader选取问题\"></a>leader选取问题</h2><p><strong>触发条件：</strong></p>\n<ol>\n<li>一般情况下，追随者接到领导者的心跳时，把ElectionTimeout清零，不会触发；</li>\n<li>领导者故障，追随者的ElectionTimeout超时发生时，会变成候选者，触发领导人选取；</li>\n</ol>\n<p><strong>候选操作过程：</strong></p>\n<blockquote>\n<p>追随者自增当前任期，转换为Candidate，对自己投票，并发起RequestVote RPC，等待下面三种情形发生；</p>\n</blockquote>\n<ol>\n<li>获得超过半数服务器的投票，赢得选举，成为领导者；</li>\n<li>另一台服务器赢得选举，并接收到对应的心跳，成为追随者；</li>\n<li>选举超时，没有任何一台服务器赢得选举，自增当前任期，重新发起选举；</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"leader选取问题\"><a href=\"#leader选取问题\" class=\"headerlink\" title=\"leader选取问题\"></a>leader选取问题</h2><p><strong>触发条件：</strong></p>\n<ol>\n<li>一般情况下，追随者接到领导者的心跳时，把ElectionTimeout清零，不会触发；</li>\n<li>领导者故障，追随者的ElectionTimeout超时发生时，会变成候选者，触发领导人选取；</li>\n</ol>\n<p><strong>候选操作过程：</strong></p>\n<blockquote>\n<p>追随者自增当前任期，转换为Candidate，对自己投票，并发起RequestVote RPC，等待下面三种情形发生；</p>\n</blockquote>\n<ol>\n<li>获得超过半数服务器的投票，赢得选举，成为领导者；</li>\n<li>另一台服务器赢得选举，并接收到对应的心跳，成为追随者；</li>\n<li>选举超时，没有任何一台服务器赢得选举，自增当前任期，重新发起选举；</li>\n</ol>\n"},{"titile":"learn raft","date":"2018-12-09T14:31:08.000Z","_content":"\n参考: https://github.com/shishujuan/mit6.824-2017-raft.git\n\n\n\n`raft.go @Make`\n\n1. 初始化 rf\n\n```go\nstate=Follower // 初始化成 Folloer\n\nrf.heartbeatInterval = time.Duration(HeartbeatInterval) * time.Millisecond // 50 ms\n```\n\n\n\n2. 启动 bot\n\n```go\nelectionTimeout := getRandomElectionTimeout() // 范围 {300 + [0,100)}ms\n\nswitch state {\n    case Follower:\n        select {\n        case <-rf.appendEntryCh: // 不用去处理接收的日志吗?\n        case <-rf.grantVoteCh:   // ??\n        case <-time.After(electionTimeout): // 选举超时, Follower -> Candidate\n            rf.mu.Lock()\n            rf.convertToCandidate()\n            rf.mu.Unlock()\n        }\n    case Candidate:\n        go rf.leaderElection() // 1. 发起选举\n        select {\n        case <-rf.appendEntryCh:\n        case <-rf.grantVoteCh:\n        case <-rf.leaderCh:\n        case <-time.After(electionTimeout):\n            rf.mu.Lock()\n            rf.convertToCandidate() // 选举超时, 重新开始选举\n            rf.mu.Unlock()\n        }\n    case Leader:\n        rf.startAppendEntries() // 开始去追加日志\n        time.Sleep(rf.heartbeatInterval) // 心跳间隙\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/alg/raft/ReadRaft.md","raw":"---\ntitile: learn raft\ndate: 2018-12-09 22:31:08\ncategories:\n- alg\ntags:\n- raft learn\n---\n\n参考: https://github.com/shishujuan/mit6.824-2017-raft.git\n\n\n\n`raft.go @Make`\n\n1. 初始化 rf\n\n```go\nstate=Follower // 初始化成 Folloer\n\nrf.heartbeatInterval = time.Duration(HeartbeatInterval) * time.Millisecond // 50 ms\n```\n\n\n\n2. 启动 bot\n\n```go\nelectionTimeout := getRandomElectionTimeout() // 范围 {300 + [0,100)}ms\n\nswitch state {\n    case Follower:\n        select {\n        case <-rf.appendEntryCh: // 不用去处理接收的日志吗?\n        case <-rf.grantVoteCh:   // ??\n        case <-time.After(electionTimeout): // 选举超时, Follower -> Candidate\n            rf.mu.Lock()\n            rf.convertToCandidate()\n            rf.mu.Unlock()\n        }\n    case Candidate:\n        go rf.leaderElection() // 1. 发起选举\n        select {\n        case <-rf.appendEntryCh:\n        case <-rf.grantVoteCh:\n        case <-rf.leaderCh:\n        case <-time.After(electionTimeout):\n            rf.mu.Lock()\n            rf.convertToCandidate() // 选举超时, 重新开始选举\n            rf.mu.Unlock()\n        }\n    case Leader:\n        rf.startAppendEntries() // 开始去追加日志\n        time.Sleep(rf.heartbeatInterval) // 心跳间隙\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"alg/raft/ReadRaft","published":1,"updated":"2018-12-22T09:08:57.877Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcguk001m8seomuka8koe","content":"<p>参考: <a href=\"https://github.com/shishujuan/mit6.824-2017-raft.git\" target=\"_blank\" rel=\"noopener\">https://github.com/shishujuan/mit6.824-2017-raft.git</a></p>\n<p><code>raft.go @Make</code></p>\n<ol>\n<li>初始化 rf</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state=Follower <span class=\"comment\">// 初始化成 Folloer</span></span><br><span class=\"line\"></span><br><span class=\"line\">rf.heartbeatInterval = time.Duration(HeartbeatInterval) * time.Millisecond <span class=\"comment\">// 50 ms</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>启动 bot</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">electionTimeout := getRandomElectionTimeout() <span class=\"comment\">// 范围 &#123;300 + [0,100)&#125;ms</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> state &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Follower:</span><br><span class=\"line\">        <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-rf.appendEntryCh: <span class=\"comment\">// 不用去处理接收的日志吗?</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-rf.grantVoteCh:   <span class=\"comment\">// ??</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-time.After(electionTimeout): <span class=\"comment\">// 选举超时, Follower -&gt; Candidate</span></span><br><span class=\"line\">            rf.mu.Lock()</span><br><span class=\"line\">            rf.convertToCandidate()</span><br><span class=\"line\">            rf.mu.Unlock()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Candidate:</span><br><span class=\"line\">        <span class=\"keyword\">go</span> rf.leaderElection() <span class=\"comment\">// 1. 发起选举</span></span><br><span class=\"line\">        <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-rf.appendEntryCh:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-rf.grantVoteCh:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-rf.leaderCh:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-time.After(electionTimeout):</span><br><span class=\"line\">            rf.mu.Lock()</span><br><span class=\"line\">            rf.convertToCandidate() <span class=\"comment\">// 选举超时, 重新开始选举</span></span><br><span class=\"line\">            rf.mu.Unlock()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Leader:</span><br><span class=\"line\">        rf.startAppendEntries() <span class=\"comment\">// 开始去追加日志</span></span><br><span class=\"line\">        time.Sleep(rf.heartbeatInterval) <span class=\"comment\">// 心跳间隙</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>参考: <a href=\"https://github.com/shishujuan/mit6.824-2017-raft.git\" target=\"_blank\" rel=\"noopener\">https://github.com/shishujuan/mit6.824-2017-raft.git</a></p>\n<p><code>raft.go @Make</code></p>\n<ol>\n<li>初始化 rf</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state=Follower <span class=\"comment\">// 初始化成 Folloer</span></span><br><span class=\"line\"></span><br><span class=\"line\">rf.heartbeatInterval = time.Duration(HeartbeatInterval) * time.Millisecond <span class=\"comment\">// 50 ms</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>启动 bot</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">electionTimeout := getRandomElectionTimeout() <span class=\"comment\">// 范围 &#123;300 + [0,100)&#125;ms</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> state &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Follower:</span><br><span class=\"line\">        <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-rf.appendEntryCh: <span class=\"comment\">// 不用去处理接收的日志吗?</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-rf.grantVoteCh:   <span class=\"comment\">// ??</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-time.After(electionTimeout): <span class=\"comment\">// 选举超时, Follower -&gt; Candidate</span></span><br><span class=\"line\">            rf.mu.Lock()</span><br><span class=\"line\">            rf.convertToCandidate()</span><br><span class=\"line\">            rf.mu.Unlock()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Candidate:</span><br><span class=\"line\">        <span class=\"keyword\">go</span> rf.leaderElection() <span class=\"comment\">// 1. 发起选举</span></span><br><span class=\"line\">        <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-rf.appendEntryCh:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-rf.grantVoteCh:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-rf.leaderCh:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-time.After(electionTimeout):</span><br><span class=\"line\">            rf.mu.Lock()</span><br><span class=\"line\">            rf.convertToCandidate() <span class=\"comment\">// 选举超时, 重新开始选举</span></span><br><span class=\"line\">            rf.mu.Unlock()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Leader:</span><br><span class=\"line\">        rf.startAppendEntries() <span class=\"comment\">// 开始去追加日志</span></span><br><span class=\"line\">        time.Sleep(rf.heartbeatInterval) <span class=\"comment\">// 心跳间隙</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"# raft 基础理论\n\n参考: https://www.jianshu.com/p/096ae57d1fe0\n\n\n\n问题分解为：领导选取、日志复制、安全和成员变化\n\n\n\n## 基础概念\n\n### 复制状态机\n\n![复制状态机](https://upload-images.jianshu.io/upload_images/3412164-922866cdd2dd47c6.png)\n\n- 复制状态机通过复制日志来实现：\n  - 日志：每台机器保存一份日志，日志来自于客户端的请求，包含一系列的命令\n  - 状态机：状态机会按顺序执行这些命令\n  - 一致性模型：分布式环境下，保证多机的日志是一致的，这样回放到状态机中的状态是一致的\n\n\n\n### 服务器状态\n\n每台服务器均有可能存在下面三种情况:\n\n1. 领导者\n2. 候选人\n3. 追随者\n\n![服务器转态转换图](https://upload-images.jianshu.io/upload_images/3412164-07ae960bce59aab5.png)\n\n追随者只响应其他服务器的请求。如果追随者没有收到任何消息，它会成为一个候选人并且开始一次选举。收到大多数服务器投票的候选人会成为新的领导人。领导人在它们宕机之前会一直保持领导人的状态。\n\n\n\n### 任期\n\nRaft 算法将时间划分成为任意不同长度的任期（term）。任期用连续的数字进行表示。每一个任期的开始都是一次选举（election），一个或多个候选人会试图成为领导人。如果一个候选人赢得了选举，它就会在该任期的剩余时间担任领导人。在某些情况下，选票会被瓜分，有可能没有选出领导人，那么，将会开始另一个任期，并且立刻开始下一次选举。Raft 算法保证在给定的一个任期最多只有一个领导人。\n\n![任期示意图](https://upload-images.jianshu.io/upload_images/3412164-d67cbaab1479a864.png)\n\n### RPC\n\nRaft 算法中服务器节点之间通信使用远程过程调用（RPCs），并且基本的一致性算法只需要两种类型的 RPCs。请求投票（`RequestVote`） RPCs 由候选人在选举期间发起，然后附加条目（`AppendEntries`）RPCs 由领导人发起，用来复制日志和提供一种心跳机制。为了在服务器之间传输快照增加了第三种 RPC。当服务器没有及时的收到 RPC 的响应时，会进行重试， 并且他们能够并行的发起 RPCs 来获得最佳的性能。\n\nRPC有三种：\n\n1. RequestVote RPC：候选人在选举期间发起\n2. AppendEntries RPC：领导人发起的一种心跳机制，复制日志也在该命令中完成\n3. InstallSnapshot RPC: 领导者使用该RPC来发送快照给太落后的追随者。\n\n超时设置：\n\n1. BroadcastTime :  领导者的心跳超时时间\n2. Election Timeout: 追随者设置的候选超时时间\n3. MTBT :指的是单个服务器发生故障的间隔时间的平均数\n\nBroadcastTime << ElectionTimeout << MTBF\n 两个原则：\n\n1. BroadcastTime应该比ElectionTimeout小一个数量级，为的是使领导人能够持续发送心跳信息（heartbeat）来阻止追随者们开始选举；\n2. ElectionTimeout也要比MTBF小几个数量级，为的是使得系统稳定运行。\n\n一般BroadcastTime大约为0.5毫秒到20毫秒，ElectionTimeout一般在10ms到500ms之间。大多数服务器的MTBF都在几个月甚至更长。\n\n\n\n## leader选取问题\n\n**触发条件：**\n\n1. 一般情况下，追随者接到领导者的心跳时，把ElectionTimeout清零，不会触发；\n2. 领导者故障，追随者的ElectionTimeout超时发生时，会变成候选者，触发领导人选取；\n\n\n\n**候选操作过程：**\n\n> 追随者自增当前任期，转换为Candidate，对自己投票，并发起RequestVote RPC，等待下面三种情形发生；\n\n1. 获得超过半数服务器的投票，赢得选举，成为领导者；\n2. 另一台服务器赢得选举，并接收到对应的心跳，成为追随者；\n3. 选举超时，没有任何一台服务器赢得选举，自增当前任期，重新发起选举；\n\n\n\n- 注意事项：\n\n1. 服务器在一个任期内，最多能给一个候选人投票，采用先到先服务原则；\n2. 候选者等待投票时，可能会接收到来自其它声明为领导人的的AppendEntries RPC。如果该领导人的任期（RPC中有）比当前候选人的当前任期要大，则候选人认为该领导人合法，并转换成追随者；如果RPC中的任期小于候选人的当前任期，则候选人拒绝此次RPC，继续保持候选人状态；\n3. 候选人既没有赢得选举也没有输掉选举：如果许多追随者在同一时刻都成为了候选人，选票会被分散，可能没有候选人能获得大多数的选票。当这种情形发生时，每一个候选人都会超时，并且通过自增任期号和发起另一轮 RequestVote RPC 来开始新的选举。然而，如果没有其它手段来分配选票的话，这种情形可能会无限的重复下去。所以Raft使用的随机的选举超时时间（150~300ms之间），来避免这种情况发生。\n\n- 问题探讨：为什么这里没有谈收到其他候选者的RequestVote RPC请求？\n   可能的解释：\n\n1. 候选者已经给自己投票了，一个候选者在一个任期只会给一个人投票，不会给其他人再投票了；\n2. 也有可能算法本身设定候选者就拒绝所有的其他服务器的请求。\n\n\n\n## 日志复制\n\n![日志复制问题](https://upload-images.jianshu.io/upload_images/3412164-7bfb13d382599f65.png)\n\n接受命令的过程：\n\n1. 领导者接受客户端请求；\n2. 领导者把指令追加到日志；\n3. 发送AppendEntries RPC到追随者；\n4. 领导者收到大多数追随者的确认后，领导者Commit该日志，把日志在状态机中回放，并返回结果给客户端；\n\n\n\n提交过程：\n\n1. 在下一个心跳阶段，领导者再次发送AppendEntries RPC给追随者，日志已经commited；\n2. 追随者收到Commited日志后，将日志在状态机中回放。\n\n\n\n## 安全性\n\n到目前为止描述的机制并不能充分的保证每一个状态机会按照相同的顺序执行相同的指令，例如：一个跟随者可能会进入不可用状态同时领导人已经提交了若干的日志条目，然后这个跟随者可能会被选举为领导人并且覆盖这些日志条目；因此，不同的状态机可能会执行不同的指令序列。\n\n### 1. 领导者追加日志（Append-Only)\n\n领导者永远不会覆盖已经存在的日志条目；\n日志永远只有一个流向：从领导者到追随者；\n\n### 2. 选举限制：投票阻止没有全部日志条目的服务器赢得选举\n\n如果投票者的日志比候选人的新，拒绝投票请求；\n这意味着要赢得选举，候选者的日志至少和大多数服务器的日志一样新，那么它一定包含全部的已经提交的日志条目。\n\n### 3. 永远不提交任期之前的日志条目（只提交任期内的日志条目）\n\n在Raft算法中，当一个日志被安全的复制到绝大多数的机器上面，即AppendEntries RPC在绝大多数服务器正确返回了，那么这个日志就是被提交了，然后领导者会更新commit index。\n\n![](https://upload-images.jianshu.io/upload_images/3412164-45a235af7798e8f2.png)\n\n如果允许提交任期之前的日志条目，那么在步骤c中，我们就会把之前任期为2的日志提交到其他服务器中去，并造成了大多数机器存在了日志为2的情况。所以造成了d中S5中任期为3的日志条目会覆盖掉已经提交的日志的情况。\n\nRaft 从来不会通过计算复制的数目来提交之前人气的日志条目。只有领导人当前任期的日志条目才能通过计算数目来进行提交。一旦当前任期的日志条目以这种方式被提交，那么由于日志匹配原则（Log Matching Property），之前的日志条目也都会被间接的提交。\n\n论文中的这段话比较难理解，更加直观的说：由于Raft不会提交任期之前的日志条目，那么就不会从b过渡到c的情况，只能从b发生S5down机的情况下直接过渡到e，这样就产生的更新的任期，这样S5就没有机会被选为领导者了。\n\n### 4. 候选者和追随者崩溃\n\n候选者和追随者崩溃的情况处理要简单的多。如果这类角色崩溃了，那么后续发送给他们的 RequestVote和AppendEntries的所有RCP都会失败，Raft算法中处理这类失败就是简单的无限重试的方式。\n 　　如果这些服务器重新可用，那么这些RPC就会成功返回。如果一个服务器完成了一个RPC，但是在响应Leader前崩溃了，那么当他再次可用的时候还会收到相同的RPC请求，此时接收服务器负责检查，比如如果收到了已经包含该条日志的RPC请求，可以直接忽略这个请求，确保对系统是无害的。\n\n\n\n## 成员变化问题\n\n","source":"_posts/alg/raft/1_raft基础.md","raw":"# raft 基础理论\n\n参考: https://www.jianshu.com/p/096ae57d1fe0\n\n\n\n问题分解为：领导选取、日志复制、安全和成员变化\n\n\n\n## 基础概念\n\n### 复制状态机\n\n![复制状态机](https://upload-images.jianshu.io/upload_images/3412164-922866cdd2dd47c6.png)\n\n- 复制状态机通过复制日志来实现：\n  - 日志：每台机器保存一份日志，日志来自于客户端的请求，包含一系列的命令\n  - 状态机：状态机会按顺序执行这些命令\n  - 一致性模型：分布式环境下，保证多机的日志是一致的，这样回放到状态机中的状态是一致的\n\n\n\n### 服务器状态\n\n每台服务器均有可能存在下面三种情况:\n\n1. 领导者\n2. 候选人\n3. 追随者\n\n![服务器转态转换图](https://upload-images.jianshu.io/upload_images/3412164-07ae960bce59aab5.png)\n\n追随者只响应其他服务器的请求。如果追随者没有收到任何消息，它会成为一个候选人并且开始一次选举。收到大多数服务器投票的候选人会成为新的领导人。领导人在它们宕机之前会一直保持领导人的状态。\n\n\n\n### 任期\n\nRaft 算法将时间划分成为任意不同长度的任期（term）。任期用连续的数字进行表示。每一个任期的开始都是一次选举（election），一个或多个候选人会试图成为领导人。如果一个候选人赢得了选举，它就会在该任期的剩余时间担任领导人。在某些情况下，选票会被瓜分，有可能没有选出领导人，那么，将会开始另一个任期，并且立刻开始下一次选举。Raft 算法保证在给定的一个任期最多只有一个领导人。\n\n![任期示意图](https://upload-images.jianshu.io/upload_images/3412164-d67cbaab1479a864.png)\n\n### RPC\n\nRaft 算法中服务器节点之间通信使用远程过程调用（RPCs），并且基本的一致性算法只需要两种类型的 RPCs。请求投票（`RequestVote`） RPCs 由候选人在选举期间发起，然后附加条目（`AppendEntries`）RPCs 由领导人发起，用来复制日志和提供一种心跳机制。为了在服务器之间传输快照增加了第三种 RPC。当服务器没有及时的收到 RPC 的响应时，会进行重试， 并且他们能够并行的发起 RPCs 来获得最佳的性能。\n\nRPC有三种：\n\n1. RequestVote RPC：候选人在选举期间发起\n2. AppendEntries RPC：领导人发起的一种心跳机制，复制日志也在该命令中完成\n3. InstallSnapshot RPC: 领导者使用该RPC来发送快照给太落后的追随者。\n\n超时设置：\n\n1. BroadcastTime :  领导者的心跳超时时间\n2. Election Timeout: 追随者设置的候选超时时间\n3. MTBT :指的是单个服务器发生故障的间隔时间的平均数\n\nBroadcastTime << ElectionTimeout << MTBF\n 两个原则：\n\n1. BroadcastTime应该比ElectionTimeout小一个数量级，为的是使领导人能够持续发送心跳信息（heartbeat）来阻止追随者们开始选举；\n2. ElectionTimeout也要比MTBF小几个数量级，为的是使得系统稳定运行。\n\n一般BroadcastTime大约为0.5毫秒到20毫秒，ElectionTimeout一般在10ms到500ms之间。大多数服务器的MTBF都在几个月甚至更长。\n\n\n\n## leader选取问题\n\n**触发条件：**\n\n1. 一般情况下，追随者接到领导者的心跳时，把ElectionTimeout清零，不会触发；\n2. 领导者故障，追随者的ElectionTimeout超时发生时，会变成候选者，触发领导人选取；\n\n\n\n**候选操作过程：**\n\n> 追随者自增当前任期，转换为Candidate，对自己投票，并发起RequestVote RPC，等待下面三种情形发生；\n\n1. 获得超过半数服务器的投票，赢得选举，成为领导者；\n2. 另一台服务器赢得选举，并接收到对应的心跳，成为追随者；\n3. 选举超时，没有任何一台服务器赢得选举，自增当前任期，重新发起选举；\n\n\n\n- 注意事项：\n\n1. 服务器在一个任期内，最多能给一个候选人投票，采用先到先服务原则；\n2. 候选者等待投票时，可能会接收到来自其它声明为领导人的的AppendEntries RPC。如果该领导人的任期（RPC中有）比当前候选人的当前任期要大，则候选人认为该领导人合法，并转换成追随者；如果RPC中的任期小于候选人的当前任期，则候选人拒绝此次RPC，继续保持候选人状态；\n3. 候选人既没有赢得选举也没有输掉选举：如果许多追随者在同一时刻都成为了候选人，选票会被分散，可能没有候选人能获得大多数的选票。当这种情形发生时，每一个候选人都会超时，并且通过自增任期号和发起另一轮 RequestVote RPC 来开始新的选举。然而，如果没有其它手段来分配选票的话，这种情形可能会无限的重复下去。所以Raft使用的随机的选举超时时间（150~300ms之间），来避免这种情况发生。\n\n- 问题探讨：为什么这里没有谈收到其他候选者的RequestVote RPC请求？\n   可能的解释：\n\n1. 候选者已经给自己投票了，一个候选者在一个任期只会给一个人投票，不会给其他人再投票了；\n2. 也有可能算法本身设定候选者就拒绝所有的其他服务器的请求。\n\n\n\n## 日志复制\n\n![日志复制问题](https://upload-images.jianshu.io/upload_images/3412164-7bfb13d382599f65.png)\n\n接受命令的过程：\n\n1. 领导者接受客户端请求；\n2. 领导者把指令追加到日志；\n3. 发送AppendEntries RPC到追随者；\n4. 领导者收到大多数追随者的确认后，领导者Commit该日志，把日志在状态机中回放，并返回结果给客户端；\n\n\n\n提交过程：\n\n1. 在下一个心跳阶段，领导者再次发送AppendEntries RPC给追随者，日志已经commited；\n2. 追随者收到Commited日志后，将日志在状态机中回放。\n\n\n\n## 安全性\n\n到目前为止描述的机制并不能充分的保证每一个状态机会按照相同的顺序执行相同的指令，例如：一个跟随者可能会进入不可用状态同时领导人已经提交了若干的日志条目，然后这个跟随者可能会被选举为领导人并且覆盖这些日志条目；因此，不同的状态机可能会执行不同的指令序列。\n\n### 1. 领导者追加日志（Append-Only)\n\n领导者永远不会覆盖已经存在的日志条目；\n日志永远只有一个流向：从领导者到追随者；\n\n### 2. 选举限制：投票阻止没有全部日志条目的服务器赢得选举\n\n如果投票者的日志比候选人的新，拒绝投票请求；\n这意味着要赢得选举，候选者的日志至少和大多数服务器的日志一样新，那么它一定包含全部的已经提交的日志条目。\n\n### 3. 永远不提交任期之前的日志条目（只提交任期内的日志条目）\n\n在Raft算法中，当一个日志被安全的复制到绝大多数的机器上面，即AppendEntries RPC在绝大多数服务器正确返回了，那么这个日志就是被提交了，然后领导者会更新commit index。\n\n![](https://upload-images.jianshu.io/upload_images/3412164-45a235af7798e8f2.png)\n\n如果允许提交任期之前的日志条目，那么在步骤c中，我们就会把之前任期为2的日志提交到其他服务器中去，并造成了大多数机器存在了日志为2的情况。所以造成了d中S5中任期为3的日志条目会覆盖掉已经提交的日志的情况。\n\nRaft 从来不会通过计算复制的数目来提交之前人气的日志条目。只有领导人当前任期的日志条目才能通过计算数目来进行提交。一旦当前任期的日志条目以这种方式被提交，那么由于日志匹配原则（Log Matching Property），之前的日志条目也都会被间接的提交。\n\n论文中的这段话比较难理解，更加直观的说：由于Raft不会提交任期之前的日志条目，那么就不会从b过渡到c的情况，只能从b发生S5down机的情况下直接过渡到e，这样就产生的更新的任期，这样S5就没有机会被选为领导者了。\n\n### 4. 候选者和追随者崩溃\n\n候选者和追随者崩溃的情况处理要简单的多。如果这类角色崩溃了，那么后续发送给他们的 RequestVote和AppendEntries的所有RCP都会失败，Raft算法中处理这类失败就是简单的无限重试的方式。\n 　　如果这些服务器重新可用，那么这些RPC就会成功返回。如果一个服务器完成了一个RPC，但是在响应Leader前崩溃了，那么当他再次可用的时候还会收到相同的RPC请求，此时接收服务器负责检查，比如如果收到了已经包含该条日志的RPC请求，可以直接忽略这个请求，确保对系统是无害的。\n\n\n\n## 成员变化问题\n\n","slug":"alg/raft/1_raft基础","published":1,"date":"2018-10-25T10:33:24.559Z","updated":"2018-12-22T03:37:42.448Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgup001p8seodsagn8k3","content":"<h1 id=\"raft-基础理论\"><a href=\"#raft-基础理论\" class=\"headerlink\" title=\"raft 基础理论\"></a>raft 基础理论</h1><p>参考: <a href=\"https://www.jianshu.com/p/096ae57d1fe0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/096ae57d1fe0</a></p>\n<p>问题分解为：领导选取、日志复制、安全和成员变化</p>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"复制状态机\"><a href=\"#复制状态机\" class=\"headerlink\" title=\"复制状态机\"></a>复制状态机</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/3412164-922866cdd2dd47c6.png\" alt=\"复制状态机\"></p>\n<ul>\n<li>复制状态机通过复制日志来实现：<ul>\n<li>日志：每台机器保存一份日志，日志来自于客户端的请求，包含一系列的命令</li>\n<li>状态机：状态机会按顺序执行这些命令</li>\n<li>一致性模型：分布式环境下，保证多机的日志是一致的，这样回放到状态机中的状态是一致的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务器状态\"><a href=\"#服务器状态\" class=\"headerlink\" title=\"服务器状态\"></a>服务器状态</h3><p>每台服务器均有可能存在下面三种情况:</p>\n<ol>\n<li>领导者</li>\n<li>候选人</li>\n<li>追随者</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3412164-07ae960bce59aab5.png\" alt=\"服务器转态转换图\"></p>\n<p>追随者只响应其他服务器的请求。如果追随者没有收到任何消息，它会成为一个候选人并且开始一次选举。收到大多数服务器投票的候选人会成为新的领导人。领导人在它们宕机之前会一直保持领导人的状态。</p>\n<h3 id=\"任期\"><a href=\"#任期\" class=\"headerlink\" title=\"任期\"></a>任期</h3><p>Raft 算法将时间划分成为任意不同长度的任期（term）。任期用连续的数字进行表示。每一个任期的开始都是一次选举（election），一个或多个候选人会试图成为领导人。如果一个候选人赢得了选举，它就会在该任期的剩余时间担任领导人。在某些情况下，选票会被瓜分，有可能没有选出领导人，那么，将会开始另一个任期，并且立刻开始下一次选举。Raft 算法保证在给定的一个任期最多只有一个领导人。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3412164-d67cbaab1479a864.png\" alt=\"任期示意图\"></p>\n<h3 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h3><p>Raft 算法中服务器节点之间通信使用远程过程调用（RPCs），并且基本的一致性算法只需要两种类型的 RPCs。请求投票（<code>RequestVote</code>） RPCs 由候选人在选举期间发起，然后附加条目（<code>AppendEntries</code>）RPCs 由领导人发起，用来复制日志和提供一种心跳机制。为了在服务器之间传输快照增加了第三种 RPC。当服务器没有及时的收到 RPC 的响应时，会进行重试， 并且他们能够并行的发起 RPCs 来获得最佳的性能。</p>\n<p>RPC有三种：</p>\n<ol>\n<li>RequestVote RPC：候选人在选举期间发起</li>\n<li>AppendEntries RPC：领导人发起的一种心跳机制，复制日志也在该命令中完成</li>\n<li>InstallSnapshot RPC: 领导者使用该RPC来发送快照给太落后的追随者。</li>\n</ol>\n<p>超时设置：</p>\n<ol>\n<li>BroadcastTime :  领导者的心跳超时时间</li>\n<li>Election Timeout: 追随者设置的候选超时时间</li>\n<li>MTBT :指的是单个服务器发生故障的间隔时间的平均数</li>\n</ol>\n<p>BroadcastTime &lt;&lt; ElectionTimeout &lt;&lt; MTBF<br> 两个原则：</p>\n<ol>\n<li>BroadcastTime应该比ElectionTimeout小一个数量级，为的是使领导人能够持续发送心跳信息（heartbeat）来阻止追随者们开始选举；</li>\n<li>ElectionTimeout也要比MTBF小几个数量级，为的是使得系统稳定运行。</li>\n</ol>\n<p>一般BroadcastTime大约为0.5毫秒到20毫秒，ElectionTimeout一般在10ms到500ms之间。大多数服务器的MTBF都在几个月甚至更长。</p>\n<h2 id=\"leader选取问题\"><a href=\"#leader选取问题\" class=\"headerlink\" title=\"leader选取问题\"></a>leader选取问题</h2><p><strong>触发条件：</strong></p>\n<ol>\n<li>一般情况下，追随者接到领导者的心跳时，把ElectionTimeout清零，不会触发；</li>\n<li>领导者故障，追随者的ElectionTimeout超时发生时，会变成候选者，触发领导人选取；</li>\n</ol>\n<p><strong>候选操作过程：</strong></p>\n<blockquote>\n<p>追随者自增当前任期，转换为Candidate，对自己投票，并发起RequestVote RPC，等待下面三种情形发生；</p>\n</blockquote>\n<ol>\n<li>获得超过半数服务器的投票，赢得选举，成为领导者；</li>\n<li>另一台服务器赢得选举，并接收到对应的心跳，成为追随者；</li>\n<li>选举超时，没有任何一台服务器赢得选举，自增当前任期，重新发起选举；</li>\n</ol>\n<ul>\n<li>注意事项：</li>\n</ul>\n<ol>\n<li>服务器在一个任期内，最多能给一个候选人投票，采用先到先服务原则；</li>\n<li>候选者等待投票时，可能会接收到来自其它声明为领导人的的AppendEntries RPC。如果该领导人的任期（RPC中有）比当前候选人的当前任期要大，则候选人认为该领导人合法，并转换成追随者；如果RPC中的任期小于候选人的当前任期，则候选人拒绝此次RPC，继续保持候选人状态；</li>\n<li>候选人既没有赢得选举也没有输掉选举：如果许多追随者在同一时刻都成为了候选人，选票会被分散，可能没有候选人能获得大多数的选票。当这种情形发生时，每一个候选人都会超时，并且通过自增任期号和发起另一轮 RequestVote RPC 来开始新的选举。然而，如果没有其它手段来分配选票的话，这种情形可能会无限的重复下去。所以Raft使用的随机的选举超时时间（150~300ms之间），来避免这种情况发生。</li>\n</ol>\n<ul>\n<li>问题探讨：为什么这里没有谈收到其他候选者的RequestVote RPC请求？<br> 可能的解释：</li>\n</ul>\n<ol>\n<li>候选者已经给自己投票了，一个候选者在一个任期只会给一个人投票，不会给其他人再投票了；</li>\n<li>也有可能算法本身设定候选者就拒绝所有的其他服务器的请求。</li>\n</ol>\n<h2 id=\"日志复制\"><a href=\"#日志复制\" class=\"headerlink\" title=\"日志复制\"></a>日志复制</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3412164-7bfb13d382599f65.png\" alt=\"日志复制问题\"></p>\n<p>接受命令的过程：</p>\n<ol>\n<li>领导者接受客户端请求；</li>\n<li>领导者把指令追加到日志；</li>\n<li>发送AppendEntries RPC到追随者；</li>\n<li>领导者收到大多数追随者的确认后，领导者Commit该日志，把日志在状态机中回放，并返回结果给客户端；</li>\n</ol>\n<p>提交过程：</p>\n<ol>\n<li>在下一个心跳阶段，领导者再次发送AppendEntries RPC给追随者，日志已经commited；</li>\n<li>追随者收到Commited日志后，将日志在状态机中回放。</li>\n</ol>\n<h2 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h2><p>到目前为止描述的机制并不能充分的保证每一个状态机会按照相同的顺序执行相同的指令，例如：一个跟随者可能会进入不可用状态同时领导人已经提交了若干的日志条目，然后这个跟随者可能会被选举为领导人并且覆盖这些日志条目；因此，不同的状态机可能会执行不同的指令序列。</p>\n<h3 id=\"1-领导者追加日志（Append-Only\"><a href=\"#1-领导者追加日志（Append-Only\" class=\"headerlink\" title=\"1. 领导者追加日志（Append-Only)\"></a>1. 领导者追加日志（Append-Only)</h3><p>领导者永远不会覆盖已经存在的日志条目；<br>日志永远只有一个流向：从领导者到追随者；</p>\n<h3 id=\"2-选举限制：投票阻止没有全部日志条目的服务器赢得选举\"><a href=\"#2-选举限制：投票阻止没有全部日志条目的服务器赢得选举\" class=\"headerlink\" title=\"2. 选举限制：投票阻止没有全部日志条目的服务器赢得选举\"></a>2. 选举限制：投票阻止没有全部日志条目的服务器赢得选举</h3><p>如果投票者的日志比候选人的新，拒绝投票请求；<br>这意味着要赢得选举，候选者的日志至少和大多数服务器的日志一样新，那么它一定包含全部的已经提交的日志条目。</p>\n<h3 id=\"3-永远不提交任期之前的日志条目（只提交任期内的日志条目）\"><a href=\"#3-永远不提交任期之前的日志条目（只提交任期内的日志条目）\" class=\"headerlink\" title=\"3. 永远不提交任期之前的日志条目（只提交任期内的日志条目）\"></a>3. 永远不提交任期之前的日志条目（只提交任期内的日志条目）</h3><p>在Raft算法中，当一个日志被安全的复制到绝大多数的机器上面，即AppendEntries RPC在绝大多数服务器正确返回了，那么这个日志就是被提交了，然后领导者会更新commit index。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3412164-45a235af7798e8f2.png\" alt=\"\"></p>\n<p>如果允许提交任期之前的日志条目，那么在步骤c中，我们就会把之前任期为2的日志提交到其他服务器中去，并造成了大多数机器存在了日志为2的情况。所以造成了d中S5中任期为3的日志条目会覆盖掉已经提交的日志的情况。</p>\n<p>Raft 从来不会通过计算复制的数目来提交之前人气的日志条目。只有领导人当前任期的日志条目才能通过计算数目来进行提交。一旦当前任期的日志条目以这种方式被提交，那么由于日志匹配原则（Log Matching Property），之前的日志条目也都会被间接的提交。</p>\n<p>论文中的这段话比较难理解，更加直观的说：由于Raft不会提交任期之前的日志条目，那么就不会从b过渡到c的情况，只能从b发生S5down机的情况下直接过渡到e，这样就产生的更新的任期，这样S5就没有机会被选为领导者了。</p>\n<h3 id=\"4-候选者和追随者崩溃\"><a href=\"#4-候选者和追随者崩溃\" class=\"headerlink\" title=\"4. 候选者和追随者崩溃\"></a>4. 候选者和追随者崩溃</h3><p>候选者和追随者崩溃的情况处理要简单的多。如果这类角色崩溃了，那么后续发送给他们的 RequestVote和AppendEntries的所有RCP都会失败，Raft算法中处理这类失败就是简单的无限重试的方式。<br> 　　如果这些服务器重新可用，那么这些RPC就会成功返回。如果一个服务器完成了一个RPC，但是在响应Leader前崩溃了，那么当他再次可用的时候还会收到相同的RPC请求，此时接收服务器负责检查，比如如果收到了已经包含该条日志的RPC请求，可以直接忽略这个请求，确保对系统是无害的。</p>\n<h2 id=\"成员变化问题\"><a href=\"#成员变化问题\" class=\"headerlink\" title=\"成员变化问题\"></a>成员变化问题</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"raft-基础理论\"><a href=\"#raft-基础理论\" class=\"headerlink\" title=\"raft 基础理论\"></a>raft 基础理论</h1><p>参考: <a href=\"https://www.jianshu.com/p/096ae57d1fe0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/096ae57d1fe0</a></p>\n<p>问题分解为：领导选取、日志复制、安全和成员变化</p>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"复制状态机\"><a href=\"#复制状态机\" class=\"headerlink\" title=\"复制状态机\"></a>复制状态机</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/3412164-922866cdd2dd47c6.png\" alt=\"复制状态机\"></p>\n<ul>\n<li>复制状态机通过复制日志来实现：<ul>\n<li>日志：每台机器保存一份日志，日志来自于客户端的请求，包含一系列的命令</li>\n<li>状态机：状态机会按顺序执行这些命令</li>\n<li>一致性模型：分布式环境下，保证多机的日志是一致的，这样回放到状态机中的状态是一致的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务器状态\"><a href=\"#服务器状态\" class=\"headerlink\" title=\"服务器状态\"></a>服务器状态</h3><p>每台服务器均有可能存在下面三种情况:</p>\n<ol>\n<li>领导者</li>\n<li>候选人</li>\n<li>追随者</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3412164-07ae960bce59aab5.png\" alt=\"服务器转态转换图\"></p>\n<p>追随者只响应其他服务器的请求。如果追随者没有收到任何消息，它会成为一个候选人并且开始一次选举。收到大多数服务器投票的候选人会成为新的领导人。领导人在它们宕机之前会一直保持领导人的状态。</p>\n<h3 id=\"任期\"><a href=\"#任期\" class=\"headerlink\" title=\"任期\"></a>任期</h3><p>Raft 算法将时间划分成为任意不同长度的任期（term）。任期用连续的数字进行表示。每一个任期的开始都是一次选举（election），一个或多个候选人会试图成为领导人。如果一个候选人赢得了选举，它就会在该任期的剩余时间担任领导人。在某些情况下，选票会被瓜分，有可能没有选出领导人，那么，将会开始另一个任期，并且立刻开始下一次选举。Raft 算法保证在给定的一个任期最多只有一个领导人。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3412164-d67cbaab1479a864.png\" alt=\"任期示意图\"></p>\n<h3 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h3><p>Raft 算法中服务器节点之间通信使用远程过程调用（RPCs），并且基本的一致性算法只需要两种类型的 RPCs。请求投票（<code>RequestVote</code>） RPCs 由候选人在选举期间发起，然后附加条目（<code>AppendEntries</code>）RPCs 由领导人发起，用来复制日志和提供一种心跳机制。为了在服务器之间传输快照增加了第三种 RPC。当服务器没有及时的收到 RPC 的响应时，会进行重试， 并且他们能够并行的发起 RPCs 来获得最佳的性能。</p>\n<p>RPC有三种：</p>\n<ol>\n<li>RequestVote RPC：候选人在选举期间发起</li>\n<li>AppendEntries RPC：领导人发起的一种心跳机制，复制日志也在该命令中完成</li>\n<li>InstallSnapshot RPC: 领导者使用该RPC来发送快照给太落后的追随者。</li>\n</ol>\n<p>超时设置：</p>\n<ol>\n<li>BroadcastTime :  领导者的心跳超时时间</li>\n<li>Election Timeout: 追随者设置的候选超时时间</li>\n<li>MTBT :指的是单个服务器发生故障的间隔时间的平均数</li>\n</ol>\n<p>BroadcastTime &lt;&lt; ElectionTimeout &lt;&lt; MTBF<br> 两个原则：</p>\n<ol>\n<li>BroadcastTime应该比ElectionTimeout小一个数量级，为的是使领导人能够持续发送心跳信息（heartbeat）来阻止追随者们开始选举；</li>\n<li>ElectionTimeout也要比MTBF小几个数量级，为的是使得系统稳定运行。</li>\n</ol>\n<p>一般BroadcastTime大约为0.5毫秒到20毫秒，ElectionTimeout一般在10ms到500ms之间。大多数服务器的MTBF都在几个月甚至更长。</p>\n<h2 id=\"leader选取问题\"><a href=\"#leader选取问题\" class=\"headerlink\" title=\"leader选取问题\"></a>leader选取问题</h2><p><strong>触发条件：</strong></p>\n<ol>\n<li>一般情况下，追随者接到领导者的心跳时，把ElectionTimeout清零，不会触发；</li>\n<li>领导者故障，追随者的ElectionTimeout超时发生时，会变成候选者，触发领导人选取；</li>\n</ol>\n<p><strong>候选操作过程：</strong></p>\n<blockquote>\n<p>追随者自增当前任期，转换为Candidate，对自己投票，并发起RequestVote RPC，等待下面三种情形发生；</p>\n</blockquote>\n<ol>\n<li>获得超过半数服务器的投票，赢得选举，成为领导者；</li>\n<li>另一台服务器赢得选举，并接收到对应的心跳，成为追随者；</li>\n<li>选举超时，没有任何一台服务器赢得选举，自增当前任期，重新发起选举；</li>\n</ol>\n<ul>\n<li>注意事项：</li>\n</ul>\n<ol>\n<li>服务器在一个任期内，最多能给一个候选人投票，采用先到先服务原则；</li>\n<li>候选者等待投票时，可能会接收到来自其它声明为领导人的的AppendEntries RPC。如果该领导人的任期（RPC中有）比当前候选人的当前任期要大，则候选人认为该领导人合法，并转换成追随者；如果RPC中的任期小于候选人的当前任期，则候选人拒绝此次RPC，继续保持候选人状态；</li>\n<li>候选人既没有赢得选举也没有输掉选举：如果许多追随者在同一时刻都成为了候选人，选票会被分散，可能没有候选人能获得大多数的选票。当这种情形发生时，每一个候选人都会超时，并且通过自增任期号和发起另一轮 RequestVote RPC 来开始新的选举。然而，如果没有其它手段来分配选票的话，这种情形可能会无限的重复下去。所以Raft使用的随机的选举超时时间（150~300ms之间），来避免这种情况发生。</li>\n</ol>\n<ul>\n<li>问题探讨：为什么这里没有谈收到其他候选者的RequestVote RPC请求？<br> 可能的解释：</li>\n</ul>\n<ol>\n<li>候选者已经给自己投票了，一个候选者在一个任期只会给一个人投票，不会给其他人再投票了；</li>\n<li>也有可能算法本身设定候选者就拒绝所有的其他服务器的请求。</li>\n</ol>\n<h2 id=\"日志复制\"><a href=\"#日志复制\" class=\"headerlink\" title=\"日志复制\"></a>日志复制</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/3412164-7bfb13d382599f65.png\" alt=\"日志复制问题\"></p>\n<p>接受命令的过程：</p>\n<ol>\n<li>领导者接受客户端请求；</li>\n<li>领导者把指令追加到日志；</li>\n<li>发送AppendEntries RPC到追随者；</li>\n<li>领导者收到大多数追随者的确认后，领导者Commit该日志，把日志在状态机中回放，并返回结果给客户端；</li>\n</ol>\n<p>提交过程：</p>\n<ol>\n<li>在下一个心跳阶段，领导者再次发送AppendEntries RPC给追随者，日志已经commited；</li>\n<li>追随者收到Commited日志后，将日志在状态机中回放。</li>\n</ol>\n<h2 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h2><p>到目前为止描述的机制并不能充分的保证每一个状态机会按照相同的顺序执行相同的指令，例如：一个跟随者可能会进入不可用状态同时领导人已经提交了若干的日志条目，然后这个跟随者可能会被选举为领导人并且覆盖这些日志条目；因此，不同的状态机可能会执行不同的指令序列。</p>\n<h3 id=\"1-领导者追加日志（Append-Only\"><a href=\"#1-领导者追加日志（Append-Only\" class=\"headerlink\" title=\"1. 领导者追加日志（Append-Only)\"></a>1. 领导者追加日志（Append-Only)</h3><p>领导者永远不会覆盖已经存在的日志条目；<br>日志永远只有一个流向：从领导者到追随者；</p>\n<h3 id=\"2-选举限制：投票阻止没有全部日志条目的服务器赢得选举\"><a href=\"#2-选举限制：投票阻止没有全部日志条目的服务器赢得选举\" class=\"headerlink\" title=\"2. 选举限制：投票阻止没有全部日志条目的服务器赢得选举\"></a>2. 选举限制：投票阻止没有全部日志条目的服务器赢得选举</h3><p>如果投票者的日志比候选人的新，拒绝投票请求；<br>这意味着要赢得选举，候选者的日志至少和大多数服务器的日志一样新，那么它一定包含全部的已经提交的日志条目。</p>\n<h3 id=\"3-永远不提交任期之前的日志条目（只提交任期内的日志条目）\"><a href=\"#3-永远不提交任期之前的日志条目（只提交任期内的日志条目）\" class=\"headerlink\" title=\"3. 永远不提交任期之前的日志条目（只提交任期内的日志条目）\"></a>3. 永远不提交任期之前的日志条目（只提交任期内的日志条目）</h3><p>在Raft算法中，当一个日志被安全的复制到绝大多数的机器上面，即AppendEntries RPC在绝大多数服务器正确返回了，那么这个日志就是被提交了，然后领导者会更新commit index。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3412164-45a235af7798e8f2.png\" alt=\"\"></p>\n<p>如果允许提交任期之前的日志条目，那么在步骤c中，我们就会把之前任期为2的日志提交到其他服务器中去，并造成了大多数机器存在了日志为2的情况。所以造成了d中S5中任期为3的日志条目会覆盖掉已经提交的日志的情况。</p>\n<p>Raft 从来不会通过计算复制的数目来提交之前人气的日志条目。只有领导人当前任期的日志条目才能通过计算数目来进行提交。一旦当前任期的日志条目以这种方式被提交，那么由于日志匹配原则（Log Matching Property），之前的日志条目也都会被间接的提交。</p>\n<p>论文中的这段话比较难理解，更加直观的说：由于Raft不会提交任期之前的日志条目，那么就不会从b过渡到c的情况，只能从b发生S5down机的情况下直接过渡到e，这样就产生的更新的任期，这样S5就没有机会被选为领导者了。</p>\n<h3 id=\"4-候选者和追随者崩溃\"><a href=\"#4-候选者和追随者崩溃\" class=\"headerlink\" title=\"4. 候选者和追随者崩溃\"></a>4. 候选者和追随者崩溃</h3><p>候选者和追随者崩溃的情况处理要简单的多。如果这类角色崩溃了，那么后续发送给他们的 RequestVote和AppendEntries的所有RCP都会失败，Raft算法中处理这类失败就是简单的无限重试的方式。<br> 　　如果这些服务器重新可用，那么这些RPC就会成功返回。如果一个服务器完成了一个RPC，但是在响应Leader前崩溃了，那么当他再次可用的时候还会收到相同的RPC请求，此时接收服务器负责检查，比如如果收到了已经包含该条日志的RPC请求，可以直接忽略这个请求，确保对系统是无害的。</p>\n<h2 id=\"成员变化问题\"><a href=\"#成员变化问题\" class=\"headerlink\" title=\"成员变化问题\"></a>成员变化问题</h2>"},{"_content":"# GoRaft Read\n\n建议粗略的看一下原理：https://www.jianshu.com/p/096ae57d1fe0\n\n### 整体文件目录结构\n\nraft\n    ├── LICENSE\n    ├── Makefile\n    ├── README.md\n    ├── append_entries.go\n    ├── append_entries_test.go\n    ├── command.go\n    ├── commands.go\n    ├── config.go\n    ├── context.go\n    ├── debug.go\n    ├── event.go\n    ├── event_dispatcher.go\n    ├── event_dispatcher_test.go\n    ├── http_transporter.go\n    ├── http_transporter_test.go\n    ├── log.go\n    ├── log_entry.go\n    ├── log_test.go\n    ├── peer.go\n    ├── protobuf\n    │   ├── append_entries_request.pb.go\n    │   ....\n    ├── request_vote.go\n    ├── server.go\n    ├── server_test.go\n    ├── snapshot.go\n    ├── snapshot_test.go\n    ├── statemachine.go\n    ├── statemachine_test.go\n    ├── test.go\n    ├── transporter.go\n    ├── util.go\n    └── z_test.go\n\n\n\n### 文件作用详解\n\n**append_entries.go **\n\nentries：项，日志中的一条指令？\n\n存在两个结构体：\n\nAppendEntriesRequest\n\n```go\n// The request sent to a server to append entries to the log.\n// 这个请求是发送给服务端的增加一项到日志中\ntype AppendEntriesRequest struct {\n\tTerm         uint64\n\tPrevLogIndex uint64\n\tPrevLogTerm  uint64\n\tCommitIndex  uint64\n\tLeaderName   string\n\tEntries      []*protobuf.LogEntry\n}\n```\n\n\n\nAppendEntriesResponse\n\n```go\n// The response returned from a server appending entries to the log.\n// 从服务端返回的应答\ntype AppendEntriesResponse struct {\n\tpb     *protobuf.AppendEntriesResponse\n\tpeer   string\n\tappend bool\n}\n```\n\n\n\n\n\n\n\n**command.go**\n\n一些和命令相关的接口定义:\n\n```go\nvar commandTypes map[string]Command\n\nfunc init() {\n\tcommandTypes = map[string]Command{}\n}\n\n// Command represents an action to be taken on the replicated state machine.\ntype Command interface {\n\tCommandName() string\n}\n\n// CommandApply represents the interface to apply a command to the server.\ntype CommandApply interface {\n\tApply(Context) (interface{}, error)\n}\n```\n\n\n\n**commands.go**\n\n定义了一些指令的接口和结构体\n\n```go\n// Join command interface\ntype JoinCommand interface {\n\tCommand\n\tNodeName() string\n}\n\n// Join command\ntype DefaultJoinCommand struct {\n\tName             string `json:\"name\"`\n\tConnectionString string `json:\"connectionString\"`\n}\n\n// Leave command interface\ntype LeaveCommand interface {\n\tCommand\n\tNodeName() string\n}\n\n// Leave command\ntype DefaultLeaveCommand struct {\n\tName string `json:\"name\"`\n}\n\n// NOP command\ntype NOPCommand struct {\n}\n```\n\n\n\n**context.go**\n\ncontext\n\n```go\n// Context represents the current state of the server. It is passed into\n// a command when the command is being applied since the server methods\n// are locked.\n// Context表示服务器的当前状态。 由于服务器方法被锁定，因此在应用命令时将其传递给命令\ntype Context interface {\n\tServer() Server\n\tCurrentTerm() uint64\n\tCurrentIndex() uint64\n\tCommitIndex() uint64\n}\n\n// context is the concrete implementation of Context.\n// context是Context的具体实现\ntype context struct {\n\tserver       Server\n\tcurrentIndex uint64\n\tcurrentTerm  uint64\n\tcommitIndex  uint64\n}\n```\n\n\n\n**event_dispatcher.go**\n\n事件调度者\n\n```go\n// eventDispatcher is responsible for managing listeners for named events\n// and dispatching event notifications to those listeners.\n// eventDispatcher负责管理命名事件的侦听器并将事件通知分派给这些侦听器\ntype eventDispatcher struct {\n\tsync.RWMutex\n\tsource    interface{}\n\tlisteners map[string]eventListeners\n}\n\n// EventListener is a function that can receive event notifications.\n// EventListener 是一个函数,能够接受事件通知\ntype EventListener func(Event)\n\n// EventListeners represents a collection of individual listeners.\n// EventListeners 一个监听器的收集器\ntype eventListeners []EventListener\n```\n\n\n\n**event.go**\n\n定义了事件\n\n```go\n// Event represents an action that occurred within the Raft library.\n// Listeners can subscribe to event types by using the Server.AddEventListener() function.\n// Event 表示在Raft库中发生的操作。 监听器可以使用Server.AddEventListener（）函数订阅事件类型。\ntype Event interface {\n\tType() string\n\tSource() interface{}\n\tValue() interface{}\n\tPrevValue() interface{}\n}\n\n// event is the concrete implementation of the Event interface.\n// event 是 Event 接口的一个实现\ntype event struct {\n\ttyp       string\n\tsource    interface{}\n\tvalue     interface{}\n\tprevValue interface{}\n}\n```\n\n\n\n**http_transporter.go**\n\n\n\n```go\n// An HTTPTransporter is a default transport layer used to communicate between\n// multiple servers.\n// HTTPTransporter 是用于在多个服务器之间进行通信的默认传输层\ntype HTTPTransporter struct {\n\tDisableKeepAlives    bool\n\tprefix               string\n\tappendEntriesPath    string\n\trequestVotePath      string\n\tsnapshotPath         string\n\tsnapshotRecoveryPath string\n\thttpClient           http.Client\n\tTransport            *http.Transport\n}\n\ntype HTTPMuxer interface {\n\tHandleFunc(string, func(http.ResponseWriter, *http.Request))\n}\n```\n\n\n\n**log_entry.go**\n\n日志中的一项\n\n```go\n// A log entry stores a single item in the log.\n// 日志中的单独一项\ntype LogEntry struct {\n\tpb       *protobuf.LogEntry\n\tPosition int64 // position in the log file\n\tlog      *Log\n\tevent    *ev\n}\n```\n\n\n\n**log.go**\n\n日志\n\n```go\n// A log is a collection of log entries that are persisted to durable storage.\n// Log 是 log entries 的一个收集器, 可以持久存储到持久存储器\ntype Log struct {\n\tApplyFunc   func(*LogEntry, Command) (interface{}, error)\n\tfile        *os.File\n\tpath        string\n\tentries     []*LogEntry\n\tcommitIndex uint64\n\tmutex       sync.RWMutex\n\tstartIndex  uint64 // the index before the first entry in the Log entries\n\tstartTerm   uint64\n\tinitialized bool\n}\n\n// The results of the applying a log entry.\ntype logResult struct {\n\treturnValue interface{}\n\terr         error\n}\n```\n\n\n\n**peer.go**\n\n```go\n// A peer is a reference to another server involved in the consensus protocol.\n// Peer 是对共识协议中涉及的另一个服务器的引用\ntype Peer struct {\n\tserver            *server\n\tName              string `json:\"name\"`\n\tConnectionString  string `json:\"connectionString\"`\n\tprevLogIndex      uint64\n\tstopChan          chan bool\n\theartbeatInterval time.Duration\n\tlastActivity      time.Time\n\tsync.RWMutex\n}\n```\n\n\n\n**request_vote.go**\n\n```go\n// The request sent to a server to vote for a candidate to become a leader.\ntype RequestVoteRequest struct {\n\tpeer          *Peer\n\tTerm          uint64\n\tLastLogIndex  uint64\n\tLastLogTerm   uint64\n\tCandidateName string\n}\n\n// The response returned from a server after a vote for a candidate to become a leader.\ntype RequestVoteResponse struct {\n\tpeer        *Peer\n\tTerm        uint64\n\tVoteGranted bool\n}\n```\n\n\n\n**server.go**\n\n```go\n// A server is involved in the consensus protocol and can act as a follower,\n// candidate or a leader.\ntype Server interface {\n\tName() string\n\tContext() interface{}\n\tStateMachine() StateMachine\n\tLeader() string\n\tState() string\n\tPath() string\n\tLogPath() string\n\tSnapshotPath(lastIndex uint64, lastTerm uint64) string\n\tTerm() uint64\n\tCommitIndex() uint64\n\tVotedFor() string\n\tMemberCount() int\n\tQuorumSize() int\n\tIsLogEmpty() bool\n\tLogEntries() []*LogEntry\n\tLastCommandName() string\n\tGetState() string\n\tElectionTimeout() time.Duration\n\tSetElectionTimeout(duration time.Duration)\n\tHeartbeatInterval() time.Duration\n\tSetHeartbeatInterval(duration time.Duration)\n\tTransporter() Transporter\n\tSetTransporter(t Transporter)\n\tAppendEntries(req *AppendEntriesRequest) *AppendEntriesResponse\n\tRequestVote(req *RequestVoteRequest) *RequestVoteResponse\n\tRequestSnapshot(req *SnapshotRequest) *SnapshotResponse\n\tSnapshotRecoveryRequest(req *SnapshotRecoveryRequest) *SnapshotRecoveryResponse\n\tAddPeer(name string, connectiongString string) error\n\tRemovePeer(name string) error\n\tPeers() map[string]*Peer\n\tInit() error\n\tStart() error\n\tStop()\n\tRunning() bool\n\tDo(command Command) (interface{}, error)\n\tTakeSnapshot() error\n\tLoadSnapshot() error\n\tAddEventListener(string, EventListener)\n\tFlushCommitIndex()\n}\n\ntype server struct {\n\t*eventDispatcher\n\n\tname        string\n\tpath        string\n\tstate       string\n\ttransporter Transporter\n\tcontext     interface{}\n\tcurrentTerm uint64\n\n\tvotedFor   string\n\tlog        *Log\n\tleader     string\n\tpeers      map[string]*Peer\n\tmutex      sync.RWMutex\n\tsyncedPeer map[string]bool\n\n\tstopped           chan bool\n\tc                 chan *ev\n\telectionTimeout   time.Duration\n\theartbeatInterval time.Duration\n\n\tsnapshot *Snapshot\n\n\t// PendingSnapshot is an unfinished snapshot.\n\t// After the pendingSnapshot is saved to disk,\n\t// it will be set to snapshot and also will be\n\t// set to nil.\n\tpendingSnapshot *Snapshot\n\n\tstateMachine            StateMachine\n\tmaxLogEntriesPerRequest uint64\n\n\tconnectionString string\n\n\troutineGroup sync.WaitGroup\n}\n\n// An internal event to be processed by the server's event loop.\ntype ev struct {\n\ttarget      interface{}\n\treturnValue interface{}\n\tc           chan error\n}\n\n```\n\n\n\n**snapshot.go**\n\n```go\n// Snapshot represents an in-memory representation of the current state of the system.\ntype Snapshot struct {\n\tLastIndex uint64 `json:\"lastIndex\"`\n\tLastTerm  uint64 `json:\"lastTerm\"`\n\n\t// Cluster configuration.\n\tPeers []*Peer `json:\"peers\"`\n\tState []byte  `json:\"state\"`\n\tPath  string  `json:\"path\"`\n}\n\n// The request sent to a server to start from the snapshot.\ntype SnapshotRecoveryRequest struct {\n\tLeaderName string\n\tLastIndex  uint64\n\tLastTerm   uint64\n\tPeers      []*Peer\n\tState      []byte\n}\n\n// The response returned from a server appending entries to the log.\ntype SnapshotRecoveryResponse struct {\n\tTerm        uint64\n\tSuccess     bool\n\tCommitIndex uint64\n}\n\n// The request sent to a server to start from the snapshot.\ntype SnapshotRequest struct {\n\tLeaderName string\n\tLastIndex  uint64\n\tLastTerm   uint64\n}\n\n// The response returned if the follower entered snapshot state\ntype SnapshotResponse struct {\n\tSuccess bool `json:\"success\"`\n}\n```\n\n\n\n**statemachine.go**\n\n```go\n// StateMachine is the interface for allowing the host application to save and\n// recovery the state machine. This makes it possible to make snapshots\n// and compact the log.\ntype StateMachine interface {\n\tSave() ([]byte, error)\n\tRecovery([]byte) error\n}\n```\n\n\n\n**transporter.go**\n\n```go\n// Transporter is the interface for allowing the host application to transport\n// requests to other nodes.\ntype Transporter interface {\n\tSendVoteRequest(server Server, peer *Peer, req *RequestVoteRequest) *RequestVoteResponse\n\tSendAppendEntriesRequest(server Server, peer *Peer, req *AppendEntriesRequest) *AppendEntriesResponse\n\tSendSnapshotRequest(server Server, peer *Peer, req *SnapshotRequest) *SnapshotResponse\n\tSendSnapshotRecoveryRequest(server Server, peer *Peer, req *SnapshotRecoveryRequest) *SnapshotRecoveryResponse\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/alg/raft/goraft_read.md","raw":"# GoRaft Read\n\n建议粗略的看一下原理：https://www.jianshu.com/p/096ae57d1fe0\n\n### 整体文件目录结构\n\nraft\n    ├── LICENSE\n    ├── Makefile\n    ├── README.md\n    ├── append_entries.go\n    ├── append_entries_test.go\n    ├── command.go\n    ├── commands.go\n    ├── config.go\n    ├── context.go\n    ├── debug.go\n    ├── event.go\n    ├── event_dispatcher.go\n    ├── event_dispatcher_test.go\n    ├── http_transporter.go\n    ├── http_transporter_test.go\n    ├── log.go\n    ├── log_entry.go\n    ├── log_test.go\n    ├── peer.go\n    ├── protobuf\n    │   ├── append_entries_request.pb.go\n    │   ....\n    ├── request_vote.go\n    ├── server.go\n    ├── server_test.go\n    ├── snapshot.go\n    ├── snapshot_test.go\n    ├── statemachine.go\n    ├── statemachine_test.go\n    ├── test.go\n    ├── transporter.go\n    ├── util.go\n    └── z_test.go\n\n\n\n### 文件作用详解\n\n**append_entries.go **\n\nentries：项，日志中的一条指令？\n\n存在两个结构体：\n\nAppendEntriesRequest\n\n```go\n// The request sent to a server to append entries to the log.\n// 这个请求是发送给服务端的增加一项到日志中\ntype AppendEntriesRequest struct {\n\tTerm         uint64\n\tPrevLogIndex uint64\n\tPrevLogTerm  uint64\n\tCommitIndex  uint64\n\tLeaderName   string\n\tEntries      []*protobuf.LogEntry\n}\n```\n\n\n\nAppendEntriesResponse\n\n```go\n// The response returned from a server appending entries to the log.\n// 从服务端返回的应答\ntype AppendEntriesResponse struct {\n\tpb     *protobuf.AppendEntriesResponse\n\tpeer   string\n\tappend bool\n}\n```\n\n\n\n\n\n\n\n**command.go**\n\n一些和命令相关的接口定义:\n\n```go\nvar commandTypes map[string]Command\n\nfunc init() {\n\tcommandTypes = map[string]Command{}\n}\n\n// Command represents an action to be taken on the replicated state machine.\ntype Command interface {\n\tCommandName() string\n}\n\n// CommandApply represents the interface to apply a command to the server.\ntype CommandApply interface {\n\tApply(Context) (interface{}, error)\n}\n```\n\n\n\n**commands.go**\n\n定义了一些指令的接口和结构体\n\n```go\n// Join command interface\ntype JoinCommand interface {\n\tCommand\n\tNodeName() string\n}\n\n// Join command\ntype DefaultJoinCommand struct {\n\tName             string `json:\"name\"`\n\tConnectionString string `json:\"connectionString\"`\n}\n\n// Leave command interface\ntype LeaveCommand interface {\n\tCommand\n\tNodeName() string\n}\n\n// Leave command\ntype DefaultLeaveCommand struct {\n\tName string `json:\"name\"`\n}\n\n// NOP command\ntype NOPCommand struct {\n}\n```\n\n\n\n**context.go**\n\ncontext\n\n```go\n// Context represents the current state of the server. It is passed into\n// a command when the command is being applied since the server methods\n// are locked.\n// Context表示服务器的当前状态。 由于服务器方法被锁定，因此在应用命令时将其传递给命令\ntype Context interface {\n\tServer() Server\n\tCurrentTerm() uint64\n\tCurrentIndex() uint64\n\tCommitIndex() uint64\n}\n\n// context is the concrete implementation of Context.\n// context是Context的具体实现\ntype context struct {\n\tserver       Server\n\tcurrentIndex uint64\n\tcurrentTerm  uint64\n\tcommitIndex  uint64\n}\n```\n\n\n\n**event_dispatcher.go**\n\n事件调度者\n\n```go\n// eventDispatcher is responsible for managing listeners for named events\n// and dispatching event notifications to those listeners.\n// eventDispatcher负责管理命名事件的侦听器并将事件通知分派给这些侦听器\ntype eventDispatcher struct {\n\tsync.RWMutex\n\tsource    interface{}\n\tlisteners map[string]eventListeners\n}\n\n// EventListener is a function that can receive event notifications.\n// EventListener 是一个函数,能够接受事件通知\ntype EventListener func(Event)\n\n// EventListeners represents a collection of individual listeners.\n// EventListeners 一个监听器的收集器\ntype eventListeners []EventListener\n```\n\n\n\n**event.go**\n\n定义了事件\n\n```go\n// Event represents an action that occurred within the Raft library.\n// Listeners can subscribe to event types by using the Server.AddEventListener() function.\n// Event 表示在Raft库中发生的操作。 监听器可以使用Server.AddEventListener（）函数订阅事件类型。\ntype Event interface {\n\tType() string\n\tSource() interface{}\n\tValue() interface{}\n\tPrevValue() interface{}\n}\n\n// event is the concrete implementation of the Event interface.\n// event 是 Event 接口的一个实现\ntype event struct {\n\ttyp       string\n\tsource    interface{}\n\tvalue     interface{}\n\tprevValue interface{}\n}\n```\n\n\n\n**http_transporter.go**\n\n\n\n```go\n// An HTTPTransporter is a default transport layer used to communicate between\n// multiple servers.\n// HTTPTransporter 是用于在多个服务器之间进行通信的默认传输层\ntype HTTPTransporter struct {\n\tDisableKeepAlives    bool\n\tprefix               string\n\tappendEntriesPath    string\n\trequestVotePath      string\n\tsnapshotPath         string\n\tsnapshotRecoveryPath string\n\thttpClient           http.Client\n\tTransport            *http.Transport\n}\n\ntype HTTPMuxer interface {\n\tHandleFunc(string, func(http.ResponseWriter, *http.Request))\n}\n```\n\n\n\n**log_entry.go**\n\n日志中的一项\n\n```go\n// A log entry stores a single item in the log.\n// 日志中的单独一项\ntype LogEntry struct {\n\tpb       *protobuf.LogEntry\n\tPosition int64 // position in the log file\n\tlog      *Log\n\tevent    *ev\n}\n```\n\n\n\n**log.go**\n\n日志\n\n```go\n// A log is a collection of log entries that are persisted to durable storage.\n// Log 是 log entries 的一个收集器, 可以持久存储到持久存储器\ntype Log struct {\n\tApplyFunc   func(*LogEntry, Command) (interface{}, error)\n\tfile        *os.File\n\tpath        string\n\tentries     []*LogEntry\n\tcommitIndex uint64\n\tmutex       sync.RWMutex\n\tstartIndex  uint64 // the index before the first entry in the Log entries\n\tstartTerm   uint64\n\tinitialized bool\n}\n\n// The results of the applying a log entry.\ntype logResult struct {\n\treturnValue interface{}\n\terr         error\n}\n```\n\n\n\n**peer.go**\n\n```go\n// A peer is a reference to another server involved in the consensus protocol.\n// Peer 是对共识协议中涉及的另一个服务器的引用\ntype Peer struct {\n\tserver            *server\n\tName              string `json:\"name\"`\n\tConnectionString  string `json:\"connectionString\"`\n\tprevLogIndex      uint64\n\tstopChan          chan bool\n\theartbeatInterval time.Duration\n\tlastActivity      time.Time\n\tsync.RWMutex\n}\n```\n\n\n\n**request_vote.go**\n\n```go\n// The request sent to a server to vote for a candidate to become a leader.\ntype RequestVoteRequest struct {\n\tpeer          *Peer\n\tTerm          uint64\n\tLastLogIndex  uint64\n\tLastLogTerm   uint64\n\tCandidateName string\n}\n\n// The response returned from a server after a vote for a candidate to become a leader.\ntype RequestVoteResponse struct {\n\tpeer        *Peer\n\tTerm        uint64\n\tVoteGranted bool\n}\n```\n\n\n\n**server.go**\n\n```go\n// A server is involved in the consensus protocol and can act as a follower,\n// candidate or a leader.\ntype Server interface {\n\tName() string\n\tContext() interface{}\n\tStateMachine() StateMachine\n\tLeader() string\n\tState() string\n\tPath() string\n\tLogPath() string\n\tSnapshotPath(lastIndex uint64, lastTerm uint64) string\n\tTerm() uint64\n\tCommitIndex() uint64\n\tVotedFor() string\n\tMemberCount() int\n\tQuorumSize() int\n\tIsLogEmpty() bool\n\tLogEntries() []*LogEntry\n\tLastCommandName() string\n\tGetState() string\n\tElectionTimeout() time.Duration\n\tSetElectionTimeout(duration time.Duration)\n\tHeartbeatInterval() time.Duration\n\tSetHeartbeatInterval(duration time.Duration)\n\tTransporter() Transporter\n\tSetTransporter(t Transporter)\n\tAppendEntries(req *AppendEntriesRequest) *AppendEntriesResponse\n\tRequestVote(req *RequestVoteRequest) *RequestVoteResponse\n\tRequestSnapshot(req *SnapshotRequest) *SnapshotResponse\n\tSnapshotRecoveryRequest(req *SnapshotRecoveryRequest) *SnapshotRecoveryResponse\n\tAddPeer(name string, connectiongString string) error\n\tRemovePeer(name string) error\n\tPeers() map[string]*Peer\n\tInit() error\n\tStart() error\n\tStop()\n\tRunning() bool\n\tDo(command Command) (interface{}, error)\n\tTakeSnapshot() error\n\tLoadSnapshot() error\n\tAddEventListener(string, EventListener)\n\tFlushCommitIndex()\n}\n\ntype server struct {\n\t*eventDispatcher\n\n\tname        string\n\tpath        string\n\tstate       string\n\ttransporter Transporter\n\tcontext     interface{}\n\tcurrentTerm uint64\n\n\tvotedFor   string\n\tlog        *Log\n\tleader     string\n\tpeers      map[string]*Peer\n\tmutex      sync.RWMutex\n\tsyncedPeer map[string]bool\n\n\tstopped           chan bool\n\tc                 chan *ev\n\telectionTimeout   time.Duration\n\theartbeatInterval time.Duration\n\n\tsnapshot *Snapshot\n\n\t// PendingSnapshot is an unfinished snapshot.\n\t// After the pendingSnapshot is saved to disk,\n\t// it will be set to snapshot and also will be\n\t// set to nil.\n\tpendingSnapshot *Snapshot\n\n\tstateMachine            StateMachine\n\tmaxLogEntriesPerRequest uint64\n\n\tconnectionString string\n\n\troutineGroup sync.WaitGroup\n}\n\n// An internal event to be processed by the server's event loop.\ntype ev struct {\n\ttarget      interface{}\n\treturnValue interface{}\n\tc           chan error\n}\n\n```\n\n\n\n**snapshot.go**\n\n```go\n// Snapshot represents an in-memory representation of the current state of the system.\ntype Snapshot struct {\n\tLastIndex uint64 `json:\"lastIndex\"`\n\tLastTerm  uint64 `json:\"lastTerm\"`\n\n\t// Cluster configuration.\n\tPeers []*Peer `json:\"peers\"`\n\tState []byte  `json:\"state\"`\n\tPath  string  `json:\"path\"`\n}\n\n// The request sent to a server to start from the snapshot.\ntype SnapshotRecoveryRequest struct {\n\tLeaderName string\n\tLastIndex  uint64\n\tLastTerm   uint64\n\tPeers      []*Peer\n\tState      []byte\n}\n\n// The response returned from a server appending entries to the log.\ntype SnapshotRecoveryResponse struct {\n\tTerm        uint64\n\tSuccess     bool\n\tCommitIndex uint64\n}\n\n// The request sent to a server to start from the snapshot.\ntype SnapshotRequest struct {\n\tLeaderName string\n\tLastIndex  uint64\n\tLastTerm   uint64\n}\n\n// The response returned if the follower entered snapshot state\ntype SnapshotResponse struct {\n\tSuccess bool `json:\"success\"`\n}\n```\n\n\n\n**statemachine.go**\n\n```go\n// StateMachine is the interface for allowing the host application to save and\n// recovery the state machine. This makes it possible to make snapshots\n// and compact the log.\ntype StateMachine interface {\n\tSave() ([]byte, error)\n\tRecovery([]byte) error\n}\n```\n\n\n\n**transporter.go**\n\n```go\n// Transporter is the interface for allowing the host application to transport\n// requests to other nodes.\ntype Transporter interface {\n\tSendVoteRequest(server Server, peer *Peer, req *RequestVoteRequest) *RequestVoteResponse\n\tSendAppendEntriesRequest(server Server, peer *Peer, req *AppendEntriesRequest) *AppendEntriesResponse\n\tSendSnapshotRequest(server Server, peer *Peer, req *SnapshotRequest) *SnapshotResponse\n\tSendSnapshotRecoveryRequest(server Server, peer *Peer, req *SnapshotRecoveryRequest) *SnapshotRecoveryResponse\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"alg/raft/goraft_read","published":1,"date":"2018-10-24T13:25:59.811Z","updated":"2018-10-24T15:14:43.906Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcguw001s8seocyo1740t","content":"<h1 id=\"GoRaft-Read\"><a href=\"#GoRaft-Read\" class=\"headerlink\" title=\"GoRaft Read\"></a>GoRaft Read</h1><p>建议粗略的看一下原理：<a href=\"https://www.jianshu.com/p/096ae57d1fe0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/096ae57d1fe0</a></p>\n<h3 id=\"整体文件目录结构\"><a href=\"#整体文件目录结构\" class=\"headerlink\" title=\"整体文件目录结构\"></a>整体文件目录结构</h3><p>raft<br>    ├── LICENSE<br>    ├── Makefile<br>    ├── README.md<br>    ├── append_entries.go<br>    ├── append_entries_test.go<br>    ├── command.go<br>    ├── commands.go<br>    ├── config.go<br>    ├── context.go<br>    ├── debug.go<br>    ├── event.go<br>    ├── event_dispatcher.go<br>    ├── event_dispatcher_test.go<br>    ├── http_transporter.go<br>    ├── http_transporter_test.go<br>    ├── log.go<br>    ├── log_entry.go<br>    ├── log_test.go<br>    ├── peer.go<br>    ├── protobuf<br>    │   ├── append_entries_request.pb.go<br>    │   ….<br>    ├── request_vote.go<br>    ├── server.go<br>    ├── server_test.go<br>    ├── snapshot.go<br>    ├── snapshot_test.go<br>    ├── statemachine.go<br>    ├── statemachine_test.go<br>    ├── test.go<br>    ├── transporter.go<br>    ├── util.go<br>    └── z_test.go</p>\n<h3 id=\"文件作用详解\"><a href=\"#文件作用详解\" class=\"headerlink\" title=\"文件作用详解\"></a>文件作用详解</h3><p><strong>append_entries.go </strong></p>\n<p>entries：项，日志中的一条指令？</p>\n<p>存在两个结构体：</p>\n<p>AppendEntriesRequest</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The request sent to a server to append entries to the log.</span></span><br><span class=\"line\"><span class=\"comment\">// 这个请求是发送给服务端的增加一项到日志中</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> AppendEntriesRequest <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tTerm         <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tPrevLogIndex <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tPrevLogTerm  <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tCommitIndex  <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tLeaderName   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tEntries      []*protobuf.LogEntry</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AppendEntriesResponse</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The response returned from a server appending entries to the log.</span></span><br><span class=\"line\"><span class=\"comment\">// 从服务端返回的应答</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> AppendEntriesResponse <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tpb     *protobuf.AppendEntriesResponse</span><br><span class=\"line\">\tpeer   <span class=\"keyword\">string</span></span><br><span class=\"line\">\t<span class=\"built_in\">append</span> <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>command.go</strong></p>\n<p>一些和命令相关的接口定义:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> commandTypes <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Command</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcommandTypes = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Command&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Command represents an action to be taken on the replicated state machine.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Command <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tCommandName() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CommandApply represents the interface to apply a command to the server.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> CommandApply <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tApply(Context) (<span class=\"keyword\">interface</span>&#123;&#125;, error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>commands.go</strong></p>\n<p>定义了一些指令的接口和结构体</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Join command interface</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> JoinCommand <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tCommand</span><br><span class=\"line\">\tNodeName() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Join command</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> DefaultJoinCommand <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName             <span class=\"keyword\">string</span> <span class=\"string\">`json:\"name\"`</span></span><br><span class=\"line\">\tConnectionString <span class=\"keyword\">string</span> <span class=\"string\">`json:\"connectionString\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Leave command interface</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> LeaveCommand <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tCommand</span><br><span class=\"line\">\tNodeName() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Leave command</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> DefaultLeaveCommand <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"keyword\">string</span> <span class=\"string\">`json:\"name\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NOP command</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> NOPCommand <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>context.go</strong></p>\n<p>context</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Context represents the current state of the server. It is passed into</span></span><br><span class=\"line\"><span class=\"comment\">// a command when the command is being applied since the server methods</span></span><br><span class=\"line\"><span class=\"comment\">// are locked.</span></span><br><span class=\"line\"><span class=\"comment\">// Context表示服务器的当前状态。 由于服务器方法被锁定，因此在应用命令时将其传递给命令</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Context <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tServer() Server</span><br><span class=\"line\">\tCurrentTerm() <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tCurrentIndex() <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tCommitIndex() <span class=\"keyword\">uint64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// context is the concrete implementation of Context.</span></span><br><span class=\"line\"><span class=\"comment\">// context是Context的具体实现</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> context <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tserver       Server</span><br><span class=\"line\">\tcurrentIndex <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tcurrentTerm  <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tcommitIndex  <span class=\"keyword\">uint64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>event_dispatcher.go</strong></p>\n<p>事件调度者</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eventDispatcher is responsible for managing listeners for named events</span></span><br><span class=\"line\"><span class=\"comment\">// and dispatching event notifications to those listeners.</span></span><br><span class=\"line\"><span class=\"comment\">// eventDispatcher负责管理命名事件的侦听器并将事件通知分派给这些侦听器</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> eventDispatcher <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsync.RWMutex</span><br><span class=\"line\">\tsource    <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tlisteners <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]eventListeners</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// EventListener is a function that can receive event notifications.</span></span><br><span class=\"line\"><span class=\"comment\">// EventListener 是一个函数,能够接受事件通知</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> EventListener <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(Event)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">EventListeners</span> <span class=\"title\">represents</span> <span class=\"title\">a</span> <span class=\"title\">collection</span> <span class=\"title\">of</span> <span class=\"title\">individual</span> <span class=\"title\">listeners</span>.</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">EventListeners</span> 一个监听器的收集器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">eventListeners</span> []<span class=\"title\">EventListener</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>event.go</strong></p>\n<p>定义了事件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Event represents an action that occurred within the Raft library.</span></span><br><span class=\"line\"><span class=\"comment\">// Listeners can subscribe to event types by using the Server.AddEventListener() function.</span></span><br><span class=\"line\"><span class=\"comment\">// Event 表示在Raft库中发生的操作。 监听器可以使用Server.AddEventListener（）函数订阅事件类型。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Event <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tType() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tSource() <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tValue() <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tPrevValue() <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// event is the concrete implementation of the Event interface.</span></span><br><span class=\"line\"><span class=\"comment\">// event 是 Event 接口的一个实现</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> event <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttyp       <span class=\"keyword\">string</span></span><br><span class=\"line\">\tsource    <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tvalue     <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tprevValue <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>http_transporter.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An HTTPTransporter is a default transport layer used to communicate between</span></span><br><span class=\"line\"><span class=\"comment\">// multiple servers.</span></span><br><span class=\"line\"><span class=\"comment\">// HTTPTransporter 是用于在多个服务器之间进行通信的默认传输层</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> HTTPTransporter <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tDisableKeepAlives    <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tprefix               <span class=\"keyword\">string</span></span><br><span class=\"line\">\tappendEntriesPath    <span class=\"keyword\">string</span></span><br><span class=\"line\">\trequestVotePath      <span class=\"keyword\">string</span></span><br><span class=\"line\">\tsnapshotPath         <span class=\"keyword\">string</span></span><br><span class=\"line\">\tsnapshotRecoveryPath <span class=\"keyword\">string</span></span><br><span class=\"line\">\thttpClient           http.Client</span><br><span class=\"line\">\tTransport            *http.Transport</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> HTTPMuxer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tHandleFunc(<span class=\"keyword\">string</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(http.ResponseWriter, *http.Request)</span>)</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>log_entry.go</strong></p>\n<p>日志中的一项</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A log entry stores a single item in the log.</span></span><br><span class=\"line\"><span class=\"comment\">// 日志中的单独一项</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> LogEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tpb       *protobuf.LogEntry</span><br><span class=\"line\">\tPosition <span class=\"keyword\">int64</span> <span class=\"comment\">// position in the log file</span></span><br><span class=\"line\">\tlog      *Log</span><br><span class=\"line\">\tevent    *ev</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>log.go</strong></p>\n<p>日志</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A log is a collection of log entries that are persisted to durable storage.</span></span><br><span class=\"line\"><span class=\"comment\">// Log 是 log entries 的一个收集器, 可以持久存储到持久存储器</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Log <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tApplyFunc   <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*LogEntry, Command)</span> <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">file</span>        *<span class=\"title\">os</span>.<span class=\"title\">File</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">path</span>        <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">entries</span>     []*<span class=\"title\">LogEntry</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">commitIndex</span> <span class=\"title\">uint64</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">mutex</span>       <span class=\"title\">sync</span>.<span class=\"title\">RWMutex</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">startIndex</span>  <span class=\"title\">uint64</span> // <span class=\"title\">the</span> <span class=\"title\">index</span> <span class=\"title\">before</span> <span class=\"title\">the</span> <span class=\"title\">first</span> <span class=\"title\">entry</span> <span class=\"title\">in</span> <span class=\"title\">the</span> <span class=\"title\">Log</span> <span class=\"title\">entries</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">startTerm</span>   <span class=\"title\">uint64</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">initialized</span> <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">The</span> <span class=\"title\">results</span> <span class=\"title\">of</span> <span class=\"title\">the</span> <span class=\"title\">applying</span> <span class=\"title\">a</span> <span class=\"title\">log</span> <span class=\"title\">entry</span>.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">logResult</span> <span class=\"title\">struct</span></span> &#123;</span><br><span class=\"line\">\treturnValue <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\terr         error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>peer.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A peer is a reference to another server involved in the consensus protocol.</span></span><br><span class=\"line\"><span class=\"comment\">// Peer 是对共识协议中涉及的另一个服务器的引用</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Peer <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tserver            *server</span><br><span class=\"line\">\tName              <span class=\"keyword\">string</span> <span class=\"string\">`json:\"name\"`</span></span><br><span class=\"line\">\tConnectionString  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"connectionString\"`</span></span><br><span class=\"line\">\tprevLogIndex      <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tstopChan          <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span></span><br><span class=\"line\">\theartbeatInterval time.Duration</span><br><span class=\"line\">\tlastActivity      time.Time</span><br><span class=\"line\">\tsync.RWMutex</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>request_vote.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The request sent to a server to vote for a candidate to become a leader.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> RequestVoteRequest <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tpeer          *Peer</span><br><span class=\"line\">\tTerm          <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tLastLogIndex  <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tLastLogTerm   <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tCandidateName <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The response returned from a server after a vote for a candidate to become a leader.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> RequestVoteResponse <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tpeer        *Peer</span><br><span class=\"line\">\tTerm        <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tVoteGranted <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>server.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A server is involved in the consensus protocol and can act as a follower,</span></span><br><span class=\"line\"><span class=\"comment\">// candidate or a leader.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Server <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tName() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tContext() <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tStateMachine() StateMachine</span><br><span class=\"line\">\tLeader() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tState() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tPath() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tLogPath() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tSnapshotPath(lastIndex <span class=\"keyword\">uint64</span>, lastTerm <span class=\"keyword\">uint64</span>) <span class=\"keyword\">string</span></span><br><span class=\"line\">\tTerm() <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tCommitIndex() <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tVotedFor() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tMemberCount() <span class=\"keyword\">int</span></span><br><span class=\"line\">\tQuorumSize() <span class=\"keyword\">int</span></span><br><span class=\"line\">\tIsLogEmpty() <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tLogEntries() []*LogEntry</span><br><span class=\"line\">\tLastCommandName() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tGetState() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tElectionTimeout() time.Duration</span><br><span class=\"line\">\tSetElectionTimeout(duration time.Duration)</span><br><span class=\"line\">\tHeartbeatInterval() time.Duration</span><br><span class=\"line\">\tSetHeartbeatInterval(duration time.Duration)</span><br><span class=\"line\">\tTransporter() Transporter</span><br><span class=\"line\">\tSetTransporter(t Transporter)</span><br><span class=\"line\">\tAppendEntries(req *AppendEntriesRequest) *AppendEntriesResponse</span><br><span class=\"line\">\tRequestVote(req *RequestVoteRequest) *RequestVoteResponse</span><br><span class=\"line\">\tRequestSnapshot(req *SnapshotRequest) *SnapshotResponse</span><br><span class=\"line\">\tSnapshotRecoveryRequest(req *SnapshotRecoveryRequest) *SnapshotRecoveryResponse</span><br><span class=\"line\">\tAddPeer(name <span class=\"keyword\">string</span>, connectiongString <span class=\"keyword\">string</span>) error</span><br><span class=\"line\">\tRemovePeer(name <span class=\"keyword\">string</span>) error</span><br><span class=\"line\">\tPeers() <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]*Peer</span><br><span class=\"line\">\tInit() error</span><br><span class=\"line\">\tStart() error</span><br><span class=\"line\">\tStop()</span><br><span class=\"line\">\tRunning() <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tDo(command Command) (<span class=\"keyword\">interface</span>&#123;&#125;, error)</span><br><span class=\"line\">\tTakeSnapshot() error</span><br><span class=\"line\">\tLoadSnapshot() error</span><br><span class=\"line\">\tAddEventListener(<span class=\"keyword\">string</span>, EventListener)</span><br><span class=\"line\">\tFlushCommitIndex()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> server <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t*eventDispatcher</span><br><span class=\"line\"></span><br><span class=\"line\">\tname        <span class=\"keyword\">string</span></span><br><span class=\"line\">\tpath        <span class=\"keyword\">string</span></span><br><span class=\"line\">\tstate       <span class=\"keyword\">string</span></span><br><span class=\"line\">\ttransporter Transporter</span><br><span class=\"line\">\tcontext     <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tcurrentTerm <span class=\"keyword\">uint64</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tvotedFor   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tlog        *Log</span><br><span class=\"line\">\tleader     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tpeers      <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]*Peer</span><br><span class=\"line\">\tmutex      sync.RWMutex</span><br><span class=\"line\">\tsyncedPeer <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tstopped           <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tc                 <span class=\"keyword\">chan</span> *ev</span><br><span class=\"line\">\telectionTimeout   time.Duration</span><br><span class=\"line\">\theartbeatInterval time.Duration</span><br><span class=\"line\"></span><br><span class=\"line\">\tsnapshot *Snapshot</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// PendingSnapshot is an unfinished snapshot.</span></span><br><span class=\"line\">\t<span class=\"comment\">// After the pendingSnapshot is saved to disk,</span></span><br><span class=\"line\">\t<span class=\"comment\">// it will be set to snapshot and also will be</span></span><br><span class=\"line\">\t<span class=\"comment\">// set to nil.</span></span><br><span class=\"line\">\tpendingSnapshot *Snapshot</span><br><span class=\"line\"></span><br><span class=\"line\">\tstateMachine            StateMachine</span><br><span class=\"line\">\tmaxLogEntriesPerRequest <span class=\"keyword\">uint64</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tconnectionString <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">\troutineGroup sync.WaitGroup</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// An internal event to be processed by the server's event loop.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> ev <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttarget      <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\treturnValue <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tc           <span class=\"keyword\">chan</span> error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>snapshot.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Snapshot represents an in-memory representation of the current state of the system.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Snapshot <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLastIndex <span class=\"keyword\">uint64</span> <span class=\"string\">`json:\"lastIndex\"`</span></span><br><span class=\"line\">\tLastTerm  <span class=\"keyword\">uint64</span> <span class=\"string\">`json:\"lastTerm\"`</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Cluster configuration.</span></span><br><span class=\"line\">\tPeers []*Peer <span class=\"string\">`json:\"peers\"`</span></span><br><span class=\"line\">\tState []<span class=\"keyword\">byte</span>  <span class=\"string\">`json:\"state\"`</span></span><br><span class=\"line\">\tPath  <span class=\"keyword\">string</span>  <span class=\"string\">`json:\"path\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The request sent to a server to start from the snapshot.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SnapshotRecoveryRequest <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLeaderName <span class=\"keyword\">string</span></span><br><span class=\"line\">\tLastIndex  <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tLastTerm   <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tPeers      []*Peer</span><br><span class=\"line\">\tState      []<span class=\"keyword\">byte</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The response returned from a server appending entries to the log.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SnapshotRecoveryResponse <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tTerm        <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tSuccess     <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tCommitIndex <span class=\"keyword\">uint64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The request sent to a server to start from the snapshot.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SnapshotRequest <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLeaderName <span class=\"keyword\">string</span></span><br><span class=\"line\">\tLastIndex  <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tLastTerm   <span class=\"keyword\">uint64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The response returned if the follower entered snapshot state</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SnapshotResponse <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tSuccess <span class=\"keyword\">bool</span> <span class=\"string\">`json:\"success\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>statemachine.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StateMachine is the interface for allowing the host application to save and</span></span><br><span class=\"line\"><span class=\"comment\">// recovery the state machine. This makes it possible to make snapshots</span></span><br><span class=\"line\"><span class=\"comment\">// and compact the log.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> StateMachine <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tSave() ([]<span class=\"keyword\">byte</span>, error)</span><br><span class=\"line\">\tRecovery([]<span class=\"keyword\">byte</span>) error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>transporter.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Transporter is the interface for allowing the host application to transport</span></span><br><span class=\"line\"><span class=\"comment\">// requests to other nodes.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Transporter <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tSendVoteRequest(server Server, peer *Peer, req *RequestVoteRequest) *RequestVoteResponse</span><br><span class=\"line\">\tSendAppendEntriesRequest(server Server, peer *Peer, req *AppendEntriesRequest) *AppendEntriesResponse</span><br><span class=\"line\">\tSendSnapshotRequest(server Server, peer *Peer, req *SnapshotRequest) *SnapshotResponse</span><br><span class=\"line\">\tSendSnapshotRecoveryRequest(server Server, peer *Peer, req *SnapshotRecoveryRequest) *SnapshotRecoveryResponse</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"GoRaft-Read\"><a href=\"#GoRaft-Read\" class=\"headerlink\" title=\"GoRaft Read\"></a>GoRaft Read</h1><p>建议粗略的看一下原理：<a href=\"https://www.jianshu.com/p/096ae57d1fe0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/096ae57d1fe0</a></p>\n<h3 id=\"整体文件目录结构\"><a href=\"#整体文件目录结构\" class=\"headerlink\" title=\"整体文件目录结构\"></a>整体文件目录结构</h3><p>raft<br>    ├── LICENSE<br>    ├── Makefile<br>    ├── README.md<br>    ├── append_entries.go<br>    ├── append_entries_test.go<br>    ├── command.go<br>    ├── commands.go<br>    ├── config.go<br>    ├── context.go<br>    ├── debug.go<br>    ├── event.go<br>    ├── event_dispatcher.go<br>    ├── event_dispatcher_test.go<br>    ├── http_transporter.go<br>    ├── http_transporter_test.go<br>    ├── log.go<br>    ├── log_entry.go<br>    ├── log_test.go<br>    ├── peer.go<br>    ├── protobuf<br>    │   ├── append_entries_request.pb.go<br>    │   ….<br>    ├── request_vote.go<br>    ├── server.go<br>    ├── server_test.go<br>    ├── snapshot.go<br>    ├── snapshot_test.go<br>    ├── statemachine.go<br>    ├── statemachine_test.go<br>    ├── test.go<br>    ├── transporter.go<br>    ├── util.go<br>    └── z_test.go</p>\n<h3 id=\"文件作用详解\"><a href=\"#文件作用详解\" class=\"headerlink\" title=\"文件作用详解\"></a>文件作用详解</h3><p><strong>append_entries.go </strong></p>\n<p>entries：项，日志中的一条指令？</p>\n<p>存在两个结构体：</p>\n<p>AppendEntriesRequest</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The request sent to a server to append entries to the log.</span></span><br><span class=\"line\"><span class=\"comment\">// 这个请求是发送给服务端的增加一项到日志中</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> AppendEntriesRequest <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tTerm         <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tPrevLogIndex <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tPrevLogTerm  <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tCommitIndex  <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tLeaderName   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tEntries      []*protobuf.LogEntry</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AppendEntriesResponse</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The response returned from a server appending entries to the log.</span></span><br><span class=\"line\"><span class=\"comment\">// 从服务端返回的应答</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> AppendEntriesResponse <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tpb     *protobuf.AppendEntriesResponse</span><br><span class=\"line\">\tpeer   <span class=\"keyword\">string</span></span><br><span class=\"line\">\t<span class=\"built_in\">append</span> <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>command.go</strong></p>\n<p>一些和命令相关的接口定义:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> commandTypes <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Command</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcommandTypes = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Command&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Command represents an action to be taken on the replicated state machine.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Command <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tCommandName() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CommandApply represents the interface to apply a command to the server.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> CommandApply <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tApply(Context) (<span class=\"keyword\">interface</span>&#123;&#125;, error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>commands.go</strong></p>\n<p>定义了一些指令的接口和结构体</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Join command interface</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> JoinCommand <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tCommand</span><br><span class=\"line\">\tNodeName() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Join command</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> DefaultJoinCommand <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName             <span class=\"keyword\">string</span> <span class=\"string\">`json:\"name\"`</span></span><br><span class=\"line\">\tConnectionString <span class=\"keyword\">string</span> <span class=\"string\">`json:\"connectionString\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Leave command interface</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> LeaveCommand <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tCommand</span><br><span class=\"line\">\tNodeName() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Leave command</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> DefaultLeaveCommand <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"keyword\">string</span> <span class=\"string\">`json:\"name\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NOP command</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> NOPCommand <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>context.go</strong></p>\n<p>context</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Context represents the current state of the server. It is passed into</span></span><br><span class=\"line\"><span class=\"comment\">// a command when the command is being applied since the server methods</span></span><br><span class=\"line\"><span class=\"comment\">// are locked.</span></span><br><span class=\"line\"><span class=\"comment\">// Context表示服务器的当前状态。 由于服务器方法被锁定，因此在应用命令时将其传递给命令</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Context <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tServer() Server</span><br><span class=\"line\">\tCurrentTerm() <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tCurrentIndex() <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tCommitIndex() <span class=\"keyword\">uint64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// context is the concrete implementation of Context.</span></span><br><span class=\"line\"><span class=\"comment\">// context是Context的具体实现</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> context <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tserver       Server</span><br><span class=\"line\">\tcurrentIndex <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tcurrentTerm  <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tcommitIndex  <span class=\"keyword\">uint64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>event_dispatcher.go</strong></p>\n<p>事件调度者</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eventDispatcher is responsible for managing listeners for named events</span></span><br><span class=\"line\"><span class=\"comment\">// and dispatching event notifications to those listeners.</span></span><br><span class=\"line\"><span class=\"comment\">// eventDispatcher负责管理命名事件的侦听器并将事件通知分派给这些侦听器</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> eventDispatcher <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsync.RWMutex</span><br><span class=\"line\">\tsource    <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tlisteners <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]eventListeners</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// EventListener is a function that can receive event notifications.</span></span><br><span class=\"line\"><span class=\"comment\">// EventListener 是一个函数,能够接受事件通知</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> EventListener <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(Event)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">EventListeners</span> <span class=\"title\">represents</span> <span class=\"title\">a</span> <span class=\"title\">collection</span> <span class=\"title\">of</span> <span class=\"title\">individual</span> <span class=\"title\">listeners</span>.</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">EventListeners</span> 一个监听器的收集器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">eventListeners</span> []<span class=\"title\">EventListener</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>event.go</strong></p>\n<p>定义了事件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Event represents an action that occurred within the Raft library.</span></span><br><span class=\"line\"><span class=\"comment\">// Listeners can subscribe to event types by using the Server.AddEventListener() function.</span></span><br><span class=\"line\"><span class=\"comment\">// Event 表示在Raft库中发生的操作。 监听器可以使用Server.AddEventListener（）函数订阅事件类型。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Event <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tType() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tSource() <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tValue() <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tPrevValue() <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// event is the concrete implementation of the Event interface.</span></span><br><span class=\"line\"><span class=\"comment\">// event 是 Event 接口的一个实现</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> event <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttyp       <span class=\"keyword\">string</span></span><br><span class=\"line\">\tsource    <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tvalue     <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tprevValue <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>http_transporter.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An HTTPTransporter is a default transport layer used to communicate between</span></span><br><span class=\"line\"><span class=\"comment\">// multiple servers.</span></span><br><span class=\"line\"><span class=\"comment\">// HTTPTransporter 是用于在多个服务器之间进行通信的默认传输层</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> HTTPTransporter <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tDisableKeepAlives    <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tprefix               <span class=\"keyword\">string</span></span><br><span class=\"line\">\tappendEntriesPath    <span class=\"keyword\">string</span></span><br><span class=\"line\">\trequestVotePath      <span class=\"keyword\">string</span></span><br><span class=\"line\">\tsnapshotPath         <span class=\"keyword\">string</span></span><br><span class=\"line\">\tsnapshotRecoveryPath <span class=\"keyword\">string</span></span><br><span class=\"line\">\thttpClient           http.Client</span><br><span class=\"line\">\tTransport            *http.Transport</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> HTTPMuxer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tHandleFunc(<span class=\"keyword\">string</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(http.ResponseWriter, *http.Request)</span>)</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>log_entry.go</strong></p>\n<p>日志中的一项</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A log entry stores a single item in the log.</span></span><br><span class=\"line\"><span class=\"comment\">// 日志中的单独一项</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> LogEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tpb       *protobuf.LogEntry</span><br><span class=\"line\">\tPosition <span class=\"keyword\">int64</span> <span class=\"comment\">// position in the log file</span></span><br><span class=\"line\">\tlog      *Log</span><br><span class=\"line\">\tevent    *ev</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>log.go</strong></p>\n<p>日志</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A log is a collection of log entries that are persisted to durable storage.</span></span><br><span class=\"line\"><span class=\"comment\">// Log 是 log entries 的一个收集器, 可以持久存储到持久存储器</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Log <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tApplyFunc   <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*LogEntry, Command)</span> <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">file</span>        *<span class=\"title\">os</span>.<span class=\"title\">File</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">path</span>        <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">entries</span>     []*<span class=\"title\">LogEntry</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">commitIndex</span> <span class=\"title\">uint64</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">mutex</span>       <span class=\"title\">sync</span>.<span class=\"title\">RWMutex</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">startIndex</span>  <span class=\"title\">uint64</span> // <span class=\"title\">the</span> <span class=\"title\">index</span> <span class=\"title\">before</span> <span class=\"title\">the</span> <span class=\"title\">first</span> <span class=\"title\">entry</span> <span class=\"title\">in</span> <span class=\"title\">the</span> <span class=\"title\">Log</span> <span class=\"title\">entries</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">startTerm</span>   <span class=\"title\">uint64</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">initialized</span> <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">The</span> <span class=\"title\">results</span> <span class=\"title\">of</span> <span class=\"title\">the</span> <span class=\"title\">applying</span> <span class=\"title\">a</span> <span class=\"title\">log</span> <span class=\"title\">entry</span>.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">logResult</span> <span class=\"title\">struct</span></span> &#123;</span><br><span class=\"line\">\treturnValue <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\terr         error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>peer.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A peer is a reference to another server involved in the consensus protocol.</span></span><br><span class=\"line\"><span class=\"comment\">// Peer 是对共识协议中涉及的另一个服务器的引用</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Peer <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tserver            *server</span><br><span class=\"line\">\tName              <span class=\"keyword\">string</span> <span class=\"string\">`json:\"name\"`</span></span><br><span class=\"line\">\tConnectionString  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"connectionString\"`</span></span><br><span class=\"line\">\tprevLogIndex      <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tstopChan          <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span></span><br><span class=\"line\">\theartbeatInterval time.Duration</span><br><span class=\"line\">\tlastActivity      time.Time</span><br><span class=\"line\">\tsync.RWMutex</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>request_vote.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The request sent to a server to vote for a candidate to become a leader.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> RequestVoteRequest <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tpeer          *Peer</span><br><span class=\"line\">\tTerm          <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tLastLogIndex  <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tLastLogTerm   <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tCandidateName <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The response returned from a server after a vote for a candidate to become a leader.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> RequestVoteResponse <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tpeer        *Peer</span><br><span class=\"line\">\tTerm        <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tVoteGranted <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>server.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A server is involved in the consensus protocol and can act as a follower,</span></span><br><span class=\"line\"><span class=\"comment\">// candidate or a leader.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Server <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tName() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tContext() <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tStateMachine() StateMachine</span><br><span class=\"line\">\tLeader() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tState() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tPath() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tLogPath() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tSnapshotPath(lastIndex <span class=\"keyword\">uint64</span>, lastTerm <span class=\"keyword\">uint64</span>) <span class=\"keyword\">string</span></span><br><span class=\"line\">\tTerm() <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tCommitIndex() <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tVotedFor() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tMemberCount() <span class=\"keyword\">int</span></span><br><span class=\"line\">\tQuorumSize() <span class=\"keyword\">int</span></span><br><span class=\"line\">\tIsLogEmpty() <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tLogEntries() []*LogEntry</span><br><span class=\"line\">\tLastCommandName() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tGetState() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tElectionTimeout() time.Duration</span><br><span class=\"line\">\tSetElectionTimeout(duration time.Duration)</span><br><span class=\"line\">\tHeartbeatInterval() time.Duration</span><br><span class=\"line\">\tSetHeartbeatInterval(duration time.Duration)</span><br><span class=\"line\">\tTransporter() Transporter</span><br><span class=\"line\">\tSetTransporter(t Transporter)</span><br><span class=\"line\">\tAppendEntries(req *AppendEntriesRequest) *AppendEntriesResponse</span><br><span class=\"line\">\tRequestVote(req *RequestVoteRequest) *RequestVoteResponse</span><br><span class=\"line\">\tRequestSnapshot(req *SnapshotRequest) *SnapshotResponse</span><br><span class=\"line\">\tSnapshotRecoveryRequest(req *SnapshotRecoveryRequest) *SnapshotRecoveryResponse</span><br><span class=\"line\">\tAddPeer(name <span class=\"keyword\">string</span>, connectiongString <span class=\"keyword\">string</span>) error</span><br><span class=\"line\">\tRemovePeer(name <span class=\"keyword\">string</span>) error</span><br><span class=\"line\">\tPeers() <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]*Peer</span><br><span class=\"line\">\tInit() error</span><br><span class=\"line\">\tStart() error</span><br><span class=\"line\">\tStop()</span><br><span class=\"line\">\tRunning() <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tDo(command Command) (<span class=\"keyword\">interface</span>&#123;&#125;, error)</span><br><span class=\"line\">\tTakeSnapshot() error</span><br><span class=\"line\">\tLoadSnapshot() error</span><br><span class=\"line\">\tAddEventListener(<span class=\"keyword\">string</span>, EventListener)</span><br><span class=\"line\">\tFlushCommitIndex()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> server <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t*eventDispatcher</span><br><span class=\"line\"></span><br><span class=\"line\">\tname        <span class=\"keyword\">string</span></span><br><span class=\"line\">\tpath        <span class=\"keyword\">string</span></span><br><span class=\"line\">\tstate       <span class=\"keyword\">string</span></span><br><span class=\"line\">\ttransporter Transporter</span><br><span class=\"line\">\tcontext     <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tcurrentTerm <span class=\"keyword\">uint64</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tvotedFor   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tlog        *Log</span><br><span class=\"line\">\tleader     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tpeers      <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]*Peer</span><br><span class=\"line\">\tmutex      sync.RWMutex</span><br><span class=\"line\">\tsyncedPeer <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tstopped           <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tc                 <span class=\"keyword\">chan</span> *ev</span><br><span class=\"line\">\telectionTimeout   time.Duration</span><br><span class=\"line\">\theartbeatInterval time.Duration</span><br><span class=\"line\"></span><br><span class=\"line\">\tsnapshot *Snapshot</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// PendingSnapshot is an unfinished snapshot.</span></span><br><span class=\"line\">\t<span class=\"comment\">// After the pendingSnapshot is saved to disk,</span></span><br><span class=\"line\">\t<span class=\"comment\">// it will be set to snapshot and also will be</span></span><br><span class=\"line\">\t<span class=\"comment\">// set to nil.</span></span><br><span class=\"line\">\tpendingSnapshot *Snapshot</span><br><span class=\"line\"></span><br><span class=\"line\">\tstateMachine            StateMachine</span><br><span class=\"line\">\tmaxLogEntriesPerRequest <span class=\"keyword\">uint64</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tconnectionString <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">\troutineGroup sync.WaitGroup</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// An internal event to be processed by the server's event loop.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> ev <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttarget      <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\treturnValue <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tc           <span class=\"keyword\">chan</span> error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>snapshot.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Snapshot represents an in-memory representation of the current state of the system.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Snapshot <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLastIndex <span class=\"keyword\">uint64</span> <span class=\"string\">`json:\"lastIndex\"`</span></span><br><span class=\"line\">\tLastTerm  <span class=\"keyword\">uint64</span> <span class=\"string\">`json:\"lastTerm\"`</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Cluster configuration.</span></span><br><span class=\"line\">\tPeers []*Peer <span class=\"string\">`json:\"peers\"`</span></span><br><span class=\"line\">\tState []<span class=\"keyword\">byte</span>  <span class=\"string\">`json:\"state\"`</span></span><br><span class=\"line\">\tPath  <span class=\"keyword\">string</span>  <span class=\"string\">`json:\"path\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The request sent to a server to start from the snapshot.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SnapshotRecoveryRequest <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLeaderName <span class=\"keyword\">string</span></span><br><span class=\"line\">\tLastIndex  <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tLastTerm   <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tPeers      []*Peer</span><br><span class=\"line\">\tState      []<span class=\"keyword\">byte</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The response returned from a server appending entries to the log.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SnapshotRecoveryResponse <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tTerm        <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tSuccess     <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tCommitIndex <span class=\"keyword\">uint64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The request sent to a server to start from the snapshot.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SnapshotRequest <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLeaderName <span class=\"keyword\">string</span></span><br><span class=\"line\">\tLastIndex  <span class=\"keyword\">uint64</span></span><br><span class=\"line\">\tLastTerm   <span class=\"keyword\">uint64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The response returned if the follower entered snapshot state</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SnapshotResponse <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tSuccess <span class=\"keyword\">bool</span> <span class=\"string\">`json:\"success\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>statemachine.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StateMachine is the interface for allowing the host application to save and</span></span><br><span class=\"line\"><span class=\"comment\">// recovery the state machine. This makes it possible to make snapshots</span></span><br><span class=\"line\"><span class=\"comment\">// and compact the log.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> StateMachine <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tSave() ([]<span class=\"keyword\">byte</span>, error)</span><br><span class=\"line\">\tRecovery([]<span class=\"keyword\">byte</span>) error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>transporter.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Transporter is the interface for allowing the host application to transport</span></span><br><span class=\"line\"><span class=\"comment\">// requests to other nodes.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Transporter <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tSendVoteRequest(server Server, peer *Peer, req *RequestVoteRequest) *RequestVoteResponse</span><br><span class=\"line\">\tSendAppendEntriesRequest(server Server, peer *Peer, req *AppendEntriesRequest) *AppendEntriesResponse</span><br><span class=\"line\">\tSendSnapshotRequest(server Server, peer *Peer, req *SnapshotRequest) *SnapshotResponse</span><br><span class=\"line\">\tSendSnapshotRecoveryRequest(server Server, peer *Peer, req *SnapshotRecoveryRequest) *SnapshotRecoveryResponse</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"关于 Raft 的 think","date":"2018-12-10T11:54:15.000Z","_content":"\n## 日志复制问题\n\n由 leader 发送日志给 follower \n\n心跳和日志拷贝是在一起的.\n\nTK: 日志复制的二段提交问题????\n\n日志复制是二段提交的: 发送日志给各个 follower, 超过一半的 follower 接收成功了, 就发起一个 commit 提交.\n\n\n\n如果leader的任期到期后会自动转换成 follower 等待下次选举的开始.\n\n应该做个时序图??\n\n\n\n\n\n\n\n\n\n","source":"_posts/alg/raft/raft_think.md","raw":"---\ntitle: 关于 Raft 的 think\ndate: 2018-12-10 19:54:15\ncategories:\n- alg\ntags:\n- raft think\n---\n\n## 日志复制问题\n\n由 leader 发送日志给 follower \n\n心跳和日志拷贝是在一起的.\n\nTK: 日志复制的二段提交问题????\n\n日志复制是二段提交的: 发送日志给各个 follower, 超过一半的 follower 接收成功了, 就发起一个 commit 提交.\n\n\n\n如果leader的任期到期后会自动转换成 follower 等待下次选举的开始.\n\n应该做个时序图??\n\n\n\n\n\n\n\n\n\n","slug":"alg/raft/raft_think","published":1,"updated":"2018-12-10T15:12:13.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcguy001t8seoi9o5o16i","content":"<h2 id=\"日志复制问题\"><a href=\"#日志复制问题\" class=\"headerlink\" title=\"日志复制问题\"></a>日志复制问题</h2><p>由 leader 发送日志给 follower </p>\n<p>心跳和日志拷贝是在一起的.</p>\n<p>TK: 日志复制的二段提交问题????</p>\n<p>日志复制是二段提交的: 发送日志给各个 follower, 超过一半的 follower 接收成功了, 就发起一个 commit 提交.</p>\n<p>如果leader的任期到期后会自动转换成 follower 等待下次选举的开始.</p>\n<p>应该做个时序图??</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"日志复制问题\"><a href=\"#日志复制问题\" class=\"headerlink\" title=\"日志复制问题\"></a>日志复制问题</h2><p>由 leader 发送日志给 follower </p>\n<p>心跳和日志拷贝是在一起的.</p>\n<p>TK: 日志复制的二段提交问题????</p>\n<p>日志复制是二段提交的: 发送日志给各个 follower, 超过一半的 follower 接收成功了, 就发起一个 commit 提交.</p>\n<p>如果leader的任期到期后会自动转换成 follower 等待下次选举的开始.</p>\n<p>应该做个时序图??</p>\n"},{"title":"Dual pivot Quicksort","date":"2018-04-27T06:55:52.000Z","_content":"\n\ntime: 2018-04-27 14:55:52\n\n参考：https://www.geeksforgeeks.org/dual-pivot-quicksort/\n\n>   The idea of dual pivot quick sort is to take two pivots, one in the left end of the array and the second, in the right end of the array. The left pivot must be less than or equal to the right pivot, so we swap them if necessary.\n>\n>   Then, we begin partitioning the array into three parts: in the first part, all elements will be less than the left pivot, in the second part all elements will be greater or equal to the left pivot and also will be less than or equal to the right pivot, and in the third part all elements will be greater than the right pivot. Then, we shift the two pivots to their appropriate positions as we see in the below bar, and after that we begin quicksorting these three parts recursively, using this method.\n>\n>   Dual pivot quick sort is a little bit faster than the original single pivot quicksort.But still, the worst case will remain O(n^2) when the array is already sorted in an increasing or decreasing order.\n\n![An example](http://contribute.geeksforgeeks.org/wp-content/uploads/dual.png)\n\n\n\n\n\n```C\n// C program to implement dual pivot QuickSort\n#include <stdio.h>\n\nint partition(int* arr, int low, int high, int* lp);\n\nvoid swap(int* a, int* b)\n{\n\tint temp = *a;\n\t*a = *b;\n\t*b = temp;\n}\n\nvoid DualPivotQuickSort(int* arr, int low, int high)\n{\n\tif (low < high) {\n\t\t// lp means left pivot, and rp means right pivot.\n\t\tint lp, rp; \n\t\trp = partition(arr, low, high, &lp);\n\t\tDualPivotQuickSort(arr, low, lp - 1);\n\t\tDualPivotQuickSort(arr, lp + 1, rp - 1);\n\t\tDualPivotQuickSort(arr, rp + 1, high);\n\t}\n}\n\nint partition(int* arr, int low, int high, int* lp)\n{\n    printf(\"------- begin partition --------\\n\");\n\tif (arr[low] > arr[high])\n\t\tswap(&arr[low], &arr[high]);\n\t// p is the left pivot, and q is the right pivot.\n\tint j = low + 1,g = high - 1;\n\tint k = low + 1, p = arr[low], q = arr[high];\n\twhile (k <= g) {\n\t    printf(\"j: %d value: %d, g: %d value: %d, k: %d value: %d\\n\", j, arr[j], g, arr[g], k, arr[k]);\n\n\t\t// if elements are less than the left pivot\n\t\tif (arr[k] < p) {\n\t\t\tswap(&arr[k], &arr[j]);\n\t\t\tj++;\n\t\t}\n\n\t\t// if elements are greater than or equal \n\t\t// to the right pivot\n\t\telse if (arr[k] >= q) {\n\t\t\twhile (arr[g] > q && k < g)\n\t\t\t\tg--;\n\t\t\tswap(&arr[k], &arr[g]);\n\t\t\tg--;\n\t\t\tif (arr[k] < p) {\n\t\t\t\tswap(&arr[k], &arr[j]);\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\tk++;\n\t\tfor (int i = 0; i < 8; i++)\n\t\t    printf(\"%d \", arr[i]);\n\t\tprintf(\"\\n\");\n\t}\n\tj--;\n\tg++;\n\n\t// bring pivots to their appropriate positions.\n\tswap(&arr[low], &arr[j]);\n\tswap(&arr[high], &arr[g]);\n\n\t// returning the indeces of the pivots.\n\t*lp = j; // because we cannot return two elements \n\t\t\t// from a function.\n    printf(\"------- end partition --------\\n\");\n\treturn g;\n}\n\n// Driver code\nint main()\n{\n\tint arr[] = { 24, 8, 42, 75, 29, 77, 38, 57 };\n\tprintf(\"24, 8, 42, 75, 29, 77, 38, 57\\n\");\n\tDualPivotQuickSort(arr, 0, 7);\n\tprintf(\"Sorted array: \");\n\tfor (int i = 0; i < 8; i++)\n\t\tprintf(\"%d \", arr[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n\n```\n24, 8, 42, 75, 29, 77, 38, 57\n------- begin partition --------\nj: 1 value: 8, g: 6 value: 38, k: 1 value: 8\n24 8 42 75 29 77 38 57 \nj: 2 value: 42, g: 6 value: 38, k: 2 value: 42\n24 8 42 75 29 77 38 57 \nj: 2 value: 42, g: 6 value: 38, k: 3 value: 75\n24 8 42 38 29 77 75 57 \nj: 2 value: 42, g: 5 value: 77, k: 4 value: 29\n24 8 42 38 29 77 75 57 \nj: 2 value: 42, g: 5 value: 77, k: 5 value: 77\n24 8 42 38 29 77 75 57 \n------- end partition --------\n------- begin partition --------\nj: 3 value: 38, g: 3 value: 38, k: 3 value: 38\n8 24 29 38 42 57 75 77 \n------- end partition --------\n------- begin partition --------\n------- end partition --------\nSorted array: 8 24 29 38 42 57 75 77 \n```\n\n\n\n## 总结\n\n基本的处理流程：\n\n1. 选定最低位和最高位作为轴 num，也就是有两个轴。\n\n2. lowPoint = low + 1 和 highPoint = high - 1 作为选轴的开始点。\n\n3. scanPoint = lowPoint 一直扫描到 highPoint， 如果 scanPoint_Value < low_Value : swap(lowPoint_Value, scanPoint_Value) elseif (scanPoint_Value >= high_Value) : swap(highPoint_Value, scanPoint_Value)\n\n4. 最后 swap(low_Value, (lowPoint - 1).Value), swap(high_Value, (highPoint + 1)_Value)\n\n   ","source":"_posts/alg/sorting/Dual_pivot_Quicksort.md","raw":"---\ntitle: Dual pivot Quicksort\ndate: 2018-04-27 14:55:52\ncategories:\n- alg\ntags:\n- sorting\n---\n\n\ntime: 2018-04-27 14:55:52\n\n参考：https://www.geeksforgeeks.org/dual-pivot-quicksort/\n\n>   The idea of dual pivot quick sort is to take two pivots, one in the left end of the array and the second, in the right end of the array. The left pivot must be less than or equal to the right pivot, so we swap them if necessary.\n>\n>   Then, we begin partitioning the array into three parts: in the first part, all elements will be less than the left pivot, in the second part all elements will be greater or equal to the left pivot and also will be less than or equal to the right pivot, and in the third part all elements will be greater than the right pivot. Then, we shift the two pivots to their appropriate positions as we see in the below bar, and after that we begin quicksorting these three parts recursively, using this method.\n>\n>   Dual pivot quick sort is a little bit faster than the original single pivot quicksort.But still, the worst case will remain O(n^2) when the array is already sorted in an increasing or decreasing order.\n\n![An example](http://contribute.geeksforgeeks.org/wp-content/uploads/dual.png)\n\n\n\n\n\n```C\n// C program to implement dual pivot QuickSort\n#include <stdio.h>\n\nint partition(int* arr, int low, int high, int* lp);\n\nvoid swap(int* a, int* b)\n{\n\tint temp = *a;\n\t*a = *b;\n\t*b = temp;\n}\n\nvoid DualPivotQuickSort(int* arr, int low, int high)\n{\n\tif (low < high) {\n\t\t// lp means left pivot, and rp means right pivot.\n\t\tint lp, rp; \n\t\trp = partition(arr, low, high, &lp);\n\t\tDualPivotQuickSort(arr, low, lp - 1);\n\t\tDualPivotQuickSort(arr, lp + 1, rp - 1);\n\t\tDualPivotQuickSort(arr, rp + 1, high);\n\t}\n}\n\nint partition(int* arr, int low, int high, int* lp)\n{\n    printf(\"------- begin partition --------\\n\");\n\tif (arr[low] > arr[high])\n\t\tswap(&arr[low], &arr[high]);\n\t// p is the left pivot, and q is the right pivot.\n\tint j = low + 1,g = high - 1;\n\tint k = low + 1, p = arr[low], q = arr[high];\n\twhile (k <= g) {\n\t    printf(\"j: %d value: %d, g: %d value: %d, k: %d value: %d\\n\", j, arr[j], g, arr[g], k, arr[k]);\n\n\t\t// if elements are less than the left pivot\n\t\tif (arr[k] < p) {\n\t\t\tswap(&arr[k], &arr[j]);\n\t\t\tj++;\n\t\t}\n\n\t\t// if elements are greater than or equal \n\t\t// to the right pivot\n\t\telse if (arr[k] >= q) {\n\t\t\twhile (arr[g] > q && k < g)\n\t\t\t\tg--;\n\t\t\tswap(&arr[k], &arr[g]);\n\t\t\tg--;\n\t\t\tif (arr[k] < p) {\n\t\t\t\tswap(&arr[k], &arr[j]);\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\tk++;\n\t\tfor (int i = 0; i < 8; i++)\n\t\t    printf(\"%d \", arr[i]);\n\t\tprintf(\"\\n\");\n\t}\n\tj--;\n\tg++;\n\n\t// bring pivots to their appropriate positions.\n\tswap(&arr[low], &arr[j]);\n\tswap(&arr[high], &arr[g]);\n\n\t// returning the indeces of the pivots.\n\t*lp = j; // because we cannot return two elements \n\t\t\t// from a function.\n    printf(\"------- end partition --------\\n\");\n\treturn g;\n}\n\n// Driver code\nint main()\n{\n\tint arr[] = { 24, 8, 42, 75, 29, 77, 38, 57 };\n\tprintf(\"24, 8, 42, 75, 29, 77, 38, 57\\n\");\n\tDualPivotQuickSort(arr, 0, 7);\n\tprintf(\"Sorted array: \");\n\tfor (int i = 0; i < 8; i++)\n\t\tprintf(\"%d \", arr[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n\n```\n24, 8, 42, 75, 29, 77, 38, 57\n------- begin partition --------\nj: 1 value: 8, g: 6 value: 38, k: 1 value: 8\n24 8 42 75 29 77 38 57 \nj: 2 value: 42, g: 6 value: 38, k: 2 value: 42\n24 8 42 75 29 77 38 57 \nj: 2 value: 42, g: 6 value: 38, k: 3 value: 75\n24 8 42 38 29 77 75 57 \nj: 2 value: 42, g: 5 value: 77, k: 4 value: 29\n24 8 42 38 29 77 75 57 \nj: 2 value: 42, g: 5 value: 77, k: 5 value: 77\n24 8 42 38 29 77 75 57 \n------- end partition --------\n------- begin partition --------\nj: 3 value: 38, g: 3 value: 38, k: 3 value: 38\n8 24 29 38 42 57 75 77 \n------- end partition --------\n------- begin partition --------\n------- end partition --------\nSorted array: 8 24 29 38 42 57 75 77 \n```\n\n\n\n## 总结\n\n基本的处理流程：\n\n1. 选定最低位和最高位作为轴 num，也就是有两个轴。\n\n2. lowPoint = low + 1 和 highPoint = high - 1 作为选轴的开始点。\n\n3. scanPoint = lowPoint 一直扫描到 highPoint， 如果 scanPoint_Value < low_Value : swap(lowPoint_Value, scanPoint_Value) elseif (scanPoint_Value >= high_Value) : swap(highPoint_Value, scanPoint_Value)\n\n4. 最后 swap(low_Value, (lowPoint - 1).Value), swap(high_Value, (highPoint + 1)_Value)\n\n   ","slug":"alg/sorting/Dual_pivot_Quicksort","published":1,"updated":"2018-08-29T13:21:32.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgv0001v8seolhaktw4m","content":"<p>time: 2018-04-27 14:55:52</p>\n<p>参考：<a href=\"https://www.geeksforgeeks.org/dual-pivot-quicksort/\" target=\"_blank\" rel=\"noopener\">https://www.geeksforgeeks.org/dual-pivot-quicksort/</a></p>\n<blockquote>\n<p>  The idea of dual pivot quick sort is to take two pivots, one in the left end of the array and the second, in the right end of the array. The left pivot must be less than or equal to the right pivot, so we swap them if necessary.</p>\n<p>  Then, we begin partitioning the array into three parts: in the first part, all elements will be less than the left pivot, in the second part all elements will be greater or equal to the left pivot and also will be less than or equal to the right pivot, and in the third part all elements will be greater than the right pivot. Then, we shift the two pivots to their appropriate positions as we see in the below bar, and after that we begin quicksorting these three parts recursively, using this method.</p>\n<p>  Dual pivot quick sort is a little bit faster than the original single pivot quicksort.But still, the worst case will remain O(n^2) when the array is already sorted in an increasing or decreasing order.</p>\n</blockquote>\n<p><img src=\"http://contribute.geeksforgeeks.org/wp-content/uploads/dual.png\" alt=\"An example\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C program to implement dual pivot QuickSort</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>* arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">int</span>* lp)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>* a, <span class=\"keyword\">int</span>* b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = *a;</span><br><span class=\"line\">\t*a = *b;</span><br><span class=\"line\">\t*b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DualPivotQuickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>* arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// lp means left pivot, and rp means right pivot.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> lp, rp; </span><br><span class=\"line\">\t\trp = partition(arr, low, high, &amp;lp);</span><br><span class=\"line\">\t\tDualPivotQuickSort(arr, low, lp - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tDualPivotQuickSort(arr, lp + <span class=\"number\">1</span>, rp - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tDualPivotQuickSort(arr, rp + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>* arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">int</span>* lp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"------- begin partition --------\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (arr[low] &gt; arr[high])</span><br><span class=\"line\">\t\tswap(&amp;arr[low], &amp;arr[high]);</span><br><span class=\"line\">\t<span class=\"comment\">// p is the left pivot, and q is the right pivot.</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = low + <span class=\"number\">1</span>,g = high - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = low + <span class=\"number\">1</span>, p = arr[low], q = arr[high];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k &lt;= g) &#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">printf</span>(<span class=\"string\">\"j: %d value: %d, g: %d value: %d, k: %d value: %d\\n\"</span>, j, arr[j], g, arr[g], k, arr[k]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// if elements are less than the left pivot</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[k] &lt; p) &#123;</span><br><span class=\"line\">\t\t\tswap(&amp;arr[k], &amp;arr[j]);</span><br><span class=\"line\">\t\t\tj++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// if elements are greater than or equal </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// to the right pivot</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[k] &gt;= q) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (arr[g] &gt; q &amp;&amp; k &lt; g)</span><br><span class=\"line\">\t\t\t\tg--;</span><br><span class=\"line\">\t\t\tswap(&amp;arr[k], &amp;arr[g]);</span><br><span class=\"line\">\t\t\tg--;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[k] &lt; p) &#123;</span><br><span class=\"line\">\t\t\t\tswap(&amp;arr[k], &amp;arr[j]);</span><br><span class=\"line\">\t\t\t\tj++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tk++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++)</span><br><span class=\"line\">\t\t    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, arr[i]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tj--;</span><br><span class=\"line\">\tg++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// bring pivots to their appropriate positions.</span></span><br><span class=\"line\">\tswap(&amp;arr[low], &amp;arr[j]);</span><br><span class=\"line\">\tswap(&amp;arr[high], &amp;arr[g]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// returning the indeces of the pivots.</span></span><br><span class=\"line\">\t*lp = j; <span class=\"comment\">// because we cannot return two elements </span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// from a function.</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"------- end partition --------\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> g;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Driver code</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[] = &#123; <span class=\"number\">24</span>, <span class=\"number\">8</span>, <span class=\"number\">42</span>, <span class=\"number\">75</span>, <span class=\"number\">29</span>, <span class=\"number\">77</span>, <span class=\"number\">38</span>, <span class=\"number\">57</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"24, 8, 42, 75, 29, 77, 38, 57\\n\"</span>);</span><br><span class=\"line\">\tDualPivotQuickSort(arr, <span class=\"number\">0</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Sorted array: \"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, arr[i]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">24, 8, 42, 75, 29, 77, 38, 57</span><br><span class=\"line\">------- begin partition --------</span><br><span class=\"line\">j: 1 value: 8, g: 6 value: 38, k: 1 value: 8</span><br><span class=\"line\">24 8 42 75 29 77 38 57 </span><br><span class=\"line\">j: 2 value: 42, g: 6 value: 38, k: 2 value: 42</span><br><span class=\"line\">24 8 42 75 29 77 38 57 </span><br><span class=\"line\">j: 2 value: 42, g: 6 value: 38, k: 3 value: 75</span><br><span class=\"line\">24 8 42 38 29 77 75 57 </span><br><span class=\"line\">j: 2 value: 42, g: 5 value: 77, k: 4 value: 29</span><br><span class=\"line\">24 8 42 38 29 77 75 57 </span><br><span class=\"line\">j: 2 value: 42, g: 5 value: 77, k: 5 value: 77</span><br><span class=\"line\">24 8 42 38 29 77 75 57 </span><br><span class=\"line\">------- end partition --------</span><br><span class=\"line\">------- begin partition --------</span><br><span class=\"line\">j: 3 value: 38, g: 3 value: 38, k: 3 value: 38</span><br><span class=\"line\">8 24 29 38 42 57 75 77 </span><br><span class=\"line\">------- end partition --------</span><br><span class=\"line\">------- begin partition --------</span><br><span class=\"line\">------- end partition --------</span><br><span class=\"line\">Sorted array: 8 24 29 38 42 57 75 77</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>基本的处理流程：</p>\n<ol>\n<li><p>选定最低位和最高位作为轴 num，也就是有两个轴。</p>\n</li>\n<li><p>lowPoint = low + 1 和 highPoint = high - 1 作为选轴的开始点。</p>\n</li>\n<li><p>scanPoint = lowPoint 一直扫描到 highPoint， 如果 scanPoint_Value &lt; low_Value : swap(lowPoint_Value, scanPoint_Value) elseif (scanPoint_Value &gt;= high_Value) : swap(highPoint_Value, scanPoint_Value)</p>\n</li>\n<li><p>最后 swap(low_Value, (lowPoint - 1).Value), swap(high_Value, (highPoint + 1)_Value)</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>time: 2018-04-27 14:55:52</p>\n<p>参考：<a href=\"https://www.geeksforgeeks.org/dual-pivot-quicksort/\" target=\"_blank\" rel=\"noopener\">https://www.geeksforgeeks.org/dual-pivot-quicksort/</a></p>\n<blockquote>\n<p>  The idea of dual pivot quick sort is to take two pivots, one in the left end of the array and the second, in the right end of the array. The left pivot must be less than or equal to the right pivot, so we swap them if necessary.</p>\n<p>  Then, we begin partitioning the array into three parts: in the first part, all elements will be less than the left pivot, in the second part all elements will be greater or equal to the left pivot and also will be less than or equal to the right pivot, and in the third part all elements will be greater than the right pivot. Then, we shift the two pivots to their appropriate positions as we see in the below bar, and after that we begin quicksorting these three parts recursively, using this method.</p>\n<p>  Dual pivot quick sort is a little bit faster than the original single pivot quicksort.But still, the worst case will remain O(n^2) when the array is already sorted in an increasing or decreasing order.</p>\n</blockquote>\n<p><img src=\"http://contribute.geeksforgeeks.org/wp-content/uploads/dual.png\" alt=\"An example\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C program to implement dual pivot QuickSort</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>* arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">int</span>* lp)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>* a, <span class=\"keyword\">int</span>* b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = *a;</span><br><span class=\"line\">\t*a = *b;</span><br><span class=\"line\">\t*b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DualPivotQuickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>* arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// lp means left pivot, and rp means right pivot.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> lp, rp; </span><br><span class=\"line\">\t\trp = partition(arr, low, high, &amp;lp);</span><br><span class=\"line\">\t\tDualPivotQuickSort(arr, low, lp - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tDualPivotQuickSort(arr, lp + <span class=\"number\">1</span>, rp - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tDualPivotQuickSort(arr, rp + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>* arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">int</span>* lp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"------- begin partition --------\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (arr[low] &gt; arr[high])</span><br><span class=\"line\">\t\tswap(&amp;arr[low], &amp;arr[high]);</span><br><span class=\"line\">\t<span class=\"comment\">// p is the left pivot, and q is the right pivot.</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = low + <span class=\"number\">1</span>,g = high - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = low + <span class=\"number\">1</span>, p = arr[low], q = arr[high];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k &lt;= g) &#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">printf</span>(<span class=\"string\">\"j: %d value: %d, g: %d value: %d, k: %d value: %d\\n\"</span>, j, arr[j], g, arr[g], k, arr[k]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// if elements are less than the left pivot</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[k] &lt; p) &#123;</span><br><span class=\"line\">\t\t\tswap(&amp;arr[k], &amp;arr[j]);</span><br><span class=\"line\">\t\t\tj++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// if elements are greater than or equal </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// to the right pivot</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[k] &gt;= q) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (arr[g] &gt; q &amp;&amp; k &lt; g)</span><br><span class=\"line\">\t\t\t\tg--;</span><br><span class=\"line\">\t\t\tswap(&amp;arr[k], &amp;arr[g]);</span><br><span class=\"line\">\t\t\tg--;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[k] &lt; p) &#123;</span><br><span class=\"line\">\t\t\t\tswap(&amp;arr[k], &amp;arr[j]);</span><br><span class=\"line\">\t\t\t\tj++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tk++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++)</span><br><span class=\"line\">\t\t    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, arr[i]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tj--;</span><br><span class=\"line\">\tg++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// bring pivots to their appropriate positions.</span></span><br><span class=\"line\">\tswap(&amp;arr[low], &amp;arr[j]);</span><br><span class=\"line\">\tswap(&amp;arr[high], &amp;arr[g]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// returning the indeces of the pivots.</span></span><br><span class=\"line\">\t*lp = j; <span class=\"comment\">// because we cannot return two elements </span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// from a function.</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"------- end partition --------\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> g;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Driver code</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[] = &#123; <span class=\"number\">24</span>, <span class=\"number\">8</span>, <span class=\"number\">42</span>, <span class=\"number\">75</span>, <span class=\"number\">29</span>, <span class=\"number\">77</span>, <span class=\"number\">38</span>, <span class=\"number\">57</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"24, 8, 42, 75, 29, 77, 38, 57\\n\"</span>);</span><br><span class=\"line\">\tDualPivotQuickSort(arr, <span class=\"number\">0</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Sorted array: \"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, arr[i]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">24, 8, 42, 75, 29, 77, 38, 57</span><br><span class=\"line\">------- begin partition --------</span><br><span class=\"line\">j: 1 value: 8, g: 6 value: 38, k: 1 value: 8</span><br><span class=\"line\">24 8 42 75 29 77 38 57 </span><br><span class=\"line\">j: 2 value: 42, g: 6 value: 38, k: 2 value: 42</span><br><span class=\"line\">24 8 42 75 29 77 38 57 </span><br><span class=\"line\">j: 2 value: 42, g: 6 value: 38, k: 3 value: 75</span><br><span class=\"line\">24 8 42 38 29 77 75 57 </span><br><span class=\"line\">j: 2 value: 42, g: 5 value: 77, k: 4 value: 29</span><br><span class=\"line\">24 8 42 38 29 77 75 57 </span><br><span class=\"line\">j: 2 value: 42, g: 5 value: 77, k: 5 value: 77</span><br><span class=\"line\">24 8 42 38 29 77 75 57 </span><br><span class=\"line\">------- end partition --------</span><br><span class=\"line\">------- begin partition --------</span><br><span class=\"line\">j: 3 value: 38, g: 3 value: 38, k: 3 value: 38</span><br><span class=\"line\">8 24 29 38 42 57 75 77 </span><br><span class=\"line\">------- end partition --------</span><br><span class=\"line\">------- begin partition --------</span><br><span class=\"line\">------- end partition --------</span><br><span class=\"line\">Sorted array: 8 24 29 38 42 57 75 77</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>基本的处理流程：</p>\n<ol>\n<li><p>选定最低位和最高位作为轴 num，也就是有两个轴。</p>\n</li>\n<li><p>lowPoint = low + 1 和 highPoint = high - 1 作为选轴的开始点。</p>\n</li>\n<li><p>scanPoint = lowPoint 一直扫描到 highPoint， 如果 scanPoint_Value &lt; low_Value : swap(lowPoint_Value, scanPoint_Value) elseif (scanPoint_Value &gt;= high_Value) : swap(highPoint_Value, scanPoint_Value)</p>\n</li>\n<li><p>最后 swap(low_Value, (lowPoint - 1).Value), swap(high_Value, (highPoint + 1)_Value)</p>\n</li>\n</ol>\n"},{"title":"docker 构建最小 go app","date":"2018-08-30T05:56:07.000Z","_content":"\n参考: [https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/](https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/)\n\n## 写应用\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"os\"\n)\n\nfunc main() {\n    resp, err := http.Get(\"http://www.baidu.com\")\n    check(err)\n    body, err := ioutil.ReadAll(resp.Body)\n    check(err)\n    fmt.Println(len(body))\n}\n\nfunc check(err error) {\n    if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n    }\n}\n```\n\n## Dockerize\n\nbasic image\n\n```dockerfile\nFROM golang:onbuild\n```\n\ncompile Dockerfile\n\n```Dockerfile\nFROM golang:latest \nRUN mkdir /app \nADD . /app/ \nWORKDIR /app \nRUN go build -o main . \nCMD [\"/app/main\"]\n```\n\n这个构建出来需要500M\n\n因为 `golang:latest` 是从 `Debian Jessie` 构建出来的, 底层是操作系统, so 导致镜像特别大.\n\n## Compile!!\n\n1. 先编译工程\n2. 构建镜像\n\n```sh\ngo build -o main .\ndocker build -t example-scratch:v1 -f Dockerfile.scratch .\n```\n\nDockerfile.scratch 内容:\n```Dockerfile\nFROM scratch\nADD main /\nCMD [\"/main\"]\n```\n\n这样构建是无法工作的, 原因就在于生产的 main 是需要系统的动态链接库.\n\n```sh\n$ docker run -it example-scratch:v1\nstandard_init_linux.go:178: exec user process caused \"exec format error\" \n```\n\n解决方法:\n\n```sh\nCGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .\n```\n禁用cgo，生产一个静态二进制文件, 我们还将操作系统设置为Linux, -a标志意味着重建我们正在使用的所有软件包，这意味着所有导入都将在cgo禁用的情况下重建。\n\n```sh\n$ docker build -t example-scratch:v2 -f Dockerfile.scratch .\n$ docker run -it example-scratch:v2\n  118146 # it work\n```\n\n\n","source":"_posts/backend/docker/docker_构建最小_go_app.md","raw":"---\ntitle: docker 构建最小 go app\ndate: 2018-08-30 13:56:07\ncategories:\n- backend\ntags:\n- docker\n- docker app\n---\n\n参考: [https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/](https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/)\n\n## 写应用\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"os\"\n)\n\nfunc main() {\n    resp, err := http.Get(\"http://www.baidu.com\")\n    check(err)\n    body, err := ioutil.ReadAll(resp.Body)\n    check(err)\n    fmt.Println(len(body))\n}\n\nfunc check(err error) {\n    if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n    }\n}\n```\n\n## Dockerize\n\nbasic image\n\n```dockerfile\nFROM golang:onbuild\n```\n\ncompile Dockerfile\n\n```Dockerfile\nFROM golang:latest \nRUN mkdir /app \nADD . /app/ \nWORKDIR /app \nRUN go build -o main . \nCMD [\"/app/main\"]\n```\n\n这个构建出来需要500M\n\n因为 `golang:latest` 是从 `Debian Jessie` 构建出来的, 底层是操作系统, so 导致镜像特别大.\n\n## Compile!!\n\n1. 先编译工程\n2. 构建镜像\n\n```sh\ngo build -o main .\ndocker build -t example-scratch:v1 -f Dockerfile.scratch .\n```\n\nDockerfile.scratch 内容:\n```Dockerfile\nFROM scratch\nADD main /\nCMD [\"/main\"]\n```\n\n这样构建是无法工作的, 原因就在于生产的 main 是需要系统的动态链接库.\n\n```sh\n$ docker run -it example-scratch:v1\nstandard_init_linux.go:178: exec user process caused \"exec format error\" \n```\n\n解决方法:\n\n```sh\nCGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .\n```\n禁用cgo，生产一个静态二进制文件, 我们还将操作系统设置为Linux, -a标志意味着重建我们正在使用的所有软件包，这意味着所有导入都将在cgo禁用的情况下重建。\n\n```sh\n$ docker build -t example-scratch:v2 -f Dockerfile.scratch .\n$ docker run -it example-scratch:v2\n  118146 # it work\n```\n\n\n","slug":"backend/docker/docker_构建最小_go_app","published":1,"updated":"2018-08-30T08:27:38.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgv2001y8seokg5i1zq0","content":"<p>参考: <a href=\"https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/\" target=\"_blank\" rel=\"noopener\">https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/</a></p>\n<h2 id=\"写应用\"><a href=\"#写应用\" class=\"headerlink\" title=\"写应用\"></a>写应用</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    resp, err := http.Get(<span class=\"string\">\"http://www.baidu.com\"</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    body, err := ioutil.ReadAll(resp.Body)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Println(<span class=\"built_in\">len</span>(body))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">check</span><span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(err)</span><br><span class=\"line\">        os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Dockerize\"><a href=\"#Dockerize\" class=\"headerlink\" title=\"Dockerize\"></a>Dockerize</h2><p>basic image</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"keyword\">onbuild</span></span><br></pre></td></tr></table></figure>\n<p>compile Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang:latest </span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /app </span></span><br><span class=\"line\"><span class=\"bash\">ADD . /app/ </span></span><br><span class=\"line\"><span class=\"bash\">WORKDIR /app </span></span><br><span class=\"line\"><span class=\"bash\">RUN go build -o main . </span></span><br><span class=\"line\"><span class=\"bash\">CMD [<span class=\"string\">\"/app/main\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p>这个构建出来需要500M</p>\n<p>因为 <code>golang:latest</code> 是从 <code>Debian Jessie</code> 构建出来的, 底层是操作系统, so 导致镜像特别大.</p>\n<h2 id=\"Compile\"><a href=\"#Compile\" class=\"headerlink\" title=\"Compile!!\"></a>Compile!!</h2><ol>\n<li>先编译工程</li>\n<li>构建镜像</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go build -o main .</span><br><span class=\"line\">docker build -t example-scratch:v1 -f Dockerfile.scratch .</span><br></pre></td></tr></table></figure>\n<p>Dockerfile.scratch 内容:<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> scratch</span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> main /</span></span><br><span class=\"line\"><span class=\"bash\">CMD [<span class=\"string\">\"/main\"</span>]</span></span><br></pre></td></tr></table></figure></p>\n<p>这样构建是无法工作的, 原因就在于生产的 main 是需要系统的动态链接库.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -it example-scratch:v1</span><br><span class=\"line\">standard_init_linux.go:178: <span class=\"built_in\">exec</span> user process caused <span class=\"string\">\"exec format error\"</span></span><br></pre></td></tr></table></figure>\n<p>解决方法:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .</span><br></pre></td></tr></table></figure>\n<p>禁用cgo，生产一个静态二进制文件, 我们还将操作系统设置为Linux, -a标志意味着重建我们正在使用的所有软件包，这意味着所有导入都将在cgo禁用的情况下重建。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t example-scratch:v2 -f Dockerfile.scratch .</span><br><span class=\"line\">$ docker run -it example-scratch:v2</span><br><span class=\"line\">  118146 <span class=\"comment\"># it work</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>参考: <a href=\"https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/\" target=\"_blank\" rel=\"noopener\">https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/</a></p>\n<h2 id=\"写应用\"><a href=\"#写应用\" class=\"headerlink\" title=\"写应用\"></a>写应用</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    resp, err := http.Get(<span class=\"string\">\"http://www.baidu.com\"</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    body, err := ioutil.ReadAll(resp.Body)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Println(<span class=\"built_in\">len</span>(body))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">check</span><span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(err)</span><br><span class=\"line\">        os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Dockerize\"><a href=\"#Dockerize\" class=\"headerlink\" title=\"Dockerize\"></a>Dockerize</h2><p>basic image</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"keyword\">onbuild</span></span><br></pre></td></tr></table></figure>\n<p>compile Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang:latest </span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /app </span></span><br><span class=\"line\"><span class=\"bash\">ADD . /app/ </span></span><br><span class=\"line\"><span class=\"bash\">WORKDIR /app </span></span><br><span class=\"line\"><span class=\"bash\">RUN go build -o main . </span></span><br><span class=\"line\"><span class=\"bash\">CMD [<span class=\"string\">\"/app/main\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p>这个构建出来需要500M</p>\n<p>因为 <code>golang:latest</code> 是从 <code>Debian Jessie</code> 构建出来的, 底层是操作系统, so 导致镜像特别大.</p>\n<h2 id=\"Compile\"><a href=\"#Compile\" class=\"headerlink\" title=\"Compile!!\"></a>Compile!!</h2><ol>\n<li>先编译工程</li>\n<li>构建镜像</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go build -o main .</span><br><span class=\"line\">docker build -t example-scratch:v1 -f Dockerfile.scratch .</span><br></pre></td></tr></table></figure>\n<p>Dockerfile.scratch 内容:<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> scratch</span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> main /</span></span><br><span class=\"line\"><span class=\"bash\">CMD [<span class=\"string\">\"/main\"</span>]</span></span><br></pre></td></tr></table></figure></p>\n<p>这样构建是无法工作的, 原因就在于生产的 main 是需要系统的动态链接库.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -it example-scratch:v1</span><br><span class=\"line\">standard_init_linux.go:178: <span class=\"built_in\">exec</span> user process caused <span class=\"string\">\"exec format error\"</span></span><br></pre></td></tr></table></figure>\n<p>解决方法:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .</span><br></pre></td></tr></table></figure>\n<p>禁用cgo，生产一个静态二进制文件, 我们还将操作系统设置为Linux, -a标志意味着重建我们正在使用的所有软件包，这意味着所有导入都将在cgo禁用的情况下重建。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t example-scratch:v2 -f Dockerfile.scratch .</span><br><span class=\"line\">$ docker run -it example-scratch:v2</span><br><span class=\"line\">  118146 <span class=\"comment\"># it work</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Lombok原理分析与功能实现","date":"2018-08-29T13:14:48.231Z","_content":"\n\n参考：https://blog.mythsman.com/2017/12/19/1/\n\n## 原理\n\n1. 定义编译期的注解\n2. 利用JSR269 api(Pluggable Annotation Processing API )创建编译期的注解处理器\n3. 利用tools.jar的javac api处理AST(抽象语法树)\n4. 将功能注册进jar包\n\n## 基础点\n\n1. 注解\n2. JSR269 api\n3. javac api处理AST\n\n\n## 手撸Getter\n\n实验的目的是自定义一个针对类的Getter注解，它能够读取该类的成员方法并自动生成getter方法。\n\n### 创建Getter注解\n```java\npackage laboratory.lombokLearn;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Getter {\n}\n```\n\n### 创建Getter注解的处理器\n#### 基本框架\n```java\npackage laboratory.lombokLearn;\n\nimport javax.annotation.processing.*;\nimport javax.lang.model.SourceVersion;\nimport javax.lang.model.element.TypeElement;\nimport java.util.Set;\n\n@SupportedAnnotationTypes(\"laboratory.lombokLearn.Getter\")\n@SupportedSourceVersion(SourceVersion.RELEASE_8)\npublic class GetterProcessor extends AbstractProcessor {\n\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnv) {\n        super.init(processingEnv);\n    }\n\n    @Override\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n        return true;\n    }\n}\n```\n然后需要着重实现两个方法，init跟process。init的主要用途是通过ProcessingEnvironment来获取编译阶段的一些环境信息;process主要是实现具体逻辑的地方，也就是对AST进行处理的地方。\n\n#### init 方法\n\n```java\nprivate Messager messager;\nprivate JavacTrees trees;\nprivate TreeMaker treeMaker;\nprivate Names names;\n\n@Override\npublic synchronized void init(ProcessingEnvironment processingEnv) {\n    super.init(processingEnv);\n    this.messager = processingEnv.getMessager();\n    this.trees = JavacTrees.instance(processingEnv);\n    Context context = ((JavacProcessingEnvironment) processingEnv).getContext();\n    this.treeMaker = TreeMaker.instance(context);\n    this.names = Names.instance(context);\n}\n```\n\n1. Messager主要是用来在编译期打log用的\n2. JavacTrees提供了待处理的抽象语法树\n3. TreeMaker封装了创建AST节点的一些方法\n4. Names提供了创建标识符的方法\n\n\n#### PROCESS方法\n\n\n步骤大概是下面这样：\n\n1. 利用roundEnv的getElementsAnnotatedWith方法过滤出被Getter这个注解标记的类，并存入set\n2. 遍历这个set里的每一个元素，并生成jCTree这个语法树\n3. 创建一个TreeTranslator，并重写其中的visitClassDef方法，这个方法处理遍历语法树得到的类定义部分jcClassDecl\n> 创建一个jcVariableDeclList保存类的成员变量\n> 遍历jcTree的所有成员(包括成员变量和成员函数和构造函数)，过滤出其中的成员变量，并添加进jcVariableDeclList\n> 将jcVariableDeclList的所有变量转换成需要添加的getter方法，并添加进jcClassDecl的成员中\n调用默认的遍历方法遍历处理后的jcClassDecl\n4. 利用上面的TreeTranslator去处理jcTree\n\n\n## summary (answer question)\n\n### 1. 注解的理解\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.SOURCE)\n```\n这个是编译时运行的注解，其实我更加想知道运行时的注解，如何运作的。\n\n\n### 2. JSR269 api 是啥？\nPluggable Annotation Processing API（注解处理器）\n\n### 3. AST what？\n\n```java\nprivate JavacTrees trees;\n```\n这个就是语法树\n\n\n```java\njcTree.accept(）\n```\n为类增加方法\n\n### 运行时的注解\n我研究一下`@Cacheable`注解吧\n","source":"_posts/backend/java/Lombok原理分析与功能实现.md","raw":"---\ntitle: Lombok原理分析与功能实现\ndate: \ncategories:\n- backend\ntags:\n- java\n- lombok\n- 原理\n---\n\n\n参考：https://blog.mythsman.com/2017/12/19/1/\n\n## 原理\n\n1. 定义编译期的注解\n2. 利用JSR269 api(Pluggable Annotation Processing API )创建编译期的注解处理器\n3. 利用tools.jar的javac api处理AST(抽象语法树)\n4. 将功能注册进jar包\n\n## 基础点\n\n1. 注解\n2. JSR269 api\n3. javac api处理AST\n\n\n## 手撸Getter\n\n实验的目的是自定义一个针对类的Getter注解，它能够读取该类的成员方法并自动生成getter方法。\n\n### 创建Getter注解\n```java\npackage laboratory.lombokLearn;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Getter {\n}\n```\n\n### 创建Getter注解的处理器\n#### 基本框架\n```java\npackage laboratory.lombokLearn;\n\nimport javax.annotation.processing.*;\nimport javax.lang.model.SourceVersion;\nimport javax.lang.model.element.TypeElement;\nimport java.util.Set;\n\n@SupportedAnnotationTypes(\"laboratory.lombokLearn.Getter\")\n@SupportedSourceVersion(SourceVersion.RELEASE_8)\npublic class GetterProcessor extends AbstractProcessor {\n\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnv) {\n        super.init(processingEnv);\n    }\n\n    @Override\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n        return true;\n    }\n}\n```\n然后需要着重实现两个方法，init跟process。init的主要用途是通过ProcessingEnvironment来获取编译阶段的一些环境信息;process主要是实现具体逻辑的地方，也就是对AST进行处理的地方。\n\n#### init 方法\n\n```java\nprivate Messager messager;\nprivate JavacTrees trees;\nprivate TreeMaker treeMaker;\nprivate Names names;\n\n@Override\npublic synchronized void init(ProcessingEnvironment processingEnv) {\n    super.init(processingEnv);\n    this.messager = processingEnv.getMessager();\n    this.trees = JavacTrees.instance(processingEnv);\n    Context context = ((JavacProcessingEnvironment) processingEnv).getContext();\n    this.treeMaker = TreeMaker.instance(context);\n    this.names = Names.instance(context);\n}\n```\n\n1. Messager主要是用来在编译期打log用的\n2. JavacTrees提供了待处理的抽象语法树\n3. TreeMaker封装了创建AST节点的一些方法\n4. Names提供了创建标识符的方法\n\n\n#### PROCESS方法\n\n\n步骤大概是下面这样：\n\n1. 利用roundEnv的getElementsAnnotatedWith方法过滤出被Getter这个注解标记的类，并存入set\n2. 遍历这个set里的每一个元素，并生成jCTree这个语法树\n3. 创建一个TreeTranslator，并重写其中的visitClassDef方法，这个方法处理遍历语法树得到的类定义部分jcClassDecl\n> 创建一个jcVariableDeclList保存类的成员变量\n> 遍历jcTree的所有成员(包括成员变量和成员函数和构造函数)，过滤出其中的成员变量，并添加进jcVariableDeclList\n> 将jcVariableDeclList的所有变量转换成需要添加的getter方法，并添加进jcClassDecl的成员中\n调用默认的遍历方法遍历处理后的jcClassDecl\n4. 利用上面的TreeTranslator去处理jcTree\n\n\n## summary (answer question)\n\n### 1. 注解的理解\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.SOURCE)\n```\n这个是编译时运行的注解，其实我更加想知道运行时的注解，如何运作的。\n\n\n### 2. JSR269 api 是啥？\nPluggable Annotation Processing API（注解处理器）\n\n### 3. AST what？\n\n```java\nprivate JavacTrees trees;\n```\n这个就是语法树\n\n\n```java\njcTree.accept(）\n```\n为类增加方法\n\n### 运行时的注解\n我研究一下`@Cacheable`注解吧\n","slug":"backend/java/Lombok原理分析与功能实现","published":1,"updated":"2018-08-29T13:26:00.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgv4001z8seoe6sp591w","content":"<p>参考：<a href=\"https://blog.mythsman.com/2017/12/19/1/\" target=\"_blank\" rel=\"noopener\">https://blog.mythsman.com/2017/12/19/1/</a></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ol>\n<li>定义编译期的注解</li>\n<li>利用JSR269 api(Pluggable Annotation Processing API )创建编译期的注解处理器</li>\n<li>利用tools.jar的javac api处理AST(抽象语法树)</li>\n<li>将功能注册进jar包</li>\n</ol>\n<h2 id=\"基础点\"><a href=\"#基础点\" class=\"headerlink\" title=\"基础点\"></a>基础点</h2><ol>\n<li>注解</li>\n<li>JSR269 api</li>\n<li>javac api处理AST</li>\n</ol>\n<h2 id=\"手撸Getter\"><a href=\"#手撸Getter\" class=\"headerlink\" title=\"手撸Getter\"></a>手撸Getter</h2><p>实验的目的是自定义一个针对类的Getter注解，它能够读取该类的成员方法并自动生成getter方法。</p>\n<h3 id=\"创建Getter注解\"><a href=\"#创建Getter注解\" class=\"headerlink\" title=\"创建Getter注解\"></a>创建Getter注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> laboratory.lombokLearn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Getter &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建Getter注解的处理器\"><a href=\"#创建Getter注解的处理器\" class=\"headerlink\" title=\"创建Getter注解的处理器\"></a>创建Getter注解的处理器</h3><h4 id=\"基本框架\"><a href=\"#基本框架\" class=\"headerlink\" title=\"基本框架\"></a>基本框架</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> laboratory.lombokLearn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.processing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.lang.model.SourceVersion;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.lang.model.element.TypeElement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SupportedAnnotationTypes</span>(<span class=\"string\">\"laboratory.lombokLearn.Getter\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@SupportedSourceVersion</span>(SourceVersion.RELEASE_8)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetterProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProcessor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.init(processingEnv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">process</span><span class=\"params\">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后需要着重实现两个方法，init跟process。init的主要用途是通过ProcessingEnvironment来获取编译阶段的一些环境信息;process主要是实现具体逻辑的地方，也就是对AST进行处理的地方。</p>\n<h4 id=\"init-方法\"><a href=\"#init-方法\" class=\"headerlink\" title=\"init 方法\"></a>init 方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Messager messager;</span><br><span class=\"line\"><span class=\"keyword\">private</span> JavacTrees trees;</span><br><span class=\"line\"><span class=\"keyword\">private</span> TreeMaker treeMaker;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Names names;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.init(processingEnv);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.messager = processingEnv.getMessager();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.trees = JavacTrees.instance(processingEnv);</span><br><span class=\"line\">    Context context = ((JavacProcessingEnvironment) processingEnv).getContext();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.treeMaker = TreeMaker.instance(context);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.names = Names.instance(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Messager主要是用来在编译期打log用的</li>\n<li>JavacTrees提供了待处理的抽象语法树</li>\n<li>TreeMaker封装了创建AST节点的一些方法</li>\n<li>Names提供了创建标识符的方法</li>\n</ol>\n<h4 id=\"PROCESS方法\"><a href=\"#PROCESS方法\" class=\"headerlink\" title=\"PROCESS方法\"></a>PROCESS方法</h4><p>步骤大概是下面这样：</p>\n<ol>\n<li>利用roundEnv的getElementsAnnotatedWith方法过滤出被Getter这个注解标记的类，并存入set</li>\n<li>遍历这个set里的每一个元素，并生成jCTree这个语法树</li>\n<li>创建一个TreeTranslator，并重写其中的visitClassDef方法，这个方法处理遍历语法树得到的类定义部分jcClassDecl<blockquote>\n<p>创建一个jcVariableDeclList保存类的成员变量<br>遍历jcTree的所有成员(包括成员变量和成员函数和构造函数)，过滤出其中的成员变量，并添加进jcVariableDeclList<br>将jcVariableDeclList的所有变量转换成需要添加的getter方法，并添加进jcClassDecl的成员中<br>调用默认的遍历方法遍历处理后的jcClassDecl</p>\n</blockquote>\n</li>\n<li>利用上面的TreeTranslator去处理jcTree</li>\n</ol>\n<h2 id=\"summary-answer-question\"><a href=\"#summary-answer-question\" class=\"headerlink\" title=\"summary (answer question)\"></a>summary (answer question)</h2><h3 id=\"1-注解的理解\"><a href=\"#1-注解的理解\" class=\"headerlink\" title=\"1. 注解的理解\"></a>1. 注解的理解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.SOURCE)</span><br></pre></td></tr></table></figure>\n<p>这个是编译时运行的注解，其实我更加想知道运行时的注解，如何运作的。</p>\n<h3 id=\"2-JSR269-api-是啥？\"><a href=\"#2-JSR269-api-是啥？\" class=\"headerlink\" title=\"2. JSR269 api 是啥？\"></a>2. JSR269 api 是啥？</h3><p>Pluggable Annotation Processing API（注解处理器）</p>\n<h3 id=\"3-AST-what？\"><a href=\"#3-AST-what？\" class=\"headerlink\" title=\"3. AST what？\"></a>3. AST what？</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> JavacTrees trees;</span><br></pre></td></tr></table></figure>\n<p>这个就是语法树</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jcTree.accept(）</span><br></pre></td></tr></table></figure>\n<p>为类增加方法</p>\n<h3 id=\"运行时的注解\"><a href=\"#运行时的注解\" class=\"headerlink\" title=\"运行时的注解\"></a>运行时的注解</h3><p>我研究一下<code>@Cacheable</code>注解吧</p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考：<a href=\"https://blog.mythsman.com/2017/12/19/1/\" target=\"_blank\" rel=\"noopener\">https://blog.mythsman.com/2017/12/19/1/</a></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ol>\n<li>定义编译期的注解</li>\n<li>利用JSR269 api(Pluggable Annotation Processing API )创建编译期的注解处理器</li>\n<li>利用tools.jar的javac api处理AST(抽象语法树)</li>\n<li>将功能注册进jar包</li>\n</ol>\n<h2 id=\"基础点\"><a href=\"#基础点\" class=\"headerlink\" title=\"基础点\"></a>基础点</h2><ol>\n<li>注解</li>\n<li>JSR269 api</li>\n<li>javac api处理AST</li>\n</ol>\n<h2 id=\"手撸Getter\"><a href=\"#手撸Getter\" class=\"headerlink\" title=\"手撸Getter\"></a>手撸Getter</h2><p>实验的目的是自定义一个针对类的Getter注解，它能够读取该类的成员方法并自动生成getter方法。</p>\n<h3 id=\"创建Getter注解\"><a href=\"#创建Getter注解\" class=\"headerlink\" title=\"创建Getter注解\"></a>创建Getter注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> laboratory.lombokLearn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Getter &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建Getter注解的处理器\"><a href=\"#创建Getter注解的处理器\" class=\"headerlink\" title=\"创建Getter注解的处理器\"></a>创建Getter注解的处理器</h3><h4 id=\"基本框架\"><a href=\"#基本框架\" class=\"headerlink\" title=\"基本框架\"></a>基本框架</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> laboratory.lombokLearn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.processing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.lang.model.SourceVersion;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.lang.model.element.TypeElement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SupportedAnnotationTypes</span>(<span class=\"string\">\"laboratory.lombokLearn.Getter\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@SupportedSourceVersion</span>(SourceVersion.RELEASE_8)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetterProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProcessor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.init(processingEnv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">process</span><span class=\"params\">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后需要着重实现两个方法，init跟process。init的主要用途是通过ProcessingEnvironment来获取编译阶段的一些环境信息;process主要是实现具体逻辑的地方，也就是对AST进行处理的地方。</p>\n<h4 id=\"init-方法\"><a href=\"#init-方法\" class=\"headerlink\" title=\"init 方法\"></a>init 方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Messager messager;</span><br><span class=\"line\"><span class=\"keyword\">private</span> JavacTrees trees;</span><br><span class=\"line\"><span class=\"keyword\">private</span> TreeMaker treeMaker;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Names names;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.init(processingEnv);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.messager = processingEnv.getMessager();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.trees = JavacTrees.instance(processingEnv);</span><br><span class=\"line\">    Context context = ((JavacProcessingEnvironment) processingEnv).getContext();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.treeMaker = TreeMaker.instance(context);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.names = Names.instance(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Messager主要是用来在编译期打log用的</li>\n<li>JavacTrees提供了待处理的抽象语法树</li>\n<li>TreeMaker封装了创建AST节点的一些方法</li>\n<li>Names提供了创建标识符的方法</li>\n</ol>\n<h4 id=\"PROCESS方法\"><a href=\"#PROCESS方法\" class=\"headerlink\" title=\"PROCESS方法\"></a>PROCESS方法</h4><p>步骤大概是下面这样：</p>\n<ol>\n<li>利用roundEnv的getElementsAnnotatedWith方法过滤出被Getter这个注解标记的类，并存入set</li>\n<li>遍历这个set里的每一个元素，并生成jCTree这个语法树</li>\n<li>创建一个TreeTranslator，并重写其中的visitClassDef方法，这个方法处理遍历语法树得到的类定义部分jcClassDecl<blockquote>\n<p>创建一个jcVariableDeclList保存类的成员变量<br>遍历jcTree的所有成员(包括成员变量和成员函数和构造函数)，过滤出其中的成员变量，并添加进jcVariableDeclList<br>将jcVariableDeclList的所有变量转换成需要添加的getter方法，并添加进jcClassDecl的成员中<br>调用默认的遍历方法遍历处理后的jcClassDecl</p>\n</blockquote>\n</li>\n<li>利用上面的TreeTranslator去处理jcTree</li>\n</ol>\n<h2 id=\"summary-answer-question\"><a href=\"#summary-answer-question\" class=\"headerlink\" title=\"summary (answer question)\"></a>summary (answer question)</h2><h3 id=\"1-注解的理解\"><a href=\"#1-注解的理解\" class=\"headerlink\" title=\"1. 注解的理解\"></a>1. 注解的理解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.SOURCE)</span><br></pre></td></tr></table></figure>\n<p>这个是编译时运行的注解，其实我更加想知道运行时的注解，如何运作的。</p>\n<h3 id=\"2-JSR269-api-是啥？\"><a href=\"#2-JSR269-api-是啥？\" class=\"headerlink\" title=\"2. JSR269 api 是啥？\"></a>2. JSR269 api 是啥？</h3><p>Pluggable Annotation Processing API（注解处理器）</p>\n<h3 id=\"3-AST-what？\"><a href=\"#3-AST-what？\" class=\"headerlink\" title=\"3. AST what？\"></a>3. AST what？</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> JavacTrees trees;</span><br></pre></td></tr></table></figure>\n<p>这个就是语法树</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jcTree.accept(）</span><br></pre></td></tr></table></figure>\n<p>为类增加方法</p>\n<h3 id=\"运行时的注解\"><a href=\"#运行时的注解\" class=\"headerlink\" title=\"运行时的注解\"></a>运行时的注解</h3><p>我研究一下<code>@Cacheable</code>注解吧</p>\n"},{"title":"spring aop 切向编程","date":"2018-08-29T13:14:48.231Z","_content":"\n\n## 概览\n\n1. 什么是切向编程？\n2. 切向编程的好处\n3. spring aop的使用\n4. spring中类似于`@Cacheable`的实现\n\n重点讲3和4\n\n## 什么是切向编程？\n\n自己的理解：`在一个方法前后执行某段特定功能的代码`\n\n## 切向编程的好处\n\n举两个例子：\n1. web应用中，需要打印接口传入的params and return result，就需要在接口前后加上log。\n2. 将数据库查询出的数据缓存到redis中（类似于`@Cacheable`）。\n\n## spring aop的使用\n\n关键点：\n1. 声明切面类，使用`@Aspect`并将类注册到IOC容器中`@Component`\n2. 定义切点：`@Pointcut(\"execution(public * laboratory.controller..*.*(..))\")`\n3. 定义执行方法：`@Before(\"webLog()\")`\n\n### 切点类型\n\n`@Pointcut(value = \"\")`  \nvalue的类型：\nTOTO: 总结value类型\n\n\n\n### 完整代码\n\n**WebLogAspect：**\n\n```java\npackage laboratory.aop;\n\nimport com.alibaba.fastjson.JSON;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport javax.servlet.http.HttpServletRequest;\n\n@Aspect    // 1. 声明切面类\n@Component\npublic class WebLogAspect {\n\n    @Pointcut(\"execution(public * laboratory.controller..*.*(..))\") // 2. 定义切点\n    public void webLog(){\n    }\n\n    @Before(\"webLog()\")  // 3. 定义执行方法\n    public void doBefore(JoinPoint joinPoint) {\n\t\t// 接收到请求，记录请求内容\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request =  attributes.getRequest();\n\n        // 记录下请求内容\n//        logger.info(\"URL : \" + request.getRequestURL().toString());\n//        logger.info(\"HTTP_METHOD : \" + request.getMethod());\n//        logger.info(\"IP : \" + request.getRemoteAddr());\n//        logger.info(\"CLASS_METHOD : \" + joinPoint.getSignature().getDeclaringTypeName() + \".\" + joinPoint.getSignature().getName());\n//        logger.info(\"ARGS : \" + Arrays.toString(joinPoint.getArgs()));\n    }\n\n    @AfterReturning(returning = \"ret\", pointcut = \"webLog()\")  //3. 定义执行方法\n    public void doAfterReturning(Object ret) {\n        System.out.println(\"resp: \" + JSON.toJSONString(ret));\n    }\n}\n```\n\n\n**FirstCache:**\n```java\npackage laboratory.aop;\n\nimport laboratory.annotation.FirstCacheAno;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@Component\npublic class FirstCache {\n\n    @Pointcut(\"@annotation(laboratory.annotation.FirstCacheAno)\")\n    public void firstCache() {\n    }\n\n    @Around(\"firstCache()\")\n    public Object aroundFirstCache(ProceedingJoinPoint proceedingJoinPoint) {\n        System.out.println(\"aroundFirstCache after....\");\n        MethodSignature signature = (MethodSignature) proceedingJoinPoint.getSignature();\n        FirstCacheAno firstCache = signature.getMethod().getAnnotation(FirstCacheAno.class);\n        System.out.println(\"firstCache cacheName: \" + firstCache.cacheName());\n        System.out.println(\"firstCache unless: \" + firstCache.unless());\n        Object ret = null;\n        try {\n            ret = proceedingJoinPoint.proceed();\n            System.out.println(ret);\n        } catch (Throwable throwable) {\n            throwable.printStackTrace();\n        }\n        System.out.println(\"aroundFirstCache end....\");\n        return ret;\n    }\n}\n\n```\n\n","source":"_posts/backend/java/spring_aop.md","raw":"\n---\ntitle: spring aop 切向编程\ndate: \ncategories:\n- backend\ntags:\n- java\n- spring aop\n---\n\n\n## 概览\n\n1. 什么是切向编程？\n2. 切向编程的好处\n3. spring aop的使用\n4. spring中类似于`@Cacheable`的实现\n\n重点讲3和4\n\n## 什么是切向编程？\n\n自己的理解：`在一个方法前后执行某段特定功能的代码`\n\n## 切向编程的好处\n\n举两个例子：\n1. web应用中，需要打印接口传入的params and return result，就需要在接口前后加上log。\n2. 将数据库查询出的数据缓存到redis中（类似于`@Cacheable`）。\n\n## spring aop的使用\n\n关键点：\n1. 声明切面类，使用`@Aspect`并将类注册到IOC容器中`@Component`\n2. 定义切点：`@Pointcut(\"execution(public * laboratory.controller..*.*(..))\")`\n3. 定义执行方法：`@Before(\"webLog()\")`\n\n### 切点类型\n\n`@Pointcut(value = \"\")`  \nvalue的类型：\nTOTO: 总结value类型\n\n\n\n### 完整代码\n\n**WebLogAspect：**\n\n```java\npackage laboratory.aop;\n\nimport com.alibaba.fastjson.JSON;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport javax.servlet.http.HttpServletRequest;\n\n@Aspect    // 1. 声明切面类\n@Component\npublic class WebLogAspect {\n\n    @Pointcut(\"execution(public * laboratory.controller..*.*(..))\") // 2. 定义切点\n    public void webLog(){\n    }\n\n    @Before(\"webLog()\")  // 3. 定义执行方法\n    public void doBefore(JoinPoint joinPoint) {\n\t\t// 接收到请求，记录请求内容\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request =  attributes.getRequest();\n\n        // 记录下请求内容\n//        logger.info(\"URL : \" + request.getRequestURL().toString());\n//        logger.info(\"HTTP_METHOD : \" + request.getMethod());\n//        logger.info(\"IP : \" + request.getRemoteAddr());\n//        logger.info(\"CLASS_METHOD : \" + joinPoint.getSignature().getDeclaringTypeName() + \".\" + joinPoint.getSignature().getName());\n//        logger.info(\"ARGS : \" + Arrays.toString(joinPoint.getArgs()));\n    }\n\n    @AfterReturning(returning = \"ret\", pointcut = \"webLog()\")  //3. 定义执行方法\n    public void doAfterReturning(Object ret) {\n        System.out.println(\"resp: \" + JSON.toJSONString(ret));\n    }\n}\n```\n\n\n**FirstCache:**\n```java\npackage laboratory.aop;\n\nimport laboratory.annotation.FirstCacheAno;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@Component\npublic class FirstCache {\n\n    @Pointcut(\"@annotation(laboratory.annotation.FirstCacheAno)\")\n    public void firstCache() {\n    }\n\n    @Around(\"firstCache()\")\n    public Object aroundFirstCache(ProceedingJoinPoint proceedingJoinPoint) {\n        System.out.println(\"aroundFirstCache after....\");\n        MethodSignature signature = (MethodSignature) proceedingJoinPoint.getSignature();\n        FirstCacheAno firstCache = signature.getMethod().getAnnotation(FirstCacheAno.class);\n        System.out.println(\"firstCache cacheName: \" + firstCache.cacheName());\n        System.out.println(\"firstCache unless: \" + firstCache.unless());\n        Object ret = null;\n        try {\n            ret = proceedingJoinPoint.proceed();\n            System.out.println(ret);\n        } catch (Throwable throwable) {\n            throwable.printStackTrace();\n        }\n        System.out.println(\"aroundFirstCache end....\");\n        return ret;\n    }\n}\n\n```\n\n","slug":"backend/java/spring_aop","published":1,"updated":"2018-08-29T13:26:45.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgv900218seo4wswij35","content":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><ol>\n<li>什么是切向编程？</li>\n<li>切向编程的好处</li>\n<li>spring aop的使用</li>\n<li>spring中类似于<code>@Cacheable</code>的实现</li>\n</ol>\n<p>重点讲3和4</p>\n<h2 id=\"什么是切向编程？\"><a href=\"#什么是切向编程？\" class=\"headerlink\" title=\"什么是切向编程？\"></a>什么是切向编程？</h2><p>自己的理解：<code>在一个方法前后执行某段特定功能的代码</code></p>\n<h2 id=\"切向编程的好处\"><a href=\"#切向编程的好处\" class=\"headerlink\" title=\"切向编程的好处\"></a>切向编程的好处</h2><p>举两个例子：</p>\n<ol>\n<li>web应用中，需要打印接口传入的params and return result，就需要在接口前后加上log。</li>\n<li>将数据库查询出的数据缓存到redis中（类似于<code>@Cacheable</code>）。</li>\n</ol>\n<h2 id=\"spring-aop的使用\"><a href=\"#spring-aop的使用\" class=\"headerlink\" title=\"spring aop的使用\"></a>spring aop的使用</h2><p>关键点：</p>\n<ol>\n<li>声明切面类，使用<code>@Aspect</code>并将类注册到IOC容器中<code>@Component</code></li>\n<li>定义切点：<code>@Pointcut(&quot;execution(public * laboratory.controller..*.*(..))&quot;)</code></li>\n<li>定义执行方法：<code>@Before(&quot;webLog()&quot;)</code></li>\n</ol>\n<h3 id=\"切点类型\"><a href=\"#切点类型\" class=\"headerlink\" title=\"切点类型\"></a>切点类型</h3><p><code>@Pointcut(value = &quot;&quot;)</code><br>value的类型：<br>TOTO: 总结value类型</p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p><strong>WebLogAspect：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> laboratory.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span>    <span class=\"comment\">// 1. 声明切面类</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebLogAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(public * laboratory.controller..*.*(..))\"</span>) <span class=\"comment\">// 2. 定义切点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">webLog</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"webLog()\"</span>)  <span class=\"comment\">// 3. 定义执行方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doBefore</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 接收到请求，记录请求内容</span></span><br><span class=\"line\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request =  attributes.getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 记录下请求内容</span></span><br><span class=\"line\"><span class=\"comment\">//        logger.info(\"URL : \" + request.getRequestURL().toString());</span></span><br><span class=\"line\"><span class=\"comment\">//        logger.info(\"HTTP_METHOD : \" + request.getMethod());</span></span><br><span class=\"line\"><span class=\"comment\">//        logger.info(\"IP : \" + request.getRemoteAddr());</span></span><br><span class=\"line\"><span class=\"comment\">//        logger.info(\"CLASS_METHOD : \" + joinPoint.getSignature().getDeclaringTypeName() + \".\" + joinPoint.getSignature().getName());</span></span><br><span class=\"line\"><span class=\"comment\">//        logger.info(\"ARGS : \" + Arrays.toString(joinPoint.getArgs()));</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning</span>(returning = <span class=\"string\">\"ret\"</span>, pointcut = <span class=\"string\">\"webLog()\"</span>)  <span class=\"comment\">//3. 定义执行方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAfterReturning</span><span class=\"params\">(Object ret)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"resp: \"</span> + JSON.toJSONString(ret));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>FirstCache:</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> laboratory.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> laboratory.annotation.FirstCacheAno;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstCache</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(laboratory.annotation.FirstCacheAno)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">firstCache</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"firstCache()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">aroundFirstCache</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"aroundFirstCache after....\"</span>);</span><br><span class=\"line\">        MethodSignature signature = (MethodSignature) proceedingJoinPoint.getSignature();</span><br><span class=\"line\">        FirstCacheAno firstCache = signature.getMethod().getAnnotation(FirstCacheAno.class);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"firstCache cacheName: \"</span> + firstCache.cacheName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"firstCache unless: \"</span> + firstCache.unless());</span><br><span class=\"line\">        Object ret = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ret = proceedingJoinPoint.proceed();</span><br><span class=\"line\">            System.out.println(ret);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">            throwable.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"aroundFirstCache end....\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><ol>\n<li>什么是切向编程？</li>\n<li>切向编程的好处</li>\n<li>spring aop的使用</li>\n<li>spring中类似于<code>@Cacheable</code>的实现</li>\n</ol>\n<p>重点讲3和4</p>\n<h2 id=\"什么是切向编程？\"><a href=\"#什么是切向编程？\" class=\"headerlink\" title=\"什么是切向编程？\"></a>什么是切向编程？</h2><p>自己的理解：<code>在一个方法前后执行某段特定功能的代码</code></p>\n<h2 id=\"切向编程的好处\"><a href=\"#切向编程的好处\" class=\"headerlink\" title=\"切向编程的好处\"></a>切向编程的好处</h2><p>举两个例子：</p>\n<ol>\n<li>web应用中，需要打印接口传入的params and return result，就需要在接口前后加上log。</li>\n<li>将数据库查询出的数据缓存到redis中（类似于<code>@Cacheable</code>）。</li>\n</ol>\n<h2 id=\"spring-aop的使用\"><a href=\"#spring-aop的使用\" class=\"headerlink\" title=\"spring aop的使用\"></a>spring aop的使用</h2><p>关键点：</p>\n<ol>\n<li>声明切面类，使用<code>@Aspect</code>并将类注册到IOC容器中<code>@Component</code></li>\n<li>定义切点：<code>@Pointcut(&quot;execution(public * laboratory.controller..*.*(..))&quot;)</code></li>\n<li>定义执行方法：<code>@Before(&quot;webLog()&quot;)</code></li>\n</ol>\n<h3 id=\"切点类型\"><a href=\"#切点类型\" class=\"headerlink\" title=\"切点类型\"></a>切点类型</h3><p><code>@Pointcut(value = &quot;&quot;)</code><br>value的类型：<br>TOTO: 总结value类型</p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p><strong>WebLogAspect：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> laboratory.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span>    <span class=\"comment\">// 1. 声明切面类</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebLogAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(public * laboratory.controller..*.*(..))\"</span>) <span class=\"comment\">// 2. 定义切点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">webLog</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"webLog()\"</span>)  <span class=\"comment\">// 3. 定义执行方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doBefore</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 接收到请求，记录请求内容</span></span><br><span class=\"line\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request =  attributes.getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 记录下请求内容</span></span><br><span class=\"line\"><span class=\"comment\">//        logger.info(\"URL : \" + request.getRequestURL().toString());</span></span><br><span class=\"line\"><span class=\"comment\">//        logger.info(\"HTTP_METHOD : \" + request.getMethod());</span></span><br><span class=\"line\"><span class=\"comment\">//        logger.info(\"IP : \" + request.getRemoteAddr());</span></span><br><span class=\"line\"><span class=\"comment\">//        logger.info(\"CLASS_METHOD : \" + joinPoint.getSignature().getDeclaringTypeName() + \".\" + joinPoint.getSignature().getName());</span></span><br><span class=\"line\"><span class=\"comment\">//        logger.info(\"ARGS : \" + Arrays.toString(joinPoint.getArgs()));</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning</span>(returning = <span class=\"string\">\"ret\"</span>, pointcut = <span class=\"string\">\"webLog()\"</span>)  <span class=\"comment\">//3. 定义执行方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAfterReturning</span><span class=\"params\">(Object ret)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"resp: \"</span> + JSON.toJSONString(ret));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>FirstCache:</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> laboratory.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> laboratory.annotation.FirstCacheAno;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstCache</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(laboratory.annotation.FirstCacheAno)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">firstCache</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"firstCache()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">aroundFirstCache</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"aroundFirstCache after....\"</span>);</span><br><span class=\"line\">        MethodSignature signature = (MethodSignature) proceedingJoinPoint.getSignature();</span><br><span class=\"line\">        FirstCacheAno firstCache = signature.getMethod().getAnnotation(FirstCacheAno.class);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"firstCache cacheName: \"</span> + firstCache.cacheName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"firstCache unless: \"</span> + firstCache.unless());</span><br><span class=\"line\">        Object ret = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ret = proceedingJoinPoint.proceed();</span><br><span class=\"line\">            System.out.println(ret);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">            throwable.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"aroundFirstCache end....\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"_content":"# Google Python Style Guide\n\n参考: https://google.github.io/styleguide/pyguide.html\n\n中文翻译: https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/background/\n\n\n\n","source":"_posts/backend/styleguide/python.md","raw":"# Google Python Style Guide\n\n参考: https://google.github.io/styleguide/pyguide.html\n\n中文翻译: https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/background/\n\n\n\n","slug":"backend/styleguide/python","published":1,"date":"2019-07-09T02:38:05.087Z","updated":"2019-07-09T03:37:11.946Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgve00258seo3i1rpq0d","content":"<h1 id=\"Google-Python-Style-Guide\"><a href=\"#Google-Python-Style-Guide\" class=\"headerlink\" title=\"Google Python Style Guide\"></a>Google Python Style Guide</h1><p>参考: <a href=\"https://google.github.io/styleguide/pyguide.html\" target=\"_blank\" rel=\"noopener\">https://google.github.io/styleguide/pyguide.html</a></p>\n<p>中文翻译: <a href=\"https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/background/\" target=\"_blank\" rel=\"noopener\">https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/background/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Google-Python-Style-Guide\"><a href=\"#Google-Python-Style-Guide\" class=\"headerlink\" title=\"Google Python Style Guide\"></a>Google Python Style Guide</h1><p>参考: <a href=\"https://google.github.io/styleguide/pyguide.html\" target=\"_blank\" rel=\"noopener\">https://google.github.io/styleguide/pyguide.html</a></p>\n<p>中文翻译: <a href=\"https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/background/\" target=\"_blank\" rel=\"noopener\">https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/background/</a></p>\n"},{"_content":"# python 项目结构\n\n参考: https://www.cnblogs.com/harrychinese/p/python_project_structure.html\n\n```\n|- LICENSE  \n|- README.md   \n|- TODO.md   \n|- docs  \n|   |-- index.md  \n|   |-- installation.md  \n|   |-- quickstart.md  \n|- sandman  \n|   |-- __init__.py  \n|   |-- exception.py  \n|   |-- model.py  \n|   |-- sandman.py  \n|- tests  \n|   |-- __init__.py  \n|   |-- test_sandman.py  \n|- setup.py  \n|- tox.ini  \n|- .gitignore  \n|- requirements.txt  \n|- requirements_dev.txt ,比requirements.txt多的是单元测试库 \n```\n\n## Top 10项目的研究发现:\n\n1. readme.md和setup.py和requirements.txt放在根目录下\n2. 一个项目至少有3个子目录, docs目录, root package 和tests package\n3. 的python代码要放在一个package中, 而不是一般的src目录中.\n4. tox 测试工具大家都在用.\n5. 用pytest和nose单元测试工具比较多, 尤其是pytest\n\n## 脚手架工具:\n\n下载并安装cookiecutter命令行工具,\n网站: [下载](https://github.com/audreyr/cookiecutter-pypackage)\npip install cookiecutter\n\n[cookiecutter更详细的教材](http://pydanny.com/cookie-project-templates-made-easy.html)","source":"_posts/backend/python/python 项目目录结构.md","raw":"# python 项目结构\n\n参考: https://www.cnblogs.com/harrychinese/p/python_project_structure.html\n\n```\n|- LICENSE  \n|- README.md   \n|- TODO.md   \n|- docs  \n|   |-- index.md  \n|   |-- installation.md  \n|   |-- quickstart.md  \n|- sandman  \n|   |-- __init__.py  \n|   |-- exception.py  \n|   |-- model.py  \n|   |-- sandman.py  \n|- tests  \n|   |-- __init__.py  \n|   |-- test_sandman.py  \n|- setup.py  \n|- tox.ini  \n|- .gitignore  \n|- requirements.txt  \n|- requirements_dev.txt ,比requirements.txt多的是单元测试库 \n```\n\n## Top 10项目的研究发现:\n\n1. readme.md和setup.py和requirements.txt放在根目录下\n2. 一个项目至少有3个子目录, docs目录, root package 和tests package\n3. 的python代码要放在一个package中, 而不是一般的src目录中.\n4. tox 测试工具大家都在用.\n5. 用pytest和nose单元测试工具比较多, 尤其是pytest\n\n## 脚手架工具:\n\n下载并安装cookiecutter命令行工具,\n网站: [下载](https://github.com/audreyr/cookiecutter-pypackage)\npip install cookiecutter\n\n[cookiecutter更详细的教材](http://pydanny.com/cookie-project-templates-made-easy.html)","slug":"backend/python/python 项目目录结构","published":1,"date":"2019-07-03T15:47:46.548Z","updated":"2019-07-03T15:49:23.415Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgvh00278seoa1gpxp4r","content":"<h1 id=\"python-项目结构\"><a href=\"#python-项目结构\" class=\"headerlink\" title=\"python 项目结构\"></a>python 项目结构</h1><p>参考: <a href=\"https://www.cnblogs.com/harrychinese/p/python_project_structure.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/harrychinese/p/python_project_structure.html</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|- LICENSE  </span><br><span class=\"line\">|- README.md   </span><br><span class=\"line\">|- TODO.md   </span><br><span class=\"line\">|- docs  </span><br><span class=\"line\">|   |-- index.md  </span><br><span class=\"line\">|   |-- installation.md  </span><br><span class=\"line\">|   |-- quickstart.md  </span><br><span class=\"line\">|- sandman  </span><br><span class=\"line\">|   |-- __init__.py  </span><br><span class=\"line\">|   |-- exception.py  </span><br><span class=\"line\">|   |-- model.py  </span><br><span class=\"line\">|   |-- sandman.py  </span><br><span class=\"line\">|- tests  </span><br><span class=\"line\">|   |-- __init__.py  </span><br><span class=\"line\">|   |-- test_sandman.py  </span><br><span class=\"line\">|- setup.py  </span><br><span class=\"line\">|- tox.ini  </span><br><span class=\"line\">|- .gitignore  </span><br><span class=\"line\">|- requirements.txt  </span><br><span class=\"line\">|- requirements_dev.txt ,比requirements.txt多的是单元测试库</span><br></pre></td></tr></table></figure>\n<h2 id=\"Top-10项目的研究发现\"><a href=\"#Top-10项目的研究发现\" class=\"headerlink\" title=\"Top 10项目的研究发现:\"></a>Top 10项目的研究发现:</h2><ol>\n<li>readme.md和setup.py和requirements.txt放在根目录下</li>\n<li>一个项目至少有3个子目录, docs目录, root package 和tests package</li>\n<li>的python代码要放在一个package中, 而不是一般的src目录中.</li>\n<li>tox 测试工具大家都在用.</li>\n<li>用pytest和nose单元测试工具比较多, 尤其是pytest</li>\n</ol>\n<h2 id=\"脚手架工具\"><a href=\"#脚手架工具\" class=\"headerlink\" title=\"脚手架工具:\"></a>脚手架工具:</h2><p>下载并安装cookiecutter命令行工具,<br>网站: <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" target=\"_blank\" rel=\"noopener\">下载</a><br>pip install cookiecutter</p>\n<p><a href=\"http://pydanny.com/cookie-project-templates-made-easy.html\" target=\"_blank\" rel=\"noopener\">cookiecutter更详细的教材</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python-项目结构\"><a href=\"#python-项目结构\" class=\"headerlink\" title=\"python 项目结构\"></a>python 项目结构</h1><p>参考: <a href=\"https://www.cnblogs.com/harrychinese/p/python_project_structure.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/harrychinese/p/python_project_structure.html</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|- LICENSE  </span><br><span class=\"line\">|- README.md   </span><br><span class=\"line\">|- TODO.md   </span><br><span class=\"line\">|- docs  </span><br><span class=\"line\">|   |-- index.md  </span><br><span class=\"line\">|   |-- installation.md  </span><br><span class=\"line\">|   |-- quickstart.md  </span><br><span class=\"line\">|- sandman  </span><br><span class=\"line\">|   |-- __init__.py  </span><br><span class=\"line\">|   |-- exception.py  </span><br><span class=\"line\">|   |-- model.py  </span><br><span class=\"line\">|   |-- sandman.py  </span><br><span class=\"line\">|- tests  </span><br><span class=\"line\">|   |-- __init__.py  </span><br><span class=\"line\">|   |-- test_sandman.py  </span><br><span class=\"line\">|- setup.py  </span><br><span class=\"line\">|- tox.ini  </span><br><span class=\"line\">|- .gitignore  </span><br><span class=\"line\">|- requirements.txt  </span><br><span class=\"line\">|- requirements_dev.txt ,比requirements.txt多的是单元测试库</span><br></pre></td></tr></table></figure>\n<h2 id=\"Top-10项目的研究发现\"><a href=\"#Top-10项目的研究发现\" class=\"headerlink\" title=\"Top 10项目的研究发现:\"></a>Top 10项目的研究发现:</h2><ol>\n<li>readme.md和setup.py和requirements.txt放在根目录下</li>\n<li>一个项目至少有3个子目录, docs目录, root package 和tests package</li>\n<li>的python代码要放在一个package中, 而不是一般的src目录中.</li>\n<li>tox 测试工具大家都在用.</li>\n<li>用pytest和nose单元测试工具比较多, 尤其是pytest</li>\n</ol>\n<h2 id=\"脚手架工具\"><a href=\"#脚手架工具\" class=\"headerlink\" title=\"脚手架工具:\"></a>脚手架工具:</h2><p>下载并安装cookiecutter命令行工具,<br>网站: <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" target=\"_blank\" rel=\"noopener\">下载</a><br>pip install cookiecutter</p>\n<p><a href=\"http://pydanny.com/cookie-project-templates-made-easy.html\" target=\"_blank\" rel=\"noopener\">cookiecutter更详细的教材</a></p>\n"},{"title":"markfile start learn","date":"2018-09-01T07:37:28.000Z","_content":"\n参考: [https://www.cnblogs.com/wang_yb/p/3990952.html](https://www.cnblogs.com/wang_yb/p/3990952.html)\n\n## Makefile 简介\n\nMakefile 是和 make 命令一起配合使用的.\n\n很多大型项目的编译都是通过 Makefile 来组织的, 如果没有 Makefile, 那很多项目中各种库和代码之间的依赖关系不知会多复杂.\n\nMakefile的组织流程的能力如此之强, 不仅可以用来编译项目, 还可以用来组织我们平时的一些日常操作. 这个需要大家发挥自己的想象力.\n\n\n### Makefile 主要的 5个部分 (显示规则, 隐晦规则, 变量定义, 文件指示, 注释)\n\nMakefile基本格式如下:\n\n```makefile\ntarget ... : prerequisites ...\n    command\n    ...\n    ...\n```\n其中,\n- target        - 目标文件, 可以是 Object File, 也可以是可执行文件\n- prerequisites - 生成 target 所需要的文件或者目标\n- command       - make需要执行的命令 (任意的shell命令), Makefile中的命令必须以 `[tab] 开头`\n\n1. 显示规则 :: 说明如何生成一个或多个目标文件(包括 生成的文件, 文件的依赖文件, 生成的命令)\n2. 隐晦规则 :: make的自动推导功能所执行的规则\n3. 变量定义 :: Makefile中定义的变量\n4. 文件指示 :: Makefile中引用其他Makefile; 指定Makefile中有效部分; 定义一个多行命令\n5. 注释     :: Makefile只有行注释 \"#\", 如果要使用或者输出\"#\"字符, 需要进行转义, \"\\#\"\n\n### 1.2 GNU make 的工作方式\n\n1. 读入主Makefile (主Makefile中可以引用其他Makefile)\n2. 读入被include的其他Makefile\n3. 初始化文件中的变量\n4. 推导隐晦规则, 并分析所有规则\n5. 为所有的目标文件创建依赖关系链\n6. 根据依赖关系, 决定哪些目标要重新生成\n7. 执行生成命令\n\n## 实例解析\n\n\n\n\n\n","source":"_posts/backend/tools/markfile_start_learn.md","raw":"---\ntitle: markfile start learn\ndate: 2018-09-01 15:37:28\ncategories:\n- backend\ntags:\n- markdown\n- build tools\n---\n\n参考: [https://www.cnblogs.com/wang_yb/p/3990952.html](https://www.cnblogs.com/wang_yb/p/3990952.html)\n\n## Makefile 简介\n\nMakefile 是和 make 命令一起配合使用的.\n\n很多大型项目的编译都是通过 Makefile 来组织的, 如果没有 Makefile, 那很多项目中各种库和代码之间的依赖关系不知会多复杂.\n\nMakefile的组织流程的能力如此之强, 不仅可以用来编译项目, 还可以用来组织我们平时的一些日常操作. 这个需要大家发挥自己的想象力.\n\n\n### Makefile 主要的 5个部分 (显示规则, 隐晦规则, 变量定义, 文件指示, 注释)\n\nMakefile基本格式如下:\n\n```makefile\ntarget ... : prerequisites ...\n    command\n    ...\n    ...\n```\n其中,\n- target        - 目标文件, 可以是 Object File, 也可以是可执行文件\n- prerequisites - 生成 target 所需要的文件或者目标\n- command       - make需要执行的命令 (任意的shell命令), Makefile中的命令必须以 `[tab] 开头`\n\n1. 显示规则 :: 说明如何生成一个或多个目标文件(包括 生成的文件, 文件的依赖文件, 生成的命令)\n2. 隐晦规则 :: make的自动推导功能所执行的规则\n3. 变量定义 :: Makefile中定义的变量\n4. 文件指示 :: Makefile中引用其他Makefile; 指定Makefile中有效部分; 定义一个多行命令\n5. 注释     :: Makefile只有行注释 \"#\", 如果要使用或者输出\"#\"字符, 需要进行转义, \"\\#\"\n\n### 1.2 GNU make 的工作方式\n\n1. 读入主Makefile (主Makefile中可以引用其他Makefile)\n2. 读入被include的其他Makefile\n3. 初始化文件中的变量\n4. 推导隐晦规则, 并分析所有规则\n5. 为所有的目标文件创建依赖关系链\n6. 根据依赖关系, 决定哪些目标要重新生成\n7. 执行生成命令\n\n## 实例解析\n\n\n\n\n\n","slug":"backend/tools/markfile_start_learn","published":1,"updated":"2018-09-01T10:05:44.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgvj002a8seo5vjyvsw7","content":"<p>参考: <a href=\"https://www.cnblogs.com/wang_yb/p/3990952.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wang_yb/p/3990952.html</a></p>\n<h2 id=\"Makefile-简介\"><a href=\"#Makefile-简介\" class=\"headerlink\" title=\"Makefile 简介\"></a>Makefile 简介</h2><p>Makefile 是和 make 命令一起配合使用的.</p>\n<p>很多大型项目的编译都是通过 Makefile 来组织的, 如果没有 Makefile, 那很多项目中各种库和代码之间的依赖关系不知会多复杂.</p>\n<p>Makefile的组织流程的能力如此之强, 不仅可以用来编译项目, 还可以用来组织我们平时的一些日常操作. 这个需要大家发挥自己的想象力.</p>\n<h3 id=\"Makefile-主要的-5个部分-显示规则-隐晦规则-变量定义-文件指示-注释\"><a href=\"#Makefile-主要的-5个部分-显示规则-隐晦规则-变量定义-文件指示-注释\" class=\"headerlink\" title=\"Makefile 主要的 5个部分 (显示规则, 隐晦规则, 变量定义, 文件指示, 注释)\"></a>Makefile 主要的 5个部分 (显示规则, 隐晦规则, 变量定义, 文件指示, 注释)</h3><p>Makefile基本格式如下:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target ... : prerequisites ...</span><br><span class=\"line\">    command</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p>其中,</p>\n<ul>\n<li>target        - 目标文件, 可以是 Object File, 也可以是可执行文件</li>\n<li>prerequisites - 生成 target 所需要的文件或者目标</li>\n<li>command       - make需要执行的命令 (任意的shell命令), Makefile中的命令必须以 <code>[tab] 开头</code></li>\n</ul>\n<ol>\n<li>显示规则 :: 说明如何生成一个或多个目标文件(包括 生成的文件, 文件的依赖文件, 生成的命令)</li>\n<li>隐晦规则 :: make的自动推导功能所执行的规则</li>\n<li>变量定义 :: Makefile中定义的变量</li>\n<li>文件指示 :: Makefile中引用其他Makefile; 指定Makefile中有效部分; 定义一个多行命令</li>\n<li>注释     :: Makefile只有行注释 “#”, 如果要使用或者输出”#”字符, 需要进行转义, “#“</li>\n</ol>\n<h3 id=\"1-2-GNU-make-的工作方式\"><a href=\"#1-2-GNU-make-的工作方式\" class=\"headerlink\" title=\"1.2 GNU make 的工作方式\"></a>1.2 GNU make 的工作方式</h3><ol>\n<li>读入主Makefile (主Makefile中可以引用其他Makefile)</li>\n<li>读入被include的其他Makefile</li>\n<li>初始化文件中的变量</li>\n<li>推导隐晦规则, 并分析所有规则</li>\n<li>为所有的目标文件创建依赖关系链</li>\n<li>根据依赖关系, 决定哪些目标要重新生成</li>\n<li>执行生成命令</li>\n</ol>\n<h2 id=\"实例解析\"><a href=\"#实例解析\" class=\"headerlink\" title=\"实例解析\"></a>实例解析</h2>","site":{"data":{}},"excerpt":"","more":"<p>参考: <a href=\"https://www.cnblogs.com/wang_yb/p/3990952.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wang_yb/p/3990952.html</a></p>\n<h2 id=\"Makefile-简介\"><a href=\"#Makefile-简介\" class=\"headerlink\" title=\"Makefile 简介\"></a>Makefile 简介</h2><p>Makefile 是和 make 命令一起配合使用的.</p>\n<p>很多大型项目的编译都是通过 Makefile 来组织的, 如果没有 Makefile, 那很多项目中各种库和代码之间的依赖关系不知会多复杂.</p>\n<p>Makefile的组织流程的能力如此之强, 不仅可以用来编译项目, 还可以用来组织我们平时的一些日常操作. 这个需要大家发挥自己的想象力.</p>\n<h3 id=\"Makefile-主要的-5个部分-显示规则-隐晦规则-变量定义-文件指示-注释\"><a href=\"#Makefile-主要的-5个部分-显示规则-隐晦规则-变量定义-文件指示-注释\" class=\"headerlink\" title=\"Makefile 主要的 5个部分 (显示规则, 隐晦规则, 变量定义, 文件指示, 注释)\"></a>Makefile 主要的 5个部分 (显示规则, 隐晦规则, 变量定义, 文件指示, 注释)</h3><p>Makefile基本格式如下:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target ... : prerequisites ...</span><br><span class=\"line\">    command</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p>其中,</p>\n<ul>\n<li>target        - 目标文件, 可以是 Object File, 也可以是可执行文件</li>\n<li>prerequisites - 生成 target 所需要的文件或者目标</li>\n<li>command       - make需要执行的命令 (任意的shell命令), Makefile中的命令必须以 <code>[tab] 开头</code></li>\n</ul>\n<ol>\n<li>显示规则 :: 说明如何生成一个或多个目标文件(包括 生成的文件, 文件的依赖文件, 生成的命令)</li>\n<li>隐晦规则 :: make的自动推导功能所执行的规则</li>\n<li>变量定义 :: Makefile中定义的变量</li>\n<li>文件指示 :: Makefile中引用其他Makefile; 指定Makefile中有效部分; 定义一个多行命令</li>\n<li>注释     :: Makefile只有行注释 “#”, 如果要使用或者输出”#”字符, 需要进行转义, “#“</li>\n</ol>\n<h3 id=\"1-2-GNU-make-的工作方式\"><a href=\"#1-2-GNU-make-的工作方式\" class=\"headerlink\" title=\"1.2 GNU make 的工作方式\"></a>1.2 GNU make 的工作方式</h3><ol>\n<li>读入主Makefile (主Makefile中可以引用其他Makefile)</li>\n<li>读入被include的其他Makefile</li>\n<li>初始化文件中的变量</li>\n<li>推导隐晦规则, 并分析所有规则</li>\n<li>为所有的目标文件创建依赖关系链</li>\n<li>根据依赖关系, 决定哪些目标要重新生成</li>\n<li>执行生成命令</li>\n</ol>\n<h2 id=\"实例解析\"><a href=\"#实例解析\" class=\"headerlink\" title=\"实例解析\"></a>实例解析</h2>"},{"title":"apidoc start learn","date":"2018-08-31T08:02:53.000Z","_content":"\n参考: [http://apidocjs.com/](http://apidocjs.com/)\n\n## Demo\n\n`Javadoc-Style` (can be used in C#, Go, Dart, Java, JavaScript, PHP, TypeScript and all other Javadoc capable languages):\n\n```go\n/**\n * @api {get} /user/:id Request User information\n * @apiName GetUser\n * @apiGroup User\n *\n * @apiParam {Number} id Users unique ID.\n *\n * @apiSuccess {String} firstname Firstname of the User.\n * @apiSuccess {String} lastname  Lastname of the User.\n */\n```\n\n\n## install\n\n```sh\nnpm install apidoc -g\n```\n\n## Run\n\n```sh\napidoc -i myapp/ -o apidoc/ -t mytemplate/\n```\n\n## Configuration (apidoc.json)\n\nex:\n```json\n{\n  \"name\": \"example\",\n  \"version\": \"0.1.0\",\n  \"description\": \"apiDoc basic example\",\n  \"title\": \"Custom apiDoc browser title\",\n  \"url\" : \"https://api.github.com/v1\"\n}\n```\n\n## Header / Footer\n\n```json\n{\n  \"header\": {\n    \"title\": \"My own header title\",\n    \"filename\": \"header.md\"\n  },\n  \"footer\": {\n    \"title\": \"My own footer title\",\n    \"filename\": \"footer.md\"\n  }\n}\n```\n\n## Basic\n\n`apidoc.json`\n\n```json\n{\n  \"name\": \"example\",\n  \"version\": \"0.1.0\",\n  \"description\": \"A basic apiDoc example\"\n}\n```\n\n`example.js`\n\n```go\n/**\n * @api {get} /user/:id Request User information\n * @apiName GetUser\n * @apiGroup User\n *\n * @apiParam {Number} id Users unique ID.\n *\n * @apiSuccess {String} firstname Firstname of the User.\n * @apiSuccess {String} lastname  Lastname of the User.\n *\n * @apiSuccessExample Success-Response:\n *     HTTP/1.1 200 OK\n *     {\n *       \"firstname\": \"John\",\n *       \"lastname\": \"Doe\"\n *     }\n *\n * @apiError UserNotFound The id of the User was not found.\n *\n * @apiErrorExample Error-Response:\n *     HTTP/1.1 404 Not Found\n *     {\n *       \"error\": \"UserNotFound\"\n *     }\n */\n ```\n\n\n### 继承\n\n```go\n/**\n * @apiDefine UserNotFoundError\n *\n * @apiError UserNotFound The id of the User was not found.\n *\n * @apiErrorExample Error-Response:\n *     HTTP/1.1 404 Not Found\n *     {\n *       \"error\": \"UserNotFound\"\n *     }\n */\n\n/**\n * @api {get} /user/:id Request User information\n * @apiName GetUser\n * @apiGroup User\n *\n * @apiParam {Number} id Users unique ID.\n *\n * @apiSuccess {String} firstname Firstname of the User.\n * @apiSuccess {String} lastname  Lastname of the User.\n *\n * @apiSuccessExample Success-Response:\n *     HTTP/1.1 200 OK\n *     {\n *       \"firstname\": \"John\",\n *       \"lastname\": \"Doe\"\n *     }\n *\n * @apiUse UserNotFoundError\n */\n\n/**\n * @api {put} /user/ Modify User information\n * @apiName PutUser\n * @apiGroup User\n *\n * @apiParam {Number} id          Users unique ID.\n * @apiParam {String} [firstname] Firstname of the User.\n * @apiParam {String} [lastname]  Lastname of the User.\n *\n * @apiSuccessExample Success-Response:\n *     HTTP/1.1 200 OK\n *\n * @apiUse UserNotFoundError\n */\n```\n\n### Versioning\n\n```go\n/**\n * @api {get} /user/:id Get User information\n * @apiVersion 0.1.0\n * @apiName GetUser\n * @apiGroup User\n *\n * @apiParam {Number} id Users unique ID.\n *\n * @apiSuccess {String} firstname Firstname of the User.\n * @apiSuccess {String} lastname  Lastname of the User.\n *\n * @apiSuccessExample Success-Response:\n *     HTTP/1.1 200 OK\n *     {\n *       \"firstname\": \"John\",\n *       \"lastname\": \"Doe\"\n *     }\n *\n * @apiError UserNotFound The id of the User was not found.\n *\n * @apiErrorExample Error-Response:\n *     HTTP/1.1 404 Not Found\n *     {\n *       \"error\": \"UserNotFound\"\n *     }\n */\n```\n\n```go\n/**\n * @api {get} /user/:id Get User information and Date of Registration.\n * @apiVersion 0.2.0\n * @apiName GetUser\n * @apiGroup User\n *\n * @apiParam {Number} id Users unique ID.\n *\n * @apiSuccess {String} firstname  Firstname of the User.\n * @apiSuccess {String} lastname   Lastname of the User.\n * @apiSuccess {Date}   registered Date of Registration.\n *\n * @apiSuccessExample Success-Response:\n *     HTTP/1.1 200 OK\n *     {\n *       \"firstname\": \"John\",\n *       \"lastname\": \"Doe\"\n *     }\n *\n * @apiError UserNotFound The id of the User was not found.\n *\n * @apiErrorExample Error-Response:\n *     HTTP/1.1 404 Not Found\n *     {\n *       \"error\": \"UserNotFound\"\n *     }\n */\n```\n\n该版本可用于每个块，也可用于继承块。您不必更改继承块上的版本，解析器会自动检查最近的前任.\n\n## apiDoc-Params\n\n列几个常用的标签:\n\n### @api\n\n```apidoc\n@api {method} path [title]\n```\n\nRequired!\nWithout that indicator, apiDoc parser ignore the documentation block. (apidoc 工具的标识开始)\n\n## @apiName\n\n```apidoc\n@apiName name\n```\n\n\n## @apiGroup\n\n```apidoc\n@apiGroup name\n```\n\n## @apiDefine\n\n```apidoc\n@apiDefine name [title]\n    [description]\n```\n\n## @apiUse\n\n```apidoc\n@apiUse name\n```\n## @apiDeprecated\n\n```apidoc\n@apiDeprecated [text]\n```\n\nEx:\n```go\n/**\n * @apiDeprecated\n */\n\n/**\n * @apiDeprecated use now (#Group:Name).\n *\n * Example: to set a link to the GetDetails method of your group User\n * write (#User:GetDetails)\n */\n```\n\n## @apiDescription\n\n```apidoc\n@apiDescription text\n```\n\nEx:\n```go\n/**\n * @apiDescription This is the Description.\n * It is multiline capable.\n *\n * Last line of Description.\n */\n```\n\n## @apiParam\n\n```apidoc\n@apiParam [(group)] [{type}] [field=defaultValue] [description]\n```\n\n```go\n/**\n * @api {get} /user/:id\n * @apiParam {Number} id Users unique ID.\n */\n\n/**\n * @api {post} /user/\n * @apiParam {String} [firstname]  Optional Firstname of the User.\n * @apiParam {String} lastname     Mandatory Lastname.\n * @apiParam {String} country=\"DE\" Mandatory with default value \"DE\".\n * @apiParam {Number} [age=18]     Optional Age with default 18.\n *\n * @apiParam (Login) {String} pass Only logged in users can post this.\n *                                 In generated documentation a separate\n *                                 \"Login\" Block will be generated.\n */\n```\n\nName      |   Description\n-----     |  --------\n(group)   |  All parameters will be grouped by this name. <br>Without a group, the default `Parameter` is set.<br>You can set a title and description with @apiDefine.\n{type}    |  Parameter type, e.g. `{Boolean}`, `{Number}`, `{String}`, `{Object}`, `{String[]}` (array of strings), ...\n{type{size}} | Information about the size of the variable.<br>`{string{..5}}` a string that has max 5 chars.<br>`{string{2..5}}` a string that has min. 2 chars and max 5 chars.<br>`{number{100-999}}` a number between 100 and 999.\n{type=allowedValues} | Information about allowed values of the variable.<br>`{string=\"small\"}` a string that can only contain the word \"small\" (a constant).<br>`{string=\"small\",\"huge\"}` a string that can contain the words \"small\" or \"huge\".<br>`{number=1,2,3,99}` a number with allowed values of 1, 2, 3 and 99.<br><br>Can be combined with size:<br>`{string {..5}=\"small\",\"huge\"}` a string that has max 5 chars and only contain the words \"small\" or \"huge\".\nfield   | Variablename\n[field]\t | Fieldname with brackets define the Variable as optional.\n=defaultValue | The parameters default value.\ndescription   | Description of the field.\n\n\n## @apiParamExample\n\n```apidoc\n@apiParamExample [{type}] [title]\n                   example\n```\n\n```go\n/**\n * @api {get} /user/:id\n * @apiParamExample {json} Request-Example:\n *     {\n *       \"id\": 4711\n *     }\n */\n```\n\n## @apiSuccess\n\n```apidoc\n@apiSuccess [(group)] [{type}] field [description]\n```\n\n## @apiSuccessExample\n\n```apidoc\n@apiSuccessExample [{type}] [title]\n                   example\n```\n\n```go\n/**\n * @api {get} /user/:id\n * @apiSuccessExample {json} Success-Response:\n *     HTTP/1.1 200 OK\n *     {\n *       \"firstname\": \"John\",\n *       \"lastname\": \"Doe\"\n *     }\n */\n```\n\n## @apiError \n\n```apidoc\n@apiError [(group)] [{type}] field [description]\n```\n\n```go\n/**\n * @api {get} /user/:id\n * @apiError UserNotFound The <code>id</code> of the User was not found.\n */\n```\n\n## @apiErrorExample\n\n```apidoc\n@apiErrorExample [{type}] [title]\n                 example\n```\n\n\n```go\n/**\n * @api {get} /user/:id\n * @apiErrorExample {json} Error-Response:\n *     HTTP/1.1 404 Not Found\n *     {\n *       \"error\": \"UserNotFound\"\n *     }\n */\n```\n","source":"_posts/backend/tools/apidoc_start_learn.md","raw":"---\ntitle: apidoc start learn\ndate: 2018-08-31 16:02:53\ncategories:\n- backend\ntags:\n- apidoc\n- learn\n---\n\n参考: [http://apidocjs.com/](http://apidocjs.com/)\n\n## Demo\n\n`Javadoc-Style` (can be used in C#, Go, Dart, Java, JavaScript, PHP, TypeScript and all other Javadoc capable languages):\n\n```go\n/**\n * @api {get} /user/:id Request User information\n * @apiName GetUser\n * @apiGroup User\n *\n * @apiParam {Number} id Users unique ID.\n *\n * @apiSuccess {String} firstname Firstname of the User.\n * @apiSuccess {String} lastname  Lastname of the User.\n */\n```\n\n\n## install\n\n```sh\nnpm install apidoc -g\n```\n\n## Run\n\n```sh\napidoc -i myapp/ -o apidoc/ -t mytemplate/\n```\n\n## Configuration (apidoc.json)\n\nex:\n```json\n{\n  \"name\": \"example\",\n  \"version\": \"0.1.0\",\n  \"description\": \"apiDoc basic example\",\n  \"title\": \"Custom apiDoc browser title\",\n  \"url\" : \"https://api.github.com/v1\"\n}\n```\n\n## Header / Footer\n\n```json\n{\n  \"header\": {\n    \"title\": \"My own header title\",\n    \"filename\": \"header.md\"\n  },\n  \"footer\": {\n    \"title\": \"My own footer title\",\n    \"filename\": \"footer.md\"\n  }\n}\n```\n\n## Basic\n\n`apidoc.json`\n\n```json\n{\n  \"name\": \"example\",\n  \"version\": \"0.1.0\",\n  \"description\": \"A basic apiDoc example\"\n}\n```\n\n`example.js`\n\n```go\n/**\n * @api {get} /user/:id Request User information\n * @apiName GetUser\n * @apiGroup User\n *\n * @apiParam {Number} id Users unique ID.\n *\n * @apiSuccess {String} firstname Firstname of the User.\n * @apiSuccess {String} lastname  Lastname of the User.\n *\n * @apiSuccessExample Success-Response:\n *     HTTP/1.1 200 OK\n *     {\n *       \"firstname\": \"John\",\n *       \"lastname\": \"Doe\"\n *     }\n *\n * @apiError UserNotFound The id of the User was not found.\n *\n * @apiErrorExample Error-Response:\n *     HTTP/1.1 404 Not Found\n *     {\n *       \"error\": \"UserNotFound\"\n *     }\n */\n ```\n\n\n### 继承\n\n```go\n/**\n * @apiDefine UserNotFoundError\n *\n * @apiError UserNotFound The id of the User was not found.\n *\n * @apiErrorExample Error-Response:\n *     HTTP/1.1 404 Not Found\n *     {\n *       \"error\": \"UserNotFound\"\n *     }\n */\n\n/**\n * @api {get} /user/:id Request User information\n * @apiName GetUser\n * @apiGroup User\n *\n * @apiParam {Number} id Users unique ID.\n *\n * @apiSuccess {String} firstname Firstname of the User.\n * @apiSuccess {String} lastname  Lastname of the User.\n *\n * @apiSuccessExample Success-Response:\n *     HTTP/1.1 200 OK\n *     {\n *       \"firstname\": \"John\",\n *       \"lastname\": \"Doe\"\n *     }\n *\n * @apiUse UserNotFoundError\n */\n\n/**\n * @api {put} /user/ Modify User information\n * @apiName PutUser\n * @apiGroup User\n *\n * @apiParam {Number} id          Users unique ID.\n * @apiParam {String} [firstname] Firstname of the User.\n * @apiParam {String} [lastname]  Lastname of the User.\n *\n * @apiSuccessExample Success-Response:\n *     HTTP/1.1 200 OK\n *\n * @apiUse UserNotFoundError\n */\n```\n\n### Versioning\n\n```go\n/**\n * @api {get} /user/:id Get User information\n * @apiVersion 0.1.0\n * @apiName GetUser\n * @apiGroup User\n *\n * @apiParam {Number} id Users unique ID.\n *\n * @apiSuccess {String} firstname Firstname of the User.\n * @apiSuccess {String} lastname  Lastname of the User.\n *\n * @apiSuccessExample Success-Response:\n *     HTTP/1.1 200 OK\n *     {\n *       \"firstname\": \"John\",\n *       \"lastname\": \"Doe\"\n *     }\n *\n * @apiError UserNotFound The id of the User was not found.\n *\n * @apiErrorExample Error-Response:\n *     HTTP/1.1 404 Not Found\n *     {\n *       \"error\": \"UserNotFound\"\n *     }\n */\n```\n\n```go\n/**\n * @api {get} /user/:id Get User information and Date of Registration.\n * @apiVersion 0.2.0\n * @apiName GetUser\n * @apiGroup User\n *\n * @apiParam {Number} id Users unique ID.\n *\n * @apiSuccess {String} firstname  Firstname of the User.\n * @apiSuccess {String} lastname   Lastname of the User.\n * @apiSuccess {Date}   registered Date of Registration.\n *\n * @apiSuccessExample Success-Response:\n *     HTTP/1.1 200 OK\n *     {\n *       \"firstname\": \"John\",\n *       \"lastname\": \"Doe\"\n *     }\n *\n * @apiError UserNotFound The id of the User was not found.\n *\n * @apiErrorExample Error-Response:\n *     HTTP/1.1 404 Not Found\n *     {\n *       \"error\": \"UserNotFound\"\n *     }\n */\n```\n\n该版本可用于每个块，也可用于继承块。您不必更改继承块上的版本，解析器会自动检查最近的前任.\n\n## apiDoc-Params\n\n列几个常用的标签:\n\n### @api\n\n```apidoc\n@api {method} path [title]\n```\n\nRequired!\nWithout that indicator, apiDoc parser ignore the documentation block. (apidoc 工具的标识开始)\n\n## @apiName\n\n```apidoc\n@apiName name\n```\n\n\n## @apiGroup\n\n```apidoc\n@apiGroup name\n```\n\n## @apiDefine\n\n```apidoc\n@apiDefine name [title]\n    [description]\n```\n\n## @apiUse\n\n```apidoc\n@apiUse name\n```\n## @apiDeprecated\n\n```apidoc\n@apiDeprecated [text]\n```\n\nEx:\n```go\n/**\n * @apiDeprecated\n */\n\n/**\n * @apiDeprecated use now (#Group:Name).\n *\n * Example: to set a link to the GetDetails method of your group User\n * write (#User:GetDetails)\n */\n```\n\n## @apiDescription\n\n```apidoc\n@apiDescription text\n```\n\nEx:\n```go\n/**\n * @apiDescription This is the Description.\n * It is multiline capable.\n *\n * Last line of Description.\n */\n```\n\n## @apiParam\n\n```apidoc\n@apiParam [(group)] [{type}] [field=defaultValue] [description]\n```\n\n```go\n/**\n * @api {get} /user/:id\n * @apiParam {Number} id Users unique ID.\n */\n\n/**\n * @api {post} /user/\n * @apiParam {String} [firstname]  Optional Firstname of the User.\n * @apiParam {String} lastname     Mandatory Lastname.\n * @apiParam {String} country=\"DE\" Mandatory with default value \"DE\".\n * @apiParam {Number} [age=18]     Optional Age with default 18.\n *\n * @apiParam (Login) {String} pass Only logged in users can post this.\n *                                 In generated documentation a separate\n *                                 \"Login\" Block will be generated.\n */\n```\n\nName      |   Description\n-----     |  --------\n(group)   |  All parameters will be grouped by this name. <br>Without a group, the default `Parameter` is set.<br>You can set a title and description with @apiDefine.\n{type}    |  Parameter type, e.g. `{Boolean}`, `{Number}`, `{String}`, `{Object}`, `{String[]}` (array of strings), ...\n{type{size}} | Information about the size of the variable.<br>`{string{..5}}` a string that has max 5 chars.<br>`{string{2..5}}` a string that has min. 2 chars and max 5 chars.<br>`{number{100-999}}` a number between 100 and 999.\n{type=allowedValues} | Information about allowed values of the variable.<br>`{string=\"small\"}` a string that can only contain the word \"small\" (a constant).<br>`{string=\"small\",\"huge\"}` a string that can contain the words \"small\" or \"huge\".<br>`{number=1,2,3,99}` a number with allowed values of 1, 2, 3 and 99.<br><br>Can be combined with size:<br>`{string {..5}=\"small\",\"huge\"}` a string that has max 5 chars and only contain the words \"small\" or \"huge\".\nfield   | Variablename\n[field]\t | Fieldname with brackets define the Variable as optional.\n=defaultValue | The parameters default value.\ndescription   | Description of the field.\n\n\n## @apiParamExample\n\n```apidoc\n@apiParamExample [{type}] [title]\n                   example\n```\n\n```go\n/**\n * @api {get} /user/:id\n * @apiParamExample {json} Request-Example:\n *     {\n *       \"id\": 4711\n *     }\n */\n```\n\n## @apiSuccess\n\n```apidoc\n@apiSuccess [(group)] [{type}] field [description]\n```\n\n## @apiSuccessExample\n\n```apidoc\n@apiSuccessExample [{type}] [title]\n                   example\n```\n\n```go\n/**\n * @api {get} /user/:id\n * @apiSuccessExample {json} Success-Response:\n *     HTTP/1.1 200 OK\n *     {\n *       \"firstname\": \"John\",\n *       \"lastname\": \"Doe\"\n *     }\n */\n```\n\n## @apiError \n\n```apidoc\n@apiError [(group)] [{type}] field [description]\n```\n\n```go\n/**\n * @api {get} /user/:id\n * @apiError UserNotFound The <code>id</code> of the User was not found.\n */\n```\n\n## @apiErrorExample\n\n```apidoc\n@apiErrorExample [{type}] [title]\n                 example\n```\n\n\n```go\n/**\n * @api {get} /user/:id\n * @apiErrorExample {json} Error-Response:\n *     HTTP/1.1 404 Not Found\n *     {\n *       \"error\": \"UserNotFound\"\n *     }\n */\n```\n","slug":"backend/tools/apidoc_start_learn","published":1,"updated":"2018-09-01T07:37:58.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgvl002d8seorvzuws9w","content":"<p>参考: <a href=\"http://apidocjs.com/\" target=\"_blank\" rel=\"noopener\">http://apidocjs.com/</a></p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><code>Javadoc-Style</code> (can be used in C#, Go, Dart, Java, JavaScript, PHP, TypeScript and all other Javadoc capable languages):</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id Request User information</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiName GetUser</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup User</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; id Users unique ID.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; firstname Firstname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; lastname  Lastname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install apidoc -g</span><br></pre></td></tr></table></figure>\n<h2 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run\"></a>Run</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apidoc -i myapp/ -o apidoc/ -t mytemplate/</span><br></pre></td></tr></table></figure>\n<h2 id=\"Configuration-apidoc-json\"><a href=\"#Configuration-apidoc-json\" class=\"headerlink\" title=\"Configuration (apidoc.json)\"></a>Configuration (apidoc.json)</h2><p>ex:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"example\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"apiDoc basic example\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Custom apiDoc browser title\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"url\"</span> : <span class=\"string\">\"https://api.github.com/v1\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Header-Footer\"><a href=\"#Header-Footer\" class=\"headerlink\" title=\"Header / Footer\"></a>Header / Footer</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"header\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"My own header title\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"filename\"</span>: <span class=\"string\">\"header.md\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"footer\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"My own footer title\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"filename\"</span>: <span class=\"string\">\"footer.md\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><p><code>apidoc.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"example\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"A basic apiDoc example\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>example.js</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id Request User information</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiName GetUser</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup User</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; id Users unique ID.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; firstname Firstname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; lastname  Lastname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccessExample Success-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"firstname\": \"John\",</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"lastname\": \"Doe\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiError UserNotFound The id of the User was not found.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiErrorExample Error-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 404 Not Found</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"error\": \"UserNotFound\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiDefine UserNotFoundError</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiError UserNotFound The id of the User was not found.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiErrorExample Error-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 404 Not Found</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"error\": \"UserNotFound\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id Request User information</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiName GetUser</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup User</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; id Users unique ID.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; firstname Firstname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; lastname  Lastname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccessExample Success-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"firstname\": \"John\",</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"lastname\": \"Doe\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiUse UserNotFoundError</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;put&#125; /user/ Modify User information</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiName PutUser</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup User</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; id          Users unique ID.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;String&#125; [firstname] Firstname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;String&#125; [lastname]  Lastname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccessExample Success-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiUse UserNotFoundError</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Versioning\"><a href=\"#Versioning\" class=\"headerlink\" title=\"Versioning\"></a>Versioning</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id Get User information</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiVersion 0.1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiName GetUser</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup User</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; id Users unique ID.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; firstname Firstname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; lastname  Lastname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccessExample Success-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"firstname\": \"John\",</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"lastname\": \"Doe\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiError UserNotFound The id of the User was not found.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiErrorExample Error-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 404 Not Found</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"error\": \"UserNotFound\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id Get User information and Date of Registration.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiVersion 0.2.0</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiName GetUser</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup User</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; id Users unique ID.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; firstname  Firstname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; lastname   Lastname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;Date&#125;   registered Date of Registration.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccessExample Success-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"firstname\": \"John\",</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"lastname\": \"Doe\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiError UserNotFound The id of the User was not found.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiErrorExample Error-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 404 Not Found</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"error\": \"UserNotFound\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>该版本可用于每个块，也可用于继承块。您不必更改继承块上的版本，解析器会自动检查最近的前任.</p>\n<h2 id=\"apiDoc-Params\"><a href=\"#apiDoc-Params\" class=\"headerlink\" title=\"apiDoc-Params\"></a>apiDoc-Params</h2><p>列几个常用的标签:</p>\n<h3 id=\"api\"><a href=\"#api\" class=\"headerlink\" title=\"@api\"></a>@api</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@api &#123;method&#125; path [title]</span><br></pre></td></tr></table></figure>\n<p>Required!<br>Without that indicator, apiDoc parser ignore the documentation block. (apidoc 工具的标识开始)</p>\n<h2 id=\"apiName\"><a href=\"#apiName\" class=\"headerlink\" title=\"@apiName\"></a>@apiName</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiName name</span><br></pre></td></tr></table></figure>\n<h2 id=\"apiGroup\"><a href=\"#apiGroup\" class=\"headerlink\" title=\"@apiGroup\"></a>@apiGroup</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiGroup name</span><br></pre></td></tr></table></figure>\n<h2 id=\"apiDefine\"><a href=\"#apiDefine\" class=\"headerlink\" title=\"@apiDefine\"></a>@apiDefine</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiDefine name [title]</span><br><span class=\"line\">    [description]</span><br></pre></td></tr></table></figure>\n<h2 id=\"apiUse\"><a href=\"#apiUse\" class=\"headerlink\" title=\"@apiUse\"></a>@apiUse</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiUse name</span><br></pre></td></tr></table></figure>\n<h2 id=\"apiDeprecated\"><a href=\"#apiDeprecated\" class=\"headerlink\" title=\"@apiDeprecated\"></a>@apiDeprecated</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiDeprecated [text]</span><br></pre></td></tr></table></figure>\n<p>Ex:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiDeprecated</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiDeprecated use now (#Group:Name).</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Example: to set a link to the GetDetails method of your group User</span></span><br><span class=\"line\"><span class=\"comment\"> * write (#User:GetDetails)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"apiDescription\"><a href=\"#apiDescription\" class=\"headerlink\" title=\"@apiDescription\"></a>@apiDescription</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiDescription text</span><br></pre></td></tr></table></figure>\n<p>Ex:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiDescription This is the Description.</span></span><br><span class=\"line\"><span class=\"comment\"> * It is multiline capable.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Last line of Description.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"apiParam\"><a href=\"#apiParam\" class=\"headerlink\" title=\"@apiParam\"></a>@apiParam</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiParam [(group)] [&#123;type&#125;] [field=defaultValue] [description]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; id Users unique ID.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;post&#125; /user/</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;String&#125; [firstname]  Optional Firstname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;String&#125; lastname     Mandatory Lastname.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;String&#125; country=\"DE\" Mandatory with default value \"DE\".</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; [age=18]     Optional Age with default 18.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam (Login) &#123;String&#125; pass Only logged in users can post this.</span></span><br><span class=\"line\"><span class=\"comment\"> *                                 In generated documentation a separate</span></span><br><span class=\"line\"><span class=\"comment\"> *                                 \"Login\" Block will be generated.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(group)</td>\n<td>All parameters will be grouped by this name. <br>Without a group, the default <code>Parameter</code> is set.<br>You can set a title and description with @apiDefine.</td>\n</tr>\n<tr>\n<td>{type}</td>\n<td>Parameter type, e.g. <code>{Boolean}</code>, <code>{Number}</code>, <code>{String}</code>, <code>{Object}</code>, <code>{String[]}</code> (array of strings), …</td>\n</tr>\n<tr>\n<td>{type{size}}</td>\n<td>Information about the size of the variable.<br><code>{string{..5}}</code> a string that has max 5 chars.<br><code>{string{2..5}}</code> a string that has min. 2 chars and max 5 chars.<br><code>{number{100-999}}</code> a number between 100 and 999.</td>\n</tr>\n<tr>\n<td>{type=allowedValues}</td>\n<td>Information about allowed values of the variable.<br><code>{string=&quot;small&quot;}</code> a string that can only contain the word “small” (a constant).<br><code>{string=&quot;small&quot;,&quot;huge&quot;}</code> a string that can contain the words “small” or “huge”.<br><code>{number=1,2,3,99}</code> a number with allowed values of 1, 2, 3 and 99.<br><br>Can be combined with size:<br><code>{string {..5}=&quot;small&quot;,&quot;huge&quot;}</code> a string that has max 5 chars and only contain the words “small” or “huge”.</td>\n</tr>\n<tr>\n<td>field</td>\n<td>Variablename</td>\n</tr>\n<tr>\n<td>[field]</td>\n<td>Fieldname with brackets define the Variable as optional.</td>\n</tr>\n<tr>\n<td>=defaultValue</td>\n<td>The parameters default value.</td>\n</tr>\n<tr>\n<td>description</td>\n<td>Description of the field.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"apiParamExample\"><a href=\"#apiParamExample\" class=\"headerlink\" title=\"@apiParamExample\"></a>@apiParamExample</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiParamExample [&#123;type&#125;] [title]</span><br><span class=\"line\">                   example</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParamExample &#123;json&#125; Request-Example:</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"id\": 4711</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"apiSuccess\"><a href=\"#apiSuccess\" class=\"headerlink\" title=\"@apiSuccess\"></a>@apiSuccess</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiSuccess [(group)] [&#123;type&#125;] field [description]</span><br></pre></td></tr></table></figure>\n<h2 id=\"apiSuccessExample\"><a href=\"#apiSuccessExample\" class=\"headerlink\" title=\"@apiSuccessExample\"></a>@apiSuccessExample</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiSuccessExample [&#123;type&#125;] [title]</span><br><span class=\"line\">                   example</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccessExample &#123;json&#125; Success-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"firstname\": \"John\",</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"lastname\": \"Doe\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"apiError\"><a href=\"#apiError\" class=\"headerlink\" title=\"@apiError\"></a>@apiError</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiError [(group)] [&#123;type&#125;] field [description]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiError UserNotFound The &lt;code&gt;id&lt;/code&gt; of the User was not found.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"apiErrorExample\"><a href=\"#apiErrorExample\" class=\"headerlink\" title=\"@apiErrorExample\"></a>@apiErrorExample</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiErrorExample [&#123;type&#125;] [title]</span><br><span class=\"line\">                 example</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiErrorExample &#123;json&#125; Error-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 404 Not Found</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"error\": \"UserNotFound\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>参考: <a href=\"http://apidocjs.com/\" target=\"_blank\" rel=\"noopener\">http://apidocjs.com/</a></p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><code>Javadoc-Style</code> (can be used in C#, Go, Dart, Java, JavaScript, PHP, TypeScript and all other Javadoc capable languages):</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id Request User information</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiName GetUser</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup User</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; id Users unique ID.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; firstname Firstname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; lastname  Lastname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install apidoc -g</span><br></pre></td></tr></table></figure>\n<h2 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run\"></a>Run</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apidoc -i myapp/ -o apidoc/ -t mytemplate/</span><br></pre></td></tr></table></figure>\n<h2 id=\"Configuration-apidoc-json\"><a href=\"#Configuration-apidoc-json\" class=\"headerlink\" title=\"Configuration (apidoc.json)\"></a>Configuration (apidoc.json)</h2><p>ex:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"example\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"apiDoc basic example\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Custom apiDoc browser title\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"url\"</span> : <span class=\"string\">\"https://api.github.com/v1\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Header-Footer\"><a href=\"#Header-Footer\" class=\"headerlink\" title=\"Header / Footer\"></a>Header / Footer</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"header\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"My own header title\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"filename\"</span>: <span class=\"string\">\"header.md\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"footer\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"My own footer title\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"filename\"</span>: <span class=\"string\">\"footer.md\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><p><code>apidoc.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"example\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"A basic apiDoc example\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>example.js</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id Request User information</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiName GetUser</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup User</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; id Users unique ID.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; firstname Firstname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; lastname  Lastname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccessExample Success-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"firstname\": \"John\",</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"lastname\": \"Doe\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiError UserNotFound The id of the User was not found.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiErrorExample Error-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 404 Not Found</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"error\": \"UserNotFound\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiDefine UserNotFoundError</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiError UserNotFound The id of the User was not found.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiErrorExample Error-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 404 Not Found</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"error\": \"UserNotFound\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id Request User information</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiName GetUser</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup User</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; id Users unique ID.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; firstname Firstname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; lastname  Lastname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccessExample Success-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"firstname\": \"John\",</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"lastname\": \"Doe\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiUse UserNotFoundError</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;put&#125; /user/ Modify User information</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiName PutUser</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup User</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; id          Users unique ID.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;String&#125; [firstname] Firstname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;String&#125; [lastname]  Lastname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccessExample Success-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiUse UserNotFoundError</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Versioning\"><a href=\"#Versioning\" class=\"headerlink\" title=\"Versioning\"></a>Versioning</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id Get User information</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiVersion 0.1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiName GetUser</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup User</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; id Users unique ID.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; firstname Firstname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; lastname  Lastname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccessExample Success-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"firstname\": \"John\",</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"lastname\": \"Doe\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiError UserNotFound The id of the User was not found.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiErrorExample Error-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 404 Not Found</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"error\": \"UserNotFound\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id Get User information and Date of Registration.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiVersion 0.2.0</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiName GetUser</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup User</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; id Users unique ID.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; firstname  Firstname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;String&#125; lastname   Lastname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &#123;Date&#125;   registered Date of Registration.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccessExample Success-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"firstname\": \"John\",</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"lastname\": \"Doe\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiError UserNotFound The id of the User was not found.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiErrorExample Error-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 404 Not Found</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"error\": \"UserNotFound\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>该版本可用于每个块，也可用于继承块。您不必更改继承块上的版本，解析器会自动检查最近的前任.</p>\n<h2 id=\"apiDoc-Params\"><a href=\"#apiDoc-Params\" class=\"headerlink\" title=\"apiDoc-Params\"></a>apiDoc-Params</h2><p>列几个常用的标签:</p>\n<h3 id=\"api\"><a href=\"#api\" class=\"headerlink\" title=\"@api\"></a>@api</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@api &#123;method&#125; path [title]</span><br></pre></td></tr></table></figure>\n<p>Required!<br>Without that indicator, apiDoc parser ignore the documentation block. (apidoc 工具的标识开始)</p>\n<h2 id=\"apiName\"><a href=\"#apiName\" class=\"headerlink\" title=\"@apiName\"></a>@apiName</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiName name</span><br></pre></td></tr></table></figure>\n<h2 id=\"apiGroup\"><a href=\"#apiGroup\" class=\"headerlink\" title=\"@apiGroup\"></a>@apiGroup</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiGroup name</span><br></pre></td></tr></table></figure>\n<h2 id=\"apiDefine\"><a href=\"#apiDefine\" class=\"headerlink\" title=\"@apiDefine\"></a>@apiDefine</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiDefine name [title]</span><br><span class=\"line\">    [description]</span><br></pre></td></tr></table></figure>\n<h2 id=\"apiUse\"><a href=\"#apiUse\" class=\"headerlink\" title=\"@apiUse\"></a>@apiUse</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiUse name</span><br></pre></td></tr></table></figure>\n<h2 id=\"apiDeprecated\"><a href=\"#apiDeprecated\" class=\"headerlink\" title=\"@apiDeprecated\"></a>@apiDeprecated</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiDeprecated [text]</span><br></pre></td></tr></table></figure>\n<p>Ex:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiDeprecated</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiDeprecated use now (#Group:Name).</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Example: to set a link to the GetDetails method of your group User</span></span><br><span class=\"line\"><span class=\"comment\"> * write (#User:GetDetails)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"apiDescription\"><a href=\"#apiDescription\" class=\"headerlink\" title=\"@apiDescription\"></a>@apiDescription</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiDescription text</span><br></pre></td></tr></table></figure>\n<p>Ex:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiDescription This is the Description.</span></span><br><span class=\"line\"><span class=\"comment\"> * It is multiline capable.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Last line of Description.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"apiParam\"><a href=\"#apiParam\" class=\"headerlink\" title=\"@apiParam\"></a>@apiParam</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiParam [(group)] [&#123;type&#125;] [field=defaultValue] [description]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; id Users unique ID.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;post&#125; /user/</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;String&#125; [firstname]  Optional Firstname of the User.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;String&#125; lastname     Mandatory Lastname.</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;String&#125; country=\"DE\" Mandatory with default value \"DE\".</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &#123;Number&#125; [age=18]     Optional Age with default 18.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam (Login) &#123;String&#125; pass Only logged in users can post this.</span></span><br><span class=\"line\"><span class=\"comment\"> *                                 In generated documentation a separate</span></span><br><span class=\"line\"><span class=\"comment\"> *                                 \"Login\" Block will be generated.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(group)</td>\n<td>All parameters will be grouped by this name. <br>Without a group, the default <code>Parameter</code> is set.<br>You can set a title and description with @apiDefine.</td>\n</tr>\n<tr>\n<td>{type}</td>\n<td>Parameter type, e.g. <code>{Boolean}</code>, <code>{Number}</code>, <code>{String}</code>, <code>{Object}</code>, <code>{String[]}</code> (array of strings), …</td>\n</tr>\n<tr>\n<td>{type{size}}</td>\n<td>Information about the size of the variable.<br><code>{string{..5}}</code> a string that has max 5 chars.<br><code>{string{2..5}}</code> a string that has min. 2 chars and max 5 chars.<br><code>{number{100-999}}</code> a number between 100 and 999.</td>\n</tr>\n<tr>\n<td>{type=allowedValues}</td>\n<td>Information about allowed values of the variable.<br><code>{string=&quot;small&quot;}</code> a string that can only contain the word “small” (a constant).<br><code>{string=&quot;small&quot;,&quot;huge&quot;}</code> a string that can contain the words “small” or “huge”.<br><code>{number=1,2,3,99}</code> a number with allowed values of 1, 2, 3 and 99.<br><br>Can be combined with size:<br><code>{string {..5}=&quot;small&quot;,&quot;huge&quot;}</code> a string that has max 5 chars and only contain the words “small” or “huge”.</td>\n</tr>\n<tr>\n<td>field</td>\n<td>Variablename</td>\n</tr>\n<tr>\n<td>[field]</td>\n<td>Fieldname with brackets define the Variable as optional.</td>\n</tr>\n<tr>\n<td>=defaultValue</td>\n<td>The parameters default value.</td>\n</tr>\n<tr>\n<td>description</td>\n<td>Description of the field.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"apiParamExample\"><a href=\"#apiParamExample\" class=\"headerlink\" title=\"@apiParamExample\"></a>@apiParamExample</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiParamExample [&#123;type&#125;] [title]</span><br><span class=\"line\">                   example</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParamExample &#123;json&#125; Request-Example:</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"id\": 4711</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"apiSuccess\"><a href=\"#apiSuccess\" class=\"headerlink\" title=\"@apiSuccess\"></a>@apiSuccess</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiSuccess [(group)] [&#123;type&#125;] field [description]</span><br></pre></td></tr></table></figure>\n<h2 id=\"apiSuccessExample\"><a href=\"#apiSuccessExample\" class=\"headerlink\" title=\"@apiSuccessExample\"></a>@apiSuccessExample</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiSuccessExample [&#123;type&#125;] [title]</span><br><span class=\"line\">                   example</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccessExample &#123;json&#125; Success-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"firstname\": \"John\",</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"lastname\": \"Doe\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"apiError\"><a href=\"#apiError\" class=\"headerlink\" title=\"@apiError\"></a>@apiError</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiError [(group)] [&#123;type&#125;] field [description]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiError UserNotFound The &lt;code&gt;id&lt;/code&gt; of the User was not found.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"apiErrorExample\"><a href=\"#apiErrorExample\" class=\"headerlink\" title=\"@apiErrorExample\"></a>@apiErrorExample</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@apiErrorExample [&#123;type&#125;] [title]</span><br><span class=\"line\">                 example</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &#123;get&#125; /user/:id</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiErrorExample &#123;json&#125; Error-Response:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HTTP/1.1 404 Not Found</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       \"error\": \"UserNotFound\"</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Zombie T3","date":"2018-08-29T13:14:48.227Z","_content":"\n\n涉及内容：`智能协议的所有权`，`Gas的花费`，`代码优化`，和`代码安全`\n\n## ch1. 智能协议的永固性\n\n在你把智能协议传上以太坊之后，它就变得`不可更改`, 这种永固性意味着你的代码永远不能被调整或更新。\n\n**尽量不要写死代码**\n\n## ch2. Ownable Contracts\n\nOpenZeppelin库的Ownable 合约：OpenZeppelin 是主打安保和社区审查的智能合约库，您可以在自己的 DApps中引用。\n\n```solidity\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n```\n\n- 构造函数: `function Ownable()` 是一个 constructor (构造函数)，构造函数不是必须的，它与合约同名，构造函数一生中唯一的一次执行，就是在合约最初被创建的时候。\n\n- 函数修饰符：`modifier onlyOwner()` 修饰符跟函数很类似，不过是用来修饰其他已有函数用的， 在其他语句执行前，为它检查下先验条件。`_;` 类似于 ruby 中的 `yield`\n\n所以`Ownable`合约基本都会这么干：\n1. 合约创建，构造函数先行，将其 owner 设置为msg.sender（其部署者）\n2. 为它加上一个修饰符 onlyOwner，它会限制陌生人的访问，将访问某些函数的权限锁定在 owner 上。\n3. 允许将合约所有权转让给他人。\n\n\n## ch4. Gas\n\n**重要概念：** `Gas - 驱动以太坊DApps的能源`\n\n在 Solidity 中，你的用户想要每次执行你的 DApp 都需要支付一定的 gas，gas 可以用以太币购买，因此，用户每次跑 DApp 都得花费以太币。\n\n一个 DApp 收取多少 gas 取决于功能逻辑的复杂程度。每个操作背后，都在计算完成这个操作所需要的计算资源，（比如，存储数据就比做个加法运算贵得多）， 一次操作所需要花费的 gas 等于这个操作背后的所有运算花销的总和。\n\n由于运行你的程序需要花费用户的真金白银，在以太坊中代码的编程语言，比其他任何编程语言都更强调优化。同样的功能，使用笨拙的代码开发的程序，比起经过精巧优化的代码来，运行花费更高，这显然会给成千上万的用户带来大量不必要的开销。\n\n### 为什么要用 gas 来驱动？\n\n以太坊就像一个巨大、缓慢、但非常安全的电脑。当你运行一个程序的时候，网络上的每一个节点都在进行相同的运算，以验证它的输出 —— 这就是所谓的”去中心化“ 由于数以千计的节点同时在验证着每个功能的运行，这可以确保它的数据不会被被监控，或者被刻意修改。\n\n可能会有用户用无限循环堵塞网络，抑或用密集运算来占用大量的网络资源，为了防止这种事情的发生，以太坊的创建者为以太坊上的资源制定了价格，想要在以太坊上运算或者存储，你需要先付费。\n\n\n### 省 gas 的招数：结构封装 （Struct packing）\n\n在第1课中，我们提到除了基本版的 uint 外，还有其他变种 uint：uint8，uint16，uint32等。\n\n通常情况下我们不会考虑使用 unit 变种，因为无论如何定义 uint的大小，Solidity 为它保留256位的存储空间。例如，使用 uint8 而不是uint（uint256）不会为你节省任何 gas。\n\n除非，把 unit 绑定到 struct 里面。\n\n如果一个 struct 中有多个 uint，则尽可能使用较小的 uint, Solidity 会将这些 uint 打包在一起，从而占用较少的存储空间。例如：\n\n```solidity\nstruct NormalStruct {\n  uint a;\n  uint b;\n  uint c;\n}\n\nstruct MiniMe {\n  uint32 a;\n  uint32 b;\n  uint c;\n}\n```\n// 因为使用了结构打包，`mini` 比 `normal` 占用的空间更少\nNormalStruct normal = NormalStruct(10, 20, 30);\nMiniMe mini = MiniMe(10, 20, 30);\n所以，当 uint 定义在一个 struct 中的时候，尽量使用最小的整数子类型以节约空间。 并且把同样类型的变量放一起（即在 struct 中将把变量按照类型依次放置），这样 Solidity 可以将存储空间最小化。例如，有两个 struct：\n\nuint c; uint32 a; uint32 b; 和 uint32 a; uint c; uint32 b;\n\n前者比后者需要的gas更少，因为前者把uint32放一起了。\n\n## ch5. 时间单位\n\nSolidity 使用自己的本地时间单位。\n\n变量 `now` 将返回当前的unix时间戳（自1970年1月1日以来经过的秒数）。\n\nSolidity 还包含秒(seconds)，分钟(minutes)，小时(hours)，天(days)，周(weeks) 和 年(years) 等时间单位。它们都会转换成对应的秒数放入 uint 中。所以 1分钟 就是 60，1小时是 3600（60秒×60分钟），1天是86400（24小时×60分钟×60秒），以此类推。\n\n示例：\n```solidity\nuint lastUpdated;\n\n// 将‘上次更新时间’ 设置为 ‘现在’\nfunction updateTimestamp() public {\n  lastUpdated = now;\n}\n\n// 如果到上次`updateTimestamp` 超过5分钟，返回 'true'\n// 不到5分钟返回 'false'\nfunction fiveMinutesHavePassed() public view returns (bool) {\n  return (now >= (lastUpdated + 5 minutes));\n```\n\n## ch6. 结构体作为参数传入\n由于结构体的存储指针可以以参数的方式传递给一个 private 或 internal 的函数，因此结构体可以在多个函数之间相互传递。\n\n遵循这样的语法：\n\n```solidity\nfunction _doStuff(Zombie storage _zombie) internal {\n  // do stuff with _zombie\n}\n```\n\n## ch7. 公有函数和安全性\n\n你必须仔细地检查所有声明为 public 和 external的函数，一个个排除用户滥用它们的可能，谨防安全漏洞。请记住，如果这些函数没有类似 onlyOwner 这样的函数修饰符，用户能利用各种可能的参数去调用它们。\n\n## ch8. 进一步了解函数修饰符\n\n### 带参数的函数修饰符\n之前我们已经读过一个简单的函数修饰符了：onlyOwner。函数修饰符也可以带参数。例如：\n\n```solidity\n// 存储用户年龄的映射\nmapping (uint => uint) public age;\n\n// 限定用户年龄的修饰符\nmodifier olderThan(uint _age, uint _userId) {\n  require(age[_userId] >= _age);\n  _;\n}\n\n// 必须年满16周岁才允许开车 (至少在美国是这样的).\n// 我们可以用如下参数调用`olderThan` 修饰符:\nfunction driveCar(uint _userId) public olderThan(16, _userId) {\n  // 其余的程序逻辑\n}\n```\n\n看到了吧， olderThan 修饰符可以像函数一样接收参数，是“宿主”函数 driveCar 把参数传递给它的修饰符的。\n\n## ch10. 利用 'View' 函数节省 Gas\n\n### “view” 函数不花 “gas”\n\n当玩家从外部调用一个view函数，是不需要支付一分 gas 的。\n\n这是因为 view 函数不会真正改变区块链上的任何数据 - `它们只是读取`。因此用 view 标记一个函数，意味着告诉 web3.js，`运行这个函数只需要查询你的本地以太坊节点`，而不需要在区块链上创建一个事务（事务需要运行在每个节点上，因此花费 gas）。\n\n稍后我们将介绍如何在自己的节点上设置 web3.js。但现在，你关键是要记住，在所能只读的函数上标记上表示“只读”的“external view 声明，就能为你的玩家减少在 DApp 中 gas 用量。\n\n注意：如果一个 view 函数在另一个函数的内部被调用，而调用函数与 view 函数的不属于同一个合约，也会产生调用成本。这是因为如果主调函数在以太坊创建了一个事务，它仍然需要逐个节点去验证。所以标记为 view 的函数只有在外部调用时才是免费的。\n\n## ch11. 存储非常昂贵\n\nSolidity 使用storage(存储)是相当昂贵的，”写入“操作尤其贵。\n\n这是因为，无论是写入还是更改一段数据， 这都将永久性地写入区块链。”永久性“啊！需要在全球数千个节点的硬盘上存入这些数据，随着区块链的增长，拷贝份数更多，存储量也就越大。这是需要成本的！\n\n为了降低成本，不到万不得已，避免将数据写入存储。这也会导致效率低下的编程逻辑 - 比如每次调用一个函数，都需要在 memory(内存) 中重建一个数组，而不是简单地将上次计算的数组给存储下来以便快速查找。\n\n在大多数编程语言中，遍历大数据集合都是昂贵的。但是在 Solidity 中，使用一个标记了external view的函数，遍历比 storage 要便宜太多，因为 view 函数不会产生任何花销。 （gas可是真金白银啊！）。\n\n我们将在下一章讨论for循环，现在我们来看一下看如何如何在内存中声明数组。\n\n在内存中声明数组\n在数组后面加上 memory关键字， 表明这个数组是仅仅在内存中创建，不需要写入外部存储，并且在函数调用结束时它就解散了。与在程序结束时把数据保存进 storage 的做法相比，内存运算可以大大节省gas开销 -- 把这数组放在view里用，完全不用花钱。\n\n以下是申明一个内存数组的例子：\n\n```solidity\nfunction getArray() external pure returns(uint[]) {\n  // 初始化一个长度为3的内存数组\n  uint[] memory values = new uint[](3);\n  // 赋值\n  values.push(1);\n  values.push(2);\n  values.push(3);\n  // 返回数组\n  return values;\n}\n```\n\n这个小例子展示了一些语法规则，下一章中，我们将通过一个实际用例，展示它和 for 循环结合的做法。\n\n注意：内存数组 必须 用长度参数（在本例中为3）创建。目前不支持 array.push()之类的方法调整数组大小，在未来的版本可能会支持长度修改。\n\n\n## 使用 for 循环\nfor循环的语法在 Solidity 和 JavaScript 中类似。\n\n来看一个创建偶数数组的例子：\n```solidity\nfunction getEvens() pure external returns(uint[]) {\n  uint[] memory evens = new uint[](5);\n  // 在新数组中记录序列号\n  uint counter = 0;\n  // 在循环从1迭代到10：\n  for (uint i = 1; i <= 10; i++) {\n    // 如果 `i` 是偶数...\n    if (i % 2 == 0) {\n      // 把它加入偶数数组\n      evens[counter] = i;\n      //索引加一， 指向下一个空的‘even’\n      counter++;\n    }\n  }\n  return evens;\n}\n```\n这个函数将返回一个形为 [2,4,6,8,10] 的数组。","source":"_posts/block_chain/contractLearn/Zombie_Con_Ch3.md","raw":"---\ntitle: Zombie T3\ndate: \ncategories:\n- backend\ntags:\n- blockchain\n- 智能合约\n---\n\n\n涉及内容：`智能协议的所有权`，`Gas的花费`，`代码优化`，和`代码安全`\n\n## ch1. 智能协议的永固性\n\n在你把智能协议传上以太坊之后，它就变得`不可更改`, 这种永固性意味着你的代码永远不能被调整或更新。\n\n**尽量不要写死代码**\n\n## ch2. Ownable Contracts\n\nOpenZeppelin库的Ownable 合约：OpenZeppelin 是主打安保和社区审查的智能合约库，您可以在自己的 DApps中引用。\n\n```solidity\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n```\n\n- 构造函数: `function Ownable()` 是一个 constructor (构造函数)，构造函数不是必须的，它与合约同名，构造函数一生中唯一的一次执行，就是在合约最初被创建的时候。\n\n- 函数修饰符：`modifier onlyOwner()` 修饰符跟函数很类似，不过是用来修饰其他已有函数用的， 在其他语句执行前，为它检查下先验条件。`_;` 类似于 ruby 中的 `yield`\n\n所以`Ownable`合约基本都会这么干：\n1. 合约创建，构造函数先行，将其 owner 设置为msg.sender（其部署者）\n2. 为它加上一个修饰符 onlyOwner，它会限制陌生人的访问，将访问某些函数的权限锁定在 owner 上。\n3. 允许将合约所有权转让给他人。\n\n\n## ch4. Gas\n\n**重要概念：** `Gas - 驱动以太坊DApps的能源`\n\n在 Solidity 中，你的用户想要每次执行你的 DApp 都需要支付一定的 gas，gas 可以用以太币购买，因此，用户每次跑 DApp 都得花费以太币。\n\n一个 DApp 收取多少 gas 取决于功能逻辑的复杂程度。每个操作背后，都在计算完成这个操作所需要的计算资源，（比如，存储数据就比做个加法运算贵得多）， 一次操作所需要花费的 gas 等于这个操作背后的所有运算花销的总和。\n\n由于运行你的程序需要花费用户的真金白银，在以太坊中代码的编程语言，比其他任何编程语言都更强调优化。同样的功能，使用笨拙的代码开发的程序，比起经过精巧优化的代码来，运行花费更高，这显然会给成千上万的用户带来大量不必要的开销。\n\n### 为什么要用 gas 来驱动？\n\n以太坊就像一个巨大、缓慢、但非常安全的电脑。当你运行一个程序的时候，网络上的每一个节点都在进行相同的运算，以验证它的输出 —— 这就是所谓的”去中心化“ 由于数以千计的节点同时在验证着每个功能的运行，这可以确保它的数据不会被被监控，或者被刻意修改。\n\n可能会有用户用无限循环堵塞网络，抑或用密集运算来占用大量的网络资源，为了防止这种事情的发生，以太坊的创建者为以太坊上的资源制定了价格，想要在以太坊上运算或者存储，你需要先付费。\n\n\n### 省 gas 的招数：结构封装 （Struct packing）\n\n在第1课中，我们提到除了基本版的 uint 外，还有其他变种 uint：uint8，uint16，uint32等。\n\n通常情况下我们不会考虑使用 unit 变种，因为无论如何定义 uint的大小，Solidity 为它保留256位的存储空间。例如，使用 uint8 而不是uint（uint256）不会为你节省任何 gas。\n\n除非，把 unit 绑定到 struct 里面。\n\n如果一个 struct 中有多个 uint，则尽可能使用较小的 uint, Solidity 会将这些 uint 打包在一起，从而占用较少的存储空间。例如：\n\n```solidity\nstruct NormalStruct {\n  uint a;\n  uint b;\n  uint c;\n}\n\nstruct MiniMe {\n  uint32 a;\n  uint32 b;\n  uint c;\n}\n```\n// 因为使用了结构打包，`mini` 比 `normal` 占用的空间更少\nNormalStruct normal = NormalStruct(10, 20, 30);\nMiniMe mini = MiniMe(10, 20, 30);\n所以，当 uint 定义在一个 struct 中的时候，尽量使用最小的整数子类型以节约空间。 并且把同样类型的变量放一起（即在 struct 中将把变量按照类型依次放置），这样 Solidity 可以将存储空间最小化。例如，有两个 struct：\n\nuint c; uint32 a; uint32 b; 和 uint32 a; uint c; uint32 b;\n\n前者比后者需要的gas更少，因为前者把uint32放一起了。\n\n## ch5. 时间单位\n\nSolidity 使用自己的本地时间单位。\n\n变量 `now` 将返回当前的unix时间戳（自1970年1月1日以来经过的秒数）。\n\nSolidity 还包含秒(seconds)，分钟(minutes)，小时(hours)，天(days)，周(weeks) 和 年(years) 等时间单位。它们都会转换成对应的秒数放入 uint 中。所以 1分钟 就是 60，1小时是 3600（60秒×60分钟），1天是86400（24小时×60分钟×60秒），以此类推。\n\n示例：\n```solidity\nuint lastUpdated;\n\n// 将‘上次更新时间’ 设置为 ‘现在’\nfunction updateTimestamp() public {\n  lastUpdated = now;\n}\n\n// 如果到上次`updateTimestamp` 超过5分钟，返回 'true'\n// 不到5分钟返回 'false'\nfunction fiveMinutesHavePassed() public view returns (bool) {\n  return (now >= (lastUpdated + 5 minutes));\n```\n\n## ch6. 结构体作为参数传入\n由于结构体的存储指针可以以参数的方式传递给一个 private 或 internal 的函数，因此结构体可以在多个函数之间相互传递。\n\n遵循这样的语法：\n\n```solidity\nfunction _doStuff(Zombie storage _zombie) internal {\n  // do stuff with _zombie\n}\n```\n\n## ch7. 公有函数和安全性\n\n你必须仔细地检查所有声明为 public 和 external的函数，一个个排除用户滥用它们的可能，谨防安全漏洞。请记住，如果这些函数没有类似 onlyOwner 这样的函数修饰符，用户能利用各种可能的参数去调用它们。\n\n## ch8. 进一步了解函数修饰符\n\n### 带参数的函数修饰符\n之前我们已经读过一个简单的函数修饰符了：onlyOwner。函数修饰符也可以带参数。例如：\n\n```solidity\n// 存储用户年龄的映射\nmapping (uint => uint) public age;\n\n// 限定用户年龄的修饰符\nmodifier olderThan(uint _age, uint _userId) {\n  require(age[_userId] >= _age);\n  _;\n}\n\n// 必须年满16周岁才允许开车 (至少在美国是这样的).\n// 我们可以用如下参数调用`olderThan` 修饰符:\nfunction driveCar(uint _userId) public olderThan(16, _userId) {\n  // 其余的程序逻辑\n}\n```\n\n看到了吧， olderThan 修饰符可以像函数一样接收参数，是“宿主”函数 driveCar 把参数传递给它的修饰符的。\n\n## ch10. 利用 'View' 函数节省 Gas\n\n### “view” 函数不花 “gas”\n\n当玩家从外部调用一个view函数，是不需要支付一分 gas 的。\n\n这是因为 view 函数不会真正改变区块链上的任何数据 - `它们只是读取`。因此用 view 标记一个函数，意味着告诉 web3.js，`运行这个函数只需要查询你的本地以太坊节点`，而不需要在区块链上创建一个事务（事务需要运行在每个节点上，因此花费 gas）。\n\n稍后我们将介绍如何在自己的节点上设置 web3.js。但现在，你关键是要记住，在所能只读的函数上标记上表示“只读”的“external view 声明，就能为你的玩家减少在 DApp 中 gas 用量。\n\n注意：如果一个 view 函数在另一个函数的内部被调用，而调用函数与 view 函数的不属于同一个合约，也会产生调用成本。这是因为如果主调函数在以太坊创建了一个事务，它仍然需要逐个节点去验证。所以标记为 view 的函数只有在外部调用时才是免费的。\n\n## ch11. 存储非常昂贵\n\nSolidity 使用storage(存储)是相当昂贵的，”写入“操作尤其贵。\n\n这是因为，无论是写入还是更改一段数据， 这都将永久性地写入区块链。”永久性“啊！需要在全球数千个节点的硬盘上存入这些数据，随着区块链的增长，拷贝份数更多，存储量也就越大。这是需要成本的！\n\n为了降低成本，不到万不得已，避免将数据写入存储。这也会导致效率低下的编程逻辑 - 比如每次调用一个函数，都需要在 memory(内存) 中重建一个数组，而不是简单地将上次计算的数组给存储下来以便快速查找。\n\n在大多数编程语言中，遍历大数据集合都是昂贵的。但是在 Solidity 中，使用一个标记了external view的函数，遍历比 storage 要便宜太多，因为 view 函数不会产生任何花销。 （gas可是真金白银啊！）。\n\n我们将在下一章讨论for循环，现在我们来看一下看如何如何在内存中声明数组。\n\n在内存中声明数组\n在数组后面加上 memory关键字， 表明这个数组是仅仅在内存中创建，不需要写入外部存储，并且在函数调用结束时它就解散了。与在程序结束时把数据保存进 storage 的做法相比，内存运算可以大大节省gas开销 -- 把这数组放在view里用，完全不用花钱。\n\n以下是申明一个内存数组的例子：\n\n```solidity\nfunction getArray() external pure returns(uint[]) {\n  // 初始化一个长度为3的内存数组\n  uint[] memory values = new uint[](3);\n  // 赋值\n  values.push(1);\n  values.push(2);\n  values.push(3);\n  // 返回数组\n  return values;\n}\n```\n\n这个小例子展示了一些语法规则，下一章中，我们将通过一个实际用例，展示它和 for 循环结合的做法。\n\n注意：内存数组 必须 用长度参数（在本例中为3）创建。目前不支持 array.push()之类的方法调整数组大小，在未来的版本可能会支持长度修改。\n\n\n## 使用 for 循环\nfor循环的语法在 Solidity 和 JavaScript 中类似。\n\n来看一个创建偶数数组的例子：\n```solidity\nfunction getEvens() pure external returns(uint[]) {\n  uint[] memory evens = new uint[](5);\n  // 在新数组中记录序列号\n  uint counter = 0;\n  // 在循环从1迭代到10：\n  for (uint i = 1; i <= 10; i++) {\n    // 如果 `i` 是偶数...\n    if (i % 2 == 0) {\n      // 把它加入偶数数组\n      evens[counter] = i;\n      //索引加一， 指向下一个空的‘even’\n      counter++;\n    }\n  }\n  return evens;\n}\n```\n这个函数将返回一个形为 [2,4,6,8,10] 的数组。","slug":"block_chain/contractLearn/Zombie_Con_Ch3","published":1,"updated":"2018-08-29T13:23:37.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgvo002f8seo95onupfe","content":"<p>涉及内容：<code>智能协议的所有权</code>，<code>Gas的花费</code>，<code>代码优化</code>，和<code>代码安全</code></p>\n<h2 id=\"ch1-智能协议的永固性\"><a href=\"#ch1-智能协议的永固性\" class=\"headerlink\" title=\"ch1. 智能协议的永固性\"></a>ch1. 智能协议的永固性</h2><p>在你把智能协议传上以太坊之后，它就变得<code>不可更改</code>, 这种永固性意味着你的代码永远不能被调整或更新。</p>\n<p><strong>尽量不要写死代码</strong></p>\n<h2 id=\"ch2-Ownable-Contracts\"><a href=\"#ch2-Ownable-Contracts\" class=\"headerlink\" title=\"ch2. Ownable Contracts\"></a>ch2. Ownable Contracts</h2><p>OpenZeppelin库的Ownable 合约：OpenZeppelin 是主打安保和社区审查的智能合约库，您可以在自己的 DApps中引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @title Ownable</span><br><span class=\"line\"> * @dev The Ownable contract has an owner address, and provides basic authorization control</span><br><span class=\"line\"> * functions, this simplifies the implementation of &quot;user permissions&quot;.</span><br><span class=\"line\"> */</span><br><span class=\"line\">contract Ownable &#123;</span><br><span class=\"line\">  address public owner;</span><br><span class=\"line\">  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @dev The Ownable constructor sets the original `owner` of the contract to the sender</span><br><span class=\"line\">   * account.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  function Ownable() public &#123;</span><br><span class=\"line\">    owner = msg.sender;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @dev Throws if called by any account other than the owner.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  modifier onlyOwner() &#123;</span><br><span class=\"line\">    require(msg.sender == owner);</span><br><span class=\"line\">    _;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @dev Allows the current owner to transfer control of the contract to a newOwner.</span><br><span class=\"line\">   * @param newOwner The address to transfer ownership to.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  function transferOwnership(address newOwner) public onlyOwner &#123;</span><br><span class=\"line\">    require(newOwner != address(0));</span><br><span class=\"line\">    OwnershipTransferred(owner, newOwner);</span><br><span class=\"line\">    owner = newOwner;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>构造函数: <code>function Ownable()</code> 是一个 constructor (构造函数)，构造函数不是必须的，它与合约同名，构造函数一生中唯一的一次执行，就是在合约最初被创建的时候。</p>\n</li>\n<li><p>函数修饰符：<code>modifier onlyOwner()</code> 修饰符跟函数很类似，不过是用来修饰其他已有函数用的， 在其他语句执行前，为它检查下先验条件。<code>_;</code> 类似于 ruby 中的 <code>yield</code></p>\n</li>\n</ul>\n<p>所以<code>Ownable</code>合约基本都会这么干：</p>\n<ol>\n<li>合约创建，构造函数先行，将其 owner 设置为msg.sender（其部署者）</li>\n<li>为它加上一个修饰符 onlyOwner，它会限制陌生人的访问，将访问某些函数的权限锁定在 owner 上。</li>\n<li>允许将合约所有权转让给他人。</li>\n</ol>\n<h2 id=\"ch4-Gas\"><a href=\"#ch4-Gas\" class=\"headerlink\" title=\"ch4. Gas\"></a>ch4. Gas</h2><p><strong>重要概念：</strong> <code>Gas - 驱动以太坊DApps的能源</code></p>\n<p>在 Solidity 中，你的用户想要每次执行你的 DApp 都需要支付一定的 gas，gas 可以用以太币购买，因此，用户每次跑 DApp 都得花费以太币。</p>\n<p>一个 DApp 收取多少 gas 取决于功能逻辑的复杂程度。每个操作背后，都在计算完成这个操作所需要的计算资源，（比如，存储数据就比做个加法运算贵得多）， 一次操作所需要花费的 gas 等于这个操作背后的所有运算花销的总和。</p>\n<p>由于运行你的程序需要花费用户的真金白银，在以太坊中代码的编程语言，比其他任何编程语言都更强调优化。同样的功能，使用笨拙的代码开发的程序，比起经过精巧优化的代码来，运行花费更高，这显然会给成千上万的用户带来大量不必要的开销。</p>\n<h3 id=\"为什么要用-gas-来驱动？\"><a href=\"#为什么要用-gas-来驱动？\" class=\"headerlink\" title=\"为什么要用 gas 来驱动？\"></a>为什么要用 gas 来驱动？</h3><p>以太坊就像一个巨大、缓慢、但非常安全的电脑。当你运行一个程序的时候，网络上的每一个节点都在进行相同的运算，以验证它的输出 —— 这就是所谓的”去中心化“ 由于数以千计的节点同时在验证着每个功能的运行，这可以确保它的数据不会被被监控，或者被刻意修改。</p>\n<p>可能会有用户用无限循环堵塞网络，抑或用密集运算来占用大量的网络资源，为了防止这种事情的发生，以太坊的创建者为以太坊上的资源制定了价格，想要在以太坊上运算或者存储，你需要先付费。</p>\n<h3 id=\"省-gas-的招数：结构封装-（Struct-packing）\"><a href=\"#省-gas-的招数：结构封装-（Struct-packing）\" class=\"headerlink\" title=\"省 gas 的招数：结构封装 （Struct packing）\"></a>省 gas 的招数：结构封装 （Struct packing）</h3><p>在第1课中，我们提到除了基本版的 uint 外，还有其他变种 uint：uint8，uint16，uint32等。</p>\n<p>通常情况下我们不会考虑使用 unit 变种，因为无论如何定义 uint的大小，Solidity 为它保留256位的存储空间。例如，使用 uint8 而不是uint（uint256）不会为你节省任何 gas。</p>\n<p>除非，把 unit 绑定到 struct 里面。</p>\n<p>如果一个 struct 中有多个 uint，则尽可能使用较小的 uint, Solidity 会将这些 uint 打包在一起，从而占用较少的存储空间。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct NormalStruct &#123;</span><br><span class=\"line\">  uint a;</span><br><span class=\"line\">  uint b;</span><br><span class=\"line\">  uint c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">struct MiniMe &#123;</span><br><span class=\"line\">  uint32 a;</span><br><span class=\"line\">  uint32 b;</span><br><span class=\"line\">  uint c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>// 因为使用了结构打包，<code>mini</code> 比 <code>normal</code> 占用的空间更少<br>NormalStruct normal = NormalStruct(10, 20, 30);<br>MiniMe mini = MiniMe(10, 20, 30);<br>所以，当 uint 定义在一个 struct 中的时候，尽量使用最小的整数子类型以节约空间。 并且把同样类型的变量放一起（即在 struct 中将把变量按照类型依次放置），这样 Solidity 可以将存储空间最小化。例如，有两个 struct：</p>\n<p>uint c; uint32 a; uint32 b; 和 uint32 a; uint c; uint32 b;</p>\n<p>前者比后者需要的gas更少，因为前者把uint32放一起了。</p>\n<h2 id=\"ch5-时间单位\"><a href=\"#ch5-时间单位\" class=\"headerlink\" title=\"ch5. 时间单位\"></a>ch5. 时间单位</h2><p>Solidity 使用自己的本地时间单位。</p>\n<p>变量 <code>now</code> 将返回当前的unix时间戳（自1970年1月1日以来经过的秒数）。</p>\n<p>Solidity 还包含秒(seconds)，分钟(minutes)，小时(hours)，天(days)，周(weeks) 和 年(years) 等时间单位。它们都会转换成对应的秒数放入 uint 中。所以 1分钟 就是 60，1小时是 3600（60秒×60分钟），1天是86400（24小时×60分钟×60秒），以此类推。</p>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uint lastUpdated;</span><br><span class=\"line\"></span><br><span class=\"line\">// 将‘上次更新时间’ 设置为 ‘现在’</span><br><span class=\"line\">function updateTimestamp() public &#123;</span><br><span class=\"line\">  lastUpdated = now;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果到上次`updateTimestamp` 超过5分钟，返回 &apos;true&apos;</span><br><span class=\"line\">// 不到5分钟返回 &apos;false&apos;</span><br><span class=\"line\">function fiveMinutesHavePassed() public view returns (bool) &#123;</span><br><span class=\"line\">  return (now &gt;= (lastUpdated + 5 minutes));</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"ch6-结构体作为参数传入\"><a href=\"#ch6-结构体作为参数传入\" class=\"headerlink\" title=\"ch6. 结构体作为参数传入\"></a>ch6. 结构体作为参数传入</h2><p>由于结构体的存储指针可以以参数的方式传递给一个 private 或 internal 的函数，因此结构体可以在多个函数之间相互传递。</p>\n<p>遵循这样的语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function _doStuff(Zombie storage _zombie) internal &#123;</span><br><span class=\"line\">  // do stuff with _zombie</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ch7-公有函数和安全性\"><a href=\"#ch7-公有函数和安全性\" class=\"headerlink\" title=\"ch7. 公有函数和安全性\"></a>ch7. 公有函数和安全性</h2><p>你必须仔细地检查所有声明为 public 和 external的函数，一个个排除用户滥用它们的可能，谨防安全漏洞。请记住，如果这些函数没有类似 onlyOwner 这样的函数修饰符，用户能利用各种可能的参数去调用它们。</p>\n<h2 id=\"ch8-进一步了解函数修饰符\"><a href=\"#ch8-进一步了解函数修饰符\" class=\"headerlink\" title=\"ch8. 进一步了解函数修饰符\"></a>ch8. 进一步了解函数修饰符</h2><h3 id=\"带参数的函数修饰符\"><a href=\"#带参数的函数修饰符\" class=\"headerlink\" title=\"带参数的函数修饰符\"></a>带参数的函数修饰符</h3><p>之前我们已经读过一个简单的函数修饰符了：onlyOwner。函数修饰符也可以带参数。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 存储用户年龄的映射</span><br><span class=\"line\">mapping (uint =&gt; uint) public age;</span><br><span class=\"line\"></span><br><span class=\"line\">// 限定用户年龄的修饰符</span><br><span class=\"line\">modifier olderThan(uint _age, uint _userId) &#123;</span><br><span class=\"line\">  require(age[_userId] &gt;= _age);</span><br><span class=\"line\">  _;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 必须年满16周岁才允许开车 (至少在美国是这样的).</span><br><span class=\"line\">// 我们可以用如下参数调用`olderThan` 修饰符:</span><br><span class=\"line\">function driveCar(uint _userId) public olderThan(16, _userId) &#123;</span><br><span class=\"line\">  // 其余的程序逻辑</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到了吧， olderThan 修饰符可以像函数一样接收参数，是“宿主”函数 driveCar 把参数传递给它的修饰符的。</p>\n<h2 id=\"ch10-利用-‘View’-函数节省-Gas\"><a href=\"#ch10-利用-‘View’-函数节省-Gas\" class=\"headerlink\" title=\"ch10. 利用 ‘View’ 函数节省 Gas\"></a>ch10. 利用 ‘View’ 函数节省 Gas</h2><h3 id=\"“view”-函数不花-“gas”\"><a href=\"#“view”-函数不花-“gas”\" class=\"headerlink\" title=\"“view” 函数不花 “gas”\"></a>“view” 函数不花 “gas”</h3><p>当玩家从外部调用一个view函数，是不需要支付一分 gas 的。</p>\n<p>这是因为 view 函数不会真正改变区块链上的任何数据 - <code>它们只是读取</code>。因此用 view 标记一个函数，意味着告诉 web3.js，<code>运行这个函数只需要查询你的本地以太坊节点</code>，而不需要在区块链上创建一个事务（事务需要运行在每个节点上，因此花费 gas）。</p>\n<p>稍后我们将介绍如何在自己的节点上设置 web3.js。但现在，你关键是要记住，在所能只读的函数上标记上表示“只读”的“external view 声明，就能为你的玩家减少在 DApp 中 gas 用量。</p>\n<p>注意：如果一个 view 函数在另一个函数的内部被调用，而调用函数与 view 函数的不属于同一个合约，也会产生调用成本。这是因为如果主调函数在以太坊创建了一个事务，它仍然需要逐个节点去验证。所以标记为 view 的函数只有在外部调用时才是免费的。</p>\n<h2 id=\"ch11-存储非常昂贵\"><a href=\"#ch11-存储非常昂贵\" class=\"headerlink\" title=\"ch11. 存储非常昂贵\"></a>ch11. 存储非常昂贵</h2><p>Solidity 使用storage(存储)是相当昂贵的，”写入“操作尤其贵。</p>\n<p>这是因为，无论是写入还是更改一段数据， 这都将永久性地写入区块链。”永久性“啊！需要在全球数千个节点的硬盘上存入这些数据，随着区块链的增长，拷贝份数更多，存储量也就越大。这是需要成本的！</p>\n<p>为了降低成本，不到万不得已，避免将数据写入存储。这也会导致效率低下的编程逻辑 - 比如每次调用一个函数，都需要在 memory(内存) 中重建一个数组，而不是简单地将上次计算的数组给存储下来以便快速查找。</p>\n<p>在大多数编程语言中，遍历大数据集合都是昂贵的。但是在 Solidity 中，使用一个标记了external view的函数，遍历比 storage 要便宜太多，因为 view 函数不会产生任何花销。 （gas可是真金白银啊！）。</p>\n<p>我们将在下一章讨论for循环，现在我们来看一下看如何如何在内存中声明数组。</p>\n<p>在内存中声明数组<br>在数组后面加上 memory关键字， 表明这个数组是仅仅在内存中创建，不需要写入外部存储，并且在函数调用结束时它就解散了。与在程序结束时把数据保存进 storage 的做法相比，内存运算可以大大节省gas开销 – 把这数组放在view里用，完全不用花钱。</p>\n<p>以下是申明一个内存数组的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getArray() external pure returns(uint[]) &#123;</span><br><span class=\"line\">  // 初始化一个长度为3的内存数组</span><br><span class=\"line\">  uint[] memory values = new uint[](3);</span><br><span class=\"line\">  // 赋值</span><br><span class=\"line\">  values.push(1);</span><br><span class=\"line\">  values.push(2);</span><br><span class=\"line\">  values.push(3);</span><br><span class=\"line\">  // 返回数组</span><br><span class=\"line\">  return values;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个小例子展示了一些语法规则，下一章中，我们将通过一个实际用例，展示它和 for 循环结合的做法。</p>\n<p>注意：内存数组 必须 用长度参数（在本例中为3）创建。目前不支持 array.push()之类的方法调整数组大小，在未来的版本可能会支持长度修改。</p>\n<h2 id=\"使用-for-循环\"><a href=\"#使用-for-循环\" class=\"headerlink\" title=\"使用 for 循环\"></a>使用 for 循环</h2><p>for循环的语法在 Solidity 和 JavaScript 中类似。</p>\n<p>来看一个创建偶数数组的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getEvens() pure external returns(uint[]) &#123;</span><br><span class=\"line\">  uint[] memory evens = new uint[](5);</span><br><span class=\"line\">  // 在新数组中记录序列号</span><br><span class=\"line\">  uint counter = 0;</span><br><span class=\"line\">  // 在循环从1迭代到10：</span><br><span class=\"line\">  for (uint i = 1; i &lt;= 10; i++) &#123;</span><br><span class=\"line\">    // 如果 `i` 是偶数...</span><br><span class=\"line\">    if (i % 2 == 0) &#123;</span><br><span class=\"line\">      // 把它加入偶数数组</span><br><span class=\"line\">      evens[counter] = i;</span><br><span class=\"line\">      //索引加一， 指向下一个空的‘even’</span><br><span class=\"line\">      counter++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return evens;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个函数将返回一个形为 [2,4,6,8,10] 的数组。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>涉及内容：<code>智能协议的所有权</code>，<code>Gas的花费</code>，<code>代码优化</code>，和<code>代码安全</code></p>\n<h2 id=\"ch1-智能协议的永固性\"><a href=\"#ch1-智能协议的永固性\" class=\"headerlink\" title=\"ch1. 智能协议的永固性\"></a>ch1. 智能协议的永固性</h2><p>在你把智能协议传上以太坊之后，它就变得<code>不可更改</code>, 这种永固性意味着你的代码永远不能被调整或更新。</p>\n<p><strong>尽量不要写死代码</strong></p>\n<h2 id=\"ch2-Ownable-Contracts\"><a href=\"#ch2-Ownable-Contracts\" class=\"headerlink\" title=\"ch2. Ownable Contracts\"></a>ch2. Ownable Contracts</h2><p>OpenZeppelin库的Ownable 合约：OpenZeppelin 是主打安保和社区审查的智能合约库，您可以在自己的 DApps中引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @title Ownable</span><br><span class=\"line\"> * @dev The Ownable contract has an owner address, and provides basic authorization control</span><br><span class=\"line\"> * functions, this simplifies the implementation of &quot;user permissions&quot;.</span><br><span class=\"line\"> */</span><br><span class=\"line\">contract Ownable &#123;</span><br><span class=\"line\">  address public owner;</span><br><span class=\"line\">  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @dev The Ownable constructor sets the original `owner` of the contract to the sender</span><br><span class=\"line\">   * account.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  function Ownable() public &#123;</span><br><span class=\"line\">    owner = msg.sender;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @dev Throws if called by any account other than the owner.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  modifier onlyOwner() &#123;</span><br><span class=\"line\">    require(msg.sender == owner);</span><br><span class=\"line\">    _;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @dev Allows the current owner to transfer control of the contract to a newOwner.</span><br><span class=\"line\">   * @param newOwner The address to transfer ownership to.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  function transferOwnership(address newOwner) public onlyOwner &#123;</span><br><span class=\"line\">    require(newOwner != address(0));</span><br><span class=\"line\">    OwnershipTransferred(owner, newOwner);</span><br><span class=\"line\">    owner = newOwner;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>构造函数: <code>function Ownable()</code> 是一个 constructor (构造函数)，构造函数不是必须的，它与合约同名，构造函数一生中唯一的一次执行，就是在合约最初被创建的时候。</p>\n</li>\n<li><p>函数修饰符：<code>modifier onlyOwner()</code> 修饰符跟函数很类似，不过是用来修饰其他已有函数用的， 在其他语句执行前，为它检查下先验条件。<code>_;</code> 类似于 ruby 中的 <code>yield</code></p>\n</li>\n</ul>\n<p>所以<code>Ownable</code>合约基本都会这么干：</p>\n<ol>\n<li>合约创建，构造函数先行，将其 owner 设置为msg.sender（其部署者）</li>\n<li>为它加上一个修饰符 onlyOwner，它会限制陌生人的访问，将访问某些函数的权限锁定在 owner 上。</li>\n<li>允许将合约所有权转让给他人。</li>\n</ol>\n<h2 id=\"ch4-Gas\"><a href=\"#ch4-Gas\" class=\"headerlink\" title=\"ch4. Gas\"></a>ch4. Gas</h2><p><strong>重要概念：</strong> <code>Gas - 驱动以太坊DApps的能源</code></p>\n<p>在 Solidity 中，你的用户想要每次执行你的 DApp 都需要支付一定的 gas，gas 可以用以太币购买，因此，用户每次跑 DApp 都得花费以太币。</p>\n<p>一个 DApp 收取多少 gas 取决于功能逻辑的复杂程度。每个操作背后，都在计算完成这个操作所需要的计算资源，（比如，存储数据就比做个加法运算贵得多）， 一次操作所需要花费的 gas 等于这个操作背后的所有运算花销的总和。</p>\n<p>由于运行你的程序需要花费用户的真金白银，在以太坊中代码的编程语言，比其他任何编程语言都更强调优化。同样的功能，使用笨拙的代码开发的程序，比起经过精巧优化的代码来，运行花费更高，这显然会给成千上万的用户带来大量不必要的开销。</p>\n<h3 id=\"为什么要用-gas-来驱动？\"><a href=\"#为什么要用-gas-来驱动？\" class=\"headerlink\" title=\"为什么要用 gas 来驱动？\"></a>为什么要用 gas 来驱动？</h3><p>以太坊就像一个巨大、缓慢、但非常安全的电脑。当你运行一个程序的时候，网络上的每一个节点都在进行相同的运算，以验证它的输出 —— 这就是所谓的”去中心化“ 由于数以千计的节点同时在验证着每个功能的运行，这可以确保它的数据不会被被监控，或者被刻意修改。</p>\n<p>可能会有用户用无限循环堵塞网络，抑或用密集运算来占用大量的网络资源，为了防止这种事情的发生，以太坊的创建者为以太坊上的资源制定了价格，想要在以太坊上运算或者存储，你需要先付费。</p>\n<h3 id=\"省-gas-的招数：结构封装-（Struct-packing）\"><a href=\"#省-gas-的招数：结构封装-（Struct-packing）\" class=\"headerlink\" title=\"省 gas 的招数：结构封装 （Struct packing）\"></a>省 gas 的招数：结构封装 （Struct packing）</h3><p>在第1课中，我们提到除了基本版的 uint 外，还有其他变种 uint：uint8，uint16，uint32等。</p>\n<p>通常情况下我们不会考虑使用 unit 变种，因为无论如何定义 uint的大小，Solidity 为它保留256位的存储空间。例如，使用 uint8 而不是uint（uint256）不会为你节省任何 gas。</p>\n<p>除非，把 unit 绑定到 struct 里面。</p>\n<p>如果一个 struct 中有多个 uint，则尽可能使用较小的 uint, Solidity 会将这些 uint 打包在一起，从而占用较少的存储空间。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct NormalStruct &#123;</span><br><span class=\"line\">  uint a;</span><br><span class=\"line\">  uint b;</span><br><span class=\"line\">  uint c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">struct MiniMe &#123;</span><br><span class=\"line\">  uint32 a;</span><br><span class=\"line\">  uint32 b;</span><br><span class=\"line\">  uint c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>// 因为使用了结构打包，<code>mini</code> 比 <code>normal</code> 占用的空间更少<br>NormalStruct normal = NormalStruct(10, 20, 30);<br>MiniMe mini = MiniMe(10, 20, 30);<br>所以，当 uint 定义在一个 struct 中的时候，尽量使用最小的整数子类型以节约空间。 并且把同样类型的变量放一起（即在 struct 中将把变量按照类型依次放置），这样 Solidity 可以将存储空间最小化。例如，有两个 struct：</p>\n<p>uint c; uint32 a; uint32 b; 和 uint32 a; uint c; uint32 b;</p>\n<p>前者比后者需要的gas更少，因为前者把uint32放一起了。</p>\n<h2 id=\"ch5-时间单位\"><a href=\"#ch5-时间单位\" class=\"headerlink\" title=\"ch5. 时间单位\"></a>ch5. 时间单位</h2><p>Solidity 使用自己的本地时间单位。</p>\n<p>变量 <code>now</code> 将返回当前的unix时间戳（自1970年1月1日以来经过的秒数）。</p>\n<p>Solidity 还包含秒(seconds)，分钟(minutes)，小时(hours)，天(days)，周(weeks) 和 年(years) 等时间单位。它们都会转换成对应的秒数放入 uint 中。所以 1分钟 就是 60，1小时是 3600（60秒×60分钟），1天是86400（24小时×60分钟×60秒），以此类推。</p>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uint lastUpdated;</span><br><span class=\"line\"></span><br><span class=\"line\">// 将‘上次更新时间’ 设置为 ‘现在’</span><br><span class=\"line\">function updateTimestamp() public &#123;</span><br><span class=\"line\">  lastUpdated = now;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果到上次`updateTimestamp` 超过5分钟，返回 &apos;true&apos;</span><br><span class=\"line\">// 不到5分钟返回 &apos;false&apos;</span><br><span class=\"line\">function fiveMinutesHavePassed() public view returns (bool) &#123;</span><br><span class=\"line\">  return (now &gt;= (lastUpdated + 5 minutes));</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"ch6-结构体作为参数传入\"><a href=\"#ch6-结构体作为参数传入\" class=\"headerlink\" title=\"ch6. 结构体作为参数传入\"></a>ch6. 结构体作为参数传入</h2><p>由于结构体的存储指针可以以参数的方式传递给一个 private 或 internal 的函数，因此结构体可以在多个函数之间相互传递。</p>\n<p>遵循这样的语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function _doStuff(Zombie storage _zombie) internal &#123;</span><br><span class=\"line\">  // do stuff with _zombie</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ch7-公有函数和安全性\"><a href=\"#ch7-公有函数和安全性\" class=\"headerlink\" title=\"ch7. 公有函数和安全性\"></a>ch7. 公有函数和安全性</h2><p>你必须仔细地检查所有声明为 public 和 external的函数，一个个排除用户滥用它们的可能，谨防安全漏洞。请记住，如果这些函数没有类似 onlyOwner 这样的函数修饰符，用户能利用各种可能的参数去调用它们。</p>\n<h2 id=\"ch8-进一步了解函数修饰符\"><a href=\"#ch8-进一步了解函数修饰符\" class=\"headerlink\" title=\"ch8. 进一步了解函数修饰符\"></a>ch8. 进一步了解函数修饰符</h2><h3 id=\"带参数的函数修饰符\"><a href=\"#带参数的函数修饰符\" class=\"headerlink\" title=\"带参数的函数修饰符\"></a>带参数的函数修饰符</h3><p>之前我们已经读过一个简单的函数修饰符了：onlyOwner。函数修饰符也可以带参数。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 存储用户年龄的映射</span><br><span class=\"line\">mapping (uint =&gt; uint) public age;</span><br><span class=\"line\"></span><br><span class=\"line\">// 限定用户年龄的修饰符</span><br><span class=\"line\">modifier olderThan(uint _age, uint _userId) &#123;</span><br><span class=\"line\">  require(age[_userId] &gt;= _age);</span><br><span class=\"line\">  _;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 必须年满16周岁才允许开车 (至少在美国是这样的).</span><br><span class=\"line\">// 我们可以用如下参数调用`olderThan` 修饰符:</span><br><span class=\"line\">function driveCar(uint _userId) public olderThan(16, _userId) &#123;</span><br><span class=\"line\">  // 其余的程序逻辑</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到了吧， olderThan 修饰符可以像函数一样接收参数，是“宿主”函数 driveCar 把参数传递给它的修饰符的。</p>\n<h2 id=\"ch10-利用-‘View’-函数节省-Gas\"><a href=\"#ch10-利用-‘View’-函数节省-Gas\" class=\"headerlink\" title=\"ch10. 利用 ‘View’ 函数节省 Gas\"></a>ch10. 利用 ‘View’ 函数节省 Gas</h2><h3 id=\"“view”-函数不花-“gas”\"><a href=\"#“view”-函数不花-“gas”\" class=\"headerlink\" title=\"“view” 函数不花 “gas”\"></a>“view” 函数不花 “gas”</h3><p>当玩家从外部调用一个view函数，是不需要支付一分 gas 的。</p>\n<p>这是因为 view 函数不会真正改变区块链上的任何数据 - <code>它们只是读取</code>。因此用 view 标记一个函数，意味着告诉 web3.js，<code>运行这个函数只需要查询你的本地以太坊节点</code>，而不需要在区块链上创建一个事务（事务需要运行在每个节点上，因此花费 gas）。</p>\n<p>稍后我们将介绍如何在自己的节点上设置 web3.js。但现在，你关键是要记住，在所能只读的函数上标记上表示“只读”的“external view 声明，就能为你的玩家减少在 DApp 中 gas 用量。</p>\n<p>注意：如果一个 view 函数在另一个函数的内部被调用，而调用函数与 view 函数的不属于同一个合约，也会产生调用成本。这是因为如果主调函数在以太坊创建了一个事务，它仍然需要逐个节点去验证。所以标记为 view 的函数只有在外部调用时才是免费的。</p>\n<h2 id=\"ch11-存储非常昂贵\"><a href=\"#ch11-存储非常昂贵\" class=\"headerlink\" title=\"ch11. 存储非常昂贵\"></a>ch11. 存储非常昂贵</h2><p>Solidity 使用storage(存储)是相当昂贵的，”写入“操作尤其贵。</p>\n<p>这是因为，无论是写入还是更改一段数据， 这都将永久性地写入区块链。”永久性“啊！需要在全球数千个节点的硬盘上存入这些数据，随着区块链的增长，拷贝份数更多，存储量也就越大。这是需要成本的！</p>\n<p>为了降低成本，不到万不得已，避免将数据写入存储。这也会导致效率低下的编程逻辑 - 比如每次调用一个函数，都需要在 memory(内存) 中重建一个数组，而不是简单地将上次计算的数组给存储下来以便快速查找。</p>\n<p>在大多数编程语言中，遍历大数据集合都是昂贵的。但是在 Solidity 中，使用一个标记了external view的函数，遍历比 storage 要便宜太多，因为 view 函数不会产生任何花销。 （gas可是真金白银啊！）。</p>\n<p>我们将在下一章讨论for循环，现在我们来看一下看如何如何在内存中声明数组。</p>\n<p>在内存中声明数组<br>在数组后面加上 memory关键字， 表明这个数组是仅仅在内存中创建，不需要写入外部存储，并且在函数调用结束时它就解散了。与在程序结束时把数据保存进 storage 的做法相比，内存运算可以大大节省gas开销 – 把这数组放在view里用，完全不用花钱。</p>\n<p>以下是申明一个内存数组的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getArray() external pure returns(uint[]) &#123;</span><br><span class=\"line\">  // 初始化一个长度为3的内存数组</span><br><span class=\"line\">  uint[] memory values = new uint[](3);</span><br><span class=\"line\">  // 赋值</span><br><span class=\"line\">  values.push(1);</span><br><span class=\"line\">  values.push(2);</span><br><span class=\"line\">  values.push(3);</span><br><span class=\"line\">  // 返回数组</span><br><span class=\"line\">  return values;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个小例子展示了一些语法规则，下一章中，我们将通过一个实际用例，展示它和 for 循环结合的做法。</p>\n<p>注意：内存数组 必须 用长度参数（在本例中为3）创建。目前不支持 array.push()之类的方法调整数组大小，在未来的版本可能会支持长度修改。</p>\n<h2 id=\"使用-for-循环\"><a href=\"#使用-for-循环\" class=\"headerlink\" title=\"使用 for 循环\"></a>使用 for 循环</h2><p>for循环的语法在 Solidity 和 JavaScript 中类似。</p>\n<p>来看一个创建偶数数组的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getEvens() pure external returns(uint[]) &#123;</span><br><span class=\"line\">  uint[] memory evens = new uint[](5);</span><br><span class=\"line\">  // 在新数组中记录序列号</span><br><span class=\"line\">  uint counter = 0;</span><br><span class=\"line\">  // 在循环从1迭代到10：</span><br><span class=\"line\">  for (uint i = 1; i &lt;= 10; i++) &#123;</span><br><span class=\"line\">    // 如果 `i` 是偶数...</span><br><span class=\"line\">    if (i % 2 == 0) &#123;</span><br><span class=\"line\">      // 把它加入偶数数组</span><br><span class=\"line\">      evens[counter] = i;</span><br><span class=\"line\">      //索引加一， 指向下一个空的‘even’</span><br><span class=\"line\">      counter++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return evens;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个函数将返回一个形为 [2,4,6,8,10] 的数组。</p>\n"},{"_content":"## Task \n\none weak one Part\n\n### 1. 翻译原文\n\n- [x] Part 0 - Index readme\n- [x] Part 1 - Introduction and Setting up the REPL\n- [x] Part 2 - World’s Simplest SQL Compiler and Virtual Machine\n- [ ] Part 3 - An In-Memory, Append-Only, Single-Table Database\n- [ ] Part 4 - Our First Tests (and Bugs)\n- [ ] Part 5 - Persistence to Disk\n- [ ] Part 6 - The Cursor Abstraction\n- [ ] Part 7 - Introduction to the B-Tree\n- [ ] Part 8 - B-Tree Leaf Node Format\n- [ ] Part 9 - Binary Search and Duplicate Keys\n- [ ] Part 10 - Splitting a Leaf Node\n- [ ] Part 11 - Recursively Searching the B-Tree\n- [ ] Part 12 - Scanning a Multi-Level B-Tree\n- [ ] Part 13 - Updating Parent Node After a Split\n\n### 2. 基础总结\n\n- [ ] Part 1 - Introduction and Setting up the REPL\n- [ ] Part 2 - World’s Simplest SQL Compiler and Virtual Machine\n- [ ] Part 3 - An In-Memory, Append-Only, Single-Table Database\n- [ ] Part 4 - Our First Tests (and Bugs)\n- [ ] Part 5 - Persistence to Disk\n- [ ] Part 6 - The Cursor Abstraction\n- [ ] Part 7 - Introduction to the B-Tree\n- [ ] Part 8 - B-Tree Leaf Node Format\n- [ ] Part 9 - Binary Search and Duplicate Keys\n- [ ] Part 10 - Splitting a Leaf Node\n- [ ] Part 11 - Recursively Searching the B-Tree\n- [ ] Part 12 - Scanning a Multi-Level B-Tree\n- [ ] Part 13 - Updating Parent Node After a Split\n\n### 3. follow it write a simple DB\n\n- [x] Part 1 - Introduction and Setting up the REPL\n- [x] Part 2 - World’s Simplest SQL Compiler and Virtual Machine\n- [ ] Part 3 - An In-Memory, Append-Only, Single-Table Database\n- [ ] Part 4 - Our First Tests (and Bugs)\n- [ ] Part 5 - Persistence to Disk\n- [ ] Part 6 - The Cursor Abstraction\n- [ ] Part 7 - Introduction to the B-Tree\n- [ ] Part 8 - B-Tree Leaf Node Format\n- [ ] Part 9 - Binary Search and Duplicate Keys\n- [ ] Part 10 - Splitting a Leaf Node\n- [ ] Part 11 - Recursively Searching the B-Tree\n- [ ] Part 12 - Scanning a Multi-Level B-Tree\n- [ ] Part 13 - Updating Parent Node After a Split\n\n","source":"_posts/build_own_x/data_base/build_simple_database_task.md","raw":"## Task \n\none weak one Part\n\n### 1. 翻译原文\n\n- [x] Part 0 - Index readme\n- [x] Part 1 - Introduction and Setting up the REPL\n- [x] Part 2 - World’s Simplest SQL Compiler and Virtual Machine\n- [ ] Part 3 - An In-Memory, Append-Only, Single-Table Database\n- [ ] Part 4 - Our First Tests (and Bugs)\n- [ ] Part 5 - Persistence to Disk\n- [ ] Part 6 - The Cursor Abstraction\n- [ ] Part 7 - Introduction to the B-Tree\n- [ ] Part 8 - B-Tree Leaf Node Format\n- [ ] Part 9 - Binary Search and Duplicate Keys\n- [ ] Part 10 - Splitting a Leaf Node\n- [ ] Part 11 - Recursively Searching the B-Tree\n- [ ] Part 12 - Scanning a Multi-Level B-Tree\n- [ ] Part 13 - Updating Parent Node After a Split\n\n### 2. 基础总结\n\n- [ ] Part 1 - Introduction and Setting up the REPL\n- [ ] Part 2 - World’s Simplest SQL Compiler and Virtual Machine\n- [ ] Part 3 - An In-Memory, Append-Only, Single-Table Database\n- [ ] Part 4 - Our First Tests (and Bugs)\n- [ ] Part 5 - Persistence to Disk\n- [ ] Part 6 - The Cursor Abstraction\n- [ ] Part 7 - Introduction to the B-Tree\n- [ ] Part 8 - B-Tree Leaf Node Format\n- [ ] Part 9 - Binary Search and Duplicate Keys\n- [ ] Part 10 - Splitting a Leaf Node\n- [ ] Part 11 - Recursively Searching the B-Tree\n- [ ] Part 12 - Scanning a Multi-Level B-Tree\n- [ ] Part 13 - Updating Parent Node After a Split\n\n### 3. follow it write a simple DB\n\n- [x] Part 1 - Introduction and Setting up the REPL\n- [x] Part 2 - World’s Simplest SQL Compiler and Virtual Machine\n- [ ] Part 3 - An In-Memory, Append-Only, Single-Table Database\n- [ ] Part 4 - Our First Tests (and Bugs)\n- [ ] Part 5 - Persistence to Disk\n- [ ] Part 6 - The Cursor Abstraction\n- [ ] Part 7 - Introduction to the B-Tree\n- [ ] Part 8 - B-Tree Leaf Node Format\n- [ ] Part 9 - Binary Search and Duplicate Keys\n- [ ] Part 10 - Splitting a Leaf Node\n- [ ] Part 11 - Recursively Searching the B-Tree\n- [ ] Part 12 - Scanning a Multi-Level B-Tree\n- [ ] Part 13 - Updating Parent Node After a Split\n\n","slug":"build_own_x/data_base/build_simple_database_task","published":1,"date":"2019-01-26T07:23:30.094Z","updated":"2019-01-26T13:24:26.646Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgvq002g8seo5runmo7g","content":"<h2 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h2><p>one weak one Part</p>\n<h3 id=\"1-翻译原文\"><a href=\"#1-翻译原文\" class=\"headerlink\" title=\"1. 翻译原文\"></a>1. 翻译原文</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> Part 0 - Index readme</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> Part 1 - Introduction and Setting up the REPL</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> Part 2 - World’s Simplest SQL Compiler and Virtual Machine</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 3 - An In-Memory, Append-Only, Single-Table Database</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 4 - Our First Tests (and Bugs)</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 5 - Persistence to Disk</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 6 - The Cursor Abstraction</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 7 - Introduction to the B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 8 - B-Tree Leaf Node Format</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 9 - Binary Search and Duplicate Keys</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 10 - Splitting a Leaf Node</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 11 - Recursively Searching the B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 12 - Scanning a Multi-Level B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 13 - Updating Parent Node After a Split</li>\n</ul>\n<h3 id=\"2-基础总结\"><a href=\"#2-基础总结\" class=\"headerlink\" title=\"2. 基础总结\"></a>2. 基础总结</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 1 - Introduction and Setting up the REPL</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 2 - World’s Simplest SQL Compiler and Virtual Machine</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 3 - An In-Memory, Append-Only, Single-Table Database</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 4 - Our First Tests (and Bugs)</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 5 - Persistence to Disk</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 6 - The Cursor Abstraction</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 7 - Introduction to the B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 8 - B-Tree Leaf Node Format</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 9 - Binary Search and Duplicate Keys</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 10 - Splitting a Leaf Node</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 11 - Recursively Searching the B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 12 - Scanning a Multi-Level B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 13 - Updating Parent Node After a Split</li>\n</ul>\n<h3 id=\"3-follow-it-write-a-simple-DB\"><a href=\"#3-follow-it-write-a-simple-DB\" class=\"headerlink\" title=\"3. follow it write a simple DB\"></a>3. follow it write a simple DB</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> Part 1 - Introduction and Setting up the REPL</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> Part 2 - World’s Simplest SQL Compiler and Virtual Machine</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 3 - An In-Memory, Append-Only, Single-Table Database</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 4 - Our First Tests (and Bugs)</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 5 - Persistence to Disk</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 6 - The Cursor Abstraction</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 7 - Introduction to the B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 8 - B-Tree Leaf Node Format</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 9 - Binary Search and Duplicate Keys</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 10 - Splitting a Leaf Node</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 11 - Recursively Searching the B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 12 - Scanning a Multi-Level B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 13 - Updating Parent Node After a Split</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h2><p>one weak one Part</p>\n<h3 id=\"1-翻译原文\"><a href=\"#1-翻译原文\" class=\"headerlink\" title=\"1. 翻译原文\"></a>1. 翻译原文</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> Part 0 - Index readme</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> Part 1 - Introduction and Setting up the REPL</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> Part 2 - World’s Simplest SQL Compiler and Virtual Machine</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 3 - An In-Memory, Append-Only, Single-Table Database</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 4 - Our First Tests (and Bugs)</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 5 - Persistence to Disk</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 6 - The Cursor Abstraction</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 7 - Introduction to the B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 8 - B-Tree Leaf Node Format</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 9 - Binary Search and Duplicate Keys</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 10 - Splitting a Leaf Node</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 11 - Recursively Searching the B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 12 - Scanning a Multi-Level B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 13 - Updating Parent Node After a Split</li>\n</ul>\n<h3 id=\"2-基础总结\"><a href=\"#2-基础总结\" class=\"headerlink\" title=\"2. 基础总结\"></a>2. 基础总结</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 1 - Introduction and Setting up the REPL</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 2 - World’s Simplest SQL Compiler and Virtual Machine</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 3 - An In-Memory, Append-Only, Single-Table Database</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 4 - Our First Tests (and Bugs)</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 5 - Persistence to Disk</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 6 - The Cursor Abstraction</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 7 - Introduction to the B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 8 - B-Tree Leaf Node Format</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 9 - Binary Search and Duplicate Keys</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 10 - Splitting a Leaf Node</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 11 - Recursively Searching the B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 12 - Scanning a Multi-Level B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 13 - Updating Parent Node After a Split</li>\n</ul>\n<h3 id=\"3-follow-it-write-a-simple-DB\"><a href=\"#3-follow-it-write-a-simple-DB\" class=\"headerlink\" title=\"3. follow it write a simple DB\"></a>3. follow it write a simple DB</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> Part 1 - Introduction and Setting up the REPL</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> Part 2 - World’s Simplest SQL Compiler and Virtual Machine</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 3 - An In-Memory, Append-Only, Single-Table Database</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 4 - Our First Tests (and Bugs)</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 5 - Persistence to Disk</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 6 - The Cursor Abstraction</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 7 - Introduction to the B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 8 - B-Tree Leaf Node Format</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 9 - Binary Search and Duplicate Keys</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 10 - Splitting a Leaf Node</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 11 - Recursively Searching the B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 12 - Scanning a Multi-Level B-Tree</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Part 13 - Updating Parent Node After a Split</li>\n</ul>\n"},{"_content":"## How to create an OS from scratch!\n\n参考: https://github.com/cfenollosa/os-tutorial\n\n","source":"_posts/build_own_x/os/How to create an OS from scratch.md","raw":"## How to create an OS from scratch!\n\n参考: https://github.com/cfenollosa/os-tutorial\n\n","slug":"build_own_x/os/How to create an OS from scratch","published":1,"date":"2018-09-23T05:21:19.206Z","updated":"2018-12-07T06:15:22.113Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgvs002j8seol3629fri","content":"<h2 id=\"How-to-create-an-OS-from-scratch\"><a href=\"#How-to-create-an-OS-from-scratch\" class=\"headerlink\" title=\"How to create an OS from scratch!\"></a>How to create an OS from scratch!</h2><p>参考: <a href=\"https://github.com/cfenollosa/os-tutorial\" target=\"_blank\" rel=\"noopener\">https://github.com/cfenollosa/os-tutorial</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"How-to-create-an-OS-from-scratch\"><a href=\"#How-to-create-an-OS-from-scratch\" class=\"headerlink\" title=\"How to create an OS from scratch!\"></a>How to create an OS from scratch!</h2><p>参考: <a href=\"https://github.com/cfenollosa/os-tutorial\" target=\"_blank\" rel=\"noopener\">https://github.com/cfenollosa/os-tutorial</a></p>\n"},{"title":"basic css learn - 1. css display grid","date":"2018-08-29T14:03:33.251Z","_content":"\n\n\n\n\n\n\n\n\n参考: https://atomiks.github.io/30-seconds-of-css/","source":"_posts/frontend/css/basic_1_0_css_position.md","raw":"---\ntitle: basic css learn - 1. css display grid\ndate: \ncategories:\n- frontend\ntags:\n- css\n- css grid\n---\n\n\n\n\n\n\n\n\n\n参考: https://atomiks.github.io/30-seconds-of-css/","slug":"frontend/css/basic_1_0_css_position","published":1,"updated":"2018-08-29T14:47:49.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgvu002m8seodg6uxic9","content":"<p>参考: <a href=\"https://atomiks.github.io/30-seconds-of-css/\" target=\"_blank\" rel=\"noopener\">https://atomiks.github.io/30-seconds-of-css/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考: <a href=\"https://atomiks.github.io/30-seconds-of-css/\" target=\"_blank\" rel=\"noopener\">https://atomiks.github.io/30-seconds-of-css/</a></p>\n"},{"title":"Learn flutter","date":"2018-12-06T11:41:59.000Z","_content":"\n\n\n## 基础 Widget\n- [ ] widget概述-布局模型\n\n## Material 组件\n\n\n### Widget 与 Material关系\n\n\n## 处理手势\n\n\n## 根据用户输入改变widget\n\n\n\n## 响应widget生命周期事件","source":"_posts/frontend/flutter/flutter_learn_plan.md","raw":"---\ntitle: Learn flutter\ndate: 2018-12-06 19:41:59\ncategories:\n- flutter\ntags:\n- learn task\n- flutter\n---\n\n\n\n## 基础 Widget\n- [ ] widget概述-布局模型\n\n## Material 组件\n\n\n### Widget 与 Material关系\n\n\n## 处理手势\n\n\n## 根据用户输入改变widget\n\n\n\n## 响应widget生命周期事件","slug":"frontend/flutter/flutter_learn_plan","published":1,"updated":"2018-12-06T11:58:37.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgvw002p8seotf8kyyxv","content":"<h2 id=\"基础-Widget\"><a href=\"#基础-Widget\" class=\"headerlink\" title=\"基础 Widget\"></a>基础 Widget</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> widget概述-布局模型</li>\n</ul>\n<h2 id=\"Material-组件\"><a href=\"#Material-组件\" class=\"headerlink\" title=\"Material 组件\"></a>Material 组件</h2><h3 id=\"Widget-与-Material关系\"><a href=\"#Widget-与-Material关系\" class=\"headerlink\" title=\"Widget 与 Material关系\"></a>Widget 与 Material关系</h3><h2 id=\"处理手势\"><a href=\"#处理手势\" class=\"headerlink\" title=\"处理手势\"></a>处理手势</h2><h2 id=\"根据用户输入改变widget\"><a href=\"#根据用户输入改变widget\" class=\"headerlink\" title=\"根据用户输入改变widget\"></a>根据用户输入改变widget</h2><h2 id=\"响应widget生命周期事件\"><a href=\"#响应widget生命周期事件\" class=\"headerlink\" title=\"响应widget生命周期事件\"></a>响应widget生命周期事件</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础-Widget\"><a href=\"#基础-Widget\" class=\"headerlink\" title=\"基础 Widget\"></a>基础 Widget</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> widget概述-布局模型</li>\n</ul>\n<h2 id=\"Material-组件\"><a href=\"#Material-组件\" class=\"headerlink\" title=\"Material 组件\"></a>Material 组件</h2><h3 id=\"Widget-与-Material关系\"><a href=\"#Widget-与-Material关系\" class=\"headerlink\" title=\"Widget 与 Material关系\"></a>Widget 与 Material关系</h3><h2 id=\"处理手势\"><a href=\"#处理手势\" class=\"headerlink\" title=\"处理手势\"></a>处理手势</h2><h2 id=\"根据用户输入改变widget\"><a href=\"#根据用户输入改变widget\" class=\"headerlink\" title=\"根据用户输入改变widget\"></a>根据用户输入改变widget</h2><h2 id=\"响应widget生命周期事件\"><a href=\"#响应widget生命周期事件\" class=\"headerlink\" title=\"响应widget生命周期事件\"></a>响应widget生命周期事件</h2>"},{"title":"admin_manage_jie","date":"2018-09-08T14:27:30.000Z","_content":"\n## admin_manage_jie\n\ncopy from Material Dashboard React\n\n\n\n\n\n","source":"_posts/frontend/learn_admin_manage/admin_manage_jie_learn.md","raw":"---\ntitle: admin_manage_jie\ndate: 2018-09-08 22:27:30\ncategories:\n- frontend\ntags:\n- react\n- admin manage\n---\n\n## admin_manage_jie\n\ncopy from Material Dashboard React\n\n\n\n\n\n","slug":"frontend/learn_admin_manage/admin_manage_jie_learn","published":1,"updated":"2018-09-08T14:29:56.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgvz002s8seo430jitbq","content":"<h2 id=\"admin-manage-jie\"><a href=\"#admin-manage-jie\" class=\"headerlink\" title=\"admin_manage_jie\"></a>admin_manage_jie</h2><p>copy from Material Dashboard React</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"admin-manage-jie\"><a href=\"#admin-manage-jie\" class=\"headerlink\" title=\"admin_manage_jie\"></a>admin_manage_jie</h2><p>copy from Material Dashboard React</p>\n"},{"_content":"# vscode snippet\n\n**参考:**\n\nhttps://my.oschina.net/imsole/blog/1794999\n\nhttps://code.visualstudio.com/docs/editor/userdefinedsnippets\n\n\n\n## go.json\n\n```json\n// go\n{\n  // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and \n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \n\t// same ids are connected.\n\t// Example:\n\t// \"Print to console\": {\n\t// \t\"prefix\": \"log\",\n\t// \t\"body\": [\n\t// \t\t\"console.log('$1');\",\n\t// \t\t\"$2\"\n\t// \t],\n\t// \t\"description\": \"Log output to console\"\n  // }\n  \"log_info\": {\n        \"prefix\": \"log_info\",\n        \"body\": \"${1:log}.Infof(ctx, \\\"[@%s] $3\\\", ${2:fn})\",\n        \"description\": \"log.Infof()\"\n    },\n    \"log_err\": {\n        \"prefix\": \"log_err\",\n        \"body\": \"${1:log}.Errorf(ctx, \\\"[@%s] $3${4:err}=%v\\\", ${2:fn}, $4)\",\n        \"description\": \"log Errorf\"\n    },\n    \"log_warn\": {\n        \"prefix\": \"log_warn\",\n        \"body\": \"${1:log}.Warningf(ctx, \\\"[@%s] $3\\\", ${2:fn})\",\n        \"description\": \"log Warningf\"\n    },\n    \"iferr_log\": {\n        \"prefix\": \"iferr_log\",\n        \"body\": [\n            \"if ${1:err} != nil {\",\n            \"    ${2:log}.Errorf(ctx, \\\"[@%s] $4$1=%v\\\", ${3:fn}, $1)\",\n            \"}\"\n        ]\n    },\n}\n```\n\n","source":"_posts/ide/vscode/vscode-snippet.md","raw":"# vscode snippet\n\n**参考:**\n\nhttps://my.oschina.net/imsole/blog/1794999\n\nhttps://code.visualstudio.com/docs/editor/userdefinedsnippets\n\n\n\n## go.json\n\n```json\n// go\n{\n  // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and \n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \n\t// same ids are connected.\n\t// Example:\n\t// \"Print to console\": {\n\t// \t\"prefix\": \"log\",\n\t// \t\"body\": [\n\t// \t\t\"console.log('$1');\",\n\t// \t\t\"$2\"\n\t// \t],\n\t// \t\"description\": \"Log output to console\"\n  // }\n  \"log_info\": {\n        \"prefix\": \"log_info\",\n        \"body\": \"${1:log}.Infof(ctx, \\\"[@%s] $3\\\", ${2:fn})\",\n        \"description\": \"log.Infof()\"\n    },\n    \"log_err\": {\n        \"prefix\": \"log_err\",\n        \"body\": \"${1:log}.Errorf(ctx, \\\"[@%s] $3${4:err}=%v\\\", ${2:fn}, $4)\",\n        \"description\": \"log Errorf\"\n    },\n    \"log_warn\": {\n        \"prefix\": \"log_warn\",\n        \"body\": \"${1:log}.Warningf(ctx, \\\"[@%s] $3\\\", ${2:fn})\",\n        \"description\": \"log Warningf\"\n    },\n    \"iferr_log\": {\n        \"prefix\": \"iferr_log\",\n        \"body\": [\n            \"if ${1:err} != nil {\",\n            \"    ${2:log}.Errorf(ctx, \\\"[@%s] $4$1=%v\\\", ${3:fn}, $1)\",\n            \"}\"\n        ]\n    },\n}\n```\n\n","slug":"ide/vscode/vscode-snippet","published":1,"date":"2019-07-12T04:10:34.779Z","updated":"2019-07-12T05:08:18.491Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgw1002t8seoal8mc12d","content":"<h1 id=\"vscode-snippet\"><a href=\"#vscode-snippet\" class=\"headerlink\" title=\"vscode snippet\"></a>vscode snippet</h1><p><strong>参考:</strong></p>\n<p><a href=\"https://my.oschina.net/imsole/blog/1794999\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/imsole/blog/1794999</a></p>\n<p><a href=\"https://code.visualstudio.com/docs/editor/userdefinedsnippets\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/docs/editor/userdefinedsnippets</a></p>\n<h2 id=\"go-json\"><a href=\"#go-json\" class=\"headerlink\" title=\"go.json\"></a>go.json</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// go</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and </span><br><span class=\"line\">\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span><br><span class=\"line\">\t// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span><br><span class=\"line\">\t// same ids are connected.</span><br><span class=\"line\">\t// Example:</span><br><span class=\"line\">\t// \"Print to console\": &#123;</span><br><span class=\"line\">\t// \t\"prefix\": \"log\",</span><br><span class=\"line\">\t// \t\"body\": [</span><br><span class=\"line\">\t// \t\t\"console.log('$1');\",</span><br><span class=\"line\">\t// \t\t\"$2\"</span><br><span class=\"line\">\t// \t],</span><br><span class=\"line\">\t// \t\"description\": \"Log output to console\"</span><br><span class=\"line\">  // &#125;</span><br><span class=\"line\">  \"log_info\": &#123;</span><br><span class=\"line\">        \"prefix\": \"log_info\",</span><br><span class=\"line\">        \"body\": \"$&#123;1:log&#125;.Infof(ctx, \\\"[@%s] $3\\\", $&#123;2:fn&#125;)\",</span><br><span class=\"line\">        \"description\": \"log.Infof()\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"log_err\": &#123;</span><br><span class=\"line\">        \"prefix\": \"log_err\",</span><br><span class=\"line\">        \"body\": \"$&#123;1:log&#125;.Errorf(ctx, \\\"[@%s] $3$&#123;4:err&#125;=%v\\\", $&#123;2:fn&#125;, $4)\",</span><br><span class=\"line\">        \"description\": \"log Errorf\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"log_warn\": &#123;</span><br><span class=\"line\">        \"prefix\": \"log_warn\",</span><br><span class=\"line\">        \"body\": \"$&#123;1:log&#125;.Warningf(ctx, \\\"[@%s] $3\\\", $&#123;2:fn&#125;)\",</span><br><span class=\"line\">        \"description\": \"log Warningf\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"iferr_log\": &#123;</span><br><span class=\"line\">        \"prefix\": \"iferr_log\",</span><br><span class=\"line\">        \"body\": [</span><br><span class=\"line\">            \"if $&#123;1:err&#125; != nil &#123;\",</span><br><span class=\"line\">            \"    $&#123;2:log&#125;.Errorf(ctx, \\\"[@%s] $4$1=%v\\\", $&#123;3:fn&#125;, $1)\",</span><br><span class=\"line\">            <span class=\"string\">\"&#125;\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vscode-snippet\"><a href=\"#vscode-snippet\" class=\"headerlink\" title=\"vscode snippet\"></a>vscode snippet</h1><p><strong>参考:</strong></p>\n<p><a href=\"https://my.oschina.net/imsole/blog/1794999\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/imsole/blog/1794999</a></p>\n<p><a href=\"https://code.visualstudio.com/docs/editor/userdefinedsnippets\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/docs/editor/userdefinedsnippets</a></p>\n<h2 id=\"go-json\"><a href=\"#go-json\" class=\"headerlink\" title=\"go.json\"></a>go.json</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// go</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and </span><br><span class=\"line\">\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span><br><span class=\"line\">\t// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span><br><span class=\"line\">\t// same ids are connected.</span><br><span class=\"line\">\t// Example:</span><br><span class=\"line\">\t// \"Print to console\": &#123;</span><br><span class=\"line\">\t// \t\"prefix\": \"log\",</span><br><span class=\"line\">\t// \t\"body\": [</span><br><span class=\"line\">\t// \t\t\"console.log('$1');\",</span><br><span class=\"line\">\t// \t\t\"$2\"</span><br><span class=\"line\">\t// \t],</span><br><span class=\"line\">\t// \t\"description\": \"Log output to console\"</span><br><span class=\"line\">  // &#125;</span><br><span class=\"line\">  \"log_info\": &#123;</span><br><span class=\"line\">        \"prefix\": \"log_info\",</span><br><span class=\"line\">        \"body\": \"$&#123;1:log&#125;.Infof(ctx, \\\"[@%s] $3\\\", $&#123;2:fn&#125;)\",</span><br><span class=\"line\">        \"description\": \"log.Infof()\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"log_err\": &#123;</span><br><span class=\"line\">        \"prefix\": \"log_err\",</span><br><span class=\"line\">        \"body\": \"$&#123;1:log&#125;.Errorf(ctx, \\\"[@%s] $3$&#123;4:err&#125;=%v\\\", $&#123;2:fn&#125;, $4)\",</span><br><span class=\"line\">        \"description\": \"log Errorf\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"log_warn\": &#123;</span><br><span class=\"line\">        \"prefix\": \"log_warn\",</span><br><span class=\"line\">        \"body\": \"$&#123;1:log&#125;.Warningf(ctx, \\\"[@%s] $3\\\", $&#123;2:fn&#125;)\",</span><br><span class=\"line\">        \"description\": \"log Warningf\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"iferr_log\": &#123;</span><br><span class=\"line\">        \"prefix\": \"iferr_log\",</span><br><span class=\"line\">        \"body\": [</span><br><span class=\"line\">            \"if $&#123;1:err&#125; != nil &#123;\",</span><br><span class=\"line\">            \"    $&#123;2:log&#125;.Errorf(ctx, \\\"[@%s] $4$1=%v\\\", $&#123;3:fn&#125;, $1)\",</span><br><span class=\"line\">            <span class=\"string\">\"&#125;\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"# cron source code read\n\ngithub: https://github.com/jakecoffman/cron\n\n## 概念\n\n**Cron**\n\n​    控制板, 保存了所有的任务,有停止,添加,移除,snapshot 等操作通道.\n\n**Entry**\n\n​    任务项: 包含了一个 schedule 和一个需要执行的 func\n\n**Schedule**\n\n​\t日程表: 描述了工作周期\n\n## 使用示例\n\n步骤:\n\n> 1. new 控制板\n> 2. 添加任务项\n> 3. 启动任务\n\n```go\n// 1. new 控制板\nc := cron.New()\n// 2. 添加任务项\nc.AddFunc(\"0 5 * * * *\",  func() { fmt.Println(\"Every 5 minutes\") }, \"Often\")\nc.AddFunc(\"@hourly\",      func() { fmt.Println(\"Every hour\") }, \"Frequent\")\nc.AddFunc(\"@every 1h30m\", func() { fmt.Println(\"Every hour thirty\") }, \"Less Frequent\")\n// 3. 启动任务\nc.Start()\n..\n// Funcs are invoked in their own goroutine, asynchronously.\n...\n// Funcs may also be added to a running Cron\nc.AddFunc(\"@daily\", func() { fmt.Println(\"Every day\") }, \"My Job\")\n..\n// Inspect the cron job entries' next and previous run times.\ninspect(c.Entries())\n..\n// Remove an entry from the cron by name.\nc.RemoveJob(\"My Job\")\n..\nc.Stop()  // Stop the scheduler (does not stop any jobs already running).\n```\n\n\n\n## 详细解析\n\n### newCron\n\n```go\nfunc New() *Cron {\n\treturn &Cron{\n\t\tentries:  nil,\n\t\tadd:      make(chan *Entry),\n\t\tremove:   make(chan string),\n\t\tstop:     make(chan struct{}),\n\t\tsnapshot: make(chan entries),\n\t\trunning:  false,\n\t}\n}\n```\n\n\n\n### AddFunc\n\nAddFunc -> AddJob\n\n```go\nfunc (c *Cron) AddJob(spec string, cmd Job, name string) {\n\tc.Schedule(Parse(spec), cmd, name)\n}\n```\n\n`Parse` 功能: 解析 `spec` 生成 `schedule` ,**生成的`schedule`很有意思哦!!**\n\n`Schedule`主要职能:\n\n> 1. new Entry\n> 2. 添加 entry 到 cron 的 entries 中\n\n### Start\n\ngo 程启动\n\n```go\nfunc (c *Cron) Start() {\n\tc.running = true\n\tgo c.run()\n}\n\n// for 中 select 了解下\nfunc (c *Cron) run() {\n\t// Figure out the next activation times for each entry.\n\tnow := time.Now().Local()\n\tfor _, entry := range c.entries {\n\t\tentry.Next = entry.Schedule.Next(now)\n\t}\n\n\tfor {\n\t\t// Determine the next entry to run.\n\t\tsort.Sort(byTime(c.entries))\n\n\t\tvar effective time.Time\n\t\tif len(c.entries) == 0 || c.entries[0].Next.IsZero() {\n\t\t\t// If there are no entries yet, just sleep - it still handles new entries\n\t\t\t// and stop requests.\n\t\t\teffective = now.AddDate(10, 0, 0)\n\t\t} else {\n\t\t\teffective = c.entries[0].Next\n\t\t}\n\n\t\tselect {\n\t\tcase now = <-time.After(effective.Sub(now)):\n\t\t\t// Run every entry whose next time was this effective time.\n\t\t\tfor _, e := range c.entries {\n\t\t\t\tif e.Next != effective {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tgo e.Job.Run()\n\t\t\t\te.Prev = e.Next\n\t\t\t\te.Next = e.Schedule.Next(effective)\n\t\t\t}\n\t\t\tcontinue\n\n\t\tcase newEntry := <-c.add:\n\t\t\ti := c.entries.pos(newEntry.Name)\n\t\t\tif i != -1 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tc.entries = append(c.entries, newEntry)\n\t\t\tnewEntry.Next = newEntry.Schedule.Next(time.Now().Local())\n\n\t\tcase name := <-c.remove:\n\t\t\ti := c.entries.pos(name)\n\n\t\t\tif i == -1 {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tc.entries = c.entries[:i+copy(c.entries[i:], c.entries[i+1:])]\n\n\t\tcase <-c.snapshot:\n\t\t\tc.snapshot <- c.entrySnapshot()\n\n\t\tcase <-c.stop:\n\t\t\treturn\n\t\t}\n\n\t\t// 'now' should be updated after newEntry and snapshot cases.\n\t\tnow = time.Now().Local()\n\t}\n}\n```\n\n\n\n## Next\n\n位比较来筛选出下一个执行的时间点, 了解下?\n\n","source":"_posts/backend/go/cron/cron_source_code_read.md","raw":"# cron source code read\n\ngithub: https://github.com/jakecoffman/cron\n\n## 概念\n\n**Cron**\n\n​    控制板, 保存了所有的任务,有停止,添加,移除,snapshot 等操作通道.\n\n**Entry**\n\n​    任务项: 包含了一个 schedule 和一个需要执行的 func\n\n**Schedule**\n\n​\t日程表: 描述了工作周期\n\n## 使用示例\n\n步骤:\n\n> 1. new 控制板\n> 2. 添加任务项\n> 3. 启动任务\n\n```go\n// 1. new 控制板\nc := cron.New()\n// 2. 添加任务项\nc.AddFunc(\"0 5 * * * *\",  func() { fmt.Println(\"Every 5 minutes\") }, \"Often\")\nc.AddFunc(\"@hourly\",      func() { fmt.Println(\"Every hour\") }, \"Frequent\")\nc.AddFunc(\"@every 1h30m\", func() { fmt.Println(\"Every hour thirty\") }, \"Less Frequent\")\n// 3. 启动任务\nc.Start()\n..\n// Funcs are invoked in their own goroutine, asynchronously.\n...\n// Funcs may also be added to a running Cron\nc.AddFunc(\"@daily\", func() { fmt.Println(\"Every day\") }, \"My Job\")\n..\n// Inspect the cron job entries' next and previous run times.\ninspect(c.Entries())\n..\n// Remove an entry from the cron by name.\nc.RemoveJob(\"My Job\")\n..\nc.Stop()  // Stop the scheduler (does not stop any jobs already running).\n```\n\n\n\n## 详细解析\n\n### newCron\n\n```go\nfunc New() *Cron {\n\treturn &Cron{\n\t\tentries:  nil,\n\t\tadd:      make(chan *Entry),\n\t\tremove:   make(chan string),\n\t\tstop:     make(chan struct{}),\n\t\tsnapshot: make(chan entries),\n\t\trunning:  false,\n\t}\n}\n```\n\n\n\n### AddFunc\n\nAddFunc -> AddJob\n\n```go\nfunc (c *Cron) AddJob(spec string, cmd Job, name string) {\n\tc.Schedule(Parse(spec), cmd, name)\n}\n```\n\n`Parse` 功能: 解析 `spec` 生成 `schedule` ,**生成的`schedule`很有意思哦!!**\n\n`Schedule`主要职能:\n\n> 1. new Entry\n> 2. 添加 entry 到 cron 的 entries 中\n\n### Start\n\ngo 程启动\n\n```go\nfunc (c *Cron) Start() {\n\tc.running = true\n\tgo c.run()\n}\n\n// for 中 select 了解下\nfunc (c *Cron) run() {\n\t// Figure out the next activation times for each entry.\n\tnow := time.Now().Local()\n\tfor _, entry := range c.entries {\n\t\tentry.Next = entry.Schedule.Next(now)\n\t}\n\n\tfor {\n\t\t// Determine the next entry to run.\n\t\tsort.Sort(byTime(c.entries))\n\n\t\tvar effective time.Time\n\t\tif len(c.entries) == 0 || c.entries[0].Next.IsZero() {\n\t\t\t// If there are no entries yet, just sleep - it still handles new entries\n\t\t\t// and stop requests.\n\t\t\teffective = now.AddDate(10, 0, 0)\n\t\t} else {\n\t\t\teffective = c.entries[0].Next\n\t\t}\n\n\t\tselect {\n\t\tcase now = <-time.After(effective.Sub(now)):\n\t\t\t// Run every entry whose next time was this effective time.\n\t\t\tfor _, e := range c.entries {\n\t\t\t\tif e.Next != effective {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tgo e.Job.Run()\n\t\t\t\te.Prev = e.Next\n\t\t\t\te.Next = e.Schedule.Next(effective)\n\t\t\t}\n\t\t\tcontinue\n\n\t\tcase newEntry := <-c.add:\n\t\t\ti := c.entries.pos(newEntry.Name)\n\t\t\tif i != -1 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tc.entries = append(c.entries, newEntry)\n\t\t\tnewEntry.Next = newEntry.Schedule.Next(time.Now().Local())\n\n\t\tcase name := <-c.remove:\n\t\t\ti := c.entries.pos(name)\n\n\t\t\tif i == -1 {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tc.entries = c.entries[:i+copy(c.entries[i:], c.entries[i+1:])]\n\n\t\tcase <-c.snapshot:\n\t\t\tc.snapshot <- c.entrySnapshot()\n\n\t\tcase <-c.stop:\n\t\t\treturn\n\t\t}\n\n\t\t// 'now' should be updated after newEntry and snapshot cases.\n\t\tnow = time.Now().Local()\n\t}\n}\n```\n\n\n\n## Next\n\n位比较来筛选出下一个执行的时间点, 了解下?\n\n","slug":"backend/go/cron/cron_source_code_read","published":1,"date":"2018-11-29T02:48:10.074Z","updated":"2018-11-29T08:07:32.353Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgxb003u8seoq14e4x9b","content":"<h1 id=\"cron-source-code-read\"><a href=\"#cron-source-code-read\" class=\"headerlink\" title=\"cron source code read\"></a>cron source code read</h1><p>github: <a href=\"https://github.com/jakecoffman/cron\" target=\"_blank\" rel=\"noopener\">https://github.com/jakecoffman/cron</a></p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><strong>Cron</strong></p>\n<p>​    控制板, 保存了所有的任务,有停止,添加,移除,snapshot 等操作通道.</p>\n<p><strong>Entry</strong></p>\n<p>​    任务项: 包含了一个 schedule 和一个需要执行的 func</p>\n<p><strong>Schedule</strong></p>\n<p>​    日程表: 描述了工作周期</p>\n<h2 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h2><p>步骤:</p>\n<blockquote>\n<ol>\n<li>new 控制板</li>\n<li>添加任务项</li>\n<li>启动任务</li>\n</ol>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. new 控制板</span></span><br><span class=\"line\">c := cron.New()</span><br><span class=\"line\"><span class=\"comment\">// 2. 添加任务项</span></span><br><span class=\"line\">c.AddFunc(<span class=\"string\">\"0 5 * * * *\"</span>,  <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">\"Every 5 minutes\"</span>) &#125;, <span class=\"string\">\"Often\"</span>)</span><br><span class=\"line\">c.AddFunc(<span class=\"string\">\"@hourly\"</span>,      <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">\"Every hour\"</span>) &#125;, <span class=\"string\">\"Frequent\"</span>)</span><br><span class=\"line\">c.AddFunc(<span class=\"string\">\"@every 1h30m\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">\"Every hour thirty\"</span>) &#125;, <span class=\"string\">\"Less Frequent\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 3. 启动任务</span></span><br><span class=\"line\">c.Start()</span><br><span class=\"line\">..</span><br><span class=\"line\"><span class=\"comment\">// Funcs are invoked in their own goroutine, asynchronously.</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// Funcs may also be added to a running Cron</span></span><br><span class=\"line\">c.AddFunc(<span class=\"string\">\"@daily\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">\"Every day\"</span>) &#125;, <span class=\"string\">\"My Job\"</span>)</span><br><span class=\"line\">..</span><br><span class=\"line\"><span class=\"comment\">// Inspect the cron job entries' next and previous run times.</span></span><br><span class=\"line\">inspect(c.Entries())</span><br><span class=\"line\">..</span><br><span class=\"line\"><span class=\"comment\">// Remove an entry from the cron by name.</span></span><br><span class=\"line\">c.RemoveJob(<span class=\"string\">\"My Job\"</span>)</span><br><span class=\"line\">..</span><br><span class=\"line\">c.Stop()  <span class=\"comment\">// Stop the scheduler (does not stop any jobs already running).</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"详细解析\"><a href=\"#详细解析\" class=\"headerlink\" title=\"详细解析\"></a>详细解析</h2><h3 id=\"newCron\"><a href=\"#newCron\" class=\"headerlink\" title=\"newCron\"></a>newCron</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">New</span><span class=\"params\">()</span> *<span class=\"title\">Cron</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;Cron&#123;</span><br><span class=\"line\">\t\tentries:  <span class=\"literal\">nil</span>,</span><br><span class=\"line\">\t\tadd:      <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *Entry),</span><br><span class=\"line\">\t\tremove:   <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>),</span><br><span class=\"line\">\t\tstop:     <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;),</span><br><span class=\"line\">\t\tsnapshot: <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> entries),</span><br><span class=\"line\">\t\trunning:  <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"AddFunc\"><a href=\"#AddFunc\" class=\"headerlink\" title=\"AddFunc\"></a>AddFunc</h3><p>AddFunc -&gt; AddJob</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Cron)</span> <span class=\"title\">AddJob</span><span class=\"params\">(spec <span class=\"keyword\">string</span>, cmd Job, name <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tc.Schedule(Parse(spec), cmd, name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Parse</code> 功能: 解析 <code>spec</code> 生成 <code>schedule</code> ,<strong>生成的<code>schedule</code>很有意思哦!!</strong></p>\n<p><code>Schedule</code>主要职能:</p>\n<blockquote>\n<ol>\n<li>new Entry</li>\n<li>添加 entry 到 cron 的 entries 中</li>\n</ol>\n</blockquote>\n<h3 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h3><p>go 程启动</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Cron)</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc.running = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> c.run()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for 中 select 了解下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Cron)</span> <span class=\"title\">run</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Figure out the next activation times for each entry.</span></span><br><span class=\"line\">\tnow := time.Now().Local()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, entry := <span class=\"keyword\">range</span> c.entries &#123;</span><br><span class=\"line\">\t\tentry.Next = entry.Schedule.Next(now)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Determine the next entry to run.</span></span><br><span class=\"line\">\t\tsort.Sort(byTime(c.entries))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> effective time.Time</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(c.entries) == <span class=\"number\">0</span> || c.entries[<span class=\"number\">0</span>].Next.IsZero() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// If there are no entries yet, just sleep - it still handles new entries</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// and stop requests.</span></span><br><span class=\"line\">\t\t\teffective = now.AddDate(<span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\teffective = c.entries[<span class=\"number\">0</span>].Next</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> now = &lt;-time.After(effective.Sub(now)):</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Run every entry whose next time was this effective time.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _, e := <span class=\"keyword\">range</span> c.entries &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> e.Next != effective &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">go</span> e.Job.Run()</span><br><span class=\"line\">\t\t\t\te.Prev = e.Next</span><br><span class=\"line\">\t\t\t\te.Next = e.Schedule.Next(effective)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> newEntry := &lt;-c.add:</span><br><span class=\"line\">\t\t\ti := c.entries.pos(newEntry.Name)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i != <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tc.entries = <span class=\"built_in\">append</span>(c.entries, newEntry)</span><br><span class=\"line\">\t\t\tnewEntry.Next = newEntry.Schedule.Next(time.Now().Local())</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> name := &lt;-c.remove:</span><br><span class=\"line\">\t\t\ti := c.entries.pos(name)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tc.entries = c.entries[:i+<span class=\"built_in\">copy</span>(c.entries[i:], c.entries[i+<span class=\"number\">1</span>:])]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-c.snapshot:</span><br><span class=\"line\">\t\t\tc.snapshot &lt;- c.entrySnapshot()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-c.stop:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 'now' should be updated after newEntry and snapshot cases.</span></span><br><span class=\"line\">\t\tnow = time.Now().Local()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Next\"><a href=\"#Next\" class=\"headerlink\" title=\"Next\"></a>Next</h2><p>位比较来筛选出下一个执行的时间点, 了解下?</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"cron-source-code-read\"><a href=\"#cron-source-code-read\" class=\"headerlink\" title=\"cron source code read\"></a>cron source code read</h1><p>github: <a href=\"https://github.com/jakecoffman/cron\" target=\"_blank\" rel=\"noopener\">https://github.com/jakecoffman/cron</a></p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><strong>Cron</strong></p>\n<p>​    控制板, 保存了所有的任务,有停止,添加,移除,snapshot 等操作通道.</p>\n<p><strong>Entry</strong></p>\n<p>​    任务项: 包含了一个 schedule 和一个需要执行的 func</p>\n<p><strong>Schedule</strong></p>\n<p>​    日程表: 描述了工作周期</p>\n<h2 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h2><p>步骤:</p>\n<blockquote>\n<ol>\n<li>new 控制板</li>\n<li>添加任务项</li>\n<li>启动任务</li>\n</ol>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. new 控制板</span></span><br><span class=\"line\">c := cron.New()</span><br><span class=\"line\"><span class=\"comment\">// 2. 添加任务项</span></span><br><span class=\"line\">c.AddFunc(<span class=\"string\">\"0 5 * * * *\"</span>,  <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">\"Every 5 minutes\"</span>) &#125;, <span class=\"string\">\"Often\"</span>)</span><br><span class=\"line\">c.AddFunc(<span class=\"string\">\"@hourly\"</span>,      <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">\"Every hour\"</span>) &#125;, <span class=\"string\">\"Frequent\"</span>)</span><br><span class=\"line\">c.AddFunc(<span class=\"string\">\"@every 1h30m\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">\"Every hour thirty\"</span>) &#125;, <span class=\"string\">\"Less Frequent\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 3. 启动任务</span></span><br><span class=\"line\">c.Start()</span><br><span class=\"line\">..</span><br><span class=\"line\"><span class=\"comment\">// Funcs are invoked in their own goroutine, asynchronously.</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// Funcs may also be added to a running Cron</span></span><br><span class=\"line\">c.AddFunc(<span class=\"string\">\"@daily\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">\"Every day\"</span>) &#125;, <span class=\"string\">\"My Job\"</span>)</span><br><span class=\"line\">..</span><br><span class=\"line\"><span class=\"comment\">// Inspect the cron job entries' next and previous run times.</span></span><br><span class=\"line\">inspect(c.Entries())</span><br><span class=\"line\">..</span><br><span class=\"line\"><span class=\"comment\">// Remove an entry from the cron by name.</span></span><br><span class=\"line\">c.RemoveJob(<span class=\"string\">\"My Job\"</span>)</span><br><span class=\"line\">..</span><br><span class=\"line\">c.Stop()  <span class=\"comment\">// Stop the scheduler (does not stop any jobs already running).</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"详细解析\"><a href=\"#详细解析\" class=\"headerlink\" title=\"详细解析\"></a>详细解析</h2><h3 id=\"newCron\"><a href=\"#newCron\" class=\"headerlink\" title=\"newCron\"></a>newCron</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">New</span><span class=\"params\">()</span> *<span class=\"title\">Cron</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;Cron&#123;</span><br><span class=\"line\">\t\tentries:  <span class=\"literal\">nil</span>,</span><br><span class=\"line\">\t\tadd:      <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *Entry),</span><br><span class=\"line\">\t\tremove:   <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>),</span><br><span class=\"line\">\t\tstop:     <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;),</span><br><span class=\"line\">\t\tsnapshot: <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> entries),</span><br><span class=\"line\">\t\trunning:  <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"AddFunc\"><a href=\"#AddFunc\" class=\"headerlink\" title=\"AddFunc\"></a>AddFunc</h3><p>AddFunc -&gt; AddJob</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Cron)</span> <span class=\"title\">AddJob</span><span class=\"params\">(spec <span class=\"keyword\">string</span>, cmd Job, name <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tc.Schedule(Parse(spec), cmd, name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Parse</code> 功能: 解析 <code>spec</code> 生成 <code>schedule</code> ,<strong>生成的<code>schedule</code>很有意思哦!!</strong></p>\n<p><code>Schedule</code>主要职能:</p>\n<blockquote>\n<ol>\n<li>new Entry</li>\n<li>添加 entry 到 cron 的 entries 中</li>\n</ol>\n</blockquote>\n<h3 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h3><p>go 程启动</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Cron)</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc.running = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> c.run()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for 中 select 了解下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Cron)</span> <span class=\"title\">run</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Figure out the next activation times for each entry.</span></span><br><span class=\"line\">\tnow := time.Now().Local()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, entry := <span class=\"keyword\">range</span> c.entries &#123;</span><br><span class=\"line\">\t\tentry.Next = entry.Schedule.Next(now)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Determine the next entry to run.</span></span><br><span class=\"line\">\t\tsort.Sort(byTime(c.entries))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> effective time.Time</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(c.entries) == <span class=\"number\">0</span> || c.entries[<span class=\"number\">0</span>].Next.IsZero() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// If there are no entries yet, just sleep - it still handles new entries</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// and stop requests.</span></span><br><span class=\"line\">\t\t\teffective = now.AddDate(<span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\teffective = c.entries[<span class=\"number\">0</span>].Next</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> now = &lt;-time.After(effective.Sub(now)):</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Run every entry whose next time was this effective time.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _, e := <span class=\"keyword\">range</span> c.entries &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> e.Next != effective &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">go</span> e.Job.Run()</span><br><span class=\"line\">\t\t\t\te.Prev = e.Next</span><br><span class=\"line\">\t\t\t\te.Next = e.Schedule.Next(effective)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> newEntry := &lt;-c.add:</span><br><span class=\"line\">\t\t\ti := c.entries.pos(newEntry.Name)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i != <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tc.entries = <span class=\"built_in\">append</span>(c.entries, newEntry)</span><br><span class=\"line\">\t\t\tnewEntry.Next = newEntry.Schedule.Next(time.Now().Local())</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> name := &lt;-c.remove:</span><br><span class=\"line\">\t\t\ti := c.entries.pos(name)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tc.entries = c.entries[:i+<span class=\"built_in\">copy</span>(c.entries[i:], c.entries[i+<span class=\"number\">1</span>:])]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-c.snapshot:</span><br><span class=\"line\">\t\t\tc.snapshot &lt;- c.entrySnapshot()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-c.stop:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 'now' should be updated after newEntry and snapshot cases.</span></span><br><span class=\"line\">\t\tnow = time.Now().Local()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Next\"><a href=\"#Next\" class=\"headerlink\" title=\"Next\"></a>Next</h2><p>位比较来筛选出下一个执行的时间点, 了解下?</p>\n"},{"title":"gin 实现原理","date":"2019-06-04T06:52:00.000Z","_content":"\n# 待写TODO(jx)\n\n","source":"_posts/backend/go/gin/gin实现原理.md","raw":"---\ntitle: gin 实现原理\ndate: 2019-06-04 14:52:00\ncategories:\n- backend\ntags:\n- go\n- gin\n---\n\n# 待写TODO(jx)\n\n","slug":"backend/go/gin/gin实现原理","published":1,"updated":"2019-06-04T06:53:37.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgxd003v8seofz9i4wbc","content":"<h1 id=\"待写TODO-jx\"><a href=\"#待写TODO-jx\" class=\"headerlink\" title=\"待写TODO(jx)\"></a>待写TODO(jx)</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"待写TODO-jx\"><a href=\"#待写TODO-jx\" class=\"headerlink\" title=\"待写TODO(jx)\"></a>待写TODO(jx)</h1>"},{"_content":"# Learn Echo\n\n\n\n## **Echo 目的**\n\n> High performance, extensible, minimalist Go web framework\n> \n> ### Feature Overview\n> Optimized HTTP router which smartly prioritize routes\n> Build robust and scalable RESTful APIs\n> Group APIs\n> Extensible middleware framework\n> Define middleware at root, group or route level\n> Data binding for JSON, XML and form payload\n> Handy functions to send variety of HTTP responses\n> Centralized HTTP error handling\n> Template rendering with any template engine\n> Define your format for the logger\n> Highly customizable\n> Automatic TLS via Let’s Encrypt\n> HTTP/2 support\n\n\n\n\n","source":"_posts/backend/go/echo/echo_learn.md","raw":"# Learn Echo\n\n\n\n## **Echo 目的**\n\n> High performance, extensible, minimalist Go web framework\n> \n> ### Feature Overview\n> Optimized HTTP router which smartly prioritize routes\n> Build robust and scalable RESTful APIs\n> Group APIs\n> Extensible middleware framework\n> Define middleware at root, group or route level\n> Data binding for JSON, XML and form payload\n> Handy functions to send variety of HTTP responses\n> Centralized HTTP error handling\n> Template rendering with any template engine\n> Define your format for the logger\n> Highly customizable\n> Automatic TLS via Let’s Encrypt\n> HTTP/2 support\n\n\n\n\n","slug":"backend/go/echo/echo_learn","published":1,"date":"2019-04-27T13:55:41.966Z","updated":"2019-04-27T13:59:37.357Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgxg003w8seozcwun6al","content":"<h1 id=\"Learn-Echo\"><a href=\"#Learn-Echo\" class=\"headerlink\" title=\"Learn Echo\"></a>Learn Echo</h1><h2 id=\"Echo-目的\"><a href=\"#Echo-目的\" class=\"headerlink\" title=\"Echo 目的\"></a><strong>Echo 目的</strong></h2><blockquote>\n<p>High performance, extensible, minimalist Go web framework</p>\n<h3 id=\"Feature-Overview\"><a href=\"#Feature-Overview\" class=\"headerlink\" title=\"Feature Overview\"></a>Feature Overview</h3><p>Optimized HTTP router which smartly prioritize routes<br>Build robust and scalable RESTful APIs<br>Group APIs<br>Extensible middleware framework<br>Define middleware at root, group or route level<br>Data binding for JSON, XML and form payload<br>Handy functions to send variety of HTTP responses<br>Centralized HTTP error handling<br>Template rendering with any template engine<br>Define your format for the logger<br>Highly customizable<br>Automatic TLS via Let’s Encrypt<br>HTTP/2 support</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Learn-Echo\"><a href=\"#Learn-Echo\" class=\"headerlink\" title=\"Learn Echo\"></a>Learn Echo</h1><h2 id=\"Echo-目的\"><a href=\"#Echo-目的\" class=\"headerlink\" title=\"Echo 目的\"></a><strong>Echo 目的</strong></h2><blockquote>\n<p>High performance, extensible, minimalist Go web framework</p>\n<h3 id=\"Feature-Overview\"><a href=\"#Feature-Overview\" class=\"headerlink\" title=\"Feature Overview\"></a>Feature Overview</h3><p>Optimized HTTP router which smartly prioritize routes<br>Build robust and scalable RESTful APIs<br>Group APIs<br>Extensible middleware framework<br>Define middleware at root, group or route level<br>Data binding for JSON, XML and form payload<br>Handy functions to send variety of HTTP responses<br>Centralized HTTP error handling<br>Template rendering with any template engine<br>Define your format for the logger<br>Highly customizable<br>Automatic TLS via Let’s Encrypt<br>HTTP/2 support</p>\n</blockquote>\n"},{"title":"gin learn start","date":"2018-08-29T12:12:00.000Z","_content":"\n## learn go gin\n\n**Params:**\n1. Get req params\n> 1. 如何启动一个服务器.\n> 2. url 地址中的参数获取.\n> 3. Get 参数的获取.\n\n2. post req params\n> 1. 如何获取 POST 请求的参数.\n\n3. 结构化获取参数\n> 2. 如何定义\n\n**return:**\n1. string\n2. json\n\n**拦截器:**\n1. 如何定义和使用拦截器\n\n\n## Params\n\n### 1. 启动一个简单的服务器\n\nEx:\n```go\npackage main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n  r := gin.Default()\n  r.GET(\"/ping\", func(c *gin.Context) {\n    c.JSON(200, gin.H{\n      \"message\": \"pong\",\n    })\n  })\n  r.Run() // listen and serve on 0.0.0.0:8080\n}\n```\n\n```sh\ncurl http://localhost:8080/ping\n```\n\n**summary:**\n> 1. 导包: `import \"github.com/gin-gonic/gin\"`\n> 2. 启动一个默认的路由: `r := gin.Default()`\n> 3. 注册路径: `r.GET(\"/ping\", handlers ...HandlerFunc)`\n> 4. 启动服务: `r.Run()` , 默认在8080端口\n\n### 2. Parameters in path\n\n```go\nfunc main() {\n  router := gin.Default()\n\n  // This handler will match /user/john but will not match /user/ or /user\n  router.GET(\"/user/:name\", func(c *gin.Context) {\n    name := c.Param(\"name\")\n    c.String(http.StatusOK, \"Hello %s\", name)\n  })\n\n  // However, this one will match /user/john/ and also /user/john/send\n  // If no other routers match /user/john, it will redirect to /user/john/\n  router.GET(\"/user/:name/*action\", func(c *gin.Context) {\n    name := c.Param(\"name\")\n    action := c.Param(\"action\")\n    message := name + \" is \" + action\n    c.String(http.StatusOK, message)\n  })\n\n  router.Run(\":8080\")\n}\n```\n\n### 3. Querystring parameters\n\n```go\nfunc main() {\n  router := gin.Default()\n\n  // Query string parameters are parsed using the existing underlying request object.\n  // The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe\n  router.GET(\"/welcome\", func(c *gin.Context) {\n    firstname := c.DefaultQuery(\"firstname\", \"Guest\")\n    lastname := c.Query(\"lastname\") // shortcut for c.Request.URL.Query().Get(\"lastname\")\n\n    c.String(http.StatusOK, \"Hello %s %s\", firstname, lastname)\n  })\n  router.Run(\":8080\")\n}\n```\n\n### 4. POST 参数解析\n\n```go\nfunc main() {\n  router := gin.Default()\n\n  router.POST(\"/form_post\", func(c *gin.Context) {\n    message := c.PostForm(\"message\")\n    nick := c.DefaultPostForm(\"nick\", \"anonymous\")\n\n    c.JSON(200, gin.H{\n      \"status\":  \"posted\",\n      \"message\": message,\n      \"nick\":    nick,\n    })\n  })\n  router.Run(\":8080\")\n}\n```\n\n### 5. 上传文件\n\n```go\nfunc main() {\n  router := gin.Default()\n  // Set a lower memory limit for multipart forms (default is 32 MiB)\n  // router.MaxMultipartMemory = 8 << 20  // 8 MiB\n  router.POST(\"/upload\", func(c *gin.Context) {\n    // single file\n    file, _ := c.FormFile(\"file\")\n    log.Println(file.Filename)\n\n    // Upload the file to specific dst.\n    // c.SaveUploadedFile(file, dst)\n\n    c.String(http.StatusOK, fmt.Sprintf(\"'%s' uploaded!\", file.Filename))\n  })\n  router.Run(\":8080\")\n}\n```\n\n```sh\ncurl -X POST http://localhost:8080/upload \\\n  -F \"file=@/Users/appleboy/test.zip\" \\\n  -H \"Content-Type: multipart/form-data\"\n```\n\n### 多文件上传\n\n```go\nfunc main() {\n  router := gin.Default()\n  // Set a lower memory limit for multipart forms (default is 32 MiB)\n  // router.MaxMultipartMemory = 8 << 20  // 8 MiB\n  router.POST(\"/upload\", func(c *gin.Context) {\n    // Multipart form\n    form, _ := c.MultipartForm()\n    files := form.File[\"upload[]\"]\n\n    for _, file := range files {\n      log.Println(file.Filename)\n\n      // Upload the file to specific dst.\n      // c.SaveUploadedFile(file, dst)\n    }\n    c.String(http.StatusOK, fmt.Sprintf(\"%d files uploaded!\", len(files)))\n  })\n  router.Run(\":8080\")\n}\n```\n\n```sh\ncurl -X POST http://localhost:8080/upload \\\n  -F \"upload[]=@/Users/appleboy/test1.zip\" \\\n  -F \"upload[]=@/Users/appleboy/test2.zip\" \\\n  -H \"Content-Type: multipart/form-data\"\n```\n\n### Grouping routes(分组路由)\n\n```go\nfunc main() {\n  router := gin.Default()\n\n  // Simple group: v1\n  v1 := router.Group(\"/v1\")\n  {\n    v1.POST(\"/login\", loginEndpoint)\n    v1.POST(\"/submit\", submitEndpoint)\n    v1.POST(\"/read\", readEndpoint)\n  }\n\n  // Simple group: v2\n  v2 := router.Group(\"/v2\")\n  {\n    v2.POST(\"/login\", loginEndpoint)\n    v2.POST(\"/submit\", submitEndpoint)\n    v2.POST(\"/read\", readEndpoint)\n  }\n\n  router.Run(\":8080\")\n}\n```\n\n**分组有利于在分组上定义拦截器.**\n\n\n### 拦截器\n\n```go\nfunc main() {\n  // Creates a router without any middleware by default\n  r := gin.New()\n\n  // Global middleware\n  // Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.\n  // By default gin.DefaultWriter = os.Stdout\n  r.Use(gin.Logger())\n\n  // Recovery middleware recovers from any panics and writes a 500 if there was one.\n  r.Use(gin.Recovery())\n\n  // Per route middleware, you can add as many as you desire.\n  r.GET(\"/benchmark\", MyBenchLogger(), benchEndpoint)\n\n  // Authorization group\n  // authorized := r.Group(\"/\", AuthRequired())\n  // exactly the same as:\n  authorized := r.Group(\"/\")\n  // per group middleware! in this case we use the custom created\n  // AuthRequired() middleware just in the \"authorized\" group.\n  authorized.Use(AuthRequired())\n  {\n    authorized.POST(\"/login\", loginEndpoint)\n    authorized.POST(\"/submit\", submitEndpoint)\n    authorized.POST(\"/read\", readEndpoint)\n\n    // nested group\n    testing := authorized.Group(\"testing\")\n    testing.GET(\"/analytics\", analyticsEndpoint)\n  }\n\n  // Listen and serve on 0.0.0.0:8080\n  r.Run(\":8080\")\n}\n```\n\n### Model binding and validation\n\n```go\n// Binding from JSON\ntype Login struct {\n  User     string `form:\"user\" json:\"user\" xml:\"user\"  binding:\"required\"`\n  Password string `form:\"password\" json:\"password\" xml:\"password\" binding:\"required\"`\n}\n\nfunc main() {\n  router := gin.Default()\n\n  // Example for binding JSON ({\"user\": \"manu\", \"password\": \"123\"})\n  router.POST(\"/loginJSON\", func(c *gin.Context) {\n    var json Login\n    if err := c.ShouldBindJSON(&json); err != nil {\n      c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n      return\n    }\n    \n    if json.User != \"manu\" || json.Password != \"123\" {\n      c.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\n      return\n    } \n    \n    c.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})\n  })\n\n  // Example for binding XML (\n  //  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  //  <root>\n  //    <user>user</user>\n  //    <password>123</user>\n  //  </root>)\n  router.POST(\"/loginXML\", func(c *gin.Context) {\n    var xml Login\n    if err := c.ShouldBindXML(&xml); err != nil {\n      c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n      return\n    }\n    \n    if xml.User != \"manu\" || xml.Password != \"123\" {\n      c.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\n      return\n    } \n    \n    c.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})\n  })\n\n  // Example for binding a HTML form (user=manu&password=123)\n  router.POST(\"/loginForm\", func(c *gin.Context) {\n    var form Login\n    // This will infer what binder to use depending on the content-type header.\n    if err := c.ShouldBind(&form); err != nil {\n      c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n      return\n    }\n    \n    if form.User != \"manu\" || form.Password != \"123\" {\n      c.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\n      return\n    } \n    \n    c.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})\n  })\n\n  // Listen and serve on 0.0.0.0:8080\n  router.Run(\":8080\")\n}\n```\n\n```sh\n$ curl -v -X POST \\\n  http://localhost:8080/loginJSON \\\n  -H 'content-type: application/json' \\\n  -d '{ \"user\": \"manu\" }'\n```\n\n\n\n### params summary\n\n参数解析方法:\n\n```go\n// router.GET(\"/user/:name/*action\", handlers ...HandlerFunc)\nname := c.Param(\"name\")\naction := c.Param(\"action\")\n\n// req Url: /welcome?firstname=Jane&lastname=Doe\nfirstname := c.DefaultQuery(\"firstname\", \"Guest\")\nlastname := c.Query(\"lastname\") // shortcut for c.Request.URL.Query().Get(\"lastname\")\n\n// POST\nmessage := c.PostForm(\"message\")\nnick := c.DefaultPostForm(\"nick\", \"anonymous\")\n\n// 上传文件\nfile, _ := c.FormFile(\"file\")\n// 多文件上传\nform, _ := c.MultipartForm()\nfiles := form.File[\"upload[]\"]\n\n\n// 定义结构体\ntype Login struct {\n  User     string `form:\"user\" json:\"user\" xml:\"user\"  binding:\"required\"`\n  Password string `form:\"password\" json:\"password\" xml:\"password\" binding:\"required\"`\n}\n\n// bind JSON:  {\"user\": \"manu\", \"password\": \"123\"}\nc.ShouldBindJSON(&json)\n// bind XML:   \n//  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n//  <root>\n//    <user>user</user>\n//    <password>123</user>\n//  </root>\nc.ShouldBindXML(&xml)\n// bind form:  user=manu&password=123\nc.ShouldBind(&form)\n\n\n```\n\n\n\n\n\n","source":"_posts/backend/go/gin/gin_learn_start.md","raw":"---\ntitle: gin learn start\ndate: 2018-08-29 20:12:00\ncategories:\n- backend\ntags:\n- go\n- gin\n---\n\n## learn go gin\n\n**Params:**\n1. Get req params\n> 1. 如何启动一个服务器.\n> 2. url 地址中的参数获取.\n> 3. Get 参数的获取.\n\n2. post req params\n> 1. 如何获取 POST 请求的参数.\n\n3. 结构化获取参数\n> 2. 如何定义\n\n**return:**\n1. string\n2. json\n\n**拦截器:**\n1. 如何定义和使用拦截器\n\n\n## Params\n\n### 1. 启动一个简单的服务器\n\nEx:\n```go\npackage main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n  r := gin.Default()\n  r.GET(\"/ping\", func(c *gin.Context) {\n    c.JSON(200, gin.H{\n      \"message\": \"pong\",\n    })\n  })\n  r.Run() // listen and serve on 0.0.0.0:8080\n}\n```\n\n```sh\ncurl http://localhost:8080/ping\n```\n\n**summary:**\n> 1. 导包: `import \"github.com/gin-gonic/gin\"`\n> 2. 启动一个默认的路由: `r := gin.Default()`\n> 3. 注册路径: `r.GET(\"/ping\", handlers ...HandlerFunc)`\n> 4. 启动服务: `r.Run()` , 默认在8080端口\n\n### 2. Parameters in path\n\n```go\nfunc main() {\n  router := gin.Default()\n\n  // This handler will match /user/john but will not match /user/ or /user\n  router.GET(\"/user/:name\", func(c *gin.Context) {\n    name := c.Param(\"name\")\n    c.String(http.StatusOK, \"Hello %s\", name)\n  })\n\n  // However, this one will match /user/john/ and also /user/john/send\n  // If no other routers match /user/john, it will redirect to /user/john/\n  router.GET(\"/user/:name/*action\", func(c *gin.Context) {\n    name := c.Param(\"name\")\n    action := c.Param(\"action\")\n    message := name + \" is \" + action\n    c.String(http.StatusOK, message)\n  })\n\n  router.Run(\":8080\")\n}\n```\n\n### 3. Querystring parameters\n\n```go\nfunc main() {\n  router := gin.Default()\n\n  // Query string parameters are parsed using the existing underlying request object.\n  // The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe\n  router.GET(\"/welcome\", func(c *gin.Context) {\n    firstname := c.DefaultQuery(\"firstname\", \"Guest\")\n    lastname := c.Query(\"lastname\") // shortcut for c.Request.URL.Query().Get(\"lastname\")\n\n    c.String(http.StatusOK, \"Hello %s %s\", firstname, lastname)\n  })\n  router.Run(\":8080\")\n}\n```\n\n### 4. POST 参数解析\n\n```go\nfunc main() {\n  router := gin.Default()\n\n  router.POST(\"/form_post\", func(c *gin.Context) {\n    message := c.PostForm(\"message\")\n    nick := c.DefaultPostForm(\"nick\", \"anonymous\")\n\n    c.JSON(200, gin.H{\n      \"status\":  \"posted\",\n      \"message\": message,\n      \"nick\":    nick,\n    })\n  })\n  router.Run(\":8080\")\n}\n```\n\n### 5. 上传文件\n\n```go\nfunc main() {\n  router := gin.Default()\n  // Set a lower memory limit for multipart forms (default is 32 MiB)\n  // router.MaxMultipartMemory = 8 << 20  // 8 MiB\n  router.POST(\"/upload\", func(c *gin.Context) {\n    // single file\n    file, _ := c.FormFile(\"file\")\n    log.Println(file.Filename)\n\n    // Upload the file to specific dst.\n    // c.SaveUploadedFile(file, dst)\n\n    c.String(http.StatusOK, fmt.Sprintf(\"'%s' uploaded!\", file.Filename))\n  })\n  router.Run(\":8080\")\n}\n```\n\n```sh\ncurl -X POST http://localhost:8080/upload \\\n  -F \"file=@/Users/appleboy/test.zip\" \\\n  -H \"Content-Type: multipart/form-data\"\n```\n\n### 多文件上传\n\n```go\nfunc main() {\n  router := gin.Default()\n  // Set a lower memory limit for multipart forms (default is 32 MiB)\n  // router.MaxMultipartMemory = 8 << 20  // 8 MiB\n  router.POST(\"/upload\", func(c *gin.Context) {\n    // Multipart form\n    form, _ := c.MultipartForm()\n    files := form.File[\"upload[]\"]\n\n    for _, file := range files {\n      log.Println(file.Filename)\n\n      // Upload the file to specific dst.\n      // c.SaveUploadedFile(file, dst)\n    }\n    c.String(http.StatusOK, fmt.Sprintf(\"%d files uploaded!\", len(files)))\n  })\n  router.Run(\":8080\")\n}\n```\n\n```sh\ncurl -X POST http://localhost:8080/upload \\\n  -F \"upload[]=@/Users/appleboy/test1.zip\" \\\n  -F \"upload[]=@/Users/appleboy/test2.zip\" \\\n  -H \"Content-Type: multipart/form-data\"\n```\n\n### Grouping routes(分组路由)\n\n```go\nfunc main() {\n  router := gin.Default()\n\n  // Simple group: v1\n  v1 := router.Group(\"/v1\")\n  {\n    v1.POST(\"/login\", loginEndpoint)\n    v1.POST(\"/submit\", submitEndpoint)\n    v1.POST(\"/read\", readEndpoint)\n  }\n\n  // Simple group: v2\n  v2 := router.Group(\"/v2\")\n  {\n    v2.POST(\"/login\", loginEndpoint)\n    v2.POST(\"/submit\", submitEndpoint)\n    v2.POST(\"/read\", readEndpoint)\n  }\n\n  router.Run(\":8080\")\n}\n```\n\n**分组有利于在分组上定义拦截器.**\n\n\n### 拦截器\n\n```go\nfunc main() {\n  // Creates a router without any middleware by default\n  r := gin.New()\n\n  // Global middleware\n  // Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.\n  // By default gin.DefaultWriter = os.Stdout\n  r.Use(gin.Logger())\n\n  // Recovery middleware recovers from any panics and writes a 500 if there was one.\n  r.Use(gin.Recovery())\n\n  // Per route middleware, you can add as many as you desire.\n  r.GET(\"/benchmark\", MyBenchLogger(), benchEndpoint)\n\n  // Authorization group\n  // authorized := r.Group(\"/\", AuthRequired())\n  // exactly the same as:\n  authorized := r.Group(\"/\")\n  // per group middleware! in this case we use the custom created\n  // AuthRequired() middleware just in the \"authorized\" group.\n  authorized.Use(AuthRequired())\n  {\n    authorized.POST(\"/login\", loginEndpoint)\n    authorized.POST(\"/submit\", submitEndpoint)\n    authorized.POST(\"/read\", readEndpoint)\n\n    // nested group\n    testing := authorized.Group(\"testing\")\n    testing.GET(\"/analytics\", analyticsEndpoint)\n  }\n\n  // Listen and serve on 0.0.0.0:8080\n  r.Run(\":8080\")\n}\n```\n\n### Model binding and validation\n\n```go\n// Binding from JSON\ntype Login struct {\n  User     string `form:\"user\" json:\"user\" xml:\"user\"  binding:\"required\"`\n  Password string `form:\"password\" json:\"password\" xml:\"password\" binding:\"required\"`\n}\n\nfunc main() {\n  router := gin.Default()\n\n  // Example for binding JSON ({\"user\": \"manu\", \"password\": \"123\"})\n  router.POST(\"/loginJSON\", func(c *gin.Context) {\n    var json Login\n    if err := c.ShouldBindJSON(&json); err != nil {\n      c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n      return\n    }\n    \n    if json.User != \"manu\" || json.Password != \"123\" {\n      c.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\n      return\n    } \n    \n    c.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})\n  })\n\n  // Example for binding XML (\n  //  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  //  <root>\n  //    <user>user</user>\n  //    <password>123</user>\n  //  </root>)\n  router.POST(\"/loginXML\", func(c *gin.Context) {\n    var xml Login\n    if err := c.ShouldBindXML(&xml); err != nil {\n      c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n      return\n    }\n    \n    if xml.User != \"manu\" || xml.Password != \"123\" {\n      c.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\n      return\n    } \n    \n    c.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})\n  })\n\n  // Example for binding a HTML form (user=manu&password=123)\n  router.POST(\"/loginForm\", func(c *gin.Context) {\n    var form Login\n    // This will infer what binder to use depending on the content-type header.\n    if err := c.ShouldBind(&form); err != nil {\n      c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n      return\n    }\n    \n    if form.User != \"manu\" || form.Password != \"123\" {\n      c.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\n      return\n    } \n    \n    c.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})\n  })\n\n  // Listen and serve on 0.0.0.0:8080\n  router.Run(\":8080\")\n}\n```\n\n```sh\n$ curl -v -X POST \\\n  http://localhost:8080/loginJSON \\\n  -H 'content-type: application/json' \\\n  -d '{ \"user\": \"manu\" }'\n```\n\n\n\n### params summary\n\n参数解析方法:\n\n```go\n// router.GET(\"/user/:name/*action\", handlers ...HandlerFunc)\nname := c.Param(\"name\")\naction := c.Param(\"action\")\n\n// req Url: /welcome?firstname=Jane&lastname=Doe\nfirstname := c.DefaultQuery(\"firstname\", \"Guest\")\nlastname := c.Query(\"lastname\") // shortcut for c.Request.URL.Query().Get(\"lastname\")\n\n// POST\nmessage := c.PostForm(\"message\")\nnick := c.DefaultPostForm(\"nick\", \"anonymous\")\n\n// 上传文件\nfile, _ := c.FormFile(\"file\")\n// 多文件上传\nform, _ := c.MultipartForm()\nfiles := form.File[\"upload[]\"]\n\n\n// 定义结构体\ntype Login struct {\n  User     string `form:\"user\" json:\"user\" xml:\"user\"  binding:\"required\"`\n  Password string `form:\"password\" json:\"password\" xml:\"password\" binding:\"required\"`\n}\n\n// bind JSON:  {\"user\": \"manu\", \"password\": \"123\"}\nc.ShouldBindJSON(&json)\n// bind XML:   \n//  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n//  <root>\n//    <user>user</user>\n//    <password>123</user>\n//  </root>\nc.ShouldBindXML(&xml)\n// bind form:  user=manu&password=123\nc.ShouldBind(&form)\n\n\n```\n\n\n\n\n\n","slug":"backend/go/gin/gin_learn_start","published":1,"updated":"2018-09-04T15:07:50.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgxi003y8seou05set2u","content":"<h2 id=\"learn-go-gin\"><a href=\"#learn-go-gin\" class=\"headerlink\" title=\"learn go gin\"></a>learn go gin</h2><p><strong>Params:</strong></p>\n<ol>\n<li><p>Get req params</p>\n<blockquote>\n<ol>\n<li>如何启动一个服务器.</li>\n<li>url 地址中的参数获取.</li>\n<li>Get 参数的获取.</li>\n</ol>\n</blockquote>\n</li>\n<li><p>post req params</p>\n<blockquote>\n<ol>\n<li>如何获取 POST 请求的参数.</li>\n</ol>\n</blockquote>\n</li>\n<li><p>结构化获取参数</p>\n<blockquote>\n<ol start=\"2\">\n<li>如何定义</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<p><strong>return:</strong></p>\n<ol>\n<li>string</li>\n<li>json</li>\n</ol>\n<p><strong>拦截器:</strong></p>\n<ol>\n<li>如何定义和使用拦截器</li>\n</ol>\n<h2 id=\"Params\"><a href=\"#Params\" class=\"headerlink\" title=\"Params\"></a>Params</h2><h3 id=\"1-启动一个简单的服务器\"><a href=\"#1-启动一个简单的服务器\" class=\"headerlink\" title=\"1. 启动一个简单的服务器\"></a>1. 启动一个简单的服务器</h3><p>Ex:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"github.com/gin-gonic/gin\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  r := gin.Default()</span><br><span class=\"line\">  r.GET(<span class=\"string\">\"/ping\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    c.JSON(<span class=\"number\">200</span>, gin.H&#123;</span><br><span class=\"line\">      <span class=\"string\">\"message\"</span>: <span class=\"string\">\"pong\"</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  r.Run() <span class=\"comment\">// listen and serve on 0.0.0.0:8080</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:8080/ping</span><br></pre></td></tr></table></figure>\n<p><strong>summary:</strong></p>\n<blockquote>\n<ol>\n<li>导包: <code>import &quot;github.com/gin-gonic/gin&quot;</code></li>\n<li>启动一个默认的路由: <code>r := gin.Default()</code></li>\n<li>注册路径: <code>r.GET(&quot;/ping&quot;, handlers ...HandlerFunc)</code></li>\n<li>启动服务: <code>r.Run()</code> , 默认在8080端口</li>\n</ol>\n</blockquote>\n<h3 id=\"2-Parameters-in-path\"><a href=\"#2-Parameters-in-path\" class=\"headerlink\" title=\"2. Parameters in path\"></a>2. Parameters in path</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// This handler will match /user/john but will not match /user/ or /user</span></span><br><span class=\"line\">  router.GET(<span class=\"string\">\"/user/:name\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    name := c.Param(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">    c.String(http.StatusOK, <span class=\"string\">\"Hello %s\"</span>, name)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// However, this one will match /user/john/ and also /user/john/send</span></span><br><span class=\"line\">  <span class=\"comment\">// If no other routers match /user/john, it will redirect to /user/john/</span></span><br><span class=\"line\">  router.GET(<span class=\"string\">\"/user/:name/*action\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    name := c.Param(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">    action := c.Param(<span class=\"string\">\"action\"</span>)</span><br><span class=\"line\">    message := name + <span class=\"string\">\" is \"</span> + action</span><br><span class=\"line\">    c.String(http.StatusOK, message)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  router.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Querystring-parameters\"><a href=\"#3-Querystring-parameters\" class=\"headerlink\" title=\"3. Querystring parameters\"></a>3. Querystring parameters</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Query string parameters are parsed using the existing underlying request object.</span></span><br><span class=\"line\">  <span class=\"comment\">// The request responds to a url matching:  /welcome?firstname=Jane&amp;lastname=Doe</span></span><br><span class=\"line\">  router.GET(<span class=\"string\">\"/welcome\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    firstname := c.DefaultQuery(<span class=\"string\">\"firstname\"</span>, <span class=\"string\">\"Guest\"</span>)</span><br><span class=\"line\">    lastname := c.Query(<span class=\"string\">\"lastname\"</span>) <span class=\"comment\">// shortcut for c.Request.URL.Query().Get(\"lastname\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">    c.String(http.StatusOK, <span class=\"string\">\"Hello %s %s\"</span>, firstname, lastname)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  router.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-POST-参数解析\"><a href=\"#4-POST-参数解析\" class=\"headerlink\" title=\"4. POST 参数解析\"></a>4. POST 参数解析</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">  router.POST(<span class=\"string\">\"/form_post\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    message := c.PostForm(<span class=\"string\">\"message\"</span>)</span><br><span class=\"line\">    nick := c.DefaultPostForm(<span class=\"string\">\"nick\"</span>, <span class=\"string\">\"anonymous\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    c.JSON(<span class=\"number\">200</span>, gin.H&#123;</span><br><span class=\"line\">      <span class=\"string\">\"status\"</span>:  <span class=\"string\">\"posted\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"message\"</span>: message,</span><br><span class=\"line\">      <span class=\"string\">\"nick\"</span>:    nick,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  router.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-上传文件\"><a href=\"#5-上传文件\" class=\"headerlink\" title=\"5. 上传文件\"></a>5. 上传文件</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\">  <span class=\"comment\">// Set a lower memory limit for multipart forms (default is 32 MiB)</span></span><br><span class=\"line\">  <span class=\"comment\">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">\"/upload\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// single file</span></span><br><span class=\"line\">    file, _ := c.FormFile(<span class=\"string\">\"file\"</span>)</span><br><span class=\"line\">    log.Println(file.Filename)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Upload the file to specific dst.</span></span><br><span class=\"line\">    <span class=\"comment\">// c.SaveUploadedFile(file, dst)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    c.String(http.StatusOK, fmt.Sprintf(<span class=\"string\">\"'%s' uploaded!\"</span>, file.Filename))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  router.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://localhost:8080/upload \\</span><br><span class=\"line\">  -F <span class=\"string\">\"file=@/Users/appleboy/test.zip\"</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">\"Content-Type: multipart/form-data\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"多文件上传\"><a href=\"#多文件上传\" class=\"headerlink\" title=\"多文件上传\"></a>多文件上传</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\">  <span class=\"comment\">// Set a lower memory limit for multipart forms (default is 32 MiB)</span></span><br><span class=\"line\">  <span class=\"comment\">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">\"/upload\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Multipart form</span></span><br><span class=\"line\">    form, _ := c.MultipartForm()</span><br><span class=\"line\">    files := form.File[<span class=\"string\">\"upload[]\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, file := <span class=\"keyword\">range</span> files &#123;</span><br><span class=\"line\">      log.Println(file.Filename)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Upload the file to specific dst.</span></span><br><span class=\"line\">      <span class=\"comment\">// c.SaveUploadedFile(file, dst)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    c.String(http.StatusOK, fmt.Sprintf(<span class=\"string\">\"%d files uploaded!\"</span>, <span class=\"built_in\">len</span>(files)))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  router.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://localhost:8080/upload \\</span><br><span class=\"line\">  -F <span class=\"string\">\"upload[]=@/Users/appleboy/test1.zip\"</span> \\</span><br><span class=\"line\">  -F <span class=\"string\">\"upload[]=@/Users/appleboy/test2.zip\"</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">\"Content-Type: multipart/form-data\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Grouping-routes-分组路由\"><a href=\"#Grouping-routes-分组路由\" class=\"headerlink\" title=\"Grouping routes(分组路由)\"></a>Grouping routes(分组路由)</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Simple group: v1</span></span><br><span class=\"line\">  v1 := router.Group(<span class=\"string\">\"/v1\"</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v1.POST(<span class=\"string\">\"/login\"</span>, loginEndpoint)</span><br><span class=\"line\">    v1.POST(<span class=\"string\">\"/submit\"</span>, submitEndpoint)</span><br><span class=\"line\">    v1.POST(<span class=\"string\">\"/read\"</span>, readEndpoint)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Simple group: v2</span></span><br><span class=\"line\">  v2 := router.Group(<span class=\"string\">\"/v2\"</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v2.POST(<span class=\"string\">\"/login\"</span>, loginEndpoint)</span><br><span class=\"line\">    v2.POST(<span class=\"string\">\"/submit\"</span>, submitEndpoint)</span><br><span class=\"line\">    v2.POST(<span class=\"string\">\"/read\"</span>, readEndpoint)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  router.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>分组有利于在分组上定义拦截器.</strong></p>\n<h3 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Creates a router without any middleware by default</span></span><br><span class=\"line\">  r := gin.New()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Global middleware</span></span><br><span class=\"line\">  <span class=\"comment\">// Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.</span></span><br><span class=\"line\">  <span class=\"comment\">// By default gin.DefaultWriter = os.Stdout</span></span><br><span class=\"line\">  r.Use(gin.Logger())</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Recovery middleware recovers from any panics and writes a 500 if there was one.</span></span><br><span class=\"line\">  r.Use(gin.Recovery())</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Per route middleware, you can add as many as you desire.</span></span><br><span class=\"line\">  r.GET(<span class=\"string\">\"/benchmark\"</span>, MyBenchLogger(), benchEndpoint)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Authorization group</span></span><br><span class=\"line\">  <span class=\"comment\">// authorized := r.Group(\"/\", AuthRequired())</span></span><br><span class=\"line\">  <span class=\"comment\">// exactly the same as:</span></span><br><span class=\"line\">  authorized := r.Group(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">// per group middleware! in this case we use the custom created</span></span><br><span class=\"line\">  <span class=\"comment\">// AuthRequired() middleware just in the \"authorized\" group.</span></span><br><span class=\"line\">  authorized.Use(AuthRequired())</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    authorized.POST(<span class=\"string\">\"/login\"</span>, loginEndpoint)</span><br><span class=\"line\">    authorized.POST(<span class=\"string\">\"/submit\"</span>, submitEndpoint)</span><br><span class=\"line\">    authorized.POST(<span class=\"string\">\"/read\"</span>, readEndpoint)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// nested group</span></span><br><span class=\"line\">    testing := authorized.Group(<span class=\"string\">\"testing\"</span>)</span><br><span class=\"line\">    testing.GET(<span class=\"string\">\"/analytics\"</span>, analyticsEndpoint)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Listen and serve on 0.0.0.0:8080</span></span><br><span class=\"line\">  r.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Model-binding-and-validation\"><a href=\"#Model-binding-and-validation\" class=\"headerlink\" title=\"Model binding and validation\"></a>Model binding and validation</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Binding from JSON</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Login <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  User     <span class=\"keyword\">string</span> <span class=\"string\">`form:\"user\" json:\"user\" xml:\"user\"  binding:\"required\"`</span></span><br><span class=\"line\">  Password <span class=\"keyword\">string</span> <span class=\"string\">`form:\"password\" json:\"password\" xml:\"password\" binding:\"required\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Example for binding JSON (&#123;\"user\": \"manu\", \"password\": \"123\"&#125;)</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">\"/loginJSON\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> json Login</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := c.ShouldBindJSON(&amp;json); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      c.JSON(http.StatusBadRequest, gin.H&#123;<span class=\"string\">\"error\"</span>: err.Error()&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> json.User != <span class=\"string\">\"manu\"</span> || json.Password != <span class=\"string\">\"123\"</span> &#123;</span><br><span class=\"line\">      c.JSON(http.StatusUnauthorized, gin.H&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"unauthorized\"</span>&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">    c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"you are logged in\"</span>&#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Example for binding XML (</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;root&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//    &lt;user&gt;user&lt;/user&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//    &lt;password&gt;123&lt;/user&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;/root&gt;)</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">\"/loginXML\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xml Login</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := c.ShouldBindXML(&amp;xml); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      c.JSON(http.StatusBadRequest, gin.H&#123;<span class=\"string\">\"error\"</span>: err.Error()&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> xml.User != <span class=\"string\">\"manu\"</span> || xml.Password != <span class=\"string\">\"123\"</span> &#123;</span><br><span class=\"line\">      c.JSON(http.StatusUnauthorized, gin.H&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"unauthorized\"</span>&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">    c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"you are logged in\"</span>&#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Example for binding a HTML form (user=manu&amp;password=123)</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">\"/loginForm\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> form Login</span><br><span class=\"line\">    <span class=\"comment\">// This will infer what binder to use depending on the content-type header.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := c.ShouldBind(&amp;form); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      c.JSON(http.StatusBadRequest, gin.H&#123;<span class=\"string\">\"error\"</span>: err.Error()&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.User != <span class=\"string\">\"manu\"</span> || form.Password != <span class=\"string\">\"123\"</span> &#123;</span><br><span class=\"line\">      c.JSON(http.StatusUnauthorized, gin.H&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"unauthorized\"</span>&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">    c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"you are logged in\"</span>&#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Listen and serve on 0.0.0.0:8080</span></span><br><span class=\"line\">  router.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -v -X POST \\</span><br><span class=\"line\">  http://localhost:8080/loginJSON \\</span><br><span class=\"line\">  -H <span class=\"string\">'content-type: application/json'</span> \\</span><br><span class=\"line\">  -d <span class=\"string\">'&#123; \"user\": \"manu\" &#125;'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"params-summary\"><a href=\"#params-summary\" class=\"headerlink\" title=\"params summary\"></a>params summary</h3><p>参数解析方法:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// router.GET(\"/user/:name/*action\", handlers ...HandlerFunc)</span></span><br><span class=\"line\">name := c.Param(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">action := c.Param(<span class=\"string\">\"action\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// req Url: /welcome?firstname=Jane&amp;lastname=Doe</span></span><br><span class=\"line\">firstname := c.DefaultQuery(<span class=\"string\">\"firstname\"</span>, <span class=\"string\">\"Guest\"</span>)</span><br><span class=\"line\">lastname := c.Query(<span class=\"string\">\"lastname\"</span>) <span class=\"comment\">// shortcut for c.Request.URL.Query().Get(\"lastname\")</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST</span></span><br><span class=\"line\">message := c.PostForm(<span class=\"string\">\"message\"</span>)</span><br><span class=\"line\">nick := c.DefaultPostForm(<span class=\"string\">\"nick\"</span>, <span class=\"string\">\"anonymous\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上传文件</span></span><br><span class=\"line\">file, _ := c.FormFile(<span class=\"string\">\"file\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 多文件上传</span></span><br><span class=\"line\">form, _ := c.MultipartForm()</span><br><span class=\"line\">files := form.File[<span class=\"string\">\"upload[]\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Login <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  User     <span class=\"keyword\">string</span> <span class=\"string\">`form:\"user\" json:\"user\" xml:\"user\"  binding:\"required\"`</span></span><br><span class=\"line\">  Password <span class=\"keyword\">string</span> <span class=\"string\">`form:\"password\" json:\"password\" xml:\"password\" binding:\"required\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bind JSON:  &#123;\"user\": \"manu\", \"password\": \"123\"&#125;</span></span><br><span class=\"line\">c.ShouldBindJSON(&amp;json)</span><br><span class=\"line\"><span class=\"comment\">// bind XML:   </span></span><br><span class=\"line\"><span class=\"comment\">//  &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//  &lt;root&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//    &lt;user&gt;user&lt;/user&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//    &lt;password&gt;123&lt;/user&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//  &lt;/root&gt;</span></span><br><span class=\"line\">c.ShouldBindXML(&amp;xml)</span><br><span class=\"line\"><span class=\"comment\">// bind form:  user=manu&amp;password=123</span></span><br><span class=\"line\">c.ShouldBind(&amp;form)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"learn-go-gin\"><a href=\"#learn-go-gin\" class=\"headerlink\" title=\"learn go gin\"></a>learn go gin</h2><p><strong>Params:</strong></p>\n<ol>\n<li><p>Get req params</p>\n<blockquote>\n<ol>\n<li>如何启动一个服务器.</li>\n<li>url 地址中的参数获取.</li>\n<li>Get 参数的获取.</li>\n</ol>\n</blockquote>\n</li>\n<li><p>post req params</p>\n<blockquote>\n<ol>\n<li>如何获取 POST 请求的参数.</li>\n</ol>\n</blockquote>\n</li>\n<li><p>结构化获取参数</p>\n<blockquote>\n<ol start=\"2\">\n<li>如何定义</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<p><strong>return:</strong></p>\n<ol>\n<li>string</li>\n<li>json</li>\n</ol>\n<p><strong>拦截器:</strong></p>\n<ol>\n<li>如何定义和使用拦截器</li>\n</ol>\n<h2 id=\"Params\"><a href=\"#Params\" class=\"headerlink\" title=\"Params\"></a>Params</h2><h3 id=\"1-启动一个简单的服务器\"><a href=\"#1-启动一个简单的服务器\" class=\"headerlink\" title=\"1. 启动一个简单的服务器\"></a>1. 启动一个简单的服务器</h3><p>Ex:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"github.com/gin-gonic/gin\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  r := gin.Default()</span><br><span class=\"line\">  r.GET(<span class=\"string\">\"/ping\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    c.JSON(<span class=\"number\">200</span>, gin.H&#123;</span><br><span class=\"line\">      <span class=\"string\">\"message\"</span>: <span class=\"string\">\"pong\"</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  r.Run() <span class=\"comment\">// listen and serve on 0.0.0.0:8080</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:8080/ping</span><br></pre></td></tr></table></figure>\n<p><strong>summary:</strong></p>\n<blockquote>\n<ol>\n<li>导包: <code>import &quot;github.com/gin-gonic/gin&quot;</code></li>\n<li>启动一个默认的路由: <code>r := gin.Default()</code></li>\n<li>注册路径: <code>r.GET(&quot;/ping&quot;, handlers ...HandlerFunc)</code></li>\n<li>启动服务: <code>r.Run()</code> , 默认在8080端口</li>\n</ol>\n</blockquote>\n<h3 id=\"2-Parameters-in-path\"><a href=\"#2-Parameters-in-path\" class=\"headerlink\" title=\"2. Parameters in path\"></a>2. Parameters in path</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// This handler will match /user/john but will not match /user/ or /user</span></span><br><span class=\"line\">  router.GET(<span class=\"string\">\"/user/:name\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    name := c.Param(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">    c.String(http.StatusOK, <span class=\"string\">\"Hello %s\"</span>, name)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// However, this one will match /user/john/ and also /user/john/send</span></span><br><span class=\"line\">  <span class=\"comment\">// If no other routers match /user/john, it will redirect to /user/john/</span></span><br><span class=\"line\">  router.GET(<span class=\"string\">\"/user/:name/*action\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    name := c.Param(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">    action := c.Param(<span class=\"string\">\"action\"</span>)</span><br><span class=\"line\">    message := name + <span class=\"string\">\" is \"</span> + action</span><br><span class=\"line\">    c.String(http.StatusOK, message)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  router.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Querystring-parameters\"><a href=\"#3-Querystring-parameters\" class=\"headerlink\" title=\"3. Querystring parameters\"></a>3. Querystring parameters</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Query string parameters are parsed using the existing underlying request object.</span></span><br><span class=\"line\">  <span class=\"comment\">// The request responds to a url matching:  /welcome?firstname=Jane&amp;lastname=Doe</span></span><br><span class=\"line\">  router.GET(<span class=\"string\">\"/welcome\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    firstname := c.DefaultQuery(<span class=\"string\">\"firstname\"</span>, <span class=\"string\">\"Guest\"</span>)</span><br><span class=\"line\">    lastname := c.Query(<span class=\"string\">\"lastname\"</span>) <span class=\"comment\">// shortcut for c.Request.URL.Query().Get(\"lastname\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">    c.String(http.StatusOK, <span class=\"string\">\"Hello %s %s\"</span>, firstname, lastname)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  router.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-POST-参数解析\"><a href=\"#4-POST-参数解析\" class=\"headerlink\" title=\"4. POST 参数解析\"></a>4. POST 参数解析</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">  router.POST(<span class=\"string\">\"/form_post\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    message := c.PostForm(<span class=\"string\">\"message\"</span>)</span><br><span class=\"line\">    nick := c.DefaultPostForm(<span class=\"string\">\"nick\"</span>, <span class=\"string\">\"anonymous\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    c.JSON(<span class=\"number\">200</span>, gin.H&#123;</span><br><span class=\"line\">      <span class=\"string\">\"status\"</span>:  <span class=\"string\">\"posted\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"message\"</span>: message,</span><br><span class=\"line\">      <span class=\"string\">\"nick\"</span>:    nick,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  router.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-上传文件\"><a href=\"#5-上传文件\" class=\"headerlink\" title=\"5. 上传文件\"></a>5. 上传文件</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\">  <span class=\"comment\">// Set a lower memory limit for multipart forms (default is 32 MiB)</span></span><br><span class=\"line\">  <span class=\"comment\">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">\"/upload\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// single file</span></span><br><span class=\"line\">    file, _ := c.FormFile(<span class=\"string\">\"file\"</span>)</span><br><span class=\"line\">    log.Println(file.Filename)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Upload the file to specific dst.</span></span><br><span class=\"line\">    <span class=\"comment\">// c.SaveUploadedFile(file, dst)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    c.String(http.StatusOK, fmt.Sprintf(<span class=\"string\">\"'%s' uploaded!\"</span>, file.Filename))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  router.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://localhost:8080/upload \\</span><br><span class=\"line\">  -F <span class=\"string\">\"file=@/Users/appleboy/test.zip\"</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">\"Content-Type: multipart/form-data\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"多文件上传\"><a href=\"#多文件上传\" class=\"headerlink\" title=\"多文件上传\"></a>多文件上传</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\">  <span class=\"comment\">// Set a lower memory limit for multipart forms (default is 32 MiB)</span></span><br><span class=\"line\">  <span class=\"comment\">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">\"/upload\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Multipart form</span></span><br><span class=\"line\">    form, _ := c.MultipartForm()</span><br><span class=\"line\">    files := form.File[<span class=\"string\">\"upload[]\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, file := <span class=\"keyword\">range</span> files &#123;</span><br><span class=\"line\">      log.Println(file.Filename)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Upload the file to specific dst.</span></span><br><span class=\"line\">      <span class=\"comment\">// c.SaveUploadedFile(file, dst)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    c.String(http.StatusOK, fmt.Sprintf(<span class=\"string\">\"%d files uploaded!\"</span>, <span class=\"built_in\">len</span>(files)))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  router.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://localhost:8080/upload \\</span><br><span class=\"line\">  -F <span class=\"string\">\"upload[]=@/Users/appleboy/test1.zip\"</span> \\</span><br><span class=\"line\">  -F <span class=\"string\">\"upload[]=@/Users/appleboy/test2.zip\"</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">\"Content-Type: multipart/form-data\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Grouping-routes-分组路由\"><a href=\"#Grouping-routes-分组路由\" class=\"headerlink\" title=\"Grouping routes(分组路由)\"></a>Grouping routes(分组路由)</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Simple group: v1</span></span><br><span class=\"line\">  v1 := router.Group(<span class=\"string\">\"/v1\"</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v1.POST(<span class=\"string\">\"/login\"</span>, loginEndpoint)</span><br><span class=\"line\">    v1.POST(<span class=\"string\">\"/submit\"</span>, submitEndpoint)</span><br><span class=\"line\">    v1.POST(<span class=\"string\">\"/read\"</span>, readEndpoint)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Simple group: v2</span></span><br><span class=\"line\">  v2 := router.Group(<span class=\"string\">\"/v2\"</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v2.POST(<span class=\"string\">\"/login\"</span>, loginEndpoint)</span><br><span class=\"line\">    v2.POST(<span class=\"string\">\"/submit\"</span>, submitEndpoint)</span><br><span class=\"line\">    v2.POST(<span class=\"string\">\"/read\"</span>, readEndpoint)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  router.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>分组有利于在分组上定义拦截器.</strong></p>\n<h3 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Creates a router without any middleware by default</span></span><br><span class=\"line\">  r := gin.New()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Global middleware</span></span><br><span class=\"line\">  <span class=\"comment\">// Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.</span></span><br><span class=\"line\">  <span class=\"comment\">// By default gin.DefaultWriter = os.Stdout</span></span><br><span class=\"line\">  r.Use(gin.Logger())</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Recovery middleware recovers from any panics and writes a 500 if there was one.</span></span><br><span class=\"line\">  r.Use(gin.Recovery())</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Per route middleware, you can add as many as you desire.</span></span><br><span class=\"line\">  r.GET(<span class=\"string\">\"/benchmark\"</span>, MyBenchLogger(), benchEndpoint)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Authorization group</span></span><br><span class=\"line\">  <span class=\"comment\">// authorized := r.Group(\"/\", AuthRequired())</span></span><br><span class=\"line\">  <span class=\"comment\">// exactly the same as:</span></span><br><span class=\"line\">  authorized := r.Group(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">// per group middleware! in this case we use the custom created</span></span><br><span class=\"line\">  <span class=\"comment\">// AuthRequired() middleware just in the \"authorized\" group.</span></span><br><span class=\"line\">  authorized.Use(AuthRequired())</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    authorized.POST(<span class=\"string\">\"/login\"</span>, loginEndpoint)</span><br><span class=\"line\">    authorized.POST(<span class=\"string\">\"/submit\"</span>, submitEndpoint)</span><br><span class=\"line\">    authorized.POST(<span class=\"string\">\"/read\"</span>, readEndpoint)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// nested group</span></span><br><span class=\"line\">    testing := authorized.Group(<span class=\"string\">\"testing\"</span>)</span><br><span class=\"line\">    testing.GET(<span class=\"string\">\"/analytics\"</span>, analyticsEndpoint)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Listen and serve on 0.0.0.0:8080</span></span><br><span class=\"line\">  r.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Model-binding-and-validation\"><a href=\"#Model-binding-and-validation\" class=\"headerlink\" title=\"Model binding and validation\"></a>Model binding and validation</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Binding from JSON</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Login <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  User     <span class=\"keyword\">string</span> <span class=\"string\">`form:\"user\" json:\"user\" xml:\"user\"  binding:\"required\"`</span></span><br><span class=\"line\">  Password <span class=\"keyword\">string</span> <span class=\"string\">`form:\"password\" json:\"password\" xml:\"password\" binding:\"required\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Example for binding JSON (&#123;\"user\": \"manu\", \"password\": \"123\"&#125;)</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">\"/loginJSON\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> json Login</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := c.ShouldBindJSON(&amp;json); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      c.JSON(http.StatusBadRequest, gin.H&#123;<span class=\"string\">\"error\"</span>: err.Error()&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> json.User != <span class=\"string\">\"manu\"</span> || json.Password != <span class=\"string\">\"123\"</span> &#123;</span><br><span class=\"line\">      c.JSON(http.StatusUnauthorized, gin.H&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"unauthorized\"</span>&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">    c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"you are logged in\"</span>&#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Example for binding XML (</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;root&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//    &lt;user&gt;user&lt;/user&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//    &lt;password&gt;123&lt;/user&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;/root&gt;)</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">\"/loginXML\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xml Login</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := c.ShouldBindXML(&amp;xml); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      c.JSON(http.StatusBadRequest, gin.H&#123;<span class=\"string\">\"error\"</span>: err.Error()&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> xml.User != <span class=\"string\">\"manu\"</span> || xml.Password != <span class=\"string\">\"123\"</span> &#123;</span><br><span class=\"line\">      c.JSON(http.StatusUnauthorized, gin.H&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"unauthorized\"</span>&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">    c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"you are logged in\"</span>&#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Example for binding a HTML form (user=manu&amp;password=123)</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">\"/loginForm\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> form Login</span><br><span class=\"line\">    <span class=\"comment\">// This will infer what binder to use depending on the content-type header.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := c.ShouldBind(&amp;form); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      c.JSON(http.StatusBadRequest, gin.H&#123;<span class=\"string\">\"error\"</span>: err.Error()&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.User != <span class=\"string\">\"manu\"</span> || form.Password != <span class=\"string\">\"123\"</span> &#123;</span><br><span class=\"line\">      c.JSON(http.StatusUnauthorized, gin.H&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"unauthorized\"</span>&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">    c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"you are logged in\"</span>&#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Listen and serve on 0.0.0.0:8080</span></span><br><span class=\"line\">  router.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -v -X POST \\</span><br><span class=\"line\">  http://localhost:8080/loginJSON \\</span><br><span class=\"line\">  -H <span class=\"string\">'content-type: application/json'</span> \\</span><br><span class=\"line\">  -d <span class=\"string\">'&#123; \"user\": \"manu\" &#125;'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"params-summary\"><a href=\"#params-summary\" class=\"headerlink\" title=\"params summary\"></a>params summary</h3><p>参数解析方法:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// router.GET(\"/user/:name/*action\", handlers ...HandlerFunc)</span></span><br><span class=\"line\">name := c.Param(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">action := c.Param(<span class=\"string\">\"action\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// req Url: /welcome?firstname=Jane&amp;lastname=Doe</span></span><br><span class=\"line\">firstname := c.DefaultQuery(<span class=\"string\">\"firstname\"</span>, <span class=\"string\">\"Guest\"</span>)</span><br><span class=\"line\">lastname := c.Query(<span class=\"string\">\"lastname\"</span>) <span class=\"comment\">// shortcut for c.Request.URL.Query().Get(\"lastname\")</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST</span></span><br><span class=\"line\">message := c.PostForm(<span class=\"string\">\"message\"</span>)</span><br><span class=\"line\">nick := c.DefaultPostForm(<span class=\"string\">\"nick\"</span>, <span class=\"string\">\"anonymous\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上传文件</span></span><br><span class=\"line\">file, _ := c.FormFile(<span class=\"string\">\"file\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 多文件上传</span></span><br><span class=\"line\">form, _ := c.MultipartForm()</span><br><span class=\"line\">files := form.File[<span class=\"string\">\"upload[]\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Login <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  User     <span class=\"keyword\">string</span> <span class=\"string\">`form:\"user\" json:\"user\" xml:\"user\"  binding:\"required\"`</span></span><br><span class=\"line\">  Password <span class=\"keyword\">string</span> <span class=\"string\">`form:\"password\" json:\"password\" xml:\"password\" binding:\"required\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bind JSON:  &#123;\"user\": \"manu\", \"password\": \"123\"&#125;</span></span><br><span class=\"line\">c.ShouldBindJSON(&amp;json)</span><br><span class=\"line\"><span class=\"comment\">// bind XML:   </span></span><br><span class=\"line\"><span class=\"comment\">//  &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//  &lt;root&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//    &lt;user&gt;user&lt;/user&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//    &lt;password&gt;123&lt;/user&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//  &lt;/root&gt;</span></span><br><span class=\"line\">c.ShouldBindXML(&amp;xml)</span><br><span class=\"line\"><span class=\"comment\">// bind form:  user=manu&amp;password=123</span></span><br><span class=\"line\">c.ShouldBind(&amp;form)</span><br></pre></td></tr></table></figure>\n"},{"_content":"## [golang Standard library](https://golang.org/pkg/#stdlib)\n\n\n\n","source":"_posts/backend/go/goStandardLib/REDEME.md","raw":"## [golang Standard library](https://golang.org/pkg/#stdlib)\n\n\n\n","slug":"backend/go/goStandardLib/REDEME","published":1,"date":"2018-11-10T01:46:46.584Z","updated":"2018-11-10T01:49:03.363Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgxk003z8seopfapwy3o","content":"<h2 id=\"golang-Standard-library\"><a href=\"#golang-Standard-library\" class=\"headerlink\" title=\"golang Standard library\"></a><a href=\"https://golang.org/pkg/#stdlib\" target=\"_blank\" rel=\"noopener\">golang Standard library</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"golang-Standard-library\"><a href=\"#golang-Standard-library\" class=\"headerlink\" title=\"golang Standard library\"></a><a href=\"https://golang.org/pkg/#stdlib\" target=\"_blank\" rel=\"noopener\">golang Standard library</a></h2>"},{"title":"fsm 笔记","date":"2019-06-04T06:52:00.000Z","_content":"\n参考: <https://www.cnblogs.com/21207-iHome/p/6085334.html>\n\n参考代码: <https://godoc.org/github.com/docker/infrakit/pkg/fsm>\n\n\n\n![状态机架构图 2](./状态机架构图 2.jpg)","source":"_posts/backend/go/fsm/fsm理解.md","raw":"---\ntitle: fsm 笔记\ndate: 2019-06-04 14:52:00\ncategories:\n- backend\ntags:\n- go\n- fsm\n---\n\n参考: <https://www.cnblogs.com/21207-iHome/p/6085334.html>\n\n参考代码: <https://godoc.org/github.com/docker/infrakit/pkg/fsm>\n\n\n\n![状态机架构图 2](./状态机架构图 2.jpg)","slug":"backend/go/fsm/fsm理解","published":1,"updated":"2019-06-04T07:21:28.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgxp00418seo15vyj1jh","content":"<p>参考: <a href=\"https://www.cnblogs.com/21207-iHome/p/6085334.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/21207-iHome/p/6085334.html</a></p>\n<p>参考代码: <a href=\"https://godoc.org/github.com/docker/infrakit/pkg/fsm\" target=\"_blank\" rel=\"noopener\">https://godoc.org/github.com/docker/infrakit/pkg/fsm</a></p>\n<p><img src=\"./状态机架构图 2.jpg\" alt=\"状态机架构图 2\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考: <a href=\"https://www.cnblogs.com/21207-iHome/p/6085334.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/21207-iHome/p/6085334.html</a></p>\n<p>参考代码: <a href=\"https://godoc.org/github.com/docker/infrakit/pkg/fsm\" target=\"_blank\" rel=\"noopener\">https://godoc.org/github.com/docker/infrakit/pkg/fsm</a></p>\n<p><img src=\"./状态机架构图 2.jpg\" alt=\"状态机架构图 2\"></p>\n"},{"_content":"# log\n\n### 引用 log 包\n\n```go\nlog.Printf(\"hello log %s\", \"!!\")\n```\n\n\n\n### 源码\n\n```go\n# Printf\nfunc Printf(format string, v ...interface{}) {\n\tstd.Output(2, fmt.Sprintf(format, v...))\n}\n\n# std 启用的是系统标准错误流\nvar std = New(os.Stderr, \"\", LstdFlags)\n\nfunc New(out io.Writer, prefix string, flag int) *Logger {\n\treturn &Logger{out: out, prefix: prefix, flag: flag}\n}\n\n# Logger \ntype Logger struct {\n\tmu     sync.Mutex // ensures atomic writes; protects the following fields\n\tprefix string     // prefix to write at beginning of each line\n\tflag   int        // properties\n\tout    io.Writer  // destination for output\n\tbuf    []byte     // for accumulating text to write\n}\n\n// Output writes the output for a logging event. The string s contains\n// the text to print after the prefix specified by the flags of the\n// Logger. A newline is appended if the last character of s is not\n// already a newline. Calldepth is used to recover the PC and is\n// provided for generality, although at the moment on all pre-defined\n// paths it will be 2.\nfunc (l *Logger) Output(calldepth int, s string) error {\n\tnow := time.Now() // get this early.\n\tvar file string\n\tvar line int\n\tl.mu.Lock()\n\tdefer l.mu.Unlock()\n\tif l.flag&(Lshortfile|Llongfile) != 0 {\n\t\t// Release lock while getting caller info - it's expensive.\n\t\tl.mu.Unlock()\n\t\tvar ok bool\n\t\t_, file, line, ok = runtime.Caller(calldepth)\n\t\tif !ok {\n\t\t\tfile = \"???\"\n\t\t\tline = 0\n\t\t}\n\t\tl.mu.Lock()\n\t}\n\tl.buf = l.buf[:0]\n\tl.formatHeader(&l.buf, now, file, line)\n\tl.buf = append(l.buf, s...)\n\tif len(s) == 0 || s[len(s)-1] != '\\n' {\n\t\tl.buf = append(l.buf, '\\n')\n\t}\n\t_, err := l.out.Write(l.buf)\n\treturn err\n}\n```\n\n","source":"_posts/backend/go/goStandardLib/log.md","raw":"# log\n\n### 引用 log 包\n\n```go\nlog.Printf(\"hello log %s\", \"!!\")\n```\n\n\n\n### 源码\n\n```go\n# Printf\nfunc Printf(format string, v ...interface{}) {\n\tstd.Output(2, fmt.Sprintf(format, v...))\n}\n\n# std 启用的是系统标准错误流\nvar std = New(os.Stderr, \"\", LstdFlags)\n\nfunc New(out io.Writer, prefix string, flag int) *Logger {\n\treturn &Logger{out: out, prefix: prefix, flag: flag}\n}\n\n# Logger \ntype Logger struct {\n\tmu     sync.Mutex // ensures atomic writes; protects the following fields\n\tprefix string     // prefix to write at beginning of each line\n\tflag   int        // properties\n\tout    io.Writer  // destination for output\n\tbuf    []byte     // for accumulating text to write\n}\n\n// Output writes the output for a logging event. The string s contains\n// the text to print after the prefix specified by the flags of the\n// Logger. A newline is appended if the last character of s is not\n// already a newline. Calldepth is used to recover the PC and is\n// provided for generality, although at the moment on all pre-defined\n// paths it will be 2.\nfunc (l *Logger) Output(calldepth int, s string) error {\n\tnow := time.Now() // get this early.\n\tvar file string\n\tvar line int\n\tl.mu.Lock()\n\tdefer l.mu.Unlock()\n\tif l.flag&(Lshortfile|Llongfile) != 0 {\n\t\t// Release lock while getting caller info - it's expensive.\n\t\tl.mu.Unlock()\n\t\tvar ok bool\n\t\t_, file, line, ok = runtime.Caller(calldepth)\n\t\tif !ok {\n\t\t\tfile = \"???\"\n\t\t\tline = 0\n\t\t}\n\t\tl.mu.Lock()\n\t}\n\tl.buf = l.buf[:0]\n\tl.formatHeader(&l.buf, now, file, line)\n\tl.buf = append(l.buf, s...)\n\tif len(s) == 0 || s[len(s)-1] != '\\n' {\n\t\tl.buf = append(l.buf, '\\n')\n\t}\n\t_, err := l.out.Write(l.buf)\n\treturn err\n}\n```\n\n","slug":"backend/go/goStandardLib/log","published":1,"date":"2018-11-29T09:31:17.960Z","updated":"2018-11-29T09:47:13.098Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgxr00438seofd6svrci","content":"<h1 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h1><h3 id=\"引用-log-包\"><a href=\"#引用-log-包\" class=\"headerlink\" title=\"引用 log 包\"></a>引用 log 包</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log.Printf(<span class=\"string\">\"hello log %s\"</span>, <span class=\"string\">\"!!\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Printf</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Printf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tstd.Output(<span class=\"number\">2</span>, fmt.Sprintf(format, v...))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># std 启用的是系统标准错误流</span><br><span class=\"line\"><span class=\"keyword\">var</span> std = New(os.Stderr, <span class=\"string\">\"\"</span>, LstdFlags)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">New</span><span class=\"params\">(out io.Writer, prefix <span class=\"keyword\">string</span>, flag <span class=\"keyword\">int</span>)</span> *<span class=\"title\">Logger</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;Logger&#123;out: out, prefix: prefix, flag: flag&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># Logger </span><br><span class=\"line\"><span class=\"keyword\">type</span> Logger <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tmu     sync.Mutex <span class=\"comment\">// ensures atomic writes; protects the following fields</span></span><br><span class=\"line\">\tprefix <span class=\"keyword\">string</span>     <span class=\"comment\">// prefix to write at beginning of each line</span></span><br><span class=\"line\">\tflag   <span class=\"keyword\">int</span>        <span class=\"comment\">// properties</span></span><br><span class=\"line\">\tout    io.Writer  <span class=\"comment\">// destination for output</span></span><br><span class=\"line\">\tbuf    []<span class=\"keyword\">byte</span>     <span class=\"comment\">// for accumulating text to write</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Output writes the output for a logging event. The string s contains</span></span><br><span class=\"line\"><span class=\"comment\">// the text to print after the prefix specified by the flags of the</span></span><br><span class=\"line\"><span class=\"comment\">// Logger. A newline is appended if the last character of s is not</span></span><br><span class=\"line\"><span class=\"comment\">// already a newline. Calldepth is used to recover the PC and is</span></span><br><span class=\"line\"><span class=\"comment\">// provided for generality, although at the moment on all pre-defined</span></span><br><span class=\"line\"><span class=\"comment\">// paths it will be 2.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Logger)</span> <span class=\"title\">Output</span><span class=\"params\">(calldepth <span class=\"keyword\">int</span>, s <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tnow := time.Now() <span class=\"comment\">// get this early.</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> file <span class=\"keyword\">string</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> line <span class=\"keyword\">int</span></span><br><span class=\"line\">\tl.mu.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> l.mu.Unlock()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> l.flag&amp;(Lshortfile|Llongfile) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Release lock while getting caller info - it's expensive.</span></span><br><span class=\"line\">\t\tl.mu.Unlock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ok <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t\t_, file, line, ok = runtime.Caller(calldepth)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\t\tfile = <span class=\"string\">\"???\"</span></span><br><span class=\"line\">\t\t\tline = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tl.mu.Lock()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tl.buf = l.buf[:<span class=\"number\">0</span>]</span><br><span class=\"line\">\tl.formatHeader(&amp;l.buf, now, file, line)</span><br><span class=\"line\">\tl.buf = <span class=\"built_in\">append</span>(l.buf, s...)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s) == <span class=\"number\">0</span> || s[<span class=\"built_in\">len</span>(s)<span class=\"number\">-1</span>] != <span class=\"string\">'\\n'</span> &#123;</span><br><span class=\"line\">\t\tl.buf = <span class=\"built_in\">append</span>(l.buf, <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_, err := l.out.Write(l.buf)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h1><h3 id=\"引用-log-包\"><a href=\"#引用-log-包\" class=\"headerlink\" title=\"引用 log 包\"></a>引用 log 包</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log.Printf(<span class=\"string\">\"hello log %s\"</span>, <span class=\"string\">\"!!\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Printf</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Printf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tstd.Output(<span class=\"number\">2</span>, fmt.Sprintf(format, v...))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># std 启用的是系统标准错误流</span><br><span class=\"line\"><span class=\"keyword\">var</span> std = New(os.Stderr, <span class=\"string\">\"\"</span>, LstdFlags)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">New</span><span class=\"params\">(out io.Writer, prefix <span class=\"keyword\">string</span>, flag <span class=\"keyword\">int</span>)</span> *<span class=\"title\">Logger</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;Logger&#123;out: out, prefix: prefix, flag: flag&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># Logger </span><br><span class=\"line\"><span class=\"keyword\">type</span> Logger <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tmu     sync.Mutex <span class=\"comment\">// ensures atomic writes; protects the following fields</span></span><br><span class=\"line\">\tprefix <span class=\"keyword\">string</span>     <span class=\"comment\">// prefix to write at beginning of each line</span></span><br><span class=\"line\">\tflag   <span class=\"keyword\">int</span>        <span class=\"comment\">// properties</span></span><br><span class=\"line\">\tout    io.Writer  <span class=\"comment\">// destination for output</span></span><br><span class=\"line\">\tbuf    []<span class=\"keyword\">byte</span>     <span class=\"comment\">// for accumulating text to write</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Output writes the output for a logging event. The string s contains</span></span><br><span class=\"line\"><span class=\"comment\">// the text to print after the prefix specified by the flags of the</span></span><br><span class=\"line\"><span class=\"comment\">// Logger. A newline is appended if the last character of s is not</span></span><br><span class=\"line\"><span class=\"comment\">// already a newline. Calldepth is used to recover the PC and is</span></span><br><span class=\"line\"><span class=\"comment\">// provided for generality, although at the moment on all pre-defined</span></span><br><span class=\"line\"><span class=\"comment\">// paths it will be 2.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Logger)</span> <span class=\"title\">Output</span><span class=\"params\">(calldepth <span class=\"keyword\">int</span>, s <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tnow := time.Now() <span class=\"comment\">// get this early.</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> file <span class=\"keyword\">string</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> line <span class=\"keyword\">int</span></span><br><span class=\"line\">\tl.mu.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> l.mu.Unlock()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> l.flag&amp;(Lshortfile|Llongfile) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Release lock while getting caller info - it's expensive.</span></span><br><span class=\"line\">\t\tl.mu.Unlock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ok <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t\t_, file, line, ok = runtime.Caller(calldepth)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\t\tfile = <span class=\"string\">\"???\"</span></span><br><span class=\"line\">\t\t\tline = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tl.mu.Lock()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tl.buf = l.buf[:<span class=\"number\">0</span>]</span><br><span class=\"line\">\tl.formatHeader(&amp;l.buf, now, file, line)</span><br><span class=\"line\">\tl.buf = <span class=\"built_in\">append</span>(l.buf, s...)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s) == <span class=\"number\">0</span> || s[<span class=\"built_in\">len</span>(s)<span class=\"number\">-1</span>] != <span class=\"string\">'\\n'</span> &#123;</span><br><span class=\"line\">\t\tl.buf = <span class=\"built_in\">append</span>(l.buf, <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_, err := l.out.Write(l.buf)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"# sort\n\n接口:\n\n```go\n// A type, typically a collection, that satisfies sort.Interface can be\n// sorted by the routines in this package. The methods require that the\n// elements of the collection be enumerated by an integer index.\n// 元素集合的操作接口\ntype Interface interface {\n\t// Len is the number of elements in the collection.\n    // 集合中元素的个数\n\tLen() int\n\t// Less reports whether the element with\n\t// index i should sort before the element with index j.\n    // 元素 i 是否应该在元素 j 之前\n\tLess(i, j int) bool\n\t// Swap swaps the elements with indexes i and j.\n    // 交换元素 i 和 j\n\tSwap(i, j int)\n}\n```\n\n## Sort 接口\n\nSort 用的是快排\n\n```go\nfunc Sort(data Interface) {\n\tn := data.Len()\n\tquickSort(data, 0, n, maxDepth(n))\n}\n```\n\n\n\n### quickSort()\n\n```go\nfunc quickSort(data Interface, a, b, maxDepth int) {\n\tfor b-a > 12 { // Use ShellSort for slices <= 12 elements\n\t\tif maxDepth == 0 {\n\t\t\theapSort(data, a, b)\n\t\t\treturn\n\t\t}\n\t\tmaxDepth--\n\t\tmlo, mhi := doPivot(data, a, b)\n\t\t// Avoiding recursion on the larger subproblem guarantees\n\t\t// a stack depth of at most lg(b-a).\n\t\tif mlo-a < b-mhi {\n\t\t\tquickSort(data, a, mlo, maxDepth)\n\t\t\ta = mhi // i.e., quickSort(data, mhi, b)\n\t\t} else {\n\t\t\tquickSort(data, mhi, b, maxDepth)\n\t\t\tb = mlo // i.e., quickSort(data, a, mlo)\n\t\t}\n\t}\n\tif b-a > 1 {\n\t\t// Do ShellSort pass with gap 6\n\t\t// It could be written in this simplified form cause b-a <= 12\n\t\tfor i := a + 6; i < b; i++ {\n\t\t\tif data.Less(i, i-6) {\n\t\t\t\tdata.Swap(i, i-6)\n\t\t\t}\n\t\t}\n\t\tinsertionSort(data, a, b)\n\t}\n}\n```\n\n大于12用快排,小于等于12插排, 为啥是12呢? (元素个数小于13时插入排序会比快排快吗?)\n\n\n\n","source":"_posts/backend/go/goStandardLib/sort.md","raw":"# sort\n\n接口:\n\n```go\n// A type, typically a collection, that satisfies sort.Interface can be\n// sorted by the routines in this package. The methods require that the\n// elements of the collection be enumerated by an integer index.\n// 元素集合的操作接口\ntype Interface interface {\n\t// Len is the number of elements in the collection.\n    // 集合中元素的个数\n\tLen() int\n\t// Less reports whether the element with\n\t// index i should sort before the element with index j.\n    // 元素 i 是否应该在元素 j 之前\n\tLess(i, j int) bool\n\t// Swap swaps the elements with indexes i and j.\n    // 交换元素 i 和 j\n\tSwap(i, j int)\n}\n```\n\n## Sort 接口\n\nSort 用的是快排\n\n```go\nfunc Sort(data Interface) {\n\tn := data.Len()\n\tquickSort(data, 0, n, maxDepth(n))\n}\n```\n\n\n\n### quickSort()\n\n```go\nfunc quickSort(data Interface, a, b, maxDepth int) {\n\tfor b-a > 12 { // Use ShellSort for slices <= 12 elements\n\t\tif maxDepth == 0 {\n\t\t\theapSort(data, a, b)\n\t\t\treturn\n\t\t}\n\t\tmaxDepth--\n\t\tmlo, mhi := doPivot(data, a, b)\n\t\t// Avoiding recursion on the larger subproblem guarantees\n\t\t// a stack depth of at most lg(b-a).\n\t\tif mlo-a < b-mhi {\n\t\t\tquickSort(data, a, mlo, maxDepth)\n\t\t\ta = mhi // i.e., quickSort(data, mhi, b)\n\t\t} else {\n\t\t\tquickSort(data, mhi, b, maxDepth)\n\t\t\tb = mlo // i.e., quickSort(data, a, mlo)\n\t\t}\n\t}\n\tif b-a > 1 {\n\t\t// Do ShellSort pass with gap 6\n\t\t// It could be written in this simplified form cause b-a <= 12\n\t\tfor i := a + 6; i < b; i++ {\n\t\t\tif data.Less(i, i-6) {\n\t\t\t\tdata.Swap(i, i-6)\n\t\t\t}\n\t\t}\n\t\tinsertionSort(data, a, b)\n\t}\n}\n```\n\n大于12用快排,小于等于12插排, 为啥是12呢? (元素个数小于13时插入排序会比快排快吗?)\n\n\n\n","slug":"backend/go/goStandardLib/sort","published":1,"date":"2018-11-29T08:43:58.955Z","updated":"2018-11-29T09:09:43.117Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgxu00458seo9yde8f99","content":"<h1 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h1><p>接口:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A type, typically a collection, that satisfies sort.Interface can be</span></span><br><span class=\"line\"><span class=\"comment\">// sorted by the routines in this package. The methods require that the</span></span><br><span class=\"line\"><span class=\"comment\">// elements of the collection be enumerated by an integer index.</span></span><br><span class=\"line\"><span class=\"comment\">// 元素集合的操作接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Interface <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Len is the number of elements in the collection.</span></span><br><span class=\"line\">    <span class=\"comment\">// 集合中元素的个数</span></span><br><span class=\"line\">\tLen() <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"comment\">// Less reports whether the element with</span></span><br><span class=\"line\">\t<span class=\"comment\">// index i should sort before the element with index j.</span></span><br><span class=\"line\">    <span class=\"comment\">// 元素 i 是否应该在元素 j 之前</span></span><br><span class=\"line\">\tLess(i, j <span class=\"keyword\">int</span>) <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t<span class=\"comment\">// Swap swaps the elements with indexes i and j.</span></span><br><span class=\"line\">    <span class=\"comment\">// 交换元素 i 和 j</span></span><br><span class=\"line\">\tSwap(i, j <span class=\"keyword\">int</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Sort-接口\"><a href=\"#Sort-接口\" class=\"headerlink\" title=\"Sort 接口\"></a>Sort 接口</h2><p>Sort 用的是快排</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Sort</span><span class=\"params\">(data Interface)</span></span> &#123;</span><br><span class=\"line\">\tn := data.Len()</span><br><span class=\"line\">\tquickSort(data, <span class=\"number\">0</span>, n, maxDepth(n))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"quickSort\"><a href=\"#quickSort\" class=\"headerlink\" title=\"quickSort()\"></a>quickSort()</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">quickSort</span><span class=\"params\">(data Interface, a, b, maxDepth <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> b-a &gt; <span class=\"number\">12</span> &#123; <span class=\"comment\">// Use ShellSort for slices &lt;= 12 elements</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> maxDepth == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\theapSort(data, a, b)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmaxDepth--</span><br><span class=\"line\">\t\tmlo, mhi := doPivot(data, a, b)</span><br><span class=\"line\">\t\t<span class=\"comment\">// Avoiding recursion on the larger subproblem guarantees</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// a stack depth of at most lg(b-a).</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> mlo-a &lt; b-mhi &#123;</span><br><span class=\"line\">\t\t\tquickSort(data, a, mlo, maxDepth)</span><br><span class=\"line\">\t\t\ta = mhi <span class=\"comment\">// i.e., quickSort(data, mhi, b)</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tquickSort(data, mhi, b, maxDepth)</span><br><span class=\"line\">\t\t\tb = mlo <span class=\"comment\">// i.e., quickSort(data, a, mlo)</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> b-a &gt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Do ShellSort pass with gap 6</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// It could be written in this simplified form cause b-a &lt;= 12</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := a + <span class=\"number\">6</span>; i &lt; b; i++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> data.Less(i, i<span class=\"number\">-6</span>) &#123;</span><br><span class=\"line\">\t\t\t\tdata.Swap(i, i<span class=\"number\">-6</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tinsertionSort(data, a, b)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大于12用快排,小于等于12插排, 为啥是12呢? (元素个数小于13时插入排序会比快排快吗?)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h1><p>接口:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A type, typically a collection, that satisfies sort.Interface can be</span></span><br><span class=\"line\"><span class=\"comment\">// sorted by the routines in this package. The methods require that the</span></span><br><span class=\"line\"><span class=\"comment\">// elements of the collection be enumerated by an integer index.</span></span><br><span class=\"line\"><span class=\"comment\">// 元素集合的操作接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Interface <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Len is the number of elements in the collection.</span></span><br><span class=\"line\">    <span class=\"comment\">// 集合中元素的个数</span></span><br><span class=\"line\">\tLen() <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"comment\">// Less reports whether the element with</span></span><br><span class=\"line\">\t<span class=\"comment\">// index i should sort before the element with index j.</span></span><br><span class=\"line\">    <span class=\"comment\">// 元素 i 是否应该在元素 j 之前</span></span><br><span class=\"line\">\tLess(i, j <span class=\"keyword\">int</span>) <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t<span class=\"comment\">// Swap swaps the elements with indexes i and j.</span></span><br><span class=\"line\">    <span class=\"comment\">// 交换元素 i 和 j</span></span><br><span class=\"line\">\tSwap(i, j <span class=\"keyword\">int</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Sort-接口\"><a href=\"#Sort-接口\" class=\"headerlink\" title=\"Sort 接口\"></a>Sort 接口</h2><p>Sort 用的是快排</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Sort</span><span class=\"params\">(data Interface)</span></span> &#123;</span><br><span class=\"line\">\tn := data.Len()</span><br><span class=\"line\">\tquickSort(data, <span class=\"number\">0</span>, n, maxDepth(n))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"quickSort\"><a href=\"#quickSort\" class=\"headerlink\" title=\"quickSort()\"></a>quickSort()</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">quickSort</span><span class=\"params\">(data Interface, a, b, maxDepth <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> b-a &gt; <span class=\"number\">12</span> &#123; <span class=\"comment\">// Use ShellSort for slices &lt;= 12 elements</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> maxDepth == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\theapSort(data, a, b)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmaxDepth--</span><br><span class=\"line\">\t\tmlo, mhi := doPivot(data, a, b)</span><br><span class=\"line\">\t\t<span class=\"comment\">// Avoiding recursion on the larger subproblem guarantees</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// a stack depth of at most lg(b-a).</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> mlo-a &lt; b-mhi &#123;</span><br><span class=\"line\">\t\t\tquickSort(data, a, mlo, maxDepth)</span><br><span class=\"line\">\t\t\ta = mhi <span class=\"comment\">// i.e., quickSort(data, mhi, b)</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tquickSort(data, mhi, b, maxDepth)</span><br><span class=\"line\">\t\t\tb = mlo <span class=\"comment\">// i.e., quickSort(data, a, mlo)</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> b-a &gt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Do ShellSort pass with gap 6</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// It could be written in this simplified form cause b-a &lt;= 12</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := a + <span class=\"number\">6</span>; i &lt; b; i++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> data.Less(i, i<span class=\"number\">-6</span>) &#123;</span><br><span class=\"line\">\t\t\t\tdata.Swap(i, i<span class=\"number\">-6</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tinsertionSort(data, a, b)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大于12用快排,小于等于12插排, 为啥是12呢? (元素个数小于13时插入排序会比快排快吗?)</p>\n"},{"title":"grpc start learn","date":"2018-08-29T12:21:53.000Z","_content":"# ex helloworld start\n\n## 基本流程\n\n建立流程:\n1. 建 proto3 文件, 定义 service\n2. service 开发\n3. client 开发\n\n\n## 1. proto 文件\n\n```go\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n定义了一个 service Greeter , 参数: SayHello, return: HelloReply\n\n## 2. service 开发\n\n```go\nconst (\n\tport = \":50051\"\n)\n\n// server is used to implement helloworld.GreeterServer.\ntype server struct{}\n\n// 实现 helloworld.GreeterServer 方法\n// SayHello implements helloworld.GreeterServer\nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n\treturn &pb.HelloReply{Message: \"Hello \" + in.Name}, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", port)         // 开启监听\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()                       // 建一个 grpc Server\n\tpb.RegisterGreeterServer(s, &server{})      // 将 RegisterGreeterServer 服务绑定到 grpc 上\n\t// Register reflection service on gRPC server.\n\treflection.Register(s)                      // 将服务注册到 rpc 上\n\tif err := s.Serve(lis); err != nil {        // s.Serve(lis) 是将 grpc 服务绑定监听端口\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}\n```\n流程:\n> 1. 开一个监听端口\n> 2. 建立一个 rpc 服务\n> 3. 将服务绑定到 rpc 上\n> 4. 将服务注册到 rpc 上\n> 5. 绑定 grpc 服务 和 端口监听\n\n\n\n## 3. client 使用 grpc 服务\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n)\n\nconst (\n\taddress     = \"localhost:50051\"\n\tdefaultName = \"jie\"\n)\n\nfunc main() {\n\t// Set up a connection to the server.\n\tconn, err := grpc.Dial(address, grpc.WithInsecure()) // 创建客户端\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()                                  // 延迟关闭连接\n\tc := pb.NewGreeterClient(conn)                      // 新建一个Greeter连接客户端\n\n\t// Contact the server and print out its response.\n\tname := defaultName\n\tif len(os.Args) > 1 {\n\t\tname = os.Args[1]\n\t}\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second) // 设置超时 时间\n\tdefer cancel()\n\tr, err := c.SayHello(ctx, &pb.HelloRequest{Name: name}) // 使用客户端调用远程方法\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"Greeting: %s\", r.Message)\n}\n```\n\n流程: \n> 1. 创建客户端\n> 2. 新建一个Greeter连接客户端\n> 3. 设置超时 时间\n> 4. 使用客户端调用远程方法\n> 5. cloes客户端连接 and cancel()\n\n\n总结:\n\n\n\n","source":"_posts/backend/go/grpc/grpc_start_learn.md","raw":"---\ntitle: grpc start learn\ndate: 2018-08-29 20:21:53\ncategories:\n- backend\ntags:\n- go\n- grpc \n---\n# ex helloworld start\n\n## 基本流程\n\n建立流程:\n1. 建 proto3 文件, 定义 service\n2. service 开发\n3. client 开发\n\n\n## 1. proto 文件\n\n```go\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n定义了一个 service Greeter , 参数: SayHello, return: HelloReply\n\n## 2. service 开发\n\n```go\nconst (\n\tport = \":50051\"\n)\n\n// server is used to implement helloworld.GreeterServer.\ntype server struct{}\n\n// 实现 helloworld.GreeterServer 方法\n// SayHello implements helloworld.GreeterServer\nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n\treturn &pb.HelloReply{Message: \"Hello \" + in.Name}, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", port)         // 开启监听\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()                       // 建一个 grpc Server\n\tpb.RegisterGreeterServer(s, &server{})      // 将 RegisterGreeterServer 服务绑定到 grpc 上\n\t// Register reflection service on gRPC server.\n\treflection.Register(s)                      // 将服务注册到 rpc 上\n\tif err := s.Serve(lis); err != nil {        // s.Serve(lis) 是将 grpc 服务绑定监听端口\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}\n```\n流程:\n> 1. 开一个监听端口\n> 2. 建立一个 rpc 服务\n> 3. 将服务绑定到 rpc 上\n> 4. 将服务注册到 rpc 上\n> 5. 绑定 grpc 服务 和 端口监听\n\n\n\n## 3. client 使用 grpc 服务\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n)\n\nconst (\n\taddress     = \"localhost:50051\"\n\tdefaultName = \"jie\"\n)\n\nfunc main() {\n\t// Set up a connection to the server.\n\tconn, err := grpc.Dial(address, grpc.WithInsecure()) // 创建客户端\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()                                  // 延迟关闭连接\n\tc := pb.NewGreeterClient(conn)                      // 新建一个Greeter连接客户端\n\n\t// Contact the server and print out its response.\n\tname := defaultName\n\tif len(os.Args) > 1 {\n\t\tname = os.Args[1]\n\t}\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second) // 设置超时 时间\n\tdefer cancel()\n\tr, err := c.SayHello(ctx, &pb.HelloRequest{Name: name}) // 使用客户端调用远程方法\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"Greeting: %s\", r.Message)\n}\n```\n\n流程: \n> 1. 创建客户端\n> 2. 新建一个Greeter连接客户端\n> 3. 设置超时 时间\n> 4. 使用客户端调用远程方法\n> 5. cloes客户端连接 and cancel()\n\n\n总结:\n\n\n\n","slug":"backend/go/grpc/grpc_start_learn","published":1,"updated":"2018-08-29T12:22:49.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgxx00478seo1qent1rn","content":"<h1 id=\"ex-helloworld-start\"><a href=\"#ex-helloworld-start\" class=\"headerlink\" title=\"ex helloworld start\"></a>ex helloworld start</h1><h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><p>建立流程:</p>\n<ol>\n<li>建 proto3 文件, 定义 service</li>\n<li>service 开发</li>\n<li>client 开发</li>\n</ol>\n<h2 id=\"1-proto-文件\"><a href=\"#1-proto-文件\" class=\"headerlink\" title=\"1. proto 文件\"></a>1. proto 文件</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The greeting service definition.</span></span><br><span class=\"line\">service Greeter &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Sends a greeting</span></span><br><span class=\"line\">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The request message containing the user's name.</span></span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  <span class=\"keyword\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The response message containing the greetings</span></span><br><span class=\"line\">message HelloReply &#123;</span><br><span class=\"line\">  <span class=\"keyword\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义了一个 service Greeter , 参数: SayHello, return: HelloReply</p>\n<h2 id=\"2-service-开发\"><a href=\"#2-service-开发\" class=\"headerlink\" title=\"2. service 开发\"></a>2. service 开发</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tport = <span class=\"string\">\":50051\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// server is used to implement helloworld.GreeterServer.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> server <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现 helloworld.GreeterServer 方法</span></span><br><span class=\"line\"><span class=\"comment\">// SayHello implements helloworld.GreeterServer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span> <span class=\"title\">SayHello</span><span class=\"params\">(ctx context.Context, in *pb.HelloRequest)</span> <span class=\"params\">(*pb.HelloReply, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;pb.HelloReply&#123;Message: <span class=\"string\">\"Hello \"</span> + in.Name&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlis, err := net.Listen(<span class=\"string\">\"tcp\"</span>, port)         <span class=\"comment\">// 开启监听</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"failed to listen: %v\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts := grpc.NewServer()                       <span class=\"comment\">// 建一个 grpc Server</span></span><br><span class=\"line\">\tpb.RegisterGreeterServer(s, &amp;server&#123;&#125;)      <span class=\"comment\">// 将 RegisterGreeterServer 服务绑定到 grpc 上</span></span><br><span class=\"line\">\t<span class=\"comment\">// Register reflection service on gRPC server.</span></span><br><span class=\"line\">\treflection.Register(s)                      <span class=\"comment\">// 将服务注册到 rpc 上</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := s.Serve(lis); err != <span class=\"literal\">nil</span> &#123;        <span class=\"comment\">// s.Serve(lis) 是将 grpc 服务绑定监听端口</span></span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"failed to serve: %v\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>流程:</p>\n<blockquote>\n<ol>\n<li>开一个监听端口</li>\n<li>建立一个 rpc 服务</li>\n<li>将服务绑定到 rpc 上</li>\n<li>将服务注册到 rpc 上</li>\n<li>绑定 grpc 服务 和 端口监听</li>\n</ol>\n</blockquote>\n<h2 id=\"3-client-使用-grpc-服务\"><a href=\"#3-client-使用-grpc-服务\" class=\"headerlink\" title=\"3. client 使用 grpc 服务\"></a>3. client 使用 grpc 服务</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"golang.org/x/net/context\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"google.golang.org/grpc\"</span></span><br><span class=\"line\">\tpb <span class=\"string\">\"google.golang.org/grpc/examples/helloworld/helloworld\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\taddress     = <span class=\"string\">\"localhost:50051\"</span></span><br><span class=\"line\">\tdefaultName = <span class=\"string\">\"jie\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Set up a connection to the server.</span></span><br><span class=\"line\">\tconn, err := grpc.Dial(address, grpc.WithInsecure()) <span class=\"comment\">// 创建客户端</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"did not connect: %v\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()                                  <span class=\"comment\">// 延迟关闭连接</span></span><br><span class=\"line\">\tc := pb.NewGreeterClient(conn)                      <span class=\"comment\">// 新建一个Greeter连接客户端</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Contact the server and print out its response.</span></span><br><span class=\"line\">\tname := defaultName</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) &gt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\tname = os.Args[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tctx, cancel := context.WithTimeout(context.Background(), time.Second) <span class=\"comment\">// 设置超时 时间</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\">\tr, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: name&#125;) <span class=\"comment\">// 使用客户端调用远程方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"could not greet: %v\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">\"Greeting: %s\"</span>, r.Message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>流程: </p>\n<blockquote>\n<ol>\n<li>创建客户端</li>\n<li>新建一个Greeter连接客户端</li>\n<li>设置超时 时间</li>\n<li>使用客户端调用远程方法</li>\n<li>cloes客户端连接 and cancel()</li>\n</ol>\n</blockquote>\n<p>总结:</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ex-helloworld-start\"><a href=\"#ex-helloworld-start\" class=\"headerlink\" title=\"ex helloworld start\"></a>ex helloworld start</h1><h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><p>建立流程:</p>\n<ol>\n<li>建 proto3 文件, 定义 service</li>\n<li>service 开发</li>\n<li>client 开发</li>\n</ol>\n<h2 id=\"1-proto-文件\"><a href=\"#1-proto-文件\" class=\"headerlink\" title=\"1. proto 文件\"></a>1. proto 文件</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The greeting service definition.</span></span><br><span class=\"line\">service Greeter &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Sends a greeting</span></span><br><span class=\"line\">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The request message containing the user's name.</span></span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  <span class=\"keyword\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The response message containing the greetings</span></span><br><span class=\"line\">message HelloReply &#123;</span><br><span class=\"line\">  <span class=\"keyword\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义了一个 service Greeter , 参数: SayHello, return: HelloReply</p>\n<h2 id=\"2-service-开发\"><a href=\"#2-service-开发\" class=\"headerlink\" title=\"2. service 开发\"></a>2. service 开发</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tport = <span class=\"string\">\":50051\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// server is used to implement helloworld.GreeterServer.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> server <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现 helloworld.GreeterServer 方法</span></span><br><span class=\"line\"><span class=\"comment\">// SayHello implements helloworld.GreeterServer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span> <span class=\"title\">SayHello</span><span class=\"params\">(ctx context.Context, in *pb.HelloRequest)</span> <span class=\"params\">(*pb.HelloReply, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;pb.HelloReply&#123;Message: <span class=\"string\">\"Hello \"</span> + in.Name&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlis, err := net.Listen(<span class=\"string\">\"tcp\"</span>, port)         <span class=\"comment\">// 开启监听</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"failed to listen: %v\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts := grpc.NewServer()                       <span class=\"comment\">// 建一个 grpc Server</span></span><br><span class=\"line\">\tpb.RegisterGreeterServer(s, &amp;server&#123;&#125;)      <span class=\"comment\">// 将 RegisterGreeterServer 服务绑定到 grpc 上</span></span><br><span class=\"line\">\t<span class=\"comment\">// Register reflection service on gRPC server.</span></span><br><span class=\"line\">\treflection.Register(s)                      <span class=\"comment\">// 将服务注册到 rpc 上</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := s.Serve(lis); err != <span class=\"literal\">nil</span> &#123;        <span class=\"comment\">// s.Serve(lis) 是将 grpc 服务绑定监听端口</span></span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"failed to serve: %v\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>流程:</p>\n<blockquote>\n<ol>\n<li>开一个监听端口</li>\n<li>建立一个 rpc 服务</li>\n<li>将服务绑定到 rpc 上</li>\n<li>将服务注册到 rpc 上</li>\n<li>绑定 grpc 服务 和 端口监听</li>\n</ol>\n</blockquote>\n<h2 id=\"3-client-使用-grpc-服务\"><a href=\"#3-client-使用-grpc-服务\" class=\"headerlink\" title=\"3. client 使用 grpc 服务\"></a>3. client 使用 grpc 服务</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"golang.org/x/net/context\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"google.golang.org/grpc\"</span></span><br><span class=\"line\">\tpb <span class=\"string\">\"google.golang.org/grpc/examples/helloworld/helloworld\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\taddress     = <span class=\"string\">\"localhost:50051\"</span></span><br><span class=\"line\">\tdefaultName = <span class=\"string\">\"jie\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Set up a connection to the server.</span></span><br><span class=\"line\">\tconn, err := grpc.Dial(address, grpc.WithInsecure()) <span class=\"comment\">// 创建客户端</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"did not connect: %v\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()                                  <span class=\"comment\">// 延迟关闭连接</span></span><br><span class=\"line\">\tc := pb.NewGreeterClient(conn)                      <span class=\"comment\">// 新建一个Greeter连接客户端</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Contact the server and print out its response.</span></span><br><span class=\"line\">\tname := defaultName</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) &gt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\tname = os.Args[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tctx, cancel := context.WithTimeout(context.Background(), time.Second) <span class=\"comment\">// 设置超时 时间</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\">\tr, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: name&#125;) <span class=\"comment\">// 使用客户端调用远程方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"could not greet: %v\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">\"Greeting: %s\"</span>, r.Message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>流程: </p>\n<blockquote>\n<ol>\n<li>创建客户端</li>\n<li>新建一个Greeter连接客户端</li>\n<li>设置超时 时间</li>\n<li>使用客户端调用远程方法</li>\n<li>cloes客户端连接 and cancel()</li>\n</ol>\n</blockquote>\n<p>总结:</p>\n"},{"title":"goose learn start","date":"2018-08-29T12:12:00.000Z","_content":"\n## what goose\n\n> goose is a database migration tool.\n> You can manage your database's evolution by creating incremental SQL or Go scripts.\n\n## install\n\n这个前提是需要安装 golang, 并会就 `goose` 命令生成到 `$GOPATH/bin` 目录下.\n```shell\n$ go get bitbucket.org/liamstask/goose/cmd/goose\n```\n\n## Usage\n\n```shell\n$ goose\n\ngoose is a database migration management system for Go projects.\n\nUsage:\n    goose [options] <subcommand> [subcommand options]\n\nOptions:\n  -env string\n    \twhich DB environment to use (default \"development\")\n  -path string\n    \tfolder containing db info (default \"db\")\n  -pgschema string\n    \twhich postgres-schema to migrate (default = none)\n\nCommands:\n    up         Migrate the DB to the most recent version available\n    down       Roll back the version by 1\n    redo       Re-run the latest migration\n    status     dump the migration status for the current DB\n    create     Create the scaffolding for a new migration\n    dbversion  Print the current version of the database\n\n```\n\n### create\n\n创建一个新的 migration , 这个创建的是 go migration\n```shell\ngoose create AddSomeColumns\n```\n\n如果是创建 sql migration 的话, 在后边加个 sql 即可.\n```shell\ngoose create AddSomeColumns sql\n```\n\n### up \n\n应用所有可用的 migrations\n\n```shell\ngoose up\n```\n\n### down\n\n从当前版本回滚单个 migrations\n```shell\ngoose down\n```\n\n### redo\n\n回滚最近应用的 migrations ，然后再次运行它。\n\n```shell\ngoose redo\n```\n\n### status\n打印所有 migrations 的状态：\n\n```shell\ngoose status\n```\n\n### dbversion\n\n```shell\ngoose dbversion\n```\n\n## 个人实验数据\n\n\n### 配置如下:\n\n目录结构:\n\njieLearn/\n├── dbconf.yml\n└── migrations\n    ├── 20180829163647_jieTest.sql\n    └── 20180829165529_addC4Col.sql\n\n```shell\n$ cat dbconf.yml\n\ndevelopment:\n    driver: mysql\n    open: root:password@tcp(127.0.0.1:3306)/jie_test?timeout=200ms&parseTime=true&loc=Local\n\n```\n\n\n```shell\n$ cat jieLearn/migrations/20180829163647_jieTest.sql\n\n-- +goose Up\n-- SQL in section 'Up' is executed when this migration is applied\nCREATE TABLE `jie_test`.`test_table` (\n  `c1` INT NOT NULL,\n  `c2` VARCHAR(45) NULL,\n  `c3` VARCHAR(45) NULL,\n  PRIMARY KEY (`c1`));\n\n\n-- +goose Down\n-- SQL section 'Down' is executed when this migration is rolled back\nDROP TABLE `jie_test`.`test_table`;\n\n\n$ cat jieLearn/migrations/20180829165529_addC4Col.sql\n\n-- +goose Up\n-- SQL in section 'Up' is executed when this migration is applied\nALTER TABLE `jie_test`.`test_table`\nADD COLUMN `c4` VARCHAR(45) NULL AFTER `c3`;\n\n\n\n-- +goose Down\n-- SQL section 'Down' is executed when this migration is rolled back\nALTER TABLE `jie_test`.`test_table`\nDROP COLUMN `c4`;\n\n\n$ goose -path \"jieLearn\" up\n$ goose -path \"jieLearn\" down\n\n```\n\n### 数据库\n\nnew table: goose_db_version, test_table\n\ngoose_db_version: content\n```\n1\t0\t1\t2018-08-29 08:33:23\n2\t20180829163647\t1\t2018-08-29 08:33:23\n3\t20180829163647\t0\t2018-08-29 08:34:53\n4\t20180829163647\t1\t2018-08-29 08:35:35\n5\t20180829165529\t1\t2018-08-29 08:42:39\n6\t20180829165529\t0\t2018-08-29 08:43:00\n```\n\n\n\n参考: [https://bitbucket.org/liamstask/goose](https://bitbucket.org/liamstask/goose)\n","source":"_posts/backend/go/goose/goose_start_learn.md","raw":"---\ntitle: goose learn start\ndate: 2018-08-29 20:12:00\ncategories:\n- backend\ntags:\n- go\n- goose\n---\n\n## what goose\n\n> goose is a database migration tool.\n> You can manage your database's evolution by creating incremental SQL or Go scripts.\n\n## install\n\n这个前提是需要安装 golang, 并会就 `goose` 命令生成到 `$GOPATH/bin` 目录下.\n```shell\n$ go get bitbucket.org/liamstask/goose/cmd/goose\n```\n\n## Usage\n\n```shell\n$ goose\n\ngoose is a database migration management system for Go projects.\n\nUsage:\n    goose [options] <subcommand> [subcommand options]\n\nOptions:\n  -env string\n    \twhich DB environment to use (default \"development\")\n  -path string\n    \tfolder containing db info (default \"db\")\n  -pgschema string\n    \twhich postgres-schema to migrate (default = none)\n\nCommands:\n    up         Migrate the DB to the most recent version available\n    down       Roll back the version by 1\n    redo       Re-run the latest migration\n    status     dump the migration status for the current DB\n    create     Create the scaffolding for a new migration\n    dbversion  Print the current version of the database\n\n```\n\n### create\n\n创建一个新的 migration , 这个创建的是 go migration\n```shell\ngoose create AddSomeColumns\n```\n\n如果是创建 sql migration 的话, 在后边加个 sql 即可.\n```shell\ngoose create AddSomeColumns sql\n```\n\n### up \n\n应用所有可用的 migrations\n\n```shell\ngoose up\n```\n\n### down\n\n从当前版本回滚单个 migrations\n```shell\ngoose down\n```\n\n### redo\n\n回滚最近应用的 migrations ，然后再次运行它。\n\n```shell\ngoose redo\n```\n\n### status\n打印所有 migrations 的状态：\n\n```shell\ngoose status\n```\n\n### dbversion\n\n```shell\ngoose dbversion\n```\n\n## 个人实验数据\n\n\n### 配置如下:\n\n目录结构:\n\njieLearn/\n├── dbconf.yml\n└── migrations\n    ├── 20180829163647_jieTest.sql\n    └── 20180829165529_addC4Col.sql\n\n```shell\n$ cat dbconf.yml\n\ndevelopment:\n    driver: mysql\n    open: root:password@tcp(127.0.0.1:3306)/jie_test?timeout=200ms&parseTime=true&loc=Local\n\n```\n\n\n```shell\n$ cat jieLearn/migrations/20180829163647_jieTest.sql\n\n-- +goose Up\n-- SQL in section 'Up' is executed when this migration is applied\nCREATE TABLE `jie_test`.`test_table` (\n  `c1` INT NOT NULL,\n  `c2` VARCHAR(45) NULL,\n  `c3` VARCHAR(45) NULL,\n  PRIMARY KEY (`c1`));\n\n\n-- +goose Down\n-- SQL section 'Down' is executed when this migration is rolled back\nDROP TABLE `jie_test`.`test_table`;\n\n\n$ cat jieLearn/migrations/20180829165529_addC4Col.sql\n\n-- +goose Up\n-- SQL in section 'Up' is executed when this migration is applied\nALTER TABLE `jie_test`.`test_table`\nADD COLUMN `c4` VARCHAR(45) NULL AFTER `c3`;\n\n\n\n-- +goose Down\n-- SQL section 'Down' is executed when this migration is rolled back\nALTER TABLE `jie_test`.`test_table`\nDROP COLUMN `c4`;\n\n\n$ goose -path \"jieLearn\" up\n$ goose -path \"jieLearn\" down\n\n```\n\n### 数据库\n\nnew table: goose_db_version, test_table\n\ngoose_db_version: content\n```\n1\t0\t1\t2018-08-29 08:33:23\n2\t20180829163647\t1\t2018-08-29 08:33:23\n3\t20180829163647\t0\t2018-08-29 08:34:53\n4\t20180829163647\t1\t2018-08-29 08:35:35\n5\t20180829165529\t1\t2018-08-29 08:42:39\n6\t20180829165529\t0\t2018-08-29 08:43:00\n```\n\n\n\n参考: [https://bitbucket.org/liamstask/goose](https://bitbucket.org/liamstask/goose)\n","slug":"backend/go/goose/goose_start_learn","published":1,"updated":"2018-08-29T12:13:18.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgxz004a8seo61vd0iyv","content":"<h2 id=\"what-goose\"><a href=\"#what-goose\" class=\"headerlink\" title=\"what goose\"></a>what goose</h2><blockquote>\n<p>goose is a database migration tool.<br>You can manage your database’s evolution by creating incremental SQL or Go scripts.</p>\n</blockquote>\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><p>这个前提是需要安装 golang, 并会就 <code>goose</code> 命令生成到 <code>$GOPATH/bin</code> 目录下.<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> go get bitbucket.org/liamstask/goose/cmd/goose</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> goose</span></span><br><span class=\"line\"></span><br><span class=\"line\">goose is a database migration management system for Go projects.</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">    goose [options] &lt;subcommand&gt; [subcommand options]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -env string</span><br><span class=\"line\">    \twhich DB environment to use (default \"development\")</span><br><span class=\"line\">  -path string</span><br><span class=\"line\">    \tfolder containing db info (default \"db\")</span><br><span class=\"line\">  -pgschema string</span><br><span class=\"line\">    \twhich postgres-schema to migrate (default = none)</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">    up         Migrate the DB to the most recent version available</span><br><span class=\"line\">    down       Roll back the version by 1</span><br><span class=\"line\">    redo       Re-run the latest migration</span><br><span class=\"line\">    status     dump the migration status for the current DB</span><br><span class=\"line\">    create     Create the scaffolding for a new migration</span><br><span class=\"line\">    dbversion  Print the current version of the database</span><br></pre></td></tr></table></figure>\n<h3 id=\"create\"><a href=\"#create\" class=\"headerlink\" title=\"create\"></a>create</h3><p>创建一个新的 migration , 这个创建的是 go migration<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goose create AddSomeColumns</span><br></pre></td></tr></table></figure></p>\n<p>如果是创建 sql migration 的话, 在后边加个 sql 即可.<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goose create AddSomeColumns sql</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"up\"><a href=\"#up\" class=\"headerlink\" title=\"up\"></a>up</h3><p>应用所有可用的 migrations</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goose up</span><br></pre></td></tr></table></figure>\n<h3 id=\"down\"><a href=\"#down\" class=\"headerlink\" title=\"down\"></a>down</h3><p>从当前版本回滚单个 migrations<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goose down</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"redo\"><a href=\"#redo\" class=\"headerlink\" title=\"redo\"></a>redo</h3><p>回滚最近应用的 migrations ，然后再次运行它。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goose redo</span><br></pre></td></tr></table></figure>\n<h3 id=\"status\"><a href=\"#status\" class=\"headerlink\" title=\"status\"></a>status</h3><p>打印所有 migrations 的状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goose status</span><br></pre></td></tr></table></figure>\n<h3 id=\"dbversion\"><a href=\"#dbversion\" class=\"headerlink\" title=\"dbversion\"></a>dbversion</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goose dbversion</span><br></pre></td></tr></table></figure>\n<h2 id=\"个人实验数据\"><a href=\"#个人实验数据\" class=\"headerlink\" title=\"个人实验数据\"></a>个人实验数据</h2><h3 id=\"配置如下\"><a href=\"#配置如下\" class=\"headerlink\" title=\"配置如下:\"></a>配置如下:</h3><p>目录结构:</p>\n<p>jieLearn/<br>├── dbconf.yml<br>└── migrations<br>    ├── 20180829163647_jieTest.sql<br>    └── 20180829165529_addC4Col.sql</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat dbconf.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\">development:</span><br><span class=\"line\">    driver: mysql</span><br><span class=\"line\">    open: root:password@tcp(127.0.0.1:3306)/jie_test?timeout=200ms&amp;parseTime=true&amp;loc=Local</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat jieLearn/migrations/20180829163647_jieTest.sql</span></span><br><span class=\"line\"></span><br><span class=\"line\">-- +goose Up</span><br><span class=\"line\">-- SQL in section 'Up' is executed when this migration is applied</span><br><span class=\"line\">CREATE TABLE `jie_test`.`test_table` (</span><br><span class=\"line\">  `c1` INT NOT NULL,</span><br><span class=\"line\">  `c2` VARCHAR(45) NULL,</span><br><span class=\"line\">  `c3` VARCHAR(45) NULL,</span><br><span class=\"line\">  PRIMARY KEY (`c1`));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-- +goose Down</span><br><span class=\"line\">-- SQL section 'Down' is executed when this migration is rolled back</span><br><span class=\"line\">DROP TABLE `jie_test`.`test_table`;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat jieLearn/migrations/20180829165529_addC4Col.sql</span></span><br><span class=\"line\"></span><br><span class=\"line\">-- +goose Up</span><br><span class=\"line\">-- SQL in section 'Up' is executed when this migration is applied</span><br><span class=\"line\">ALTER TABLE `jie_test`.`test_table`</span><br><span class=\"line\">ADD COLUMN `c4` VARCHAR(45) NULL AFTER `c3`;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-- +goose Down</span><br><span class=\"line\">-- SQL section 'Down' is executed when this migration is rolled back</span><br><span class=\"line\">ALTER TABLE `jie_test`.`test_table`</span><br><span class=\"line\">DROP COLUMN `c4`;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> goose -path <span class=\"string\">\"jieLearn\"</span> up</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> goose -path <span class=\"string\">\"jieLearn\"</span> down</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p>new table: goose_db_version, test_table</p>\n<p>goose_db_version: content<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1\t0\t1\t2018-08-29 08:33:23</span><br><span class=\"line\">2\t20180829163647\t1\t2018-08-29 08:33:23</span><br><span class=\"line\">3\t20180829163647\t0\t2018-08-29 08:34:53</span><br><span class=\"line\">4\t20180829163647\t1\t2018-08-29 08:35:35</span><br><span class=\"line\">5\t20180829165529\t1\t2018-08-29 08:42:39</span><br><span class=\"line\">6\t20180829165529\t0\t2018-08-29 08:43:00</span><br></pre></td></tr></table></figure></p>\n<p>参考: <a href=\"https://bitbucket.org/liamstask/goose\" target=\"_blank\" rel=\"noopener\">https://bitbucket.org/liamstask/goose</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"what-goose\"><a href=\"#what-goose\" class=\"headerlink\" title=\"what goose\"></a>what goose</h2><blockquote>\n<p>goose is a database migration tool.<br>You can manage your database’s evolution by creating incremental SQL or Go scripts.</p>\n</blockquote>\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><p>这个前提是需要安装 golang, 并会就 <code>goose</code> 命令生成到 <code>$GOPATH/bin</code> 目录下.<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> go get bitbucket.org/liamstask/goose/cmd/goose</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> goose</span></span><br><span class=\"line\"></span><br><span class=\"line\">goose is a database migration management system for Go projects.</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">    goose [options] &lt;subcommand&gt; [subcommand options]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -env string</span><br><span class=\"line\">    \twhich DB environment to use (default \"development\")</span><br><span class=\"line\">  -path string</span><br><span class=\"line\">    \tfolder containing db info (default \"db\")</span><br><span class=\"line\">  -pgschema string</span><br><span class=\"line\">    \twhich postgres-schema to migrate (default = none)</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">    up         Migrate the DB to the most recent version available</span><br><span class=\"line\">    down       Roll back the version by 1</span><br><span class=\"line\">    redo       Re-run the latest migration</span><br><span class=\"line\">    status     dump the migration status for the current DB</span><br><span class=\"line\">    create     Create the scaffolding for a new migration</span><br><span class=\"line\">    dbversion  Print the current version of the database</span><br></pre></td></tr></table></figure>\n<h3 id=\"create\"><a href=\"#create\" class=\"headerlink\" title=\"create\"></a>create</h3><p>创建一个新的 migration , 这个创建的是 go migration<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goose create AddSomeColumns</span><br></pre></td></tr></table></figure></p>\n<p>如果是创建 sql migration 的话, 在后边加个 sql 即可.<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goose create AddSomeColumns sql</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"up\"><a href=\"#up\" class=\"headerlink\" title=\"up\"></a>up</h3><p>应用所有可用的 migrations</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goose up</span><br></pre></td></tr></table></figure>\n<h3 id=\"down\"><a href=\"#down\" class=\"headerlink\" title=\"down\"></a>down</h3><p>从当前版本回滚单个 migrations<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goose down</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"redo\"><a href=\"#redo\" class=\"headerlink\" title=\"redo\"></a>redo</h3><p>回滚最近应用的 migrations ，然后再次运行它。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goose redo</span><br></pre></td></tr></table></figure>\n<h3 id=\"status\"><a href=\"#status\" class=\"headerlink\" title=\"status\"></a>status</h3><p>打印所有 migrations 的状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goose status</span><br></pre></td></tr></table></figure>\n<h3 id=\"dbversion\"><a href=\"#dbversion\" class=\"headerlink\" title=\"dbversion\"></a>dbversion</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goose dbversion</span><br></pre></td></tr></table></figure>\n<h2 id=\"个人实验数据\"><a href=\"#个人实验数据\" class=\"headerlink\" title=\"个人实验数据\"></a>个人实验数据</h2><h3 id=\"配置如下\"><a href=\"#配置如下\" class=\"headerlink\" title=\"配置如下:\"></a>配置如下:</h3><p>目录结构:</p>\n<p>jieLearn/<br>├── dbconf.yml<br>└── migrations<br>    ├── 20180829163647_jieTest.sql<br>    └── 20180829165529_addC4Col.sql</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat dbconf.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\">development:</span><br><span class=\"line\">    driver: mysql</span><br><span class=\"line\">    open: root:password@tcp(127.0.0.1:3306)/jie_test?timeout=200ms&amp;parseTime=true&amp;loc=Local</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat jieLearn/migrations/20180829163647_jieTest.sql</span></span><br><span class=\"line\"></span><br><span class=\"line\">-- +goose Up</span><br><span class=\"line\">-- SQL in section 'Up' is executed when this migration is applied</span><br><span class=\"line\">CREATE TABLE `jie_test`.`test_table` (</span><br><span class=\"line\">  `c1` INT NOT NULL,</span><br><span class=\"line\">  `c2` VARCHAR(45) NULL,</span><br><span class=\"line\">  `c3` VARCHAR(45) NULL,</span><br><span class=\"line\">  PRIMARY KEY (`c1`));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-- +goose Down</span><br><span class=\"line\">-- SQL section 'Down' is executed when this migration is rolled back</span><br><span class=\"line\">DROP TABLE `jie_test`.`test_table`;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat jieLearn/migrations/20180829165529_addC4Col.sql</span></span><br><span class=\"line\"></span><br><span class=\"line\">-- +goose Up</span><br><span class=\"line\">-- SQL in section 'Up' is executed when this migration is applied</span><br><span class=\"line\">ALTER TABLE `jie_test`.`test_table`</span><br><span class=\"line\">ADD COLUMN `c4` VARCHAR(45) NULL AFTER `c3`;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-- +goose Down</span><br><span class=\"line\">-- SQL section 'Down' is executed when this migration is rolled back</span><br><span class=\"line\">ALTER TABLE `jie_test`.`test_table`</span><br><span class=\"line\">DROP COLUMN `c4`;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> goose -path <span class=\"string\">\"jieLearn\"</span> up</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> goose -path <span class=\"string\">\"jieLearn\"</span> down</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p>new table: goose_db_version, test_table</p>\n<p>goose_db_version: content<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1\t0\t1\t2018-08-29 08:33:23</span><br><span class=\"line\">2\t20180829163647\t1\t2018-08-29 08:33:23</span><br><span class=\"line\">3\t20180829163647\t0\t2018-08-29 08:34:53</span><br><span class=\"line\">4\t20180829163647\t1\t2018-08-29 08:35:35</span><br><span class=\"line\">5\t20180829165529\t1\t2018-08-29 08:42:39</span><br><span class=\"line\">6\t20180829165529\t0\t2018-08-29 08:43:00</span><br></pre></td></tr></table></figure></p>\n<p>参考: <a href=\"https://bitbucket.org/liamstask/goose\" target=\"_blank\" rel=\"noopener\">https://bitbucket.org/liamstask/goose</a></p>\n"},{"title":"服务的注册,发现","date":"2018-09-14T12:42:22.000Z","_content":"参考: https://juejin.im/post/5ad9b9596fb9a07acf55b550\n\n## 微服务之服务的注册和发现\n\n服务的注册发现功能, 能够很好的解耦服务器之间的调用功能.\n\n## 服务注册\n\n策略: \n1. 将服务注册到 kv 服务器中, 设置一个过期时间(50s ? ).\n2. 心跳续期 \n\n```go\nfunc (er *etcdRegistry) Register(ctx context.Context, target string, update naming.Update, opts ...wrapper.RegistryOptions) (err error) {\n\tvar upBytes []byte\n\tif upBytes, err = json.Marshal(update); err != nil {\n\t\treturn status.Error(codes.InvalidArgument, err.Error())\n\t}\n\n\tctx, cancel := context.WithTimeout(context.TODO(), resolverTimeOut)\n\ter.cancal = cancel\n\trgOpt := wrapper.RegistryOption{TTL: wrapper.DefaultRegInfTTL}\n\tfor _, opt := range opts {\n\t\topt(&rgOpt)\n\t}\n\n\tswitch update.Op {\n\tcase naming.Add:\n\t\tlsRsp, err := er.lsCli.Grant(ctx, int64(rgOpt.TTL/time.Second))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t//Put服务信息到etcd,并设置key的值TTL,通过后面的KeepAlive接口\n        //对TTL进行续期,超过TTL的时间未收到续期请求,则说明服务可能挂了,从而清除服务信息\n\t\tetcdOpts := []etcd.OpOption{etcd.WithLease(lsRsp.ID)}\n\t\tkey := target + \"/\" + update.Addr\n\t\t_, err = er.cli.KV.Put(ctx, key, string(upBytes), etcdOpts...)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t//保持心跳\n\t\tlsRspChan, err := er.lsCli.KeepAlive(context.TODO(), lsRsp.ID)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\t_, ok := <-lsRspChan\n\t\t\t\tif !ok {\n\t\t\t\t\tgrpclog.Fatalf(\"%v keepalive channel is closing\", key)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\tcase naming.Delete:\n\t\t_, err = er.cli.Delete(ctx, target+\"/\"+update.Addr)\n\tdefault:\n\t\treturn status.Error(codes.InvalidArgument, \"unsupported op\")\n\t}\n\treturn nil\n}\n```\n\n## 服务发现\n\n**Resolve()接口**\n```go\n//用于生成Watcher,监听注册中心中的服务信息变化\nfunc (er *etcdRegistry) Resolve(target string) (naming.Watcher, error) {\n\tctx, cancel := context.WithTimeout(context.TODO(), resolverTimeOut)\n\tw := &etcdWatcher{\n\t\tcli:    er.cli,\n\t\ttarget: target + \"/\",\n\t\tctx:    ctx,\n\t\tcancel: cancel,\n\t}\n\treturn w, nil\n}\n```\n\n**Next() 接口**\n\n```go\n//Next接口主要用于获取注册的服务信息,通过channel以及watch,当服务信息发生\n//变化时,Next接口会将变化返回给grpc框架从而实现服务信息变更.\nfunc (ew *etcdWatcher) Next() ([]*naming.Update, error) {\n\tvar updates []*naming.Update\n    //初次获取时,创建监听channel,并返回获取到的服务信息\n\tif ew.watchChan == nil {\n\t\t//create new chan\n\t\tresp, err := ew.cli.Get(ew.ctx, ew.target, etcd.WithPrefix(), etcd.WithSerializable())\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tfor _, kv := range resp.Kvs {\n\t\t\tvar upt naming.Update\n\t\t\tif err := json.Unmarshal(kv.Value, &upt); err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tupdates = append(updates, &upt)\n\t\t}\n        //创建etcd的watcher监听target(服务名)的信息.\n\t\topts := []etcd.OpOption{etcd.WithRev(resp.Header.Revision + 1), etcd.WithPrefix(), etcd.WithPrevKV()}\n\t\tew.watchChan = ew.cli.Watch(context.TODO(), ew.target, opts...)\n\t\treturn updates, nil\n\t}\n\n    //阻塞监听,服务发生变化时才返回给上层\n\twrsp, ok := <-ew.watchChan\n\tif !ok {\n\t\terr := status.Error(codes.Unavailable, \"etcd watch closed\")\n\t\treturn nil, err\n\t}\n\tif wrsp.Err() != nil {\n\t\treturn nil, wrsp.Err()\n\t}\n\tfor _, e := range wrsp.Events {\n\t\tvar upt naming.Update\n\t\tvar err error\n\t\tswitch e.Type {\n\t\tcase etcd.EventTypePut:\n\t\t\terr = json.Unmarshal(e.Kv.Value, &upt)\n\t\t\tupt.Op = naming.Add\n\t\tcase etcd.EventTypeDelete:\n\t\t\terr = json.Unmarshal(e.PrevKv.Value, &upt)\n\t\t\tupt.Op = naming.Delete\n\t\t}\n\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tupdates = append(updates, &upt)\n\t}\n\treturn updates, nil\n}\n```\n\n\n### 使用默认的grpc\n\n```go\ncli, _ := clientv3.NewFromURL(\"http://127.0.0.1:2379\")\nrs := &etcdnaming.GRPCResolver{Client: cli}\n\nb := grpc.RoundRobin(rs)\ndialOpts := []grpc.DialOption{grpc.WithBalancer(b), grpc.WithInsecure()}\nconn, err := grpc.Dial(\"jie-test\", dialOpts...)\nif err != nil {\n\tlog.Fatalf(\"did not connect: %v\", err)\n}\ndefer conn.Close()\n\nclient := pb.NewGreeterClient(conn)\n```\n\n\n\n","source":"_posts/backend/go/grpc/服务的注册_发现.md","raw":"---\ntitle: 服务的注册,发现\ndate: 2018-09-14 20:42:22\ncategories:\n- backend\ntags:\n- go\n- grpc \n- etcd\n---\n参考: https://juejin.im/post/5ad9b9596fb9a07acf55b550\n\n## 微服务之服务的注册和发现\n\n服务的注册发现功能, 能够很好的解耦服务器之间的调用功能.\n\n## 服务注册\n\n策略: \n1. 将服务注册到 kv 服务器中, 设置一个过期时间(50s ? ).\n2. 心跳续期 \n\n```go\nfunc (er *etcdRegistry) Register(ctx context.Context, target string, update naming.Update, opts ...wrapper.RegistryOptions) (err error) {\n\tvar upBytes []byte\n\tif upBytes, err = json.Marshal(update); err != nil {\n\t\treturn status.Error(codes.InvalidArgument, err.Error())\n\t}\n\n\tctx, cancel := context.WithTimeout(context.TODO(), resolverTimeOut)\n\ter.cancal = cancel\n\trgOpt := wrapper.RegistryOption{TTL: wrapper.DefaultRegInfTTL}\n\tfor _, opt := range opts {\n\t\topt(&rgOpt)\n\t}\n\n\tswitch update.Op {\n\tcase naming.Add:\n\t\tlsRsp, err := er.lsCli.Grant(ctx, int64(rgOpt.TTL/time.Second))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t//Put服务信息到etcd,并设置key的值TTL,通过后面的KeepAlive接口\n        //对TTL进行续期,超过TTL的时间未收到续期请求,则说明服务可能挂了,从而清除服务信息\n\t\tetcdOpts := []etcd.OpOption{etcd.WithLease(lsRsp.ID)}\n\t\tkey := target + \"/\" + update.Addr\n\t\t_, err = er.cli.KV.Put(ctx, key, string(upBytes), etcdOpts...)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t//保持心跳\n\t\tlsRspChan, err := er.lsCli.KeepAlive(context.TODO(), lsRsp.ID)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\t_, ok := <-lsRspChan\n\t\t\t\tif !ok {\n\t\t\t\t\tgrpclog.Fatalf(\"%v keepalive channel is closing\", key)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\tcase naming.Delete:\n\t\t_, err = er.cli.Delete(ctx, target+\"/\"+update.Addr)\n\tdefault:\n\t\treturn status.Error(codes.InvalidArgument, \"unsupported op\")\n\t}\n\treturn nil\n}\n```\n\n## 服务发现\n\n**Resolve()接口**\n```go\n//用于生成Watcher,监听注册中心中的服务信息变化\nfunc (er *etcdRegistry) Resolve(target string) (naming.Watcher, error) {\n\tctx, cancel := context.WithTimeout(context.TODO(), resolverTimeOut)\n\tw := &etcdWatcher{\n\t\tcli:    er.cli,\n\t\ttarget: target + \"/\",\n\t\tctx:    ctx,\n\t\tcancel: cancel,\n\t}\n\treturn w, nil\n}\n```\n\n**Next() 接口**\n\n```go\n//Next接口主要用于获取注册的服务信息,通过channel以及watch,当服务信息发生\n//变化时,Next接口会将变化返回给grpc框架从而实现服务信息变更.\nfunc (ew *etcdWatcher) Next() ([]*naming.Update, error) {\n\tvar updates []*naming.Update\n    //初次获取时,创建监听channel,并返回获取到的服务信息\n\tif ew.watchChan == nil {\n\t\t//create new chan\n\t\tresp, err := ew.cli.Get(ew.ctx, ew.target, etcd.WithPrefix(), etcd.WithSerializable())\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tfor _, kv := range resp.Kvs {\n\t\t\tvar upt naming.Update\n\t\t\tif err := json.Unmarshal(kv.Value, &upt); err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tupdates = append(updates, &upt)\n\t\t}\n        //创建etcd的watcher监听target(服务名)的信息.\n\t\topts := []etcd.OpOption{etcd.WithRev(resp.Header.Revision + 1), etcd.WithPrefix(), etcd.WithPrevKV()}\n\t\tew.watchChan = ew.cli.Watch(context.TODO(), ew.target, opts...)\n\t\treturn updates, nil\n\t}\n\n    //阻塞监听,服务发生变化时才返回给上层\n\twrsp, ok := <-ew.watchChan\n\tif !ok {\n\t\terr := status.Error(codes.Unavailable, \"etcd watch closed\")\n\t\treturn nil, err\n\t}\n\tif wrsp.Err() != nil {\n\t\treturn nil, wrsp.Err()\n\t}\n\tfor _, e := range wrsp.Events {\n\t\tvar upt naming.Update\n\t\tvar err error\n\t\tswitch e.Type {\n\t\tcase etcd.EventTypePut:\n\t\t\terr = json.Unmarshal(e.Kv.Value, &upt)\n\t\t\tupt.Op = naming.Add\n\t\tcase etcd.EventTypeDelete:\n\t\t\terr = json.Unmarshal(e.PrevKv.Value, &upt)\n\t\t\tupt.Op = naming.Delete\n\t\t}\n\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tupdates = append(updates, &upt)\n\t}\n\treturn updates, nil\n}\n```\n\n\n### 使用默认的grpc\n\n```go\ncli, _ := clientv3.NewFromURL(\"http://127.0.0.1:2379\")\nrs := &etcdnaming.GRPCResolver{Client: cli}\n\nb := grpc.RoundRobin(rs)\ndialOpts := []grpc.DialOption{grpc.WithBalancer(b), grpc.WithInsecure()}\nconn, err := grpc.Dial(\"jie-test\", dialOpts...)\nif err != nil {\n\tlog.Fatalf(\"did not connect: %v\", err)\n}\ndefer conn.Close()\n\nclient := pb.NewGreeterClient(conn)\n```\n\n\n\n","slug":"backend/go/grpc/服务的注册_发现","published":1,"updated":"2018-09-15T02:22:59.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgy2004d8seo98062g6g","content":"<p>参考: <a href=\"https://juejin.im/post/5ad9b9596fb9a07acf55b550\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ad9b9596fb9a07acf55b550</a></p>\n<h2 id=\"微服务之服务的注册和发现\"><a href=\"#微服务之服务的注册和发现\" class=\"headerlink\" title=\"微服务之服务的注册和发现\"></a>微服务之服务的注册和发现</h2><p>服务的注册发现功能, 能够很好的解耦服务器之间的调用功能.</p>\n<h2 id=\"服务注册\"><a href=\"#服务注册\" class=\"headerlink\" title=\"服务注册\"></a>服务注册</h2><p>策略: </p>\n<ol>\n<li>将服务注册到 kv 服务器中, 设置一个过期时间(50s ? ).</li>\n<li>心跳续期 </li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(er *etcdRegistry)</span> <span class=\"title\">Register</span><span class=\"params\">(ctx context.Context, target <span class=\"keyword\">string</span>, update naming.Update, opts ...wrapper.RegistryOptions)</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> upBytes []<span class=\"keyword\">byte</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> upBytes, err = json.Marshal(update); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> status.Error(codes.InvalidArgument, err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tctx, cancel := context.WithTimeout(context.TODO(), resolverTimeOut)</span><br><span class=\"line\">\ter.cancal = cancel</span><br><span class=\"line\">\trgOpt := wrapper.RegistryOption&#123;TTL: wrapper.DefaultRegInfTTL&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, opt := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">\t\topt(&amp;rgOpt)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> update.Op &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> naming.Add:</span><br><span class=\"line\">\t\tlsRsp, err := er.lsCli.Grant(ctx, <span class=\"keyword\">int64</span>(rgOpt.TTL/time.Second))</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//Put服务信息到etcd,并设置key的值TTL,通过后面的KeepAlive接口</span></span><br><span class=\"line\">        <span class=\"comment\">//对TTL进行续期,超过TTL的时间未收到续期请求,则说明服务可能挂了,从而清除服务信息</span></span><br><span class=\"line\">\t\tetcdOpts := []etcd.OpOption&#123;etcd.WithLease(lsRsp.ID)&#125;</span><br><span class=\"line\">\t\tkey := target + <span class=\"string\">\"/\"</span> + update.Addr</span><br><span class=\"line\">\t\t_, err = er.cli.KV.Put(ctx, key, <span class=\"keyword\">string</span>(upBytes), etcdOpts...)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//保持心跳</span></span><br><span class=\"line\">\t\tlsRspChan, err := er.lsCli.KeepAlive(context.TODO(), lsRsp.ID)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t\t_, ok := &lt;-lsRspChan</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\t\t\t\tgrpclog.Fatalf(<span class=\"string\">\"%v keepalive channel is closing\"</span>, key)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> naming.Delete:</span><br><span class=\"line\">\t\t_, err = er.cli.Delete(ctx, target+<span class=\"string\">\"/\"</span>+update.Addr)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> status.Error(codes.InvalidArgument, <span class=\"string\">\"unsupported op\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h2><p><strong>Resolve()接口</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用于生成Watcher,监听注册中心中的服务信息变化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(er *etcdRegistry)</span> <span class=\"title\">Resolve</span><span class=\"params\">(target <span class=\"keyword\">string</span>)</span> <span class=\"params\">(naming.Watcher, error)</span></span> &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithTimeout(context.TODO(), resolverTimeOut)</span><br><span class=\"line\">\tw := &amp;etcdWatcher&#123;</span><br><span class=\"line\">\t\tcli:    er.cli,</span><br><span class=\"line\">\t\ttarget: target + <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">\t\tctx:    ctx,</span><br><span class=\"line\">\t\tcancel: cancel,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> w, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Next() 接口</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Next接口主要用于获取注册的服务信息,通过channel以及watch,当服务信息发生</span></span><br><span class=\"line\"><span class=\"comment\">//变化时,Next接口会将变化返回给grpc框架从而实现服务信息变更.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ew *etcdWatcher)</span> <span class=\"title\">Next</span><span class=\"params\">()</span> <span class=\"params\">([]*naming.Update, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> updates []*naming.Update</span><br><span class=\"line\">    <span class=\"comment\">//初次获取时,创建监听channel,并返回获取到的服务信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ew.watchChan == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//create new chan</span></span><br><span class=\"line\">\t\tresp, err := ew.cli.Get(ew.ctx, ew.target, etcd.WithPrefix(), etcd.WithSerializable())</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, kv := <span class=\"keyword\">range</span> resp.Kvs &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> upt naming.Update</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err := json.Unmarshal(kv.Value, &amp;upt); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tupdates = <span class=\"built_in\">append</span>(updates, &amp;upt)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        <span class=\"comment\">//创建etcd的watcher监听target(服务名)的信息.</span></span><br><span class=\"line\">\t\topts := []etcd.OpOption&#123;etcd.WithRev(resp.Header.Revision + <span class=\"number\">1</span>), etcd.WithPrefix(), etcd.WithPrevKV()&#125;</span><br><span class=\"line\">\t\tew.watchChan = ew.cli.Watch(context.TODO(), ew.target, opts...)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> updates, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//阻塞监听,服务发生变化时才返回给上层</span></span><br><span class=\"line\">\twrsp, ok := &lt;-ew.watchChan</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\terr := status.Error(codes.Unavailable, <span class=\"string\">\"etcd watch closed\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> wrsp.Err() != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, wrsp.Err()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, e := <span class=\"keyword\">range</span> wrsp.Events &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> upt naming.Update</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> err error</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> e.Type &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> etcd.EventTypePut:</span><br><span class=\"line\">\t\t\terr = json.Unmarshal(e.Kv.Value, &amp;upt)</span><br><span class=\"line\">\t\t\tupt.Op = naming.Add</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> etcd.EventTypeDelete:</span><br><span class=\"line\">\t\t\terr = json.Unmarshal(e.PrevKv.Value, &amp;upt)</span><br><span class=\"line\">\t\t\tupt.Op = naming.Delete</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tupdates = <span class=\"built_in\">append</span>(updates, &amp;upt)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> updates, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用默认的grpc\"><a href=\"#使用默认的grpc\" class=\"headerlink\" title=\"使用默认的grpc\"></a>使用默认的grpc</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cli, _ := clientv3.NewFromURL(<span class=\"string\">\"http://127.0.0.1:2379\"</span>)</span><br><span class=\"line\">rs := &amp;etcdnaming.GRPCResolver&#123;Client: cli&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b := grpc.RoundRobin(rs)</span><br><span class=\"line\">dialOpts := []grpc.DialOption&#123;grpc.WithBalancer(b), grpc.WithInsecure()&#125;</span><br><span class=\"line\">conn, err := grpc.Dial(<span class=\"string\">\"jie-test\"</span>, dialOpts...)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tlog.Fatalf(<span class=\"string\">\"did not connect: %v\"</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">client := pb.NewGreeterClient(conn)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>参考: <a href=\"https://juejin.im/post/5ad9b9596fb9a07acf55b550\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ad9b9596fb9a07acf55b550</a></p>\n<h2 id=\"微服务之服务的注册和发现\"><a href=\"#微服务之服务的注册和发现\" class=\"headerlink\" title=\"微服务之服务的注册和发现\"></a>微服务之服务的注册和发现</h2><p>服务的注册发现功能, 能够很好的解耦服务器之间的调用功能.</p>\n<h2 id=\"服务注册\"><a href=\"#服务注册\" class=\"headerlink\" title=\"服务注册\"></a>服务注册</h2><p>策略: </p>\n<ol>\n<li>将服务注册到 kv 服务器中, 设置一个过期时间(50s ? ).</li>\n<li>心跳续期 </li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(er *etcdRegistry)</span> <span class=\"title\">Register</span><span class=\"params\">(ctx context.Context, target <span class=\"keyword\">string</span>, update naming.Update, opts ...wrapper.RegistryOptions)</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> upBytes []<span class=\"keyword\">byte</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> upBytes, err = json.Marshal(update); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> status.Error(codes.InvalidArgument, err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tctx, cancel := context.WithTimeout(context.TODO(), resolverTimeOut)</span><br><span class=\"line\">\ter.cancal = cancel</span><br><span class=\"line\">\trgOpt := wrapper.RegistryOption&#123;TTL: wrapper.DefaultRegInfTTL&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, opt := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">\t\topt(&amp;rgOpt)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> update.Op &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> naming.Add:</span><br><span class=\"line\">\t\tlsRsp, err := er.lsCli.Grant(ctx, <span class=\"keyword\">int64</span>(rgOpt.TTL/time.Second))</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//Put服务信息到etcd,并设置key的值TTL,通过后面的KeepAlive接口</span></span><br><span class=\"line\">        <span class=\"comment\">//对TTL进行续期,超过TTL的时间未收到续期请求,则说明服务可能挂了,从而清除服务信息</span></span><br><span class=\"line\">\t\tetcdOpts := []etcd.OpOption&#123;etcd.WithLease(lsRsp.ID)&#125;</span><br><span class=\"line\">\t\tkey := target + <span class=\"string\">\"/\"</span> + update.Addr</span><br><span class=\"line\">\t\t_, err = er.cli.KV.Put(ctx, key, <span class=\"keyword\">string</span>(upBytes), etcdOpts...)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//保持心跳</span></span><br><span class=\"line\">\t\tlsRspChan, err := er.lsCli.KeepAlive(context.TODO(), lsRsp.ID)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t\t_, ok := &lt;-lsRspChan</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\t\t\t\tgrpclog.Fatalf(<span class=\"string\">\"%v keepalive channel is closing\"</span>, key)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> naming.Delete:</span><br><span class=\"line\">\t\t_, err = er.cli.Delete(ctx, target+<span class=\"string\">\"/\"</span>+update.Addr)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> status.Error(codes.InvalidArgument, <span class=\"string\">\"unsupported op\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h2><p><strong>Resolve()接口</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用于生成Watcher,监听注册中心中的服务信息变化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(er *etcdRegistry)</span> <span class=\"title\">Resolve</span><span class=\"params\">(target <span class=\"keyword\">string</span>)</span> <span class=\"params\">(naming.Watcher, error)</span></span> &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithTimeout(context.TODO(), resolverTimeOut)</span><br><span class=\"line\">\tw := &amp;etcdWatcher&#123;</span><br><span class=\"line\">\t\tcli:    er.cli,</span><br><span class=\"line\">\t\ttarget: target + <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">\t\tctx:    ctx,</span><br><span class=\"line\">\t\tcancel: cancel,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> w, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Next() 接口</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Next接口主要用于获取注册的服务信息,通过channel以及watch,当服务信息发生</span></span><br><span class=\"line\"><span class=\"comment\">//变化时,Next接口会将变化返回给grpc框架从而实现服务信息变更.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ew *etcdWatcher)</span> <span class=\"title\">Next</span><span class=\"params\">()</span> <span class=\"params\">([]*naming.Update, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> updates []*naming.Update</span><br><span class=\"line\">    <span class=\"comment\">//初次获取时,创建监听channel,并返回获取到的服务信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ew.watchChan == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//create new chan</span></span><br><span class=\"line\">\t\tresp, err := ew.cli.Get(ew.ctx, ew.target, etcd.WithPrefix(), etcd.WithSerializable())</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, kv := <span class=\"keyword\">range</span> resp.Kvs &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> upt naming.Update</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err := json.Unmarshal(kv.Value, &amp;upt); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tupdates = <span class=\"built_in\">append</span>(updates, &amp;upt)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        <span class=\"comment\">//创建etcd的watcher监听target(服务名)的信息.</span></span><br><span class=\"line\">\t\topts := []etcd.OpOption&#123;etcd.WithRev(resp.Header.Revision + <span class=\"number\">1</span>), etcd.WithPrefix(), etcd.WithPrevKV()&#125;</span><br><span class=\"line\">\t\tew.watchChan = ew.cli.Watch(context.TODO(), ew.target, opts...)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> updates, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//阻塞监听,服务发生变化时才返回给上层</span></span><br><span class=\"line\">\twrsp, ok := &lt;-ew.watchChan</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\terr := status.Error(codes.Unavailable, <span class=\"string\">\"etcd watch closed\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> wrsp.Err() != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, wrsp.Err()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, e := <span class=\"keyword\">range</span> wrsp.Events &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> upt naming.Update</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> err error</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> e.Type &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> etcd.EventTypePut:</span><br><span class=\"line\">\t\t\terr = json.Unmarshal(e.Kv.Value, &amp;upt)</span><br><span class=\"line\">\t\t\tupt.Op = naming.Add</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> etcd.EventTypeDelete:</span><br><span class=\"line\">\t\t\terr = json.Unmarshal(e.PrevKv.Value, &amp;upt)</span><br><span class=\"line\">\t\t\tupt.Op = naming.Delete</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tupdates = <span class=\"built_in\">append</span>(updates, &amp;upt)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> updates, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用默认的grpc\"><a href=\"#使用默认的grpc\" class=\"headerlink\" title=\"使用默认的grpc\"></a>使用默认的grpc</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cli, _ := clientv3.NewFromURL(<span class=\"string\">\"http://127.0.0.1:2379\"</span>)</span><br><span class=\"line\">rs := &amp;etcdnaming.GRPCResolver&#123;Client: cli&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b := grpc.RoundRobin(rs)</span><br><span class=\"line\">dialOpts := []grpc.DialOption&#123;grpc.WithBalancer(b), grpc.WithInsecure()&#125;</span><br><span class=\"line\">conn, err := grpc.Dial(<span class=\"string\">\"jie-test\"</span>, dialOpts...)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tlog.Fatalf(<span class=\"string\">\"did not connect: %v\"</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">client := pb.NewGreeterClient(conn)</span><br></pre></td></tr></table></figure>\n"},{"title":"redis ops learn","date":"2018-08-29T13:07:26.000Z","_content":"## 连接测试\n\n```go\n\npackage main\n\nimport (\n\t\"github.com/go-redis/redis\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\tclient := redis.NewClient(&redis.Options{\n\t\tAddr: \"localhost:6379\",\n\t\tPassword: \"\",      //默认空密码\n\t\tDB: 0,             //使用默认数据库\n\t})\n\n\tdefer client.Close()       //最后关闭\n\n\tpong, err := client.Ping().Result()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\"Connected result: \", pong)\n}\n\n```\n\n## ops: strings\n\n```go\n// ops: strings\n//// set\nclient.Set(\"hello\", \"hello redis\",0) //忽略错误\n\n//// get string\nstr := client.Get(\"hello\")\nfmt.Println(str)\n\n//// del string\nclient.Del(\"strtest\")\n```\n\n## ops: lists\n\n```go\n// ops: lists\n//// push\nclient.LPush(\"list\",\"one\",\"two\",\"three\") //rpush则在尾部插入\n\n//// rm, pop\nclient.LRem(\"list\",2,\"three\") //删除list中前2个value为 ‘three’的元素\nclient.LPop(\"list\") //删除头部的值，同理RPop删除尾部的值。\n\n// range\nlist, _ := client.LRange(\"list\", 0, 2).Result()\nfmt.Println(\"List: \", list)\n```\n\n## ops: hashes\n\n```go\n// hashes\n//// set\nuser := make(map[string]interface{})\nuser[\"name\"] = \"jim\"\nuser[\"gender\"] = \"man\"\nuser[\"age\"] = 23\nclient.HMSet(\"user\",user)\n\n//// set\nclient.HSet(\"user\", \"name\",\"tom\")\n\n//// get\nname := client.HGet(\"user\",\"name\")\nfmt.Print(name)\n\n//// getAll\nhash, _ := client.HGetAll(\"user\").Result()\nfor k, v:= range hash{\n\tfmt.Printf(\"key: %v, value: %v \",k, v)\n}\n```\n\n参考: https://www.jianshu.com/p/4045a3721b3c","source":"_posts/backend/go/redis/redis_start_learn.md","raw":"---\ntitle: redis ops learn\ndate: 2018-08-29 21:07:26\ncategories:\n- backend\ntags:\n- go\n- redis\n---\n## 连接测试\n\n```go\n\npackage main\n\nimport (\n\t\"github.com/go-redis/redis\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\tclient := redis.NewClient(&redis.Options{\n\t\tAddr: \"localhost:6379\",\n\t\tPassword: \"\",      //默认空密码\n\t\tDB: 0,             //使用默认数据库\n\t})\n\n\tdefer client.Close()       //最后关闭\n\n\tpong, err := client.Ping().Result()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\"Connected result: \", pong)\n}\n\n```\n\n## ops: strings\n\n```go\n// ops: strings\n//// set\nclient.Set(\"hello\", \"hello redis\",0) //忽略错误\n\n//// get string\nstr := client.Get(\"hello\")\nfmt.Println(str)\n\n//// del string\nclient.Del(\"strtest\")\n```\n\n## ops: lists\n\n```go\n// ops: lists\n//// push\nclient.LPush(\"list\",\"one\",\"two\",\"three\") //rpush则在尾部插入\n\n//// rm, pop\nclient.LRem(\"list\",2,\"three\") //删除list中前2个value为 ‘three’的元素\nclient.LPop(\"list\") //删除头部的值，同理RPop删除尾部的值。\n\n// range\nlist, _ := client.LRange(\"list\", 0, 2).Result()\nfmt.Println(\"List: \", list)\n```\n\n## ops: hashes\n\n```go\n// hashes\n//// set\nuser := make(map[string]interface{})\nuser[\"name\"] = \"jim\"\nuser[\"gender\"] = \"man\"\nuser[\"age\"] = 23\nclient.HMSet(\"user\",user)\n\n//// set\nclient.HSet(\"user\", \"name\",\"tom\")\n\n//// get\nname := client.HGet(\"user\",\"name\")\nfmt.Print(name)\n\n//// getAll\nhash, _ := client.HGetAll(\"user\").Result()\nfor k, v:= range hash{\n\tfmt.Printf(\"key: %v, value: %v \",k, v)\n}\n```\n\n参考: https://www.jianshu.com/p/4045a3721b3c","slug":"backend/go/redis/redis_start_learn","published":1,"updated":"2018-08-29T13:07:54.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgy4004e8seo7s4dna2w","content":"<h2 id=\"连接测试\"><a href=\"#连接测试\" class=\"headerlink\" title=\"连接测试\"></a>连接测试</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/go-redis/redis\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tclient := redis.NewClient(&amp;redis.Options&#123;</span><br><span class=\"line\">\t\tAddr: <span class=\"string\">\"localhost:6379\"</span>,</span><br><span class=\"line\">\t\tPassword: <span class=\"string\">\"\"</span>,      <span class=\"comment\">//默认空密码</span></span><br><span class=\"line\">\t\tDB: <span class=\"number\">0</span>,             <span class=\"comment\">//使用默认数据库</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> client.Close()       <span class=\"comment\">//最后关闭</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tpong, err := client.Ping().Result()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Connected result: \"</span>, pong)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ops-strings\"><a href=\"#ops-strings\" class=\"headerlink\" title=\"ops: strings\"></a>ops: strings</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ops: strings</span></span><br><span class=\"line\"><span class=\"comment\">//// set</span></span><br><span class=\"line\">client.Set(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"hello redis\"</span>,<span class=\"number\">0</span>) <span class=\"comment\">//忽略错误</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//// get string</span></span><br><span class=\"line\">str := client.Get(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">fmt.Println(str)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//// del string</span></span><br><span class=\"line\">client.Del(<span class=\"string\">\"strtest\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ops-lists\"><a href=\"#ops-lists\" class=\"headerlink\" title=\"ops: lists\"></a>ops: lists</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ops: lists</span></span><br><span class=\"line\"><span class=\"comment\">//// push</span></span><br><span class=\"line\">client.LPush(<span class=\"string\">\"list\"</span>,<span class=\"string\">\"one\"</span>,<span class=\"string\">\"two\"</span>,<span class=\"string\">\"three\"</span>) <span class=\"comment\">//rpush则在尾部插入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//// rm, pop</span></span><br><span class=\"line\">client.LRem(<span class=\"string\">\"list\"</span>,<span class=\"number\">2</span>,<span class=\"string\">\"three\"</span>) <span class=\"comment\">//删除list中前2个value为 ‘three’的元素</span></span><br><span class=\"line\">client.LPop(<span class=\"string\">\"list\"</span>) <span class=\"comment\">//删除头部的值，同理RPop删除尾部的值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// range</span></span><br><span class=\"line\">list, _ := client.LRange(<span class=\"string\">\"list\"</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>).Result()</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"List: \"</span>, list)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ops-hashes\"><a href=\"#ops-hashes\" class=\"headerlink\" title=\"ops: hashes\"></a>ops: hashes</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hashes</span></span><br><span class=\"line\"><span class=\"comment\">//// set</span></span><br><span class=\"line\">user := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">user[<span class=\"string\">\"name\"</span>] = <span class=\"string\">\"jim\"</span></span><br><span class=\"line\">user[<span class=\"string\">\"gender\"</span>] = <span class=\"string\">\"man\"</span></span><br><span class=\"line\">user[<span class=\"string\">\"age\"</span>] = <span class=\"number\">23</span></span><br><span class=\"line\">client.HMSet(<span class=\"string\">\"user\"</span>,user)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//// set</span></span><br><span class=\"line\">client.HSet(<span class=\"string\">\"user\"</span>, <span class=\"string\">\"name\"</span>,<span class=\"string\">\"tom\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//// get</span></span><br><span class=\"line\">name := client.HGet(<span class=\"string\">\"user\"</span>,<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">fmt.Print(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//// getAll</span></span><br><span class=\"line\">hash, _ := client.HGetAll(<span class=\"string\">\"user\"</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v:= <span class=\"keyword\">range</span> hash&#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"key: %v, value: %v \"</span>,k, v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考: <a href=\"https://www.jianshu.com/p/4045a3721b3c\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4045a3721b3c</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"连接测试\"><a href=\"#连接测试\" class=\"headerlink\" title=\"连接测试\"></a>连接测试</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/go-redis/redis\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tclient := redis.NewClient(&amp;redis.Options&#123;</span><br><span class=\"line\">\t\tAddr: <span class=\"string\">\"localhost:6379\"</span>,</span><br><span class=\"line\">\t\tPassword: <span class=\"string\">\"\"</span>,      <span class=\"comment\">//默认空密码</span></span><br><span class=\"line\">\t\tDB: <span class=\"number\">0</span>,             <span class=\"comment\">//使用默认数据库</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> client.Close()       <span class=\"comment\">//最后关闭</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tpong, err := client.Ping().Result()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Connected result: \"</span>, pong)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ops-strings\"><a href=\"#ops-strings\" class=\"headerlink\" title=\"ops: strings\"></a>ops: strings</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ops: strings</span></span><br><span class=\"line\"><span class=\"comment\">//// set</span></span><br><span class=\"line\">client.Set(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"hello redis\"</span>,<span class=\"number\">0</span>) <span class=\"comment\">//忽略错误</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//// get string</span></span><br><span class=\"line\">str := client.Get(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">fmt.Println(str)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//// del string</span></span><br><span class=\"line\">client.Del(<span class=\"string\">\"strtest\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ops-lists\"><a href=\"#ops-lists\" class=\"headerlink\" title=\"ops: lists\"></a>ops: lists</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ops: lists</span></span><br><span class=\"line\"><span class=\"comment\">//// push</span></span><br><span class=\"line\">client.LPush(<span class=\"string\">\"list\"</span>,<span class=\"string\">\"one\"</span>,<span class=\"string\">\"two\"</span>,<span class=\"string\">\"three\"</span>) <span class=\"comment\">//rpush则在尾部插入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//// rm, pop</span></span><br><span class=\"line\">client.LRem(<span class=\"string\">\"list\"</span>,<span class=\"number\">2</span>,<span class=\"string\">\"three\"</span>) <span class=\"comment\">//删除list中前2个value为 ‘three’的元素</span></span><br><span class=\"line\">client.LPop(<span class=\"string\">\"list\"</span>) <span class=\"comment\">//删除头部的值，同理RPop删除尾部的值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// range</span></span><br><span class=\"line\">list, _ := client.LRange(<span class=\"string\">\"list\"</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>).Result()</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"List: \"</span>, list)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ops-hashes\"><a href=\"#ops-hashes\" class=\"headerlink\" title=\"ops: hashes\"></a>ops: hashes</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hashes</span></span><br><span class=\"line\"><span class=\"comment\">//// set</span></span><br><span class=\"line\">user := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">user[<span class=\"string\">\"name\"</span>] = <span class=\"string\">\"jim\"</span></span><br><span class=\"line\">user[<span class=\"string\">\"gender\"</span>] = <span class=\"string\">\"man\"</span></span><br><span class=\"line\">user[<span class=\"string\">\"age\"</span>] = <span class=\"number\">23</span></span><br><span class=\"line\">client.HMSet(<span class=\"string\">\"user\"</span>,user)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//// set</span></span><br><span class=\"line\">client.HSet(<span class=\"string\">\"user\"</span>, <span class=\"string\">\"name\"</span>,<span class=\"string\">\"tom\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//// get</span></span><br><span class=\"line\">name := client.HGet(<span class=\"string\">\"user\"</span>,<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">fmt.Print(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//// getAll</span></span><br><span class=\"line\">hash, _ := client.HGetAll(<span class=\"string\">\"user\"</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v:= <span class=\"keyword\">range</span> hash&#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"key: %v, value: %v \"</span>,k, v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考: <a href=\"https://www.jianshu.com/p/4045a3721b3c\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4045a3721b3c</a></p>\n"},{"title":"Part 11 - Recursively Searching the B-Tree","date":"2019-02-24T14:08:35.000Z","_content":"\n上次我们插入第15行时出错:\n```sh\ndb > insert 15 user15 person15@example.com\nNeed to implement searching an internal node\n```\n\n首先，用新的函数调用替换代码存根.\n\n```c\n   if (get_node_type(root_node) == NODE_LEAF) {\n     return leaf_node_find(table, root_page_num, key);\n   } else {\n-    printf(\"Need to implement searching an internal node\\n\");\n-    exit(EXIT_FAILURE);\n+    return internal_node_find(table, root_page_num, key);\n   }\n }\n```\n\n此函数将执行二进制搜索以查找应包含给定键的子项。请记住，每个子指针右侧的键是该子项包含的最大键。\n\n![three-level btree](https://cstack.github.io/db_tutorial/assets/images/btree6.png)\nthree-level btree\n\n所以我们的二进制搜索比较了查找的键和子指针右侧的键:\n```c\n+Cursor* internal_node_find(Table* table, uint32_t page_num, uint32_t key) {\n+  void* node = get_page(table->pager, page_num);\n+  uint32_t num_keys = *internal_node_num_keys(node);\n+\n+  /* Binary search to find index of child to search */\n+  uint32_t min_index = 0;\n+  uint32_t max_index = num_keys; /* there is one more child than key */\n+\n+  while (min_index != max_index) {\n+    uint32_t index = (min_index + max_index) / 2;\n+    uint32_t key_to_right = *internal_node_key(node, index);\n+    if (key_to_right >= key) {\n+      max_index = index;\n+    } else {\n+      min_index = index + 1;\n+    }\n+  }\n```\n\n还要记住，内部节点的子节点可以是叶节点或更多内部节点。找到正确的孩子后，在其上调用相应的搜索功能:\n```c\n+  uint32_t child_num = *internal_node_child(node, min_index);\n+  void* child = get_page(table->pager, child_num);\n+  switch (get_node_type(child)) {\n+    case NODE_LEAF:\n+      return leaf_node_find(table, child_num, key);\n+    case NODE_INTERNAL:\n+      return internal_node_find(table, child_num, key);\n+  }\n+}\n```\n\n## 测试\n\n现在，将密钥插入多节点btree不再导致错误。我们可以更新我们的测试:\n```c\n       \"    - 12\",\n       \"    - 13\",\n       \"    - 14\",\n-      \"db > Need to implement searching an internal node\",\n+      \"db > Executed.\",\n+      \"db > \",\n     ])\n   end\n```\n\n我也认为是时候重新考虑另一个测试了。尝试插入1400行的那个。它仍然是错误，但错误消息是新的。现在，当程序崩溃时，我们的测试不能很好地处理它。如果发生这种情况，让我们使用我们迄今为止得到的输出:\n\n```c\n     raw_output = nil\n     IO.popen(\"./db test.db\", \"r+\") do |pipe|\n       commands.each do |command|\n-        pipe.puts command\n+        begin\n+          pipe.puts command\n+        rescue Errno::EPIPE\n+          break\n+        end\n       end\n\n       pipe.close_write\n```\n\n这表明我们的1400行测试输出了这个错误：\n\n```c\n     end\n     script << \".exit\"\n     result = run_script(script)\n-    expect(result[-2]).to eq('db > Error: Table full.')\n+    expect(result.last(2)).to match_array([\n+      \"db > Executed.\",\n+      \"db > Need to implement updating parent after split\",\n+    ])\n   end\n```\n看起来就像我们的待办事项列表中的下一个!","source":"_posts/build_own_x/data_base/build_simple_database/Part11_recursively_seaching_the_B_tree.md","raw":"---\ntitle: Part 11 - Recursively Searching the B-Tree\ndate: 2019-02-24 22:08:35\ncategories:\n- build-own-x\ntags:\n- database\n- db原理\n---\n\n上次我们插入第15行时出错:\n```sh\ndb > insert 15 user15 person15@example.com\nNeed to implement searching an internal node\n```\n\n首先，用新的函数调用替换代码存根.\n\n```c\n   if (get_node_type(root_node) == NODE_LEAF) {\n     return leaf_node_find(table, root_page_num, key);\n   } else {\n-    printf(\"Need to implement searching an internal node\\n\");\n-    exit(EXIT_FAILURE);\n+    return internal_node_find(table, root_page_num, key);\n   }\n }\n```\n\n此函数将执行二进制搜索以查找应包含给定键的子项。请记住，每个子指针右侧的键是该子项包含的最大键。\n\n![three-level btree](https://cstack.github.io/db_tutorial/assets/images/btree6.png)\nthree-level btree\n\n所以我们的二进制搜索比较了查找的键和子指针右侧的键:\n```c\n+Cursor* internal_node_find(Table* table, uint32_t page_num, uint32_t key) {\n+  void* node = get_page(table->pager, page_num);\n+  uint32_t num_keys = *internal_node_num_keys(node);\n+\n+  /* Binary search to find index of child to search */\n+  uint32_t min_index = 0;\n+  uint32_t max_index = num_keys; /* there is one more child than key */\n+\n+  while (min_index != max_index) {\n+    uint32_t index = (min_index + max_index) / 2;\n+    uint32_t key_to_right = *internal_node_key(node, index);\n+    if (key_to_right >= key) {\n+      max_index = index;\n+    } else {\n+      min_index = index + 1;\n+    }\n+  }\n```\n\n还要记住，内部节点的子节点可以是叶节点或更多内部节点。找到正确的孩子后，在其上调用相应的搜索功能:\n```c\n+  uint32_t child_num = *internal_node_child(node, min_index);\n+  void* child = get_page(table->pager, child_num);\n+  switch (get_node_type(child)) {\n+    case NODE_LEAF:\n+      return leaf_node_find(table, child_num, key);\n+    case NODE_INTERNAL:\n+      return internal_node_find(table, child_num, key);\n+  }\n+}\n```\n\n## 测试\n\n现在，将密钥插入多节点btree不再导致错误。我们可以更新我们的测试:\n```c\n       \"    - 12\",\n       \"    - 13\",\n       \"    - 14\",\n-      \"db > Need to implement searching an internal node\",\n+      \"db > Executed.\",\n+      \"db > \",\n     ])\n   end\n```\n\n我也认为是时候重新考虑另一个测试了。尝试插入1400行的那个。它仍然是错误，但错误消息是新的。现在，当程序崩溃时，我们的测试不能很好地处理它。如果发生这种情况，让我们使用我们迄今为止得到的输出:\n\n```c\n     raw_output = nil\n     IO.popen(\"./db test.db\", \"r+\") do |pipe|\n       commands.each do |command|\n-        pipe.puts command\n+        begin\n+          pipe.puts command\n+        rescue Errno::EPIPE\n+          break\n+        end\n       end\n\n       pipe.close_write\n```\n\n这表明我们的1400行测试输出了这个错误：\n\n```c\n     end\n     script << \".exit\"\n     result = run_script(script)\n-    expect(result[-2]).to eq('db > Error: Table full.')\n+    expect(result.last(2)).to match_array([\n+      \"db > Executed.\",\n+      \"db > Need to implement updating parent after split\",\n+    ])\n   end\n```\n看起来就像我们的待办事项列表中的下一个!","slug":"build_own_x/data_base/build_simple_database/Part11_recursively_seaching_the_B_tree","published":1,"updated":"2019-02-25T01:44:35.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgy6004h8seogypgj67y","content":"<p>上次我们插入第15行时出错:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db &gt; insert 15 user15 person15@example.com</span><br><span class=\"line\">Need to implement searching an internal node</span><br></pre></td></tr></table></figure></p>\n<p>首先，用新的函数调用替换代码存根.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">if</span> (get_node_type(root_node) == NODE_LEAF) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> leaf_node_find(table, root_page_num, key);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">-    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Need to implement searching an internal node\\n\"</span>);</span><br><span class=\"line\">-    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> internal_node_find(table, root_page_num, key);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>此函数将执行二进制搜索以查找应包含给定键的子项。请记住，每个子指针右侧的键是该子项包含的最大键。</p>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree6.png\" alt=\"three-level btree\"><br>three-level btree</p>\n<p>所以我们的二进制搜索比较了查找的键和子指针右侧的键:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">internal_node_find</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> key)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(table-&gt;pager, page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_keys = *internal_node_num_keys(node);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"comment\">/* Binary search to find index of child to search */</span></span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> min_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> max_index = num_keys; <span class=\"comment\">/* there is one more child than key */</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">while</span> (min_index != max_index) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> index = (min_index + max_index) / <span class=\"number\">2</span>;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> key_to_right = *internal_node_key(node, index);</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (key_to_right &gt;= key) &#123;</span><br><span class=\"line\">+      max_index = index;</span><br><span class=\"line\">+    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+      min_index = index + <span class=\"number\">1</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>还要记住，内部节点的子节点可以是叶节点或更多内部节点。找到正确的孩子后，在其上调用相应的搜索功能:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> child_num = *internal_node_child(node, min_index);</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* child = get_page(table-&gt;pager, child_num);</span><br><span class=\"line\">+  <span class=\"keyword\">switch</span> (get_node_type(child)) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> NODE_LEAF:</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> leaf_node_find(table, child_num, key);</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> NODE_INTERNAL:</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> internal_node_find(table, child_num, key);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>现在，将密钥插入多节点btree不再导致错误。我们可以更新我们的测试:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       <span class=\"string\">\"    - 12\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"    - 13\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"    - 14\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"db &gt; Need to implement searching an internal node\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">     ])</span><br><span class=\"line\">   end</span><br></pre></td></tr></table></figure></p>\n<p>我也认为是时候重新考虑另一个测试了。尝试插入1400行的那个。它仍然是错误，但错误消息是新的。现在，当程序崩溃时，我们的测试不能很好地处理它。如果发生这种情况，让我们使用我们迄今为止得到的输出:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     raw_output = nil</span><br><span class=\"line\">     IO.popen(<span class=\"string\">\"./db test.db\"</span>, <span class=\"string\">\"r+\"</span>) <span class=\"keyword\">do</span> |pipe|</span><br><span class=\"line\">       commands.each <span class=\"keyword\">do</span> |command|</span><br><span class=\"line\">-        pipe.<span class=\"built_in\">puts</span> command</span><br><span class=\"line\">+        begin</span><br><span class=\"line\">+          pipe.<span class=\"built_in\">puts</span> command</span><br><span class=\"line\">+        rescue Errno::EPIPE</span><br><span class=\"line\">+          <span class=\"keyword\">break</span></span><br><span class=\"line\">+        end</span><br><span class=\"line\">       end</span><br><span class=\"line\"></span><br><span class=\"line\">       pipe.close_write</span><br></pre></td></tr></table></figure>\n<p>这表明我们的1400行测试输出了这个错误：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     end</span><br><span class=\"line\">     script &lt;&lt; <span class=\"string\">\".exit\"</span></span><br><span class=\"line\">     result = run_script(script)</span><br><span class=\"line\">-    expect(result[-2]).to eq('db &gt; Error: Table full.')</span><br><span class=\"line\">+    expect(result.last(<span class=\"number\">2</span>)).<span class=\"function\">to <span class=\"title\">match_array</span><span class=\"params\">([</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">+      <span class=\"string\">\"db &gt; Need to implement updating parent after split\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">+    ])</span></span></span><br><span class=\"line\"><span class=\"function\">   end</span></span><br></pre></td></tr></table></figure>\n<p>看起来就像我们的待办事项列表中的下一个!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上次我们插入第15行时出错:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db &gt; insert 15 user15 person15@example.com</span><br><span class=\"line\">Need to implement searching an internal node</span><br></pre></td></tr></table></figure></p>\n<p>首先，用新的函数调用替换代码存根.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">if</span> (get_node_type(root_node) == NODE_LEAF) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> leaf_node_find(table, root_page_num, key);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">-    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Need to implement searching an internal node\\n\"</span>);</span><br><span class=\"line\">-    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> internal_node_find(table, root_page_num, key);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>此函数将执行二进制搜索以查找应包含给定键的子项。请记住，每个子指针右侧的键是该子项包含的最大键。</p>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree6.png\" alt=\"three-level btree\"><br>three-level btree</p>\n<p>所以我们的二进制搜索比较了查找的键和子指针右侧的键:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">internal_node_find</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> key)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(table-&gt;pager, page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_keys = *internal_node_num_keys(node);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"comment\">/* Binary search to find index of child to search */</span></span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> min_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> max_index = num_keys; <span class=\"comment\">/* there is one more child than key */</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">while</span> (min_index != max_index) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> index = (min_index + max_index) / <span class=\"number\">2</span>;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> key_to_right = *internal_node_key(node, index);</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (key_to_right &gt;= key) &#123;</span><br><span class=\"line\">+      max_index = index;</span><br><span class=\"line\">+    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+      min_index = index + <span class=\"number\">1</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>还要记住，内部节点的子节点可以是叶节点或更多内部节点。找到正确的孩子后，在其上调用相应的搜索功能:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> child_num = *internal_node_child(node, min_index);</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* child = get_page(table-&gt;pager, child_num);</span><br><span class=\"line\">+  <span class=\"keyword\">switch</span> (get_node_type(child)) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> NODE_LEAF:</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> leaf_node_find(table, child_num, key);</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> NODE_INTERNAL:</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> internal_node_find(table, child_num, key);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>现在，将密钥插入多节点btree不再导致错误。我们可以更新我们的测试:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       <span class=\"string\">\"    - 12\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"    - 13\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"    - 14\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"db &gt; Need to implement searching an internal node\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">     ])</span><br><span class=\"line\">   end</span><br></pre></td></tr></table></figure></p>\n<p>我也认为是时候重新考虑另一个测试了。尝试插入1400行的那个。它仍然是错误，但错误消息是新的。现在，当程序崩溃时，我们的测试不能很好地处理它。如果发生这种情况，让我们使用我们迄今为止得到的输出:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     raw_output = nil</span><br><span class=\"line\">     IO.popen(<span class=\"string\">\"./db test.db\"</span>, <span class=\"string\">\"r+\"</span>) <span class=\"keyword\">do</span> |pipe|</span><br><span class=\"line\">       commands.each <span class=\"keyword\">do</span> |command|</span><br><span class=\"line\">-        pipe.<span class=\"built_in\">puts</span> command</span><br><span class=\"line\">+        begin</span><br><span class=\"line\">+          pipe.<span class=\"built_in\">puts</span> command</span><br><span class=\"line\">+        rescue Errno::EPIPE</span><br><span class=\"line\">+          <span class=\"keyword\">break</span></span><br><span class=\"line\">+        end</span><br><span class=\"line\">       end</span><br><span class=\"line\"></span><br><span class=\"line\">       pipe.close_write</span><br></pre></td></tr></table></figure>\n<p>这表明我们的1400行测试输出了这个错误：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     end</span><br><span class=\"line\">     script &lt;&lt; <span class=\"string\">\".exit\"</span></span><br><span class=\"line\">     result = run_script(script)</span><br><span class=\"line\">-    expect(result[-2]).to eq('db &gt; Error: Table full.')</span><br><span class=\"line\">+    expect(result.last(<span class=\"number\">2</span>)).<span class=\"function\">to <span class=\"title\">match_array</span><span class=\"params\">([</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">+      <span class=\"string\">\"db &gt; Need to implement updating parent after split\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">+    ])</span></span></span><br><span class=\"line\"><span class=\"function\">   end</span></span><br></pre></td></tr></table></figure>\n<p>看起来就像我们的待办事项列表中的下一个!</p>\n"},{"title":"Part 10 - Splitting a Leaf Node","date":"2019-02-23T13:33:19.000Z","_content":"\n# Part 10 - 分割叶子节点\n\n我们的 B树现在仅有一个节点. 修复它, 我们需要一些代码去分割一个叶子节点. 在哪之后我们需要去创建一个中间节点作为两个叶子节点的中间节点.\n基本上我们这篇文章的目标就是从这样:\n![one-node btree](https://cstack.github.io/db_tutorial/assets/images/btree2.png)\none-node btree\n\n到这样:\n![two-level btree](https://cstack.github.io/db_tutorial/assets/images/btree3.png)\ntwo-level btree\n\n第一步, 先让我们移除叶子节点填充完的错误.\n```c\nvoid leaf_node_insert(Cursor* cursor, uint32_t key, Row* value) {\n   void* node = get_page(cursor->table->pager, cursor->page_num);\n \n   uint32_t num_cells = *leaf_node_num_cells(node);\n   if (num_cells >= LEAF_NODE_MAX_CELLS) {\n     // Node full\n-    printf(\"Need to implement splitting a leaf node.\\n\");\n-    exit(EXIT_FAILURE);\n+    leaf_node_split_and_insert(cursor, key, value);\n+    return;\n   }\n```\n\n```c\nExecuteResult execute_insert(Statement* statement, Table* table) {\n   void* node = get_page(table->pager, table->root_page_num);\n   uint32_t num_cells = (*leaf_node_num_cells(node));\n-  if (num_cells >= LEAF_NODE_MAX_CELLS) {\n-    return EXECUTE_TABLE_FULL;\n-  }\n \n   Row* row_to_insert = &(statement->row_to_insert);\n   uint32_t key_to_insert = row_to_insert->id;\n```\n\n## 切分算法\n\n简单的部分结束了. 从 sqlite 官网获得的一些描述信息: https://play.google.com/store/books/details/Sibsankar_Haldar_SQLite_Database_System_Design_and?id=9Z6IQQnX1JEC&hl=en\n\n> If there is no space on the leaf node, we would split the existing entries residing there and the new one (being inserted) into two equal halves: lower and upper halves. (Keys on the upper half are strictly greater than those on the lower half.) We allocate a new leaf node, and move the upper half into the new node.\n\n> 如果叶子节点没有空间了, 我们会将驻留在那里的现有条目和新的条目（被插入）分成两半：下半部分和上半部分.  (上半部分的键严格大于下半部分的键.) 我们分配一个新的叶子节点，并将上半部分移动到新节点.\n\n让我来处理旧的节点并且创建一个新的节点:\n```c\n+void leaf_node_split_and_insert(Cursor* cursor, uint32_t key, Row* value) {\n+  /*\n+  Create a new node and move half the cells over.\n+  Insert the new value in one of the two nodes.\n+  Update parent or create a new parent.\n+  */\n+\n+  void* old_node = get_page(cursor->table->pager, cursor->page_num);\n+  uint32_t new_page_num = get_unused_page_num(cursor->table->pager);\n+  void* new_node = get_page(cursor->table->pager, new_page_num);\n+  initialize_leaf_node(new_node);\n```\n\n下一步, 拷贝每一个 cell 到新的地方:\n\n```c\n+  /*\n+  All existing keys plus new key should be divided\n+  evenly between old (left) and new (right) nodes.\n+  Starting from the right, move each key to correct position.\n+  */\n+  for (int32_t i = LEAF_NODE_MAX_CELLS; i >= 0; i--) {\n+    void* destination_node;\n+    if (i >= LEAF_NODE_LEFT_SPLIT_COUNT) {\n+      destination_node = new_node;\n+    } else {\n+      destination_node = old_node;\n+    }\n+    uint32_t index_within_node = i % LEAF_NODE_LEFT_SPLIT_COUNT;\n+    void* destination = leaf_node_cell(destination_node, index_within_node);\n+\n+    if (i == cursor->cell_num) {\n+      serialize_row(value, destination);\n+    } else if (i > cursor->cell_num) {\n+      memcpy(destination, leaf_node_cell(old_node, i - 1), LEAF_NODE_CELL_SIZE);\n+    } else {\n+      memcpy(destination, leaf_node_cell(old_node, i), LEAF_NODE_CELL_SIZE);\n+    }\n+  }\n```\n更新 cell 的数量在每一个节点的头部:\n```c\n+  /* Update cell count on both leaf nodes */\n+  *(leaf_node_num_cells(old_node)) = LEAF_NODE_LEFT_SPLIT_COUNT;\n+  *(leaf_node_num_cells(new_node)) = LEAF_NODE_RIGHT_SPLIT_COUNT;\n```\n然后我们需要更新节点的父节点. 如果原节点是一个根节点就没有父节点了. 在这种情况下, 新建一个根节点去作为父节点. 我们先去除其它情况:\n```c\n+  if (is_node_root(old_node)) {\n+    return create_new_root(cursor->table, new_page_num);\n+  } else {\n+    printf(\"Need to implement updating parent after split\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+}\n```\n\n## 分配新的页\n\n定义一些新的函数和常量. 当我们创建一个新的叶子节点的时, 我们将其放在由`get_unused_page_num()` 决定的页面中.\n```c\n+/*\n+Until we start recycling free pages, new pages will always\n+go onto the end of the database file\n+*/\n+uint32_t get_unused_page_num(Pager* pager) { return pager->num_pages; }\n```\n\n现在我们假设数据库现在有 N 页, 从 0 到 N -1 被分配完了. 我们总是能分配第 N 页. 最终我们实行删除后, 一些页面可能变成空并且他们的页码将不可用. 为了高效, 我们可以重新分配这些页面.\n\n## 叶子节点的大小\n\n为了让树保持平衡, 我们在两个新节点之间均匀分配cells. 如果一个叶子节点能保存 N 个 cell, 然后在分割的时候需要在两个节点间分配 N+1 的 cells. (N 为原始单元加一个新的单元). 如果 N+1 是一个基数, 我随意选择左节点再获得一个单元格.\n```c\n+const uint32_t LEAF_NODE_RIGHT_SPLIT_COUNT = (LEAF_NODE_MAX_CELLS + 1) / 2;\n+const uint32_t LEAF_NODE_LEFT_SPLIT_COUNT =\n+    (LEAF_NODE_MAX_CELLS + 1) - LEAF_NODE_RIGHT_SPLIT_COUNT;\n```\n\n## 创建一个新的根节点\n\n以下是SQLite数据库系统如何解释创建新根节点的过程: https://play.google.com/store/books/details/Sibsankar_Haldar_SQLite_Database_System_Design_and?id=9Z6IQQnX1JEC&hl=en\n\n> Let N be the root node. First allocate two nodes, say L and R. Move lower half of N into L and the upper half into R. Now N is empty. Add 〈L, K,R〉 in N, where K is the max key in L. Page N remains the root. Note that the depth of the tree has increased by one, but the new tree remains height balanced without violating any B+-tree property.\n> \n> 设N为根节点. 首先, 分配两个节点 L 和 R. 移动低一半的 N 到 L 和 高一半到 R 中. 现在 N 是空的了. 在 N 中, 增加 <L, K, R>. 这里的 K 是 L 中的最大 key . 第 N 页依旧是根. 请注意，树的深度增加了1，但新树保持高度平衡而不违反任何B + tree属性。\n\n在这一点上，我们已经分配了正确的孩子，并将上半部分移入其中. 我们的函数将正确的子项作为输入，并分配一个新页面来存储左子项.\n\n```c\n+void create_new_root(Table* table, uint32_t right_child_page_num) {\n+  /*\n+  Handle splitting the root.\n+  Old root copied to new page, becomes left child.\n+  Address of right child passed in.\n+  Re-initialize root page to contain the new root node.\n+  New root node points to two children.\n+  */\n+\n+  void* root = get_page(table->pager, table->root_page_num);\n+  void* right_child = get_page(table->pager, right_child_page_num);\n+  uint32_t left_child_page_num = get_unused_page_num(table->pager);\n+  void* left_child = get_page(table->pager, left_child_page_num);\n```\n\n旧的根数据被拷贝到左子项, 所以我能重用根页.\n```c\n+  /* Left child has data copied from old root */\n+  memcpy(left_child, root, PAGE_SIZE);\n+  set_node_root(left_child, false);\n```\n\n最后,我们初始化一个根页为有两个孩子的中间节点.\n```c\n+  /* Root node is a new internal node with one key and two children */\n+  initialize_internal_node(root);\n+  set_node_root(root, true);\n+  *internal_node_num_keys(root) = 1;\n+  *internal_node_child(root, 0) = left_child_page_num;\n+  uint32_t left_child_max_key = get_node_max_key(left_child);\n+  *internal_node_key(root, 0) = left_child_max_key;\n+  *internal_node_right_child(root) = right_child_page_num;\n+}\n```\n\n## 中间节点的格式\n\n现在我们终于创建了一个内部节点, 我们现在去定义他的layout. 它一开始是一个普通的头, 然后是包含的键的数量, 然后是最右边孩子的页码. 内部节点总是有一个子指针而不是它们的键, 额外的指针存储在header 中.\n```c\n+/*\n+ * Internal Node Header Layout\n+ */\n+const uint32_t INTERNAL_NODE_NUM_KEYS_SIZE = sizeof(uint32_t);\n+const uint32_t INTERNAL_NODE_NUM_KEYS_OFFSET = COMMON_NODE_HEADER_SIZE;\n+const uint32_t INTERNAL_NODE_RIGHT_CHILD_SIZE = sizeof(uint32_t);\n+const uint32_t INTERNAL_NODE_RIGHT_CHILD_OFFSET =\n+    INTERNAL_NODE_NUM_KEYS_OFFSET + INTERNAL_NODE_NUM_KEYS_SIZE;\n+const uint32_t INTERNAL_NODE_HEADER_SIZE = COMMON_NODE_HEADER_SIZE +\n+                                           INTERNAL_NODE_NUM_KEYS_SIZE +\n+                                         INTERNAL_NODE_RIGHT_CHILD_SIZE;\n```\n\n内容时一个cells 的数组, 每一个 cell 包含一个子指针和一个键. 每个键应该是左侧子项中包含的最大键.\n```c\n+/*\n+ * Internal Node Body Layout\n+ */\n+const uint32_t INTERNAL_NODE_KEY_SIZE = sizeof(uint32_t);\n+const uint32_t INTERNAL_NODE_CHILD_SIZE = sizeof(uint32_t);\n+const uint32_t INTERNAL_NODE_CELL_SIZE =\n+    INTERNAL_NODE_CHILD_SIZE + INTERNAL_NODE_KEY_SIZE;\n```\n\n基于这些常量, 以下是内部节点的布局:\n\n![Our internal node format](https://cstack.github.io/db_tutorial/assets/images/internal-node-format.png)\nOur internal node format\n\n注意我们巨大的变化. 因为每一个子指针和键值对都很小, 我们能够填充510 key 和511 个子指针,在每一个中间节点. 这意味着我们永远不必遍历树的许多层来找到给定的key.\n\n| # internal node layers | max # leaf nodes | Size of all leaf nodes |\n| ------- | -------- | -------- |\n| 0 | 511^0 = 1 | 4 KB |\n| 1 | 511^1 = 512 | ~2 MB |\n| 2 | 511^2 = 261,121 | ~1 GB |\n| 3 | 511^3 = 133,432,831 | ~550 GB |\n\n实际上，由于头部信息，key和浪费空间的开销，我们无法为每个叶节点存储完整的4 KB数据。但是我们可以通过从磁盘加载仅4页来搜索500 GB的数据。这就是B-Tree是数据库的有用数据结构的原因。\n以下是读取和写入内部节点的方法:\n```c\n+uint32_t* internal_node_num_keys(void* node) {\n+  return node + INTERNAL_NODE_NUM_KEYS_OFFSET;\n+}\n+\n+uint32_t* internal_node_right_child(void* node) {\n+  return node + INTERNAL_NODE_RIGHT_CHILD_OFFSET;\n+}\n+\n+uint32_t* internal_node_cell(void* node, uint32_t cell_num) {\n+  return node + INTERNAL_NODE_HEADER_SIZE + cell_num * INTERNAL_NODE_CELL_SIZE;\n+}\n+\n+uint32_t* internal_node_child(void* node, uint32_t child_num) {\n+  uint32_t num_keys = *internal_node_num_keys(node);\n+  if (child_num > num_keys) {\n+    printf(\"Tried to access child_num %d > num_keys %d\\n\", child_num, num_keys);\n+    exit(EXIT_FAILURE);\n+  } else if (child_num == num_keys) {\n+    return internal_node_right_child(node);\n+  } else {\n+    return internal_node_cell(node, child_num);\n+  }\n+}\n+\n+uint32_t* internal_node_key(void* node, uint32_t key_num) {\n+  return internal_node_cell(node, key_num) + INTERNAL_NODE_CHILD_SIZE;\n+}\n```\n\n对于内部节点，最大密钥始终是其右键。对于叶节点，它是最大索引处的键:\n```c\n+uint32_t get_node_max_key(void* node) {\n+  switch (get_node_type(node)) {\n+    case NODE_INTERNAL:\n+      return *internal_node_key(node, *internal_node_num_keys(node) - 1);\n+    case NODE_LEAF:\n+      return *leaf_node_key(node, *leaf_node_num_cells(node) - 1);\n+  }\n+}\n```\n\n## 跟踪 Root\n\n我们最终在公共节点头中使用了is_root字段。回想一下，我们使用它来决定如何拆分叶节点:\n\n```c\n+bool is_node_root(void* node) {\n+  uint8_t value = *((uint8_t*)(node + IS_ROOT_OFFSET));\n+  return (bool)value;\n+}\n+\n+void set_node_root(void* node, bool is_root) {\n+  uint8_t value = is_root;\n+  *((uint8_t*)(node + IS_ROOT_OFFSET)) = value;\n+}\n```\n\n以下是getter 和 setter 方法:\n```c\n+bool is_node_root(void* node) {\n+  uint8_t value = *((uint8_t*)(node + IS_ROOT_OFFSET));\n+  return (bool)value;\n+}\n+\n+void set_node_root(void* node, bool is_root) {\n+  uint8_t value = is_root;\n+  *((uint8_t*)(node + IS_ROOT_OFFSET)) = value;\n+}\n```\n\n初始化两种类型的节点应该默认将is_root设置为false：\n```c\nvoid initialize_leaf_node(void* node) {\n   set_node_type(node, NODE_LEAF);\n+  set_node_root(node, false);\n   *leaf_node_num_cells(node) = 0;\n }\n\n+void initialize_internal_node(void* node) {\n+  set_node_type(node, NODE_INTERNAL);\n+  set_node_root(node, false);\n+  *internal_node_num_keys(node) = 0;\n+}\n```\n\n我们应该在创建表的第一个节点时将is_root设置为true:\n\n```c\n     // New database file. Initialize page 0 as leaf node.\n     void* root_node = get_page(pager, 0);\n     initialize_leaf_node(root_node);\n+    set_node_root(root_node, true);\n   }\n \n   return table;\n```\n\n## 打印树\n为了帮助我们可视化数据库的状态，我们应该更新.btree metacommand以打印多级树.\n我要替换当前的print_leaf_node（）函数.\n```c\n-void print_leaf_node(void* node) {\n-  uint32_t num_cells = *leaf_node_num_cells(node);\n-  printf(\"leaf (size %d)\\n\", num_cells);\n-  for (uint32_t i = 0; i < num_cells; i++) {\n-    uint32_t key = *leaf_node_key(node, i);\n-    printf(\"  - %d : %d\\n\", i, key);\n-  }\n-}\n```\n\n使用一个新的递归函数，它接受任何节点，然后打印它及其子节点。它将缩进级别作为参数，随着每次递归调用而增加。我还添加了一个小的辅助函数来缩进。\n```c\n+void indent(uint32_t level) {\n+  for (uint32_t i = 0; i < level; i++) {\n+    printf(\"  \");\n+  }\n+}\n+\n+void print_tree(Pager* pager, uint32_t page_num, uint32_t indentation_level) {\n+  void* node = get_page(pager, page_num);\n+  uint32_t num_keys, child;\n+\n+  switch (get_node_type(node)) {\n+    case (NODE_LEAF):\n+      num_keys = *leaf_node_num_cells(node);\n+      indent(indentation_level);\n+      printf(\"- leaf (size %d)\\n\", num_keys);\n+      for (uint32_t i = 0; i < num_keys; i++) {\n+        indent(indentation_level + 1);\n+        printf(\"- %d\\n\", *leaf_node_key(node, i));\n+      }\n+      break;\n+    case (NODE_INTERNAL):\n+      num_keys = *internal_node_num_keys(node);\n+      indent(indentation_level);\n+      printf(\"- internal (size %d)\\n\", num_keys);\n+      for (uint32_t i = 0; i < num_keys; i++) {\n+        child = *internal_node_child(node, i);\n+        print_tree(pager, child, indentation_level + 1);\n+\n+        indent(indentation_level);\n+        printf(\"- key %d\\n\", *internal_node_key(node, i));\n+      }\n+      child = *internal_node_right_child(node);\n+      print_tree(pager, child, indentation_level + 1);\n+      break;\n+  }\n+}\n```\n\n并更新对print函数的调用，将缩进级别传递给零.\n\n```c\n   } else if (strcmp(input_buffer->buffer, \".btree\") == 0) {\n     printf(\"Tree:\\n\");\n-    print_leaf_node(get_page(table->pager, 0));\n+    print_tree(table->pager, 0, 0);\n     return META_COMMAND_SUCCESS;\n```\n这是新打印功能的测试用例\n```ruby\n+  it 'allows printing out the structure of a 3-leaf-node btree' do\n+    script = (1..14).map do |i|\n+      \"insert #{i} user#{i} person#{i}@example.com\"\n+    end\n+    script << \".btree\"\n+    script << \"insert 15 user15 person15@example.com\"\n+    script << \".exit\"\n+    result = run_script(script)\n+\n+    expect(result[14...(result.length)]).to match_array([\n+      \"db > Tree:\",\n+      \"- internal (size 1)\",\n+      \"  - leaf (size 7)\",\n+      \"    - 1\",\n+      \"    - 2\",\n+      \"    - 3\",\n+      \"    - 4\",\n+      \"    - 5\",\n+      \"    - 6\",\n+      \"    - 7\",\n+      \"- key 7\",\n+      \"  - leaf (size 7)\",\n+      \"    - 8\",\n+      \"    - 9\",\n+      \"    - 10\",\n+      \"    - 11\",\n+      \"    - 12\",\n+      \"    - 13\",\n+      \"    - 14\",\n+      \"db > Need to implement searching an internal node\",\n+    ])\n+  end\n```\n\n新格式有点简化，所以我们需要更新现有的.btree测试:\n```ruby\n       \"db > Executed.\",\n       \"db > Executed.\",\n       \"db > Tree:\",\n-      \"leaf (size 3)\",\n-      \"  - 0 : 1\",\n-      \"  - 1 : 2\",\n-      \"  - 2 : 3\",\n+      \"- leaf (size 3)\",\n+      \"  - 1\",\n+      \"  - 2\",\n+      \"  - 3\",\n       \"db > \"\n     ])\n   end\n```\n这是新测试的.btree输出：\n```txt\nTree:\n- internal (size 1)\n  - leaf (size 7)\n    - 1\n    - 2\n    - 3\n    - 4\n    - 5\n    - 6\n    - 7\n  - key 7\n  - leaf (size 7)\n    - 8\n    - 9\n    - 10\n    - 11\n    - 12\n    - 13\n    - 14\n```\n\n## 主要问题\n如果你一直密切关注，你可能会注意到我们错过了一些大事。看看如果我们尝试插入另一行会发生什么.\n```sh\ndb > insert 15 user15 person15@example.com\nNeed to implement searching an internal node\n```","source":"_posts/build_own_x/data_base/build_simple_database/Part10_splitting_a_leaf_node.md","raw":"---\ntitle: Part 10 - Splitting a Leaf Node\ndate: 2019-02-23 21:33:19\ncategories:\n- build-own-x\ntags:\n- database\n- db原理\n---\n\n# Part 10 - 分割叶子节点\n\n我们的 B树现在仅有一个节点. 修复它, 我们需要一些代码去分割一个叶子节点. 在哪之后我们需要去创建一个中间节点作为两个叶子节点的中间节点.\n基本上我们这篇文章的目标就是从这样:\n![one-node btree](https://cstack.github.io/db_tutorial/assets/images/btree2.png)\none-node btree\n\n到这样:\n![two-level btree](https://cstack.github.io/db_tutorial/assets/images/btree3.png)\ntwo-level btree\n\n第一步, 先让我们移除叶子节点填充完的错误.\n```c\nvoid leaf_node_insert(Cursor* cursor, uint32_t key, Row* value) {\n   void* node = get_page(cursor->table->pager, cursor->page_num);\n \n   uint32_t num_cells = *leaf_node_num_cells(node);\n   if (num_cells >= LEAF_NODE_MAX_CELLS) {\n     // Node full\n-    printf(\"Need to implement splitting a leaf node.\\n\");\n-    exit(EXIT_FAILURE);\n+    leaf_node_split_and_insert(cursor, key, value);\n+    return;\n   }\n```\n\n```c\nExecuteResult execute_insert(Statement* statement, Table* table) {\n   void* node = get_page(table->pager, table->root_page_num);\n   uint32_t num_cells = (*leaf_node_num_cells(node));\n-  if (num_cells >= LEAF_NODE_MAX_CELLS) {\n-    return EXECUTE_TABLE_FULL;\n-  }\n \n   Row* row_to_insert = &(statement->row_to_insert);\n   uint32_t key_to_insert = row_to_insert->id;\n```\n\n## 切分算法\n\n简单的部分结束了. 从 sqlite 官网获得的一些描述信息: https://play.google.com/store/books/details/Sibsankar_Haldar_SQLite_Database_System_Design_and?id=9Z6IQQnX1JEC&hl=en\n\n> If there is no space on the leaf node, we would split the existing entries residing there and the new one (being inserted) into two equal halves: lower and upper halves. (Keys on the upper half are strictly greater than those on the lower half.) We allocate a new leaf node, and move the upper half into the new node.\n\n> 如果叶子节点没有空间了, 我们会将驻留在那里的现有条目和新的条目（被插入）分成两半：下半部分和上半部分.  (上半部分的键严格大于下半部分的键.) 我们分配一个新的叶子节点，并将上半部分移动到新节点.\n\n让我来处理旧的节点并且创建一个新的节点:\n```c\n+void leaf_node_split_and_insert(Cursor* cursor, uint32_t key, Row* value) {\n+  /*\n+  Create a new node and move half the cells over.\n+  Insert the new value in one of the two nodes.\n+  Update parent or create a new parent.\n+  */\n+\n+  void* old_node = get_page(cursor->table->pager, cursor->page_num);\n+  uint32_t new_page_num = get_unused_page_num(cursor->table->pager);\n+  void* new_node = get_page(cursor->table->pager, new_page_num);\n+  initialize_leaf_node(new_node);\n```\n\n下一步, 拷贝每一个 cell 到新的地方:\n\n```c\n+  /*\n+  All existing keys plus new key should be divided\n+  evenly between old (left) and new (right) nodes.\n+  Starting from the right, move each key to correct position.\n+  */\n+  for (int32_t i = LEAF_NODE_MAX_CELLS; i >= 0; i--) {\n+    void* destination_node;\n+    if (i >= LEAF_NODE_LEFT_SPLIT_COUNT) {\n+      destination_node = new_node;\n+    } else {\n+      destination_node = old_node;\n+    }\n+    uint32_t index_within_node = i % LEAF_NODE_LEFT_SPLIT_COUNT;\n+    void* destination = leaf_node_cell(destination_node, index_within_node);\n+\n+    if (i == cursor->cell_num) {\n+      serialize_row(value, destination);\n+    } else if (i > cursor->cell_num) {\n+      memcpy(destination, leaf_node_cell(old_node, i - 1), LEAF_NODE_CELL_SIZE);\n+    } else {\n+      memcpy(destination, leaf_node_cell(old_node, i), LEAF_NODE_CELL_SIZE);\n+    }\n+  }\n```\n更新 cell 的数量在每一个节点的头部:\n```c\n+  /* Update cell count on both leaf nodes */\n+  *(leaf_node_num_cells(old_node)) = LEAF_NODE_LEFT_SPLIT_COUNT;\n+  *(leaf_node_num_cells(new_node)) = LEAF_NODE_RIGHT_SPLIT_COUNT;\n```\n然后我们需要更新节点的父节点. 如果原节点是一个根节点就没有父节点了. 在这种情况下, 新建一个根节点去作为父节点. 我们先去除其它情况:\n```c\n+  if (is_node_root(old_node)) {\n+    return create_new_root(cursor->table, new_page_num);\n+  } else {\n+    printf(\"Need to implement updating parent after split\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+}\n```\n\n## 分配新的页\n\n定义一些新的函数和常量. 当我们创建一个新的叶子节点的时, 我们将其放在由`get_unused_page_num()` 决定的页面中.\n```c\n+/*\n+Until we start recycling free pages, new pages will always\n+go onto the end of the database file\n+*/\n+uint32_t get_unused_page_num(Pager* pager) { return pager->num_pages; }\n```\n\n现在我们假设数据库现在有 N 页, 从 0 到 N -1 被分配完了. 我们总是能分配第 N 页. 最终我们实行删除后, 一些页面可能变成空并且他们的页码将不可用. 为了高效, 我们可以重新分配这些页面.\n\n## 叶子节点的大小\n\n为了让树保持平衡, 我们在两个新节点之间均匀分配cells. 如果一个叶子节点能保存 N 个 cell, 然后在分割的时候需要在两个节点间分配 N+1 的 cells. (N 为原始单元加一个新的单元). 如果 N+1 是一个基数, 我随意选择左节点再获得一个单元格.\n```c\n+const uint32_t LEAF_NODE_RIGHT_SPLIT_COUNT = (LEAF_NODE_MAX_CELLS + 1) / 2;\n+const uint32_t LEAF_NODE_LEFT_SPLIT_COUNT =\n+    (LEAF_NODE_MAX_CELLS + 1) - LEAF_NODE_RIGHT_SPLIT_COUNT;\n```\n\n## 创建一个新的根节点\n\n以下是SQLite数据库系统如何解释创建新根节点的过程: https://play.google.com/store/books/details/Sibsankar_Haldar_SQLite_Database_System_Design_and?id=9Z6IQQnX1JEC&hl=en\n\n> Let N be the root node. First allocate two nodes, say L and R. Move lower half of N into L and the upper half into R. Now N is empty. Add 〈L, K,R〉 in N, where K is the max key in L. Page N remains the root. Note that the depth of the tree has increased by one, but the new tree remains height balanced without violating any B+-tree property.\n> \n> 设N为根节点. 首先, 分配两个节点 L 和 R. 移动低一半的 N 到 L 和 高一半到 R 中. 现在 N 是空的了. 在 N 中, 增加 <L, K, R>. 这里的 K 是 L 中的最大 key . 第 N 页依旧是根. 请注意，树的深度增加了1，但新树保持高度平衡而不违反任何B + tree属性。\n\n在这一点上，我们已经分配了正确的孩子，并将上半部分移入其中. 我们的函数将正确的子项作为输入，并分配一个新页面来存储左子项.\n\n```c\n+void create_new_root(Table* table, uint32_t right_child_page_num) {\n+  /*\n+  Handle splitting the root.\n+  Old root copied to new page, becomes left child.\n+  Address of right child passed in.\n+  Re-initialize root page to contain the new root node.\n+  New root node points to two children.\n+  */\n+\n+  void* root = get_page(table->pager, table->root_page_num);\n+  void* right_child = get_page(table->pager, right_child_page_num);\n+  uint32_t left_child_page_num = get_unused_page_num(table->pager);\n+  void* left_child = get_page(table->pager, left_child_page_num);\n```\n\n旧的根数据被拷贝到左子项, 所以我能重用根页.\n```c\n+  /* Left child has data copied from old root */\n+  memcpy(left_child, root, PAGE_SIZE);\n+  set_node_root(left_child, false);\n```\n\n最后,我们初始化一个根页为有两个孩子的中间节点.\n```c\n+  /* Root node is a new internal node with one key and two children */\n+  initialize_internal_node(root);\n+  set_node_root(root, true);\n+  *internal_node_num_keys(root) = 1;\n+  *internal_node_child(root, 0) = left_child_page_num;\n+  uint32_t left_child_max_key = get_node_max_key(left_child);\n+  *internal_node_key(root, 0) = left_child_max_key;\n+  *internal_node_right_child(root) = right_child_page_num;\n+}\n```\n\n## 中间节点的格式\n\n现在我们终于创建了一个内部节点, 我们现在去定义他的layout. 它一开始是一个普通的头, 然后是包含的键的数量, 然后是最右边孩子的页码. 内部节点总是有一个子指针而不是它们的键, 额外的指针存储在header 中.\n```c\n+/*\n+ * Internal Node Header Layout\n+ */\n+const uint32_t INTERNAL_NODE_NUM_KEYS_SIZE = sizeof(uint32_t);\n+const uint32_t INTERNAL_NODE_NUM_KEYS_OFFSET = COMMON_NODE_HEADER_SIZE;\n+const uint32_t INTERNAL_NODE_RIGHT_CHILD_SIZE = sizeof(uint32_t);\n+const uint32_t INTERNAL_NODE_RIGHT_CHILD_OFFSET =\n+    INTERNAL_NODE_NUM_KEYS_OFFSET + INTERNAL_NODE_NUM_KEYS_SIZE;\n+const uint32_t INTERNAL_NODE_HEADER_SIZE = COMMON_NODE_HEADER_SIZE +\n+                                           INTERNAL_NODE_NUM_KEYS_SIZE +\n+                                         INTERNAL_NODE_RIGHT_CHILD_SIZE;\n```\n\n内容时一个cells 的数组, 每一个 cell 包含一个子指针和一个键. 每个键应该是左侧子项中包含的最大键.\n```c\n+/*\n+ * Internal Node Body Layout\n+ */\n+const uint32_t INTERNAL_NODE_KEY_SIZE = sizeof(uint32_t);\n+const uint32_t INTERNAL_NODE_CHILD_SIZE = sizeof(uint32_t);\n+const uint32_t INTERNAL_NODE_CELL_SIZE =\n+    INTERNAL_NODE_CHILD_SIZE + INTERNAL_NODE_KEY_SIZE;\n```\n\n基于这些常量, 以下是内部节点的布局:\n\n![Our internal node format](https://cstack.github.io/db_tutorial/assets/images/internal-node-format.png)\nOur internal node format\n\n注意我们巨大的变化. 因为每一个子指针和键值对都很小, 我们能够填充510 key 和511 个子指针,在每一个中间节点. 这意味着我们永远不必遍历树的许多层来找到给定的key.\n\n| # internal node layers | max # leaf nodes | Size of all leaf nodes |\n| ------- | -------- | -------- |\n| 0 | 511^0 = 1 | 4 KB |\n| 1 | 511^1 = 512 | ~2 MB |\n| 2 | 511^2 = 261,121 | ~1 GB |\n| 3 | 511^3 = 133,432,831 | ~550 GB |\n\n实际上，由于头部信息，key和浪费空间的开销，我们无法为每个叶节点存储完整的4 KB数据。但是我们可以通过从磁盘加载仅4页来搜索500 GB的数据。这就是B-Tree是数据库的有用数据结构的原因。\n以下是读取和写入内部节点的方法:\n```c\n+uint32_t* internal_node_num_keys(void* node) {\n+  return node + INTERNAL_NODE_NUM_KEYS_OFFSET;\n+}\n+\n+uint32_t* internal_node_right_child(void* node) {\n+  return node + INTERNAL_NODE_RIGHT_CHILD_OFFSET;\n+}\n+\n+uint32_t* internal_node_cell(void* node, uint32_t cell_num) {\n+  return node + INTERNAL_NODE_HEADER_SIZE + cell_num * INTERNAL_NODE_CELL_SIZE;\n+}\n+\n+uint32_t* internal_node_child(void* node, uint32_t child_num) {\n+  uint32_t num_keys = *internal_node_num_keys(node);\n+  if (child_num > num_keys) {\n+    printf(\"Tried to access child_num %d > num_keys %d\\n\", child_num, num_keys);\n+    exit(EXIT_FAILURE);\n+  } else if (child_num == num_keys) {\n+    return internal_node_right_child(node);\n+  } else {\n+    return internal_node_cell(node, child_num);\n+  }\n+}\n+\n+uint32_t* internal_node_key(void* node, uint32_t key_num) {\n+  return internal_node_cell(node, key_num) + INTERNAL_NODE_CHILD_SIZE;\n+}\n```\n\n对于内部节点，最大密钥始终是其右键。对于叶节点，它是最大索引处的键:\n```c\n+uint32_t get_node_max_key(void* node) {\n+  switch (get_node_type(node)) {\n+    case NODE_INTERNAL:\n+      return *internal_node_key(node, *internal_node_num_keys(node) - 1);\n+    case NODE_LEAF:\n+      return *leaf_node_key(node, *leaf_node_num_cells(node) - 1);\n+  }\n+}\n```\n\n## 跟踪 Root\n\n我们最终在公共节点头中使用了is_root字段。回想一下，我们使用它来决定如何拆分叶节点:\n\n```c\n+bool is_node_root(void* node) {\n+  uint8_t value = *((uint8_t*)(node + IS_ROOT_OFFSET));\n+  return (bool)value;\n+}\n+\n+void set_node_root(void* node, bool is_root) {\n+  uint8_t value = is_root;\n+  *((uint8_t*)(node + IS_ROOT_OFFSET)) = value;\n+}\n```\n\n以下是getter 和 setter 方法:\n```c\n+bool is_node_root(void* node) {\n+  uint8_t value = *((uint8_t*)(node + IS_ROOT_OFFSET));\n+  return (bool)value;\n+}\n+\n+void set_node_root(void* node, bool is_root) {\n+  uint8_t value = is_root;\n+  *((uint8_t*)(node + IS_ROOT_OFFSET)) = value;\n+}\n```\n\n初始化两种类型的节点应该默认将is_root设置为false：\n```c\nvoid initialize_leaf_node(void* node) {\n   set_node_type(node, NODE_LEAF);\n+  set_node_root(node, false);\n   *leaf_node_num_cells(node) = 0;\n }\n\n+void initialize_internal_node(void* node) {\n+  set_node_type(node, NODE_INTERNAL);\n+  set_node_root(node, false);\n+  *internal_node_num_keys(node) = 0;\n+}\n```\n\n我们应该在创建表的第一个节点时将is_root设置为true:\n\n```c\n     // New database file. Initialize page 0 as leaf node.\n     void* root_node = get_page(pager, 0);\n     initialize_leaf_node(root_node);\n+    set_node_root(root_node, true);\n   }\n \n   return table;\n```\n\n## 打印树\n为了帮助我们可视化数据库的状态，我们应该更新.btree metacommand以打印多级树.\n我要替换当前的print_leaf_node（）函数.\n```c\n-void print_leaf_node(void* node) {\n-  uint32_t num_cells = *leaf_node_num_cells(node);\n-  printf(\"leaf (size %d)\\n\", num_cells);\n-  for (uint32_t i = 0; i < num_cells; i++) {\n-    uint32_t key = *leaf_node_key(node, i);\n-    printf(\"  - %d : %d\\n\", i, key);\n-  }\n-}\n```\n\n使用一个新的递归函数，它接受任何节点，然后打印它及其子节点。它将缩进级别作为参数，随着每次递归调用而增加。我还添加了一个小的辅助函数来缩进。\n```c\n+void indent(uint32_t level) {\n+  for (uint32_t i = 0; i < level; i++) {\n+    printf(\"  \");\n+  }\n+}\n+\n+void print_tree(Pager* pager, uint32_t page_num, uint32_t indentation_level) {\n+  void* node = get_page(pager, page_num);\n+  uint32_t num_keys, child;\n+\n+  switch (get_node_type(node)) {\n+    case (NODE_LEAF):\n+      num_keys = *leaf_node_num_cells(node);\n+      indent(indentation_level);\n+      printf(\"- leaf (size %d)\\n\", num_keys);\n+      for (uint32_t i = 0; i < num_keys; i++) {\n+        indent(indentation_level + 1);\n+        printf(\"- %d\\n\", *leaf_node_key(node, i));\n+      }\n+      break;\n+    case (NODE_INTERNAL):\n+      num_keys = *internal_node_num_keys(node);\n+      indent(indentation_level);\n+      printf(\"- internal (size %d)\\n\", num_keys);\n+      for (uint32_t i = 0; i < num_keys; i++) {\n+        child = *internal_node_child(node, i);\n+        print_tree(pager, child, indentation_level + 1);\n+\n+        indent(indentation_level);\n+        printf(\"- key %d\\n\", *internal_node_key(node, i));\n+      }\n+      child = *internal_node_right_child(node);\n+      print_tree(pager, child, indentation_level + 1);\n+      break;\n+  }\n+}\n```\n\n并更新对print函数的调用，将缩进级别传递给零.\n\n```c\n   } else if (strcmp(input_buffer->buffer, \".btree\") == 0) {\n     printf(\"Tree:\\n\");\n-    print_leaf_node(get_page(table->pager, 0));\n+    print_tree(table->pager, 0, 0);\n     return META_COMMAND_SUCCESS;\n```\n这是新打印功能的测试用例\n```ruby\n+  it 'allows printing out the structure of a 3-leaf-node btree' do\n+    script = (1..14).map do |i|\n+      \"insert #{i} user#{i} person#{i}@example.com\"\n+    end\n+    script << \".btree\"\n+    script << \"insert 15 user15 person15@example.com\"\n+    script << \".exit\"\n+    result = run_script(script)\n+\n+    expect(result[14...(result.length)]).to match_array([\n+      \"db > Tree:\",\n+      \"- internal (size 1)\",\n+      \"  - leaf (size 7)\",\n+      \"    - 1\",\n+      \"    - 2\",\n+      \"    - 3\",\n+      \"    - 4\",\n+      \"    - 5\",\n+      \"    - 6\",\n+      \"    - 7\",\n+      \"- key 7\",\n+      \"  - leaf (size 7)\",\n+      \"    - 8\",\n+      \"    - 9\",\n+      \"    - 10\",\n+      \"    - 11\",\n+      \"    - 12\",\n+      \"    - 13\",\n+      \"    - 14\",\n+      \"db > Need to implement searching an internal node\",\n+    ])\n+  end\n```\n\n新格式有点简化，所以我们需要更新现有的.btree测试:\n```ruby\n       \"db > Executed.\",\n       \"db > Executed.\",\n       \"db > Tree:\",\n-      \"leaf (size 3)\",\n-      \"  - 0 : 1\",\n-      \"  - 1 : 2\",\n-      \"  - 2 : 3\",\n+      \"- leaf (size 3)\",\n+      \"  - 1\",\n+      \"  - 2\",\n+      \"  - 3\",\n       \"db > \"\n     ])\n   end\n```\n这是新测试的.btree输出：\n```txt\nTree:\n- internal (size 1)\n  - leaf (size 7)\n    - 1\n    - 2\n    - 3\n    - 4\n    - 5\n    - 6\n    - 7\n  - key 7\n  - leaf (size 7)\n    - 8\n    - 9\n    - 10\n    - 11\n    - 12\n    - 13\n    - 14\n```\n\n## 主要问题\n如果你一直密切关注，你可能会注意到我们错过了一些大事。看看如果我们尝试插入另一行会发生什么.\n```sh\ndb > insert 15 user15 person15@example.com\nNeed to implement searching an internal node\n```","slug":"build_own_x/data_base/build_simple_database/Part10_splitting_a_leaf_node","published":1,"updated":"2019-02-24T13:10:57.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgy9004k8seobeux0iq8","content":"<h1 id=\"Part-10-分割叶子节点\"><a href=\"#Part-10-分割叶子节点\" class=\"headerlink\" title=\"Part 10 - 分割叶子节点\"></a>Part 10 - 分割叶子节点</h1><p>我们的 B树现在仅有一个节点. 修复它, 我们需要一些代码去分割一个叶子节点. 在哪之后我们需要去创建一个中间节点作为两个叶子节点的中间节点.<br>基本上我们这篇文章的目标就是从这样:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree2.png\" alt=\"one-node btree\"><br>one-node btree</p>\n<p>到这样:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree3.png\" alt=\"two-level btree\"><br>two-level btree</p>\n<p>第一步, 先让我们移除叶子节点填充完的错误.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">leaf_node_insert</span><span class=\"params\">(Cursor* cursor, <span class=\"keyword\">uint32_t</span> key, Row* value)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* node = get_page(cursor-&gt;table-&gt;pager, cursor-&gt;page_num);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (num_cells &gt;= LEAF_NODE_MAX_CELLS) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Node full</span></span><br><span class=\"line\">-    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Need to implement splitting a leaf node.\\n\"</span>);</span><br><span class=\"line\">-    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+    leaf_node_split_and_insert(cursor, key, value);</span><br><span class=\"line\">+    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ExecuteResult <span class=\"title\">execute_insert</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> num_cells = (*leaf_node_num_cells(node));</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (num_cells &gt;= LEAF_NODE_MAX_CELLS) &#123;</span><br><span class=\"line\">-    <span class=\"keyword\">return</span> EXECUTE_TABLE_FULL;</span><br><span class=\"line\">-  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> key_to_insert = row_to_insert-&gt;id;</span><br></pre></td></tr></table></figure>\n<h2 id=\"切分算法\"><a href=\"#切分算法\" class=\"headerlink\" title=\"切分算法\"></a>切分算法</h2><p>简单的部分结束了. 从 sqlite 官网获得的一些描述信息: <a href=\"https://play.google.com/store/books/details/Sibsankar_Haldar_SQLite_Database_System_Design_and?id=9Z6IQQnX1JEC&amp;hl=en\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/books/details/Sibsankar_Haldar_SQLite_Database_System_Design_and?id=9Z6IQQnX1JEC&amp;hl=en</a></p>\n<blockquote>\n<p>If there is no space on the leaf node, we would split the existing entries residing there and the new one (being inserted) into two equal halves: lower and upper halves. (Keys on the upper half are strictly greater than those on the lower half.) We allocate a new leaf node, and move the upper half into the new node.</p>\n</blockquote>\n<blockquote>\n<p>如果叶子节点没有空间了, 我们会将驻留在那里的现有条目和新的条目（被插入）分成两半：下半部分和上半部分.  (上半部分的键严格大于下半部分的键.) 我们分配一个新的叶子节点，并将上半部分移动到新节点.</p>\n</blockquote>\n<p>让我来处理旧的节点并且创建一个新的节点:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">leaf_node_split_and_insert</span><span class=\"params\">(Cursor* cursor, <span class=\"keyword\">uint32_t</span> key, Row* value)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+  Create a new node and move half the cells over.</span></span><br><span class=\"line\"><span class=\"comment\">+  Insert the new value in one of the two nodes.</span></span><br><span class=\"line\"><span class=\"comment\">+  Update parent or create a new parent.</span></span><br><span class=\"line\"><span class=\"comment\">+  */</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* old_node = get_page(cursor-&gt;table-&gt;pager, cursor-&gt;page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> new_page_num = get_unused_page_num(cursor-&gt;table-&gt;pager);</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* new_node = get_page(cursor-&gt;table-&gt;pager, new_page_num);</span><br><span class=\"line\">+  initialize_leaf_node(new_node);</span><br></pre></td></tr></table></figure></p>\n<p>下一步, 拷贝每一个 cell 到新的地方:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+  All existing keys plus new key should be divided</span></span><br><span class=\"line\"><span class=\"comment\">+  evenly between old (left) and new (right) nodes.</span></span><br><span class=\"line\"><span class=\"comment\">+  Starting from the right, move each key to correct position.</span></span><br><span class=\"line\"><span class=\"comment\">+  */</span></span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">int32_t</span> i = LEAF_NODE_MAX_CELLS; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* destination_node;</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (i &gt;= LEAF_NODE_LEFT_SPLIT_COUNT) &#123;</span><br><span class=\"line\">+      destination_node = new_node;</span><br><span class=\"line\">+    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+      destination_node = old_node;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> index_within_node = i % LEAF_NODE_LEFT_SPLIT_COUNT;</span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* destination = leaf_node_cell(destination_node, index_within_node);</span><br><span class=\"line\">+</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (i == cursor-&gt;cell_num) &#123;</span><br><span class=\"line\">+      serialize_row(value, destination);</span><br><span class=\"line\">+    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &gt; cursor-&gt;cell_num) &#123;</span><br><span class=\"line\">+      <span class=\"built_in\">memcpy</span>(destination, leaf_node_cell(old_node, i - <span class=\"number\">1</span>), LEAF_NODE_CELL_SIZE);</span><br><span class=\"line\">+    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+      <span class=\"built_in\">memcpy</span>(destination, leaf_node_cell(old_node, i), LEAF_NODE_CELL_SIZE);</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br></pre></td></tr></table></figure>\n<p>更新 cell 的数量在每一个节点的头部:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  <span class=\"comment\">/* Update cell count on both leaf nodes */</span></span><br><span class=\"line\">+  *(leaf_node_num_cells(old_node)) = LEAF_NODE_LEFT_SPLIT_COUNT;</span><br><span class=\"line\">+  *(leaf_node_num_cells(new_node)) = LEAF_NODE_RIGHT_SPLIT_COUNT;</span><br></pre></td></tr></table></figure></p>\n<p>然后我们需要更新节点的父节点. 如果原节点是一个根节点就没有父节点了. 在这种情况下, 新建一个根节点去作为父节点. 我们先去除其它情况:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  <span class=\"keyword\">if</span> (is_node_root(old_node)) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> create_new_root(cursor-&gt;table, new_page_num);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Need to implement updating parent after split\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"分配新的页\"><a href=\"#分配新的页\" class=\"headerlink\" title=\"分配新的页\"></a>分配新的页</h2><p>定义一些新的函数和常量. 当我们创建一个新的叶子节点的时, 我们将其放在由<code>get_unused_page_num()</code> 决定的页面中.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+Until we start recycling free pages, new pages will always</span></span><br><span class=\"line\"><span class=\"comment\">+go onto the end of the database file</span></span><br><span class=\"line\"><span class=\"comment\">+*/</span></span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span> get_unused_page_num(Pager* pager) &#123; <span class=\"keyword\">return</span> pager-&gt;num_pages; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我们假设数据库现在有 N 页, 从 0 到 N -1 被分配完了. 我们总是能分配第 N 页. 最终我们实行删除后, 一些页面可能变成空并且他们的页码将不可用. 为了高效, 我们可以重新分配这些页面.</p>\n<h2 id=\"叶子节点的大小\"><a href=\"#叶子节点的大小\" class=\"headerlink\" title=\"叶子节点的大小\"></a>叶子节点的大小</h2><p>为了让树保持平衡, 我们在两个新节点之间均匀分配cells. 如果一个叶子节点能保存 N 个 cell, 然后在分割的时候需要在两个节点间分配 N+1 的 cells. (N 为原始单元加一个新的单元). 如果 N+1 是一个基数, 我随意选择左节点再获得一个单元格.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_RIGHT_SPLIT_COUNT = (LEAF_NODE_MAX_CELLS + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_LEFT_SPLIT_COUNT =</span><br><span class=\"line\">+    (LEAF_NODE_MAX_CELLS + <span class=\"number\">1</span>) - LEAF_NODE_RIGHT_SPLIT_COUNT;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建一个新的根节点\"><a href=\"#创建一个新的根节点\" class=\"headerlink\" title=\"创建一个新的根节点\"></a>创建一个新的根节点</h2><p>以下是SQLite数据库系统如何解释创建新根节点的过程: <a href=\"https://play.google.com/store/books/details/Sibsankar_Haldar_SQLite_Database_System_Design_and?id=9Z6IQQnX1JEC&amp;hl=en\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/books/details/Sibsankar_Haldar_SQLite_Database_System_Design_and?id=9Z6IQQnX1JEC&amp;hl=en</a></p>\n<blockquote>\n<p>Let N be the root node. First allocate two nodes, say L and R. Move lower half of N into L and the upper half into R. Now N is empty. Add 〈L, K,R〉 in N, where K is the max key in L. Page N remains the root. Note that the depth of the tree has increased by one, but the new tree remains height balanced without violating any B+-tree property.</p>\n<p>设N为根节点. 首先, 分配两个节点 L 和 R. 移动低一半的 N 到 L 和 高一半到 R 中. 现在 N 是空的了. 在 N 中, 增加 &lt;L, K, R&gt;. 这里的 K 是 L 中的最大 key . 第 N 页依旧是根. 请注意，树的深度增加了1，但新树保持高度平衡而不违反任何B + tree属性。</p>\n</blockquote>\n<p>在这一点上，我们已经分配了正确的孩子，并将上半部分移入其中. 我们的函数将正确的子项作为输入，并分配一个新页面来存储左子项.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">create_new_root</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> right_child_page_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+  Handle splitting the root.</span></span><br><span class=\"line\"><span class=\"comment\">+  Old root copied to new page, becomes left child.</span></span><br><span class=\"line\"><span class=\"comment\">+  Address of right child passed in.</span></span><br><span class=\"line\"><span class=\"comment\">+  Re-initialize root page to contain the new root node.</span></span><br><span class=\"line\"><span class=\"comment\">+  New root node points to two children.</span></span><br><span class=\"line\"><span class=\"comment\">+  */</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* root = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* right_child = get_page(table-&gt;pager, right_child_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> left_child_page_num = get_unused_page_num(table-&gt;pager);</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* left_child = get_page(table-&gt;pager, left_child_page_num);</span><br></pre></td></tr></table></figure>\n<p>旧的根数据被拷贝到左子项, 所以我能重用根页.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  <span class=\"comment\">/* Left child has data copied from old root */</span></span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(left_child, root, PAGE_SIZE);</span><br><span class=\"line\">+  set_node_root(left_child, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<p>最后,我们初始化一个根页为有两个孩子的中间节点.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  <span class=\"comment\">/* Root node is a new internal node with one key and two children */</span></span><br><span class=\"line\">+  initialize_internal_node(root);</span><br><span class=\"line\">+  set_node_root(root, <span class=\"literal\">true</span>);</span><br><span class=\"line\">+  *internal_node_num_keys(root) = <span class=\"number\">1</span>;</span><br><span class=\"line\">+  *internal_node_child(root, <span class=\"number\">0</span>) = left_child_page_num;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> left_child_max_key = get_node_max_key(left_child);</span><br><span class=\"line\">+  *internal_node_key(root, <span class=\"number\">0</span>) = left_child_max_key;</span><br><span class=\"line\">+  *internal_node_right_child(root) = right_child_page_num;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"中间节点的格式\"><a href=\"#中间节点的格式\" class=\"headerlink\" title=\"中间节点的格式\"></a>中间节点的格式</h2><p>现在我们终于创建了一个内部节点, 我们现在去定义他的layout. 它一开始是一个普通的头, 然后是包含的键的数量, 然后是最右边孩子的页码. 内部节点总是有一个子指针而不是它们的键, 额外的指针存储在header 中.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Internal Node Header Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_NUM_KEYS_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_NUM_KEYS_OFFSET = COMMON_NODE_HEADER_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_RIGHT_CHILD_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_RIGHT_CHILD_OFFSET =</span><br><span class=\"line\">+    INTERNAL_NODE_NUM_KEYS_OFFSET + INTERNAL_NODE_NUM_KEYS_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_HEADER_SIZE = COMMON_NODE_HEADER_SIZE +</span><br><span class=\"line\">+                                           INTERNAL_NODE_NUM_KEYS_SIZE +</span><br><span class=\"line\">+                                         INTERNAL_NODE_RIGHT_CHILD_SIZE;</span><br></pre></td></tr></table></figure></p>\n<p>内容时一个cells 的数组, 每一个 cell 包含一个子指针和一个键. 每个键应该是左侧子项中包含的最大键.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Internal Node Body Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_KEY_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_CHILD_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_CELL_SIZE =</span><br><span class=\"line\">+    INTERNAL_NODE_CHILD_SIZE + INTERNAL_NODE_KEY_SIZE;</span><br></pre></td></tr></table></figure></p>\n<p>基于这些常量, 以下是内部节点的布局:</p>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/internal-node-format.png\" alt=\"Our internal node format\"><br>Our internal node format</p>\n<p>注意我们巨大的变化. 因为每一个子指针和键值对都很小, 我们能够填充510 key 和511 个子指针,在每一个中间节点. 这意味着我们永远不必遍历树的许多层来找到给定的key.</p>\n<table>\n<thead>\n<tr>\n<th># internal node layers</th>\n<th>max # leaf nodes</th>\n<th>Size of all leaf nodes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>511^0 = 1</td>\n<td>4 KB</td>\n</tr>\n<tr>\n<td>1</td>\n<td>511^1 = 512</td>\n<td>~2 MB</td>\n</tr>\n<tr>\n<td>2</td>\n<td>511^2 = 261,121</td>\n<td>~1 GB</td>\n</tr>\n<tr>\n<td>3</td>\n<td>511^3 = 133,432,831</td>\n<td>~550 GB</td>\n</tr>\n</tbody>\n</table>\n<p>实际上，由于头部信息，key和浪费空间的开销，我们无法为每个叶节点存储完整的4 KB数据。但是我们可以通过从磁盘加载仅4页来搜索500 GB的数据。这就是B-Tree是数据库的有用数据结构的原因。<br>以下是读取和写入内部节点的方法:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* internal_node_num_keys(<span class=\"keyword\">void</span>* node) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> node + INTERNAL_NODE_NUM_KEYS_OFFSET;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* internal_node_right_child(<span class=\"keyword\">void</span>* node) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> node + INTERNAL_NODE_RIGHT_CHILD_OFFSET;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* internal_node_cell(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> cell_num) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> node + INTERNAL_NODE_HEADER_SIZE + cell_num * INTERNAL_NODE_CELL_SIZE;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* internal_node_child(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> child_num) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_keys = *internal_node_num_keys(node);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (child_num &gt; num_keys) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to access child_num %d &gt; num_keys %d\\n\"</span>, child_num, num_keys);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child_num == num_keys) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> internal_node_right_child(node);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> internal_node_cell(node, child_num);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* internal_node_key(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> key_num) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> internal_node_cell(node, key_num) + INTERNAL_NODE_CHILD_SIZE;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于内部节点，最大密钥始终是其右键。对于叶节点，它是最大索引处的键:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">uint32_t</span> get_node_max_key(<span class=\"keyword\">void</span>* node) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">switch</span> (get_node_type(node)) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> NODE_INTERNAL:</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> *internal_node_key(node, *internal_node_num_keys(node) - <span class=\"number\">1</span>);</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> NODE_LEAF:</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> *leaf_node_key(node, *leaf_node_num_cells(node) - <span class=\"number\">1</span>);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"跟踪-Root\"><a href=\"#跟踪-Root\" class=\"headerlink\" title=\"跟踪 Root\"></a>跟踪 Root</h2><p>我们最终在公共节点头中使用了is_root字段。回想一下，我们使用它来决定如何拆分叶节点:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_node_root</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint8_t</span> value = *((<span class=\"keyword\">uint8_t</span>*)(node + IS_ROOT_OFFSET));</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> (<span class=\"keyword\">bool</span>)value;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_node_root</span><span class=\"params\">(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">bool</span> is_root)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint8_t</span> value = is_root;</span><br><span class=\"line\">+  *((<span class=\"keyword\">uint8_t</span>*)(node + IS_ROOT_OFFSET)) = value;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>以下是getter 和 setter 方法:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_node_root</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint8_t</span> value = *((<span class=\"keyword\">uint8_t</span>*)(node + IS_ROOT_OFFSET));</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> (<span class=\"keyword\">bool</span>)value;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_node_root</span><span class=\"params\">(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">bool</span> is_root)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint8_t</span> value = is_root;</span><br><span class=\"line\">+  *((<span class=\"keyword\">uint8_t</span>*)(node + IS_ROOT_OFFSET)) = value;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<p>初始化两种类型的节点应该默认将is_root设置为false：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">   set_node_type(node, NODE_LEAF);</span><br><span class=\"line\">+  set_node_root(node, <span class=\"literal\">false</span>);</span><br><span class=\"line\">   *leaf_node_num_cells(node) = <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize_internal_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">+  set_node_type(node, NODE_INTERNAL);</span><br><span class=\"line\">+  set_node_root(node, <span class=\"literal\">false</span>);</span><br><span class=\"line\">+  *internal_node_num_keys(node) = <span class=\"number\">0</span>;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们应该在创建表的第一个节点时将is_root设置为true:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// New database file. Initialize page 0 as leaf node.</span></span><br><span class=\"line\">     <span class=\"keyword\">void</span>* root_node = get_page(pager, <span class=\"number\">0</span>);</span><br><span class=\"line\">     initialize_leaf_node(root_node);</span><br><span class=\"line\">+    set_node_root(root_node, <span class=\"literal\">true</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> table;</span><br></pre></td></tr></table></figure>\n<h2 id=\"打印树\"><a href=\"#打印树\" class=\"headerlink\" title=\"打印树\"></a>打印树</h2><p>为了帮助我们可视化数据库的状态，我们应该更新.btree metacommand以打印多级树.<br>我要替换当前的print_leaf_node（）函数.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">-  <span class=\"built_in\">printf</span>(<span class=\"string\">\"leaf (size %d)\\n\"</span>, num_cells);</span><br><span class=\"line\">-  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_cells; i++) &#123;</span><br><span class=\"line\">-    <span class=\"keyword\">uint32_t</span> key = *leaf_node_key(node, i);</span><br><span class=\"line\">-    <span class=\"built_in\">printf</span>(<span class=\"string\">\"  - %d : %d\\n\"</span>, i, key);</span><br><span class=\"line\">-  &#125;</span><br><span class=\"line\">-&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用一个新的递归函数，它接受任何节点，然后打印它及其子节点。它将缩进级别作为参数，随着每次递归调用而增加。我还添加了一个小的辅助函数来缩进。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">indent</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> level)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; level; i++) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"  \"</span>);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_tree</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> indentation_level)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(pager, page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_keys, child;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">switch</span> (get_node_type(node)) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> (NODE_LEAF):</span><br><span class=\"line\">+      num_keys = *leaf_node_num_cells(node);</span><br><span class=\"line\">+      indent(indentation_level);</span><br><span class=\"line\">+      <span class=\"built_in\">printf</span>(<span class=\"string\">\"- leaf (size %d)\\n\"</span>, num_keys);</span><br><span class=\"line\">+      <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_keys; i++) &#123;</span><br><span class=\"line\">+        indent(indentation_level + <span class=\"number\">1</span>);</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"- %d\\n\"</span>, *leaf_node_key(node, i));</span><br><span class=\"line\">+      &#125;</span><br><span class=\"line\">+      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> (NODE_INTERNAL):</span><br><span class=\"line\">+      num_keys = *internal_node_num_keys(node);</span><br><span class=\"line\">+      indent(indentation_level);</span><br><span class=\"line\">+      <span class=\"built_in\">printf</span>(<span class=\"string\">\"- internal (size %d)\\n\"</span>, num_keys);</span><br><span class=\"line\">+      <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_keys; i++) &#123;</span><br><span class=\"line\">+        child = *internal_node_child(node, i);</span><br><span class=\"line\">+        print_tree(pager, child, indentation_level + <span class=\"number\">1</span>);</span><br><span class=\"line\">+</span><br><span class=\"line\">+        indent(indentation_level);</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"- key %d\\n\"</span>, *internal_node_key(node, i));</span><br><span class=\"line\">+      &#125;</span><br><span class=\"line\">+      child = *internal_node_right_child(node);</span><br><span class=\"line\">+      print_tree(pager, child, indentation_level + <span class=\"number\">1</span>);</span><br><span class=\"line\">+      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<p>并更新对print函数的调用，将缩进级别传递给零.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".btree\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tree:\\n\"</span>);</span><br><span class=\"line\">-    print_leaf_node(get_page(table-&gt;pager, <span class=\"number\">0</span>));</span><br><span class=\"line\">+    print_tree(table-&gt;pager, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> META_COMMAND_SUCCESS;</span><br></pre></td></tr></table></figure>\n<p>这是新打印功能的测试用例<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  it <span class=\"string\">'allows printing out the structure of a 3-leaf-node btree'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    script = (<span class=\"number\">1</span>..<span class=\"number\">14</span>).map <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">+      <span class=\"string\">\"insert <span class=\"subst\">#&#123;i&#125;</span> user<span class=\"subst\">#&#123;i&#125;</span> person<span class=\"subst\">#&#123;i&#125;</span>@example.com\"</span></span><br><span class=\"line\">+    <span class=\"keyword\">end</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".btree\"</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\"insert 15 user15 person15@example.com\"</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".exit\"</span></span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+</span><br><span class=\"line\">+    expect(result[<span class=\"number\">14</span>...(result.length)]).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Tree:\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"- internal (size 1)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - leaf (size 7)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 1\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 2\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 3\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 4\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 5\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 6\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 7\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"- key 7\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - leaf (size 7)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 8\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 9\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 10\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 11\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 12\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 13\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 14\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Need to implement searching an internal node\"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></p>\n<p>新格式有点简化，所以我们需要更新现有的.btree测试:<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"db &gt; Tree:\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"leaf (size 3)\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"  - 0 : 1\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"  - 1 : 2\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"  - 2 : 3\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"- leaf (size 3)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 1\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 2\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 3\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"db &gt; \"</span></span><br><span class=\"line\">     ])</span><br><span class=\"line\">   <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></p>\n<p>这是新测试的.btree输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tree:</span><br><span class=\"line\">- internal (size 1)</span><br><span class=\"line\">  - leaf (size 7)</span><br><span class=\"line\">    - 1</span><br><span class=\"line\">    - 2</span><br><span class=\"line\">    - 3</span><br><span class=\"line\">    - 4</span><br><span class=\"line\">    - 5</span><br><span class=\"line\">    - 6</span><br><span class=\"line\">    - 7</span><br><span class=\"line\">  - key 7</span><br><span class=\"line\">  - leaf (size 7)</span><br><span class=\"line\">    - 8</span><br><span class=\"line\">    - 9</span><br><span class=\"line\">    - 10</span><br><span class=\"line\">    - 11</span><br><span class=\"line\">    - 12</span><br><span class=\"line\">    - 13</span><br><span class=\"line\">    - 14</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"主要问题\"><a href=\"#主要问题\" class=\"headerlink\" title=\"主要问题\"></a>主要问题</h2><p>如果你一直密切关注，你可能会注意到我们错过了一些大事。看看如果我们尝试插入另一行会发生什么.<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db &gt; insert 15 user15 person15@example.com</span><br><span class=\"line\">Need to implement searching an internal node</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Part-10-分割叶子节点\"><a href=\"#Part-10-分割叶子节点\" class=\"headerlink\" title=\"Part 10 - 分割叶子节点\"></a>Part 10 - 分割叶子节点</h1><p>我们的 B树现在仅有一个节点. 修复它, 我们需要一些代码去分割一个叶子节点. 在哪之后我们需要去创建一个中间节点作为两个叶子节点的中间节点.<br>基本上我们这篇文章的目标就是从这样:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree2.png\" alt=\"one-node btree\"><br>one-node btree</p>\n<p>到这样:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree3.png\" alt=\"two-level btree\"><br>two-level btree</p>\n<p>第一步, 先让我们移除叶子节点填充完的错误.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">leaf_node_insert</span><span class=\"params\">(Cursor* cursor, <span class=\"keyword\">uint32_t</span> key, Row* value)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* node = get_page(cursor-&gt;table-&gt;pager, cursor-&gt;page_num);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (num_cells &gt;= LEAF_NODE_MAX_CELLS) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Node full</span></span><br><span class=\"line\">-    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Need to implement splitting a leaf node.\\n\"</span>);</span><br><span class=\"line\">-    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+    leaf_node_split_and_insert(cursor, key, value);</span><br><span class=\"line\">+    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ExecuteResult <span class=\"title\">execute_insert</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> num_cells = (*leaf_node_num_cells(node));</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (num_cells &gt;= LEAF_NODE_MAX_CELLS) &#123;</span><br><span class=\"line\">-    <span class=\"keyword\">return</span> EXECUTE_TABLE_FULL;</span><br><span class=\"line\">-  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> key_to_insert = row_to_insert-&gt;id;</span><br></pre></td></tr></table></figure>\n<h2 id=\"切分算法\"><a href=\"#切分算法\" class=\"headerlink\" title=\"切分算法\"></a>切分算法</h2><p>简单的部分结束了. 从 sqlite 官网获得的一些描述信息: <a href=\"https://play.google.com/store/books/details/Sibsankar_Haldar_SQLite_Database_System_Design_and?id=9Z6IQQnX1JEC&amp;hl=en\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/books/details/Sibsankar_Haldar_SQLite_Database_System_Design_and?id=9Z6IQQnX1JEC&amp;hl=en</a></p>\n<blockquote>\n<p>If there is no space on the leaf node, we would split the existing entries residing there and the new one (being inserted) into two equal halves: lower and upper halves. (Keys on the upper half are strictly greater than those on the lower half.) We allocate a new leaf node, and move the upper half into the new node.</p>\n</blockquote>\n<blockquote>\n<p>如果叶子节点没有空间了, 我们会将驻留在那里的现有条目和新的条目（被插入）分成两半：下半部分和上半部分.  (上半部分的键严格大于下半部分的键.) 我们分配一个新的叶子节点，并将上半部分移动到新节点.</p>\n</blockquote>\n<p>让我来处理旧的节点并且创建一个新的节点:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">leaf_node_split_and_insert</span><span class=\"params\">(Cursor* cursor, <span class=\"keyword\">uint32_t</span> key, Row* value)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+  Create a new node and move half the cells over.</span></span><br><span class=\"line\"><span class=\"comment\">+  Insert the new value in one of the two nodes.</span></span><br><span class=\"line\"><span class=\"comment\">+  Update parent or create a new parent.</span></span><br><span class=\"line\"><span class=\"comment\">+  */</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* old_node = get_page(cursor-&gt;table-&gt;pager, cursor-&gt;page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> new_page_num = get_unused_page_num(cursor-&gt;table-&gt;pager);</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* new_node = get_page(cursor-&gt;table-&gt;pager, new_page_num);</span><br><span class=\"line\">+  initialize_leaf_node(new_node);</span><br></pre></td></tr></table></figure></p>\n<p>下一步, 拷贝每一个 cell 到新的地方:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+  All existing keys plus new key should be divided</span></span><br><span class=\"line\"><span class=\"comment\">+  evenly between old (left) and new (right) nodes.</span></span><br><span class=\"line\"><span class=\"comment\">+  Starting from the right, move each key to correct position.</span></span><br><span class=\"line\"><span class=\"comment\">+  */</span></span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">int32_t</span> i = LEAF_NODE_MAX_CELLS; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* destination_node;</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (i &gt;= LEAF_NODE_LEFT_SPLIT_COUNT) &#123;</span><br><span class=\"line\">+      destination_node = new_node;</span><br><span class=\"line\">+    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+      destination_node = old_node;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> index_within_node = i % LEAF_NODE_LEFT_SPLIT_COUNT;</span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* destination = leaf_node_cell(destination_node, index_within_node);</span><br><span class=\"line\">+</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (i == cursor-&gt;cell_num) &#123;</span><br><span class=\"line\">+      serialize_row(value, destination);</span><br><span class=\"line\">+    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &gt; cursor-&gt;cell_num) &#123;</span><br><span class=\"line\">+      <span class=\"built_in\">memcpy</span>(destination, leaf_node_cell(old_node, i - <span class=\"number\">1</span>), LEAF_NODE_CELL_SIZE);</span><br><span class=\"line\">+    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+      <span class=\"built_in\">memcpy</span>(destination, leaf_node_cell(old_node, i), LEAF_NODE_CELL_SIZE);</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br></pre></td></tr></table></figure>\n<p>更新 cell 的数量在每一个节点的头部:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  <span class=\"comment\">/* Update cell count on both leaf nodes */</span></span><br><span class=\"line\">+  *(leaf_node_num_cells(old_node)) = LEAF_NODE_LEFT_SPLIT_COUNT;</span><br><span class=\"line\">+  *(leaf_node_num_cells(new_node)) = LEAF_NODE_RIGHT_SPLIT_COUNT;</span><br></pre></td></tr></table></figure></p>\n<p>然后我们需要更新节点的父节点. 如果原节点是一个根节点就没有父节点了. 在这种情况下, 新建一个根节点去作为父节点. 我们先去除其它情况:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  <span class=\"keyword\">if</span> (is_node_root(old_node)) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> create_new_root(cursor-&gt;table, new_page_num);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Need to implement updating parent after split\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"分配新的页\"><a href=\"#分配新的页\" class=\"headerlink\" title=\"分配新的页\"></a>分配新的页</h2><p>定义一些新的函数和常量. 当我们创建一个新的叶子节点的时, 我们将其放在由<code>get_unused_page_num()</code> 决定的页面中.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+Until we start recycling free pages, new pages will always</span></span><br><span class=\"line\"><span class=\"comment\">+go onto the end of the database file</span></span><br><span class=\"line\"><span class=\"comment\">+*/</span></span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span> get_unused_page_num(Pager* pager) &#123; <span class=\"keyword\">return</span> pager-&gt;num_pages; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我们假设数据库现在有 N 页, 从 0 到 N -1 被分配完了. 我们总是能分配第 N 页. 最终我们实行删除后, 一些页面可能变成空并且他们的页码将不可用. 为了高效, 我们可以重新分配这些页面.</p>\n<h2 id=\"叶子节点的大小\"><a href=\"#叶子节点的大小\" class=\"headerlink\" title=\"叶子节点的大小\"></a>叶子节点的大小</h2><p>为了让树保持平衡, 我们在两个新节点之间均匀分配cells. 如果一个叶子节点能保存 N 个 cell, 然后在分割的时候需要在两个节点间分配 N+1 的 cells. (N 为原始单元加一个新的单元). 如果 N+1 是一个基数, 我随意选择左节点再获得一个单元格.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_RIGHT_SPLIT_COUNT = (LEAF_NODE_MAX_CELLS + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_LEFT_SPLIT_COUNT =</span><br><span class=\"line\">+    (LEAF_NODE_MAX_CELLS + <span class=\"number\">1</span>) - LEAF_NODE_RIGHT_SPLIT_COUNT;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建一个新的根节点\"><a href=\"#创建一个新的根节点\" class=\"headerlink\" title=\"创建一个新的根节点\"></a>创建一个新的根节点</h2><p>以下是SQLite数据库系统如何解释创建新根节点的过程: <a href=\"https://play.google.com/store/books/details/Sibsankar_Haldar_SQLite_Database_System_Design_and?id=9Z6IQQnX1JEC&amp;hl=en\" target=\"_blank\" rel=\"noopener\">https://play.google.com/store/books/details/Sibsankar_Haldar_SQLite_Database_System_Design_and?id=9Z6IQQnX1JEC&amp;hl=en</a></p>\n<blockquote>\n<p>Let N be the root node. First allocate two nodes, say L and R. Move lower half of N into L and the upper half into R. Now N is empty. Add 〈L, K,R〉 in N, where K is the max key in L. Page N remains the root. Note that the depth of the tree has increased by one, but the new tree remains height balanced without violating any B+-tree property.</p>\n<p>设N为根节点. 首先, 分配两个节点 L 和 R. 移动低一半的 N 到 L 和 高一半到 R 中. 现在 N 是空的了. 在 N 中, 增加 &lt;L, K, R&gt;. 这里的 K 是 L 中的最大 key . 第 N 页依旧是根. 请注意，树的深度增加了1，但新树保持高度平衡而不违反任何B + tree属性。</p>\n</blockquote>\n<p>在这一点上，我们已经分配了正确的孩子，并将上半部分移入其中. 我们的函数将正确的子项作为输入，并分配一个新页面来存储左子项.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">create_new_root</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> right_child_page_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+  Handle splitting the root.</span></span><br><span class=\"line\"><span class=\"comment\">+  Old root copied to new page, becomes left child.</span></span><br><span class=\"line\"><span class=\"comment\">+  Address of right child passed in.</span></span><br><span class=\"line\"><span class=\"comment\">+  Re-initialize root page to contain the new root node.</span></span><br><span class=\"line\"><span class=\"comment\">+  New root node points to two children.</span></span><br><span class=\"line\"><span class=\"comment\">+  */</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* root = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* right_child = get_page(table-&gt;pager, right_child_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> left_child_page_num = get_unused_page_num(table-&gt;pager);</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* left_child = get_page(table-&gt;pager, left_child_page_num);</span><br></pre></td></tr></table></figure>\n<p>旧的根数据被拷贝到左子项, 所以我能重用根页.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  <span class=\"comment\">/* Left child has data copied from old root */</span></span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(left_child, root, PAGE_SIZE);</span><br><span class=\"line\">+  set_node_root(left_child, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<p>最后,我们初始化一个根页为有两个孩子的中间节点.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  <span class=\"comment\">/* Root node is a new internal node with one key and two children */</span></span><br><span class=\"line\">+  initialize_internal_node(root);</span><br><span class=\"line\">+  set_node_root(root, <span class=\"literal\">true</span>);</span><br><span class=\"line\">+  *internal_node_num_keys(root) = <span class=\"number\">1</span>;</span><br><span class=\"line\">+  *internal_node_child(root, <span class=\"number\">0</span>) = left_child_page_num;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> left_child_max_key = get_node_max_key(left_child);</span><br><span class=\"line\">+  *internal_node_key(root, <span class=\"number\">0</span>) = left_child_max_key;</span><br><span class=\"line\">+  *internal_node_right_child(root) = right_child_page_num;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"中间节点的格式\"><a href=\"#中间节点的格式\" class=\"headerlink\" title=\"中间节点的格式\"></a>中间节点的格式</h2><p>现在我们终于创建了一个内部节点, 我们现在去定义他的layout. 它一开始是一个普通的头, 然后是包含的键的数量, 然后是最右边孩子的页码. 内部节点总是有一个子指针而不是它们的键, 额外的指针存储在header 中.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Internal Node Header Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_NUM_KEYS_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_NUM_KEYS_OFFSET = COMMON_NODE_HEADER_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_RIGHT_CHILD_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_RIGHT_CHILD_OFFSET =</span><br><span class=\"line\">+    INTERNAL_NODE_NUM_KEYS_OFFSET + INTERNAL_NODE_NUM_KEYS_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_HEADER_SIZE = COMMON_NODE_HEADER_SIZE +</span><br><span class=\"line\">+                                           INTERNAL_NODE_NUM_KEYS_SIZE +</span><br><span class=\"line\">+                                         INTERNAL_NODE_RIGHT_CHILD_SIZE;</span><br></pre></td></tr></table></figure></p>\n<p>内容时一个cells 的数组, 每一个 cell 包含一个子指针和一个键. 每个键应该是左侧子项中包含的最大键.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Internal Node Body Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_KEY_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_CHILD_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> INTERNAL_NODE_CELL_SIZE =</span><br><span class=\"line\">+    INTERNAL_NODE_CHILD_SIZE + INTERNAL_NODE_KEY_SIZE;</span><br></pre></td></tr></table></figure></p>\n<p>基于这些常量, 以下是内部节点的布局:</p>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/internal-node-format.png\" alt=\"Our internal node format\"><br>Our internal node format</p>\n<p>注意我们巨大的变化. 因为每一个子指针和键值对都很小, 我们能够填充510 key 和511 个子指针,在每一个中间节点. 这意味着我们永远不必遍历树的许多层来找到给定的key.</p>\n<table>\n<thead>\n<tr>\n<th># internal node layers</th>\n<th>max # leaf nodes</th>\n<th>Size of all leaf nodes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>511^0 = 1</td>\n<td>4 KB</td>\n</tr>\n<tr>\n<td>1</td>\n<td>511^1 = 512</td>\n<td>~2 MB</td>\n</tr>\n<tr>\n<td>2</td>\n<td>511^2 = 261,121</td>\n<td>~1 GB</td>\n</tr>\n<tr>\n<td>3</td>\n<td>511^3 = 133,432,831</td>\n<td>~550 GB</td>\n</tr>\n</tbody>\n</table>\n<p>实际上，由于头部信息，key和浪费空间的开销，我们无法为每个叶节点存储完整的4 KB数据。但是我们可以通过从磁盘加载仅4页来搜索500 GB的数据。这就是B-Tree是数据库的有用数据结构的原因。<br>以下是读取和写入内部节点的方法:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* internal_node_num_keys(<span class=\"keyword\">void</span>* node) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> node + INTERNAL_NODE_NUM_KEYS_OFFSET;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* internal_node_right_child(<span class=\"keyword\">void</span>* node) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> node + INTERNAL_NODE_RIGHT_CHILD_OFFSET;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* internal_node_cell(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> cell_num) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> node + INTERNAL_NODE_HEADER_SIZE + cell_num * INTERNAL_NODE_CELL_SIZE;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* internal_node_child(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> child_num) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_keys = *internal_node_num_keys(node);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (child_num &gt; num_keys) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to access child_num %d &gt; num_keys %d\\n\"</span>, child_num, num_keys);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child_num == num_keys) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> internal_node_right_child(node);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> internal_node_cell(node, child_num);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* internal_node_key(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> key_num) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> internal_node_cell(node, key_num) + INTERNAL_NODE_CHILD_SIZE;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于内部节点，最大密钥始终是其右键。对于叶节点，它是最大索引处的键:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">uint32_t</span> get_node_max_key(<span class=\"keyword\">void</span>* node) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">switch</span> (get_node_type(node)) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> NODE_INTERNAL:</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> *internal_node_key(node, *internal_node_num_keys(node) - <span class=\"number\">1</span>);</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> NODE_LEAF:</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> *leaf_node_key(node, *leaf_node_num_cells(node) - <span class=\"number\">1</span>);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"跟踪-Root\"><a href=\"#跟踪-Root\" class=\"headerlink\" title=\"跟踪 Root\"></a>跟踪 Root</h2><p>我们最终在公共节点头中使用了is_root字段。回想一下，我们使用它来决定如何拆分叶节点:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_node_root</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint8_t</span> value = *((<span class=\"keyword\">uint8_t</span>*)(node + IS_ROOT_OFFSET));</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> (<span class=\"keyword\">bool</span>)value;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_node_root</span><span class=\"params\">(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">bool</span> is_root)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint8_t</span> value = is_root;</span><br><span class=\"line\">+  *((<span class=\"keyword\">uint8_t</span>*)(node + IS_ROOT_OFFSET)) = value;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>以下是getter 和 setter 方法:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_node_root</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint8_t</span> value = *((<span class=\"keyword\">uint8_t</span>*)(node + IS_ROOT_OFFSET));</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> (<span class=\"keyword\">bool</span>)value;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_node_root</span><span class=\"params\">(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">bool</span> is_root)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint8_t</span> value = is_root;</span><br><span class=\"line\">+  *((<span class=\"keyword\">uint8_t</span>*)(node + IS_ROOT_OFFSET)) = value;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<p>初始化两种类型的节点应该默认将is_root设置为false：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">   set_node_type(node, NODE_LEAF);</span><br><span class=\"line\">+  set_node_root(node, <span class=\"literal\">false</span>);</span><br><span class=\"line\">   *leaf_node_num_cells(node) = <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize_internal_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">+  set_node_type(node, NODE_INTERNAL);</span><br><span class=\"line\">+  set_node_root(node, <span class=\"literal\">false</span>);</span><br><span class=\"line\">+  *internal_node_num_keys(node) = <span class=\"number\">0</span>;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们应该在创建表的第一个节点时将is_root设置为true:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// New database file. Initialize page 0 as leaf node.</span></span><br><span class=\"line\">     <span class=\"keyword\">void</span>* root_node = get_page(pager, <span class=\"number\">0</span>);</span><br><span class=\"line\">     initialize_leaf_node(root_node);</span><br><span class=\"line\">+    set_node_root(root_node, <span class=\"literal\">true</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> table;</span><br></pre></td></tr></table></figure>\n<h2 id=\"打印树\"><a href=\"#打印树\" class=\"headerlink\" title=\"打印树\"></a>打印树</h2><p>为了帮助我们可视化数据库的状态，我们应该更新.btree metacommand以打印多级树.<br>我要替换当前的print_leaf_node（）函数.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">-  <span class=\"built_in\">printf</span>(<span class=\"string\">\"leaf (size %d)\\n\"</span>, num_cells);</span><br><span class=\"line\">-  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_cells; i++) &#123;</span><br><span class=\"line\">-    <span class=\"keyword\">uint32_t</span> key = *leaf_node_key(node, i);</span><br><span class=\"line\">-    <span class=\"built_in\">printf</span>(<span class=\"string\">\"  - %d : %d\\n\"</span>, i, key);</span><br><span class=\"line\">-  &#125;</span><br><span class=\"line\">-&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用一个新的递归函数，它接受任何节点，然后打印它及其子节点。它将缩进级别作为参数，随着每次递归调用而增加。我还添加了一个小的辅助函数来缩进。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">indent</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> level)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; level; i++) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"  \"</span>);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_tree</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> indentation_level)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(pager, page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_keys, child;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">switch</span> (get_node_type(node)) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> (NODE_LEAF):</span><br><span class=\"line\">+      num_keys = *leaf_node_num_cells(node);</span><br><span class=\"line\">+      indent(indentation_level);</span><br><span class=\"line\">+      <span class=\"built_in\">printf</span>(<span class=\"string\">\"- leaf (size %d)\\n\"</span>, num_keys);</span><br><span class=\"line\">+      <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_keys; i++) &#123;</span><br><span class=\"line\">+        indent(indentation_level + <span class=\"number\">1</span>);</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"- %d\\n\"</span>, *leaf_node_key(node, i));</span><br><span class=\"line\">+      &#125;</span><br><span class=\"line\">+      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> (NODE_INTERNAL):</span><br><span class=\"line\">+      num_keys = *internal_node_num_keys(node);</span><br><span class=\"line\">+      indent(indentation_level);</span><br><span class=\"line\">+      <span class=\"built_in\">printf</span>(<span class=\"string\">\"- internal (size %d)\\n\"</span>, num_keys);</span><br><span class=\"line\">+      <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_keys; i++) &#123;</span><br><span class=\"line\">+        child = *internal_node_child(node, i);</span><br><span class=\"line\">+        print_tree(pager, child, indentation_level + <span class=\"number\">1</span>);</span><br><span class=\"line\">+</span><br><span class=\"line\">+        indent(indentation_level);</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"- key %d\\n\"</span>, *internal_node_key(node, i));</span><br><span class=\"line\">+      &#125;</span><br><span class=\"line\">+      child = *internal_node_right_child(node);</span><br><span class=\"line\">+      print_tree(pager, child, indentation_level + <span class=\"number\">1</span>);</span><br><span class=\"line\">+      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<p>并更新对print函数的调用，将缩进级别传递给零.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".btree\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tree:\\n\"</span>);</span><br><span class=\"line\">-    print_leaf_node(get_page(table-&gt;pager, <span class=\"number\">0</span>));</span><br><span class=\"line\">+    print_tree(table-&gt;pager, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> META_COMMAND_SUCCESS;</span><br></pre></td></tr></table></figure>\n<p>这是新打印功能的测试用例<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  it <span class=\"string\">'allows printing out the structure of a 3-leaf-node btree'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    script = (<span class=\"number\">1</span>..<span class=\"number\">14</span>).map <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">+      <span class=\"string\">\"insert <span class=\"subst\">#&#123;i&#125;</span> user<span class=\"subst\">#&#123;i&#125;</span> person<span class=\"subst\">#&#123;i&#125;</span>@example.com\"</span></span><br><span class=\"line\">+    <span class=\"keyword\">end</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".btree\"</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\"insert 15 user15 person15@example.com\"</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".exit\"</span></span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+</span><br><span class=\"line\">+    expect(result[<span class=\"number\">14</span>...(result.length)]).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Tree:\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"- internal (size 1)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - leaf (size 7)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 1\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 2\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 3\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 4\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 5\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 6\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 7\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"- key 7\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - leaf (size 7)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 8\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 9\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 10\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 11\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 12\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 13\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"    - 14\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Need to implement searching an internal node\"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></p>\n<p>新格式有点简化，所以我们需要更新现有的.btree测试:<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"db &gt; Tree:\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"leaf (size 3)\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"  - 0 : 1\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"  - 1 : 2\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"  - 2 : 3\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"- leaf (size 3)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 1\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 2\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 3\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"db &gt; \"</span></span><br><span class=\"line\">     ])</span><br><span class=\"line\">   <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></p>\n<p>这是新测试的.btree输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tree:</span><br><span class=\"line\">- internal (size 1)</span><br><span class=\"line\">  - leaf (size 7)</span><br><span class=\"line\">    - 1</span><br><span class=\"line\">    - 2</span><br><span class=\"line\">    - 3</span><br><span class=\"line\">    - 4</span><br><span class=\"line\">    - 5</span><br><span class=\"line\">    - 6</span><br><span class=\"line\">    - 7</span><br><span class=\"line\">  - key 7</span><br><span class=\"line\">  - leaf (size 7)</span><br><span class=\"line\">    - 8</span><br><span class=\"line\">    - 9</span><br><span class=\"line\">    - 10</span><br><span class=\"line\">    - 11</span><br><span class=\"line\">    - 12</span><br><span class=\"line\">    - 13</span><br><span class=\"line\">    - 14</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"主要问题\"><a href=\"#主要问题\" class=\"headerlink\" title=\"主要问题\"></a>主要问题</h2><p>如果你一直密切关注，你可能会注意到我们错过了一些大事。看看如果我们尝试插入另一行会发生什么.<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db &gt; insert 15 user15 person15@example.com</span><br><span class=\"line\">Need to implement searching an internal node</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Part 2 - 世上最简单的 SQL 编译器和虚拟机","date":"2019-01-26T08:11:20.000Z","_content":"\n# Part 2 - 世上最简单的 SQL 编译器和虚拟机\n\nsqlite 的前端是一个 SQL 编辑器, 解析一个字符串和输出一个内部的字节编码. \n\n这个字节编码通过虚拟机执行它.\n\n![SQLite Architecture](https://cstack.github.io/db_tutorial/assets/images/arch2.gif)\nSQLite Architecture (https://www.sqlite.org/arch.html)\n\n将整件事情分解为两步主要有两个优点:\n- 减少每一块的复杂度(例如: 虚拟机不用去考虑语法的错误)\n- 允许编译常见错误,并且缓存字节码以提高效率.\n\n顺着这个思路, 让我重构一下主函数, 并且让其支持两个新的关键词:\n```c\n int main(int argc, char* argv[]) {\n   InputBuffer* input_buffer = new_input_buffer();\n   while (true) {\n     print_prompt();\n     read_input(input_buffer);\n\n-    if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n-      exit(EXIT_SUCCESS);\n-    } else {\n-      printf(\"Unrecognized command '%s'.\\n\", input_buffer->buffer);\n+    if (input_buffer->buffer[0] == '.') {\n+      switch (do_meta_command(input_buffer)) {\n+        case (META_COMMAND_SUCCESS):\n+          continue;\n+        case (META_COMMAND_UNRECOGNIZED_COMMAND):\n+          printf(\"Unrecognized command '%s'\\n\", input_buffer->buffer);\n+          continue;\n+      }\n     }\n+\n+    Statement statement;\n+    switch (prepare_statement(input_buffer, &statement)) {\n+      case (PREPARE_SUCCESS):\n+        break;\n+      case (PREPARE_UNRECOGNIZED_STATEMENT):\n+        printf(\"Unrecognized keyword at start of '%s'.\\n\",\n+               input_buffer->buffer);\n+        continue;\n+    }\n+\n+    execute_statement(&statement);\n+    printf(\"Executed.\\n\");\n   }\n }\n```\n\n`.exit` 不是 SQL 命令,被称为 \"元命令\". 他们开始于 `.` 号, 所有我们需要先检查它们, 并在分离函数中处理他们.\n\n下一步,我们添加一步将输入的行转换成内部的 statement. 这是我们前端的 hacky 版本.\n\n最后,我们将预处理好的 statement 传给 `execute_statement` 函数, 这个函数最终将会变成我们的虚拟机.\n\n注意, 这个新的函数均返回 enums 来表示成功或者失败:\n```c\nenum MetaCommandResult_t {\n  META_COMMAND_SUCCESS,\n  META_COMMAND_UNRECOGNIZED_COMMAND\n};\ntypedef enum MetaCommandResult_t MetaCommandResult;\n\nenum PrepareResult_t { PREPARE_SUCCESS, PREPARE_UNRECOGNIZED_STATEMENT };\ntypedef enum PrepareResult_t PrepareResult;\n```\n\n`do_meta_command` 函数仅仅是一个包装了退出函数,为更多的命令留下空间.\n\n```c\nMetaCommandResult do_meta_command(InputBuffer* input_buffer) {\n  if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n    exit(EXIT_SUCCESS);\n  } else {\n    return META_COMMAND_UNRECOGNIZED_COMMAND;\n  }\n}\n```\n\n我们的`prepared statement`枚举 现在仅包含两个值, 它将来将会包含更多的参数在声明中.\n\n```c\nenum StatementType_t { STATEMENT_INSERT, STATEMENT_SELECT };\ntypedef enum StatementType_t StatementType;\n\nstruct Statement_t {\n  StatementType type;\n};\ntypedef struct Statement_t Statement;\n```\n\n`prepare_statement` (我们的 SQL 编译器) 现在并不能理解 SQL, 他现在仅仅能理解两个单词.\n\n```c\nPrepareResult prepare_statement(InputBuffer* input_buffer,\n                                Statement* statement) {\n  if (strncmp(input_buffer->buffer, \"insert\", 6) == 0) {\n    statement->type = STATEMENT_INSERT;\n    return PREPARE_SUCCESS;\n  }\n  if (strcmp(input_buffer->buffer, \"select\") == 0) {\n    statement->type = STATEMENT_SELECT;\n    return PREPARE_SUCCESS;\n  }\n\n  return PREPARE_UNRECOGNIZED_STATEMENT;\n}\n```\n\n注意,我们现在使用 `strncmp` 以 insert 关键词来匹配 insert 其后将会跟随着要插入的数据(例如: insert 1 cstack foo@bar.com)\n\n最后 `execute_statement` 函数现在仅仅是打印了一些东西.\n\n```c\nvoid execute_statement(Statement* statement) {\n  switch (statement->type) {\n    case (STATEMENT_INSERT):\n      printf(\"This is where we would do an insert.\\n\");\n      break;\n    case (STATEMENT_SELECT):\n      printf(\"This is where we would do a select.\\n\");\n      break;\n  }\n}\n```\n\n注意这里将不会返回任何错误码,因为这里没有啥错误可能产生\n\n随着代码的开发,我们可以发现两个新的单词了.\n\n```sh\n~ ./db\ndb > insert foo bar\nThis is where we would do an insert.\nExecuted.\ndb > delete foo\nUnrecognized keyword at start of 'delete foo'.\ndb > select\nThis is where we would do a select.\nExecuted.\ndb > .tables\nUnrecognized command '.tables'\ndb > .exit\n~\n```\n\n我们的数据库的架子正在形成... 如果能存储数据将会更加友好? 这是下一章节的内容, 我们将会实现插入和 select, 创建世界上最差的数据库存储, 下面是本章修改的代码对照:\n\n```c\n@@ -10,6 +10,23 @@ struct InputBuffer_t {\n };\n typedef struct InputBuffer_t InputBuffer;\n \n+enum MetaCommandResult_t {\n+  META_COMMAND_SUCCESS,\n+  META_COMMAND_UNRECOGNIZED_COMMAND\n+};\n+typedef enum MetaCommandResult_t MetaCommandResult;\n+\n+enum PrepareResult_t { PREPARE_SUCCESS, PREPARE_UNRECOGNIZED_STATEMENT };\n+typedef enum PrepareResult_t PrepareResult;\n+\n+enum StatementType_t { STATEMENT_INSERT, STATEMENT_SELECT };\n+typedef enum StatementType_t StatementType;\n+\n+struct Statement_t {\n+  StatementType type;\n+};\n+typedef struct Statement_t Statement;\n+\n InputBuffer* new_input_buffer() {\n   InputBuffer* input_buffer = malloc(sizeof(InputBuffer));\n   input_buffer->buffer = NULL;\n@@ -35,16 +52,66 @@ void read_input(InputBuffer* input_buffer) {\n   input_buffer->buffer[bytes_read - 1] = 0;\n }\n \n+MetaCommandResult do_meta_command(InputBuffer* input_buffer) {\n+  if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n+    exit(EXIT_SUCCESS);\n+  } else {\n+    return META_COMMAND_UNRECOGNIZED_COMMAND;\n+  }\n+}\n+\n+PrepareResult prepare_statement(InputBuffer* input_buffer,\n+                                Statement* statement) {\n+  if (strncmp(input_buffer->buffer, \"insert\", 6) == 0) {\n+    statement->type = STATEMENT_INSERT;\n+    return PREPARE_SUCCESS;\n+  }\n+  if (strcmp(input_buffer->buffer, \"select\") == 0) {\n+    statement->type = STATEMENT_SELECT;\n+    return PREPARE_SUCCESS;\n+  }\n+\n+  return PREPARE_UNRECOGNIZED_STATEMENT;\n+}\n+\n+void execute_statement(Statement* statement) {\n+  switch (statement->type) {\n+    case (STATEMENT_INSERT):\n+      printf(\"This is where we would do an insert.\\n\");\n+      break;\n+    case (STATEMENT_SELECT):\n+      printf(\"This is where we would do a select.\\n\");\n+      break;\n+  }\n+}\n+\n int main(int argc, char* argv[]) {\n   InputBuffer* input_buffer = new_input_buffer();\n   while (true) {\n     print_prompt();\n     read_input(input_buffer);\n \n-    if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n-      exit(EXIT_SUCCESS);\n-    } else {\n-      printf(\"Unrecognized command '%s'.\\n\", input_buffer->buffer);\n+    if (input_buffer->buffer[0] == '.') {\n+      switch (do_meta_command(input_buffer)) {\n+        case (META_COMMAND_SUCCESS):\n+          continue;\n+        case (META_COMMAND_UNRECOGNIZED_COMMAND):\n+          printf(\"Unrecognized command '%s'\\n\", input_buffer->buffer);\n+          continue;\n+      }\n     }\n+\n+    Statement statement;\n+    switch (prepare_statement(input_buffer, &statement)) {\n+      case (PREPARE_SUCCESS):\n+        break;\n+      case (PREPARE_UNRECOGNIZED_STATEMENT):\n+        printf(\"Unrecognized keyword at start of '%s'.\\n\",\n+               input_buffer->buffer);\n+        continue;\n+    }\n+\n+    execute_statement(&statement);\n+    printf(\"Executed.\\n\");\n   }\n }\n```\n\n","source":"_posts/build_own_x/data_base/build_simple_database/Part2_worlds_simplest_sql_compiler_and_VM.md","raw":"---\ntitle: Part 2 - 世上最简单的 SQL 编译器和虚拟机\ndate: 2019-01-26 16:11:20\ncategories:\n- build-own-x\ntags:\n- database\n- db原理\n---\n\n# Part 2 - 世上最简单的 SQL 编译器和虚拟机\n\nsqlite 的前端是一个 SQL 编辑器, 解析一个字符串和输出一个内部的字节编码. \n\n这个字节编码通过虚拟机执行它.\n\n![SQLite Architecture](https://cstack.github.io/db_tutorial/assets/images/arch2.gif)\nSQLite Architecture (https://www.sqlite.org/arch.html)\n\n将整件事情分解为两步主要有两个优点:\n- 减少每一块的复杂度(例如: 虚拟机不用去考虑语法的错误)\n- 允许编译常见错误,并且缓存字节码以提高效率.\n\n顺着这个思路, 让我重构一下主函数, 并且让其支持两个新的关键词:\n```c\n int main(int argc, char* argv[]) {\n   InputBuffer* input_buffer = new_input_buffer();\n   while (true) {\n     print_prompt();\n     read_input(input_buffer);\n\n-    if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n-      exit(EXIT_SUCCESS);\n-    } else {\n-      printf(\"Unrecognized command '%s'.\\n\", input_buffer->buffer);\n+    if (input_buffer->buffer[0] == '.') {\n+      switch (do_meta_command(input_buffer)) {\n+        case (META_COMMAND_SUCCESS):\n+          continue;\n+        case (META_COMMAND_UNRECOGNIZED_COMMAND):\n+          printf(\"Unrecognized command '%s'\\n\", input_buffer->buffer);\n+          continue;\n+      }\n     }\n+\n+    Statement statement;\n+    switch (prepare_statement(input_buffer, &statement)) {\n+      case (PREPARE_SUCCESS):\n+        break;\n+      case (PREPARE_UNRECOGNIZED_STATEMENT):\n+        printf(\"Unrecognized keyword at start of '%s'.\\n\",\n+               input_buffer->buffer);\n+        continue;\n+    }\n+\n+    execute_statement(&statement);\n+    printf(\"Executed.\\n\");\n   }\n }\n```\n\n`.exit` 不是 SQL 命令,被称为 \"元命令\". 他们开始于 `.` 号, 所有我们需要先检查它们, 并在分离函数中处理他们.\n\n下一步,我们添加一步将输入的行转换成内部的 statement. 这是我们前端的 hacky 版本.\n\n最后,我们将预处理好的 statement 传给 `execute_statement` 函数, 这个函数最终将会变成我们的虚拟机.\n\n注意, 这个新的函数均返回 enums 来表示成功或者失败:\n```c\nenum MetaCommandResult_t {\n  META_COMMAND_SUCCESS,\n  META_COMMAND_UNRECOGNIZED_COMMAND\n};\ntypedef enum MetaCommandResult_t MetaCommandResult;\n\nenum PrepareResult_t { PREPARE_SUCCESS, PREPARE_UNRECOGNIZED_STATEMENT };\ntypedef enum PrepareResult_t PrepareResult;\n```\n\n`do_meta_command` 函数仅仅是一个包装了退出函数,为更多的命令留下空间.\n\n```c\nMetaCommandResult do_meta_command(InputBuffer* input_buffer) {\n  if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n    exit(EXIT_SUCCESS);\n  } else {\n    return META_COMMAND_UNRECOGNIZED_COMMAND;\n  }\n}\n```\n\n我们的`prepared statement`枚举 现在仅包含两个值, 它将来将会包含更多的参数在声明中.\n\n```c\nenum StatementType_t { STATEMENT_INSERT, STATEMENT_SELECT };\ntypedef enum StatementType_t StatementType;\n\nstruct Statement_t {\n  StatementType type;\n};\ntypedef struct Statement_t Statement;\n```\n\n`prepare_statement` (我们的 SQL 编译器) 现在并不能理解 SQL, 他现在仅仅能理解两个单词.\n\n```c\nPrepareResult prepare_statement(InputBuffer* input_buffer,\n                                Statement* statement) {\n  if (strncmp(input_buffer->buffer, \"insert\", 6) == 0) {\n    statement->type = STATEMENT_INSERT;\n    return PREPARE_SUCCESS;\n  }\n  if (strcmp(input_buffer->buffer, \"select\") == 0) {\n    statement->type = STATEMENT_SELECT;\n    return PREPARE_SUCCESS;\n  }\n\n  return PREPARE_UNRECOGNIZED_STATEMENT;\n}\n```\n\n注意,我们现在使用 `strncmp` 以 insert 关键词来匹配 insert 其后将会跟随着要插入的数据(例如: insert 1 cstack foo@bar.com)\n\n最后 `execute_statement` 函数现在仅仅是打印了一些东西.\n\n```c\nvoid execute_statement(Statement* statement) {\n  switch (statement->type) {\n    case (STATEMENT_INSERT):\n      printf(\"This is where we would do an insert.\\n\");\n      break;\n    case (STATEMENT_SELECT):\n      printf(\"This is where we would do a select.\\n\");\n      break;\n  }\n}\n```\n\n注意这里将不会返回任何错误码,因为这里没有啥错误可能产生\n\n随着代码的开发,我们可以发现两个新的单词了.\n\n```sh\n~ ./db\ndb > insert foo bar\nThis is where we would do an insert.\nExecuted.\ndb > delete foo\nUnrecognized keyword at start of 'delete foo'.\ndb > select\nThis is where we would do a select.\nExecuted.\ndb > .tables\nUnrecognized command '.tables'\ndb > .exit\n~\n```\n\n我们的数据库的架子正在形成... 如果能存储数据将会更加友好? 这是下一章节的内容, 我们将会实现插入和 select, 创建世界上最差的数据库存储, 下面是本章修改的代码对照:\n\n```c\n@@ -10,6 +10,23 @@ struct InputBuffer_t {\n };\n typedef struct InputBuffer_t InputBuffer;\n \n+enum MetaCommandResult_t {\n+  META_COMMAND_SUCCESS,\n+  META_COMMAND_UNRECOGNIZED_COMMAND\n+};\n+typedef enum MetaCommandResult_t MetaCommandResult;\n+\n+enum PrepareResult_t { PREPARE_SUCCESS, PREPARE_UNRECOGNIZED_STATEMENT };\n+typedef enum PrepareResult_t PrepareResult;\n+\n+enum StatementType_t { STATEMENT_INSERT, STATEMENT_SELECT };\n+typedef enum StatementType_t StatementType;\n+\n+struct Statement_t {\n+  StatementType type;\n+};\n+typedef struct Statement_t Statement;\n+\n InputBuffer* new_input_buffer() {\n   InputBuffer* input_buffer = malloc(sizeof(InputBuffer));\n   input_buffer->buffer = NULL;\n@@ -35,16 +52,66 @@ void read_input(InputBuffer* input_buffer) {\n   input_buffer->buffer[bytes_read - 1] = 0;\n }\n \n+MetaCommandResult do_meta_command(InputBuffer* input_buffer) {\n+  if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n+    exit(EXIT_SUCCESS);\n+  } else {\n+    return META_COMMAND_UNRECOGNIZED_COMMAND;\n+  }\n+}\n+\n+PrepareResult prepare_statement(InputBuffer* input_buffer,\n+                                Statement* statement) {\n+  if (strncmp(input_buffer->buffer, \"insert\", 6) == 0) {\n+    statement->type = STATEMENT_INSERT;\n+    return PREPARE_SUCCESS;\n+  }\n+  if (strcmp(input_buffer->buffer, \"select\") == 0) {\n+    statement->type = STATEMENT_SELECT;\n+    return PREPARE_SUCCESS;\n+  }\n+\n+  return PREPARE_UNRECOGNIZED_STATEMENT;\n+}\n+\n+void execute_statement(Statement* statement) {\n+  switch (statement->type) {\n+    case (STATEMENT_INSERT):\n+      printf(\"This is where we would do an insert.\\n\");\n+      break;\n+    case (STATEMENT_SELECT):\n+      printf(\"This is where we would do a select.\\n\");\n+      break;\n+  }\n+}\n+\n int main(int argc, char* argv[]) {\n   InputBuffer* input_buffer = new_input_buffer();\n   while (true) {\n     print_prompt();\n     read_input(input_buffer);\n \n-    if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n-      exit(EXIT_SUCCESS);\n-    } else {\n-      printf(\"Unrecognized command '%s'.\\n\", input_buffer->buffer);\n+    if (input_buffer->buffer[0] == '.') {\n+      switch (do_meta_command(input_buffer)) {\n+        case (META_COMMAND_SUCCESS):\n+          continue;\n+        case (META_COMMAND_UNRECOGNIZED_COMMAND):\n+          printf(\"Unrecognized command '%s'\\n\", input_buffer->buffer);\n+          continue;\n+      }\n     }\n+\n+    Statement statement;\n+    switch (prepare_statement(input_buffer, &statement)) {\n+      case (PREPARE_SUCCESS):\n+        break;\n+      case (PREPARE_UNRECOGNIZED_STATEMENT):\n+        printf(\"Unrecognized keyword at start of '%s'.\\n\",\n+               input_buffer->buffer);\n+        continue;\n+    }\n+\n+    execute_statement(&statement);\n+    printf(\"Executed.\\n\");\n   }\n }\n```\n\n","slug":"build_own_x/data_base/build_simple_database/Part2_worlds_simplest_sql_compiler_and_VM","published":1,"updated":"2019-01-26T13:39:40.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgyb004p8seonz431hxs","content":"<h1 id=\"Part-2-世上最简单的-SQL-编译器和虚拟机\"><a href=\"#Part-2-世上最简单的-SQL-编译器和虚拟机\" class=\"headerlink\" title=\"Part 2 - 世上最简单的 SQL 编译器和虚拟机\"></a>Part 2 - 世上最简单的 SQL 编译器和虚拟机</h1><p>sqlite 的前端是一个 SQL 编辑器, 解析一个字符串和输出一个内部的字节编码. </p>\n<p>这个字节编码通过虚拟机执行它.</p>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/arch2.gif\" alt=\"SQLite Architecture\"><br>SQLite Architecture (<a href=\"https://www.sqlite.org/arch.html\" target=\"_blank\" rel=\"noopener\">https://www.sqlite.org/arch.html</a>)</p>\n<p>将整件事情分解为两步主要有两个优点:</p>\n<ul>\n<li>减少每一块的复杂度(例如: 虚拟机不用去考虑语法的错误)</li>\n<li>允许编译常见错误,并且缓存字节码以提高效率.</li>\n</ul>\n<p>顺着这个思路, 让我重构一下主函数, 并且让其支持两个新的关键词:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">   InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">     print_prompt();</span><br><span class=\"line\">     read_input(input_buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">-    <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">-      <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">-    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">-      <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized command '%s'.\\n\"</span>, input_buffer-&gt;buffer);</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (input_buffer-&gt;buffer[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">switch</span> (do_meta_command(input_buffer)) &#123;</span><br><span class=\"line\">+        <span class=\"keyword\">case</span> (META_COMMAND_SUCCESS):</span><br><span class=\"line\">+          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+        <span class=\"keyword\">case</span> (META_COMMAND_UNRECOGNIZED_COMMAND):</span><br><span class=\"line\">+          <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized command '%s'\\n\"</span>, input_buffer-&gt;buffer);</span><br><span class=\"line\">+          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    Statement statement;</span><br><span class=\"line\">+    <span class=\"keyword\">switch</span> (prepare_statement(input_buffer, &amp;statement)) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_SUCCESS):</span><br><span class=\"line\">+        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_UNRECOGNIZED_STATEMENT):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized keyword at start of '%s'.\\n\"</span>,</span><br><span class=\"line\">+               input_buffer-&gt;buffer);</span><br><span class=\"line\">+        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    execute_statement(&amp;statement);</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Executed.\\n\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>.exit</code> 不是 SQL 命令,被称为 “元命令”. 他们开始于 <code>.</code> 号, 所有我们需要先检查它们, 并在分离函数中处理他们.</p>\n<p>下一步,我们添加一步将输入的行转换成内部的 statement. 这是我们前端的 hacky 版本.</p>\n<p>最后,我们将预处理好的 statement 传给 <code>execute_statement</code> 函数, 这个函数最终将会变成我们的虚拟机.</p>\n<p>注意, 这个新的函数均返回 enums 来表示成功或者失败:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> MetaCommandResult_t &#123;</span><br><span class=\"line\">  META_COMMAND_SUCCESS,</span><br><span class=\"line\">  META_COMMAND_UNRECOGNIZED_COMMAND</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> MetaCommandResult_t MetaCommandResult;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> PrepareResult_t &#123; PREPARE_SUCCESS, PREPARE_UNRECOGNIZED_STATEMENT &#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> PrepareResult_t PrepareResult;</span><br></pre></td></tr></table></figure></p>\n<p><code>do_meta_command</code> 函数仅仅是一个包装了退出函数,为更多的命令留下空间.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们的<code>prepared statement</code>枚举 现在仅包含两个值, 它将来将会包含更多的参数在声明中.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> StatementType_t &#123; STATEMENT_INSERT, STATEMENT_SELECT &#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> StatementType_t StatementType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> &#123;</span></span><br><span class=\"line\">  StatementType type;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> <span class=\"title\">Statement</span>;</span></span><br></pre></td></tr></table></figure>\n<p><code>prepare_statement</code> (我们的 SQL 编译器) 现在并不能理解 SQL, 他现在仅仅能理解两个单词.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">PrepareResult <span class=\"title\">prepare_statement</span><span class=\"params\">(InputBuffer* input_buffer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"insert\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"select\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    statement-&gt;type = STATEMENT_SELECT;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> PREPARE_UNRECOGNIZED_STATEMENT;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意,我们现在使用 <code>strncmp</code> 以 insert 关键词来匹配 insert 其后将会跟随着要插入的数据(例如: insert 1 cstack <a href=\"mailto:foo@bar.com\" target=\"_blank\" rel=\"noopener\">foo@bar.com</a>)</p>\n<p>最后 <code>execute_statement</code> 函数现在仅仅是打印了一些东西.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute_statement</span><span class=\"params\">(Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (statement-&gt;type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> (STATEMENT_INSERT):</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do an insert.\\n\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> (STATEMENT_SELECT):</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do a select.\\n\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意这里将不会返回任何错误码,因为这里没有啥错误可能产生</p>\n<p>随着代码的开发,我们可以发现两个新的单词了.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ ./db</span><br><span class=\"line\">db &gt; insert foo bar</span><br><span class=\"line\">This is <span class=\"built_in\">where</span> we would <span class=\"keyword\">do</span> an insert.</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; delete foo</span><br><span class=\"line\">Unrecognized keyword at start of <span class=\"string\">'delete foo'</span>.</span><br><span class=\"line\">db &gt; select</span><br><span class=\"line\">This is <span class=\"built_in\">where</span> we would <span class=\"keyword\">do</span> a select.</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; .tables</span><br><span class=\"line\">Unrecognized <span class=\"built_in\">command</span> <span class=\"string\">'.tables'</span></span><br><span class=\"line\">db &gt; .<span class=\"built_in\">exit</span></span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure>\n<p>我们的数据库的架子正在形成… 如果能存储数据将会更加友好? 这是下一章节的内容, 我们将会实现插入和 select, 创建世界上最差的数据库存储, 下面是本章修改的代码对照:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@ <span class=\"number\">-10</span>,<span class=\"number\">6</span> +<span class=\"number\">10</span>,<span class=\"number\">23</span> @@ <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> &#123;</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> <span class=\"title\">InputBuffer</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"keyword\">enum</span> MetaCommandResult_t &#123;</span><br><span class=\"line\">+  META_COMMAND_SUCCESS,</span><br><span class=\"line\">+  META_COMMAND_UNRECOGNIZED_COMMAND</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> MetaCommandResult_t MetaCommandResult;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">enum</span> PrepareResult_t &#123; PREPARE_SUCCESS, PREPARE_UNRECOGNIZED_STATEMENT &#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> PrepareResult_t PrepareResult;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">enum</span> StatementType_t &#123; STATEMENT_INSERT, STATEMENT_SELECT &#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> StatementType_t StatementType;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> &#123;</span></span><br><span class=\"line\">+  StatementType type;</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> <span class=\"title\">Statement</span>;</span></span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\">InputBuffer* <span class=\"title\">new_input_buffer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   InputBuffer* input_buffer = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(InputBuffer));</span><br><span class=\"line\">   input_buffer-&gt;buffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">@@ <span class=\"number\">-35</span>,<span class=\"number\">16</span> +<span class=\"number\">52</span>,<span class=\"number\">66</span> @@ <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_input</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">   input_buffer-&gt;buffer[bytes_read - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">PrepareResult <span class=\"title\">prepare_statement</span><span class=\"params\">(InputBuffer* input_buffer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">+                                Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"insert\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"select\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    statement-&gt;type = STATEMENT_SELECT;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> PREPARE_UNRECOGNIZED_STATEMENT;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute_statement</span><span class=\"params\">(Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">switch</span> (statement-&gt;type) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> (STATEMENT_INSERT):</span><br><span class=\"line\">+      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do an insert.\\n\"</span>);</span><br><span class=\"line\">+      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> (STATEMENT_SELECT):</span><br><span class=\"line\">+      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do a select.\\n\"</span>);</span><br><span class=\"line\">+      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">   InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">     print_prompt();</span><br><span class=\"line\">     read_input(input_buffer);</span><br><span class=\"line\"> </span><br><span class=\"line\">-    <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">-      <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">-    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">-      <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized command '%s'.\\n\"</span>, input_buffer-&gt;buffer);</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (input_buffer-&gt;buffer[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">switch</span> (do_meta_command(input_buffer)) &#123;</span><br><span class=\"line\">+        <span class=\"keyword\">case</span> (META_COMMAND_SUCCESS):</span><br><span class=\"line\">+          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+        <span class=\"keyword\">case</span> (META_COMMAND_UNRECOGNIZED_COMMAND):</span><br><span class=\"line\">+          <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized command '%s'\\n\"</span>, input_buffer-&gt;buffer);</span><br><span class=\"line\">+          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    Statement statement;</span><br><span class=\"line\">+    <span class=\"keyword\">switch</span> (prepare_statement(input_buffer, &amp;statement)) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_SUCCESS):</span><br><span class=\"line\">+        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_UNRECOGNIZED_STATEMENT):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized keyword at start of '%s'.\\n\"</span>,</span><br><span class=\"line\">+               input_buffer-&gt;buffer);</span><br><span class=\"line\">+        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    execute_statement(&amp;statement);</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Executed.\\n\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Part-2-世上最简单的-SQL-编译器和虚拟机\"><a href=\"#Part-2-世上最简单的-SQL-编译器和虚拟机\" class=\"headerlink\" title=\"Part 2 - 世上最简单的 SQL 编译器和虚拟机\"></a>Part 2 - 世上最简单的 SQL 编译器和虚拟机</h1><p>sqlite 的前端是一个 SQL 编辑器, 解析一个字符串和输出一个内部的字节编码. </p>\n<p>这个字节编码通过虚拟机执行它.</p>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/arch2.gif\" alt=\"SQLite Architecture\"><br>SQLite Architecture (<a href=\"https://www.sqlite.org/arch.html\" target=\"_blank\" rel=\"noopener\">https://www.sqlite.org/arch.html</a>)</p>\n<p>将整件事情分解为两步主要有两个优点:</p>\n<ul>\n<li>减少每一块的复杂度(例如: 虚拟机不用去考虑语法的错误)</li>\n<li>允许编译常见错误,并且缓存字节码以提高效率.</li>\n</ul>\n<p>顺着这个思路, 让我重构一下主函数, 并且让其支持两个新的关键词:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">   InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">     print_prompt();</span><br><span class=\"line\">     read_input(input_buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">-    <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">-      <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">-    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">-      <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized command '%s'.\\n\"</span>, input_buffer-&gt;buffer);</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (input_buffer-&gt;buffer[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">switch</span> (do_meta_command(input_buffer)) &#123;</span><br><span class=\"line\">+        <span class=\"keyword\">case</span> (META_COMMAND_SUCCESS):</span><br><span class=\"line\">+          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+        <span class=\"keyword\">case</span> (META_COMMAND_UNRECOGNIZED_COMMAND):</span><br><span class=\"line\">+          <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized command '%s'\\n\"</span>, input_buffer-&gt;buffer);</span><br><span class=\"line\">+          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    Statement statement;</span><br><span class=\"line\">+    <span class=\"keyword\">switch</span> (prepare_statement(input_buffer, &amp;statement)) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_SUCCESS):</span><br><span class=\"line\">+        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_UNRECOGNIZED_STATEMENT):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized keyword at start of '%s'.\\n\"</span>,</span><br><span class=\"line\">+               input_buffer-&gt;buffer);</span><br><span class=\"line\">+        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    execute_statement(&amp;statement);</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Executed.\\n\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>.exit</code> 不是 SQL 命令,被称为 “元命令”. 他们开始于 <code>.</code> 号, 所有我们需要先检查它们, 并在分离函数中处理他们.</p>\n<p>下一步,我们添加一步将输入的行转换成内部的 statement. 这是我们前端的 hacky 版本.</p>\n<p>最后,我们将预处理好的 statement 传给 <code>execute_statement</code> 函数, 这个函数最终将会变成我们的虚拟机.</p>\n<p>注意, 这个新的函数均返回 enums 来表示成功或者失败:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> MetaCommandResult_t &#123;</span><br><span class=\"line\">  META_COMMAND_SUCCESS,</span><br><span class=\"line\">  META_COMMAND_UNRECOGNIZED_COMMAND</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> MetaCommandResult_t MetaCommandResult;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> PrepareResult_t &#123; PREPARE_SUCCESS, PREPARE_UNRECOGNIZED_STATEMENT &#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> PrepareResult_t PrepareResult;</span><br></pre></td></tr></table></figure></p>\n<p><code>do_meta_command</code> 函数仅仅是一个包装了退出函数,为更多的命令留下空间.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们的<code>prepared statement</code>枚举 现在仅包含两个值, 它将来将会包含更多的参数在声明中.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> StatementType_t &#123; STATEMENT_INSERT, STATEMENT_SELECT &#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> StatementType_t StatementType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> &#123;</span></span><br><span class=\"line\">  StatementType type;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> <span class=\"title\">Statement</span>;</span></span><br></pre></td></tr></table></figure>\n<p><code>prepare_statement</code> (我们的 SQL 编译器) 现在并不能理解 SQL, 他现在仅仅能理解两个单词.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">PrepareResult <span class=\"title\">prepare_statement</span><span class=\"params\">(InputBuffer* input_buffer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"insert\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"select\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    statement-&gt;type = STATEMENT_SELECT;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> PREPARE_UNRECOGNIZED_STATEMENT;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意,我们现在使用 <code>strncmp</code> 以 insert 关键词来匹配 insert 其后将会跟随着要插入的数据(例如: insert 1 cstack <a href=\"mailto:foo@bar.com\" target=\"_blank\" rel=\"noopener\">foo@bar.com</a>)</p>\n<p>最后 <code>execute_statement</code> 函数现在仅仅是打印了一些东西.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute_statement</span><span class=\"params\">(Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (statement-&gt;type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> (STATEMENT_INSERT):</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do an insert.\\n\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> (STATEMENT_SELECT):</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do a select.\\n\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意这里将不会返回任何错误码,因为这里没有啥错误可能产生</p>\n<p>随着代码的开发,我们可以发现两个新的单词了.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ ./db</span><br><span class=\"line\">db &gt; insert foo bar</span><br><span class=\"line\">This is <span class=\"built_in\">where</span> we would <span class=\"keyword\">do</span> an insert.</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; delete foo</span><br><span class=\"line\">Unrecognized keyword at start of <span class=\"string\">'delete foo'</span>.</span><br><span class=\"line\">db &gt; select</span><br><span class=\"line\">This is <span class=\"built_in\">where</span> we would <span class=\"keyword\">do</span> a select.</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; .tables</span><br><span class=\"line\">Unrecognized <span class=\"built_in\">command</span> <span class=\"string\">'.tables'</span></span><br><span class=\"line\">db &gt; .<span class=\"built_in\">exit</span></span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure>\n<p>我们的数据库的架子正在形成… 如果能存储数据将会更加友好? 这是下一章节的内容, 我们将会实现插入和 select, 创建世界上最差的数据库存储, 下面是本章修改的代码对照:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@ <span class=\"number\">-10</span>,<span class=\"number\">6</span> +<span class=\"number\">10</span>,<span class=\"number\">23</span> @@ <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> &#123;</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> <span class=\"title\">InputBuffer</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"keyword\">enum</span> MetaCommandResult_t &#123;</span><br><span class=\"line\">+  META_COMMAND_SUCCESS,</span><br><span class=\"line\">+  META_COMMAND_UNRECOGNIZED_COMMAND</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> MetaCommandResult_t MetaCommandResult;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">enum</span> PrepareResult_t &#123; PREPARE_SUCCESS, PREPARE_UNRECOGNIZED_STATEMENT &#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> PrepareResult_t PrepareResult;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">enum</span> StatementType_t &#123; STATEMENT_INSERT, STATEMENT_SELECT &#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> StatementType_t StatementType;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> &#123;</span></span><br><span class=\"line\">+  StatementType type;</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> <span class=\"title\">Statement</span>;</span></span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\">InputBuffer* <span class=\"title\">new_input_buffer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   InputBuffer* input_buffer = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(InputBuffer));</span><br><span class=\"line\">   input_buffer-&gt;buffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">@@ <span class=\"number\">-35</span>,<span class=\"number\">16</span> +<span class=\"number\">52</span>,<span class=\"number\">66</span> @@ <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_input</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">   input_buffer-&gt;buffer[bytes_read - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">PrepareResult <span class=\"title\">prepare_statement</span><span class=\"params\">(InputBuffer* input_buffer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">+                                Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"insert\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"select\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    statement-&gt;type = STATEMENT_SELECT;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> PREPARE_UNRECOGNIZED_STATEMENT;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute_statement</span><span class=\"params\">(Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">switch</span> (statement-&gt;type) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> (STATEMENT_INSERT):</span><br><span class=\"line\">+      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do an insert.\\n\"</span>);</span><br><span class=\"line\">+      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+    <span class=\"keyword\">case</span> (STATEMENT_SELECT):</span><br><span class=\"line\">+      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do a select.\\n\"</span>);</span><br><span class=\"line\">+      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">   InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">     print_prompt();</span><br><span class=\"line\">     read_input(input_buffer);</span><br><span class=\"line\"> </span><br><span class=\"line\">-    <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">-      <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">-    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">-      <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized command '%s'.\\n\"</span>, input_buffer-&gt;buffer);</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (input_buffer-&gt;buffer[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">switch</span> (do_meta_command(input_buffer)) &#123;</span><br><span class=\"line\">+        <span class=\"keyword\">case</span> (META_COMMAND_SUCCESS):</span><br><span class=\"line\">+          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+        <span class=\"keyword\">case</span> (META_COMMAND_UNRECOGNIZED_COMMAND):</span><br><span class=\"line\">+          <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized command '%s'\\n\"</span>, input_buffer-&gt;buffer);</span><br><span class=\"line\">+          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    Statement statement;</span><br><span class=\"line\">+    <span class=\"keyword\">switch</span> (prepare_statement(input_buffer, &amp;statement)) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_SUCCESS):</span><br><span class=\"line\">+        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_UNRECOGNIZED_STATEMENT):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized keyword at start of '%s'.\\n\"</span>,</span><br><span class=\"line\">+               input_buffer-&gt;buffer);</span><br><span class=\"line\">+        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    execute_statement(&amp;statement);</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Executed.\\n\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Part 1 - 介绍和设置 REPL","date":"2019-01-26T08:11:20.000Z","_content":"\n# Part 1 - 介绍和设置 REPL\n\n> 下面涉及一些专业术语,不做具体翻译,第一次出现时可能会解释下.\n\n作为一个 web 开发者, 在工作中每天都会使用到关系型数据库,但是它对于我就像是一个黑箱子一样. 我存在好多问题:\n\n- 在内存和磁盘上, 数据保存的格式是啥?\n- 什么时候会从内存中移动到硬盘上?\n- 为什么每个表仅有一个主键呢?\n- 事务回滚是如何工作的呢?\n- 索引是如何格式化? FIXME(Jx)  (How are indexes formatted?)\n- 啥时候全表扫描会发生呢?\n- 保存前的预准备格式是啥样的呢? FIXME(Jx) (What format is a prepared statement saved in?)\n\n换而言之,它是如何工作的呢?\n\n为了弄清这些事情,我从头写了一个数据库. 它是已 sqlite 为原型, 因为sqlite 的设计相对于 mysql 和 PostgreSQL 简单不少. 所以能够更好的理解它, 整个数据存储在单个文件中.\n\n## Sqlite\n\nSqlite 官网有许多内部[设计文档](https://www.sqlite.org/arch.html) , 这里拷贝一份 [Sqlite 数据库系统的设计和实现文档](https://play.google.com/store/books/details?id=9Z6IQQnX1JEC)\n\n![sqlite architecture](https://cstack.github.io/db_tutorial/assets/images/arch1.gif)\nsqlite architecture (https://www.sqlite.org/zipvfs/doc/trunk/www/howitworks.wiki)\n\n一个查询是通过一条长链的组件来取回或者修改数据. 前端组件的组成:\n\n- tokenizer (标记生成器)\n- parser (解析器)\n- code generator (代码生成器)\n\n给前端输入一个 SQL 查询, 输出的是 Sqlite 虚拟机的字节码(本质上是一个可以在数据库上运行的编译程序)\n\n后端组件的组成:\n\n- virtual machine\n- B-tree\n- pager\n- os interface\n\n`virtual machine`: 虚拟机接收前端传过来的字节码, 它能够操作一个或者多个表或者索引, 所有的这些都是存储在一个数据结构中, is B 树. VM 其本质其实是一个字节指令, 一个大的 switch 语句.\n\n`B-tree`: 每个 B 树都是有许多个节点组成的, 每个节点是一个页. B树可以通过向 `pager` 发送指令从硬盘中取回一页 或者是将数据保存回硬盘.\n\n`pager`: 接收指令读取或者写入一页数据. 它的主要责任是在适当的时候读或写数据库文件. 同时会在内存中保存一份最近读取的页, 并且确定在什么时候需要就这页数据回写到硬盘.\n\n`os interface`: 根据操作系统的不同会有很大的不同, 在这份教程中, 不会去支持多操作系统.\n\n千里之行始于足下, so 让我们从第一步开始吧: the REPL\n\n## 制作一个简单的 REPL\n\nSqlite 开始于 read-execute-print(读取-执行-打印) 的循环, 从命令行开始吧:\n```sh\n~ sqlite3\nSQLite version 3.16.0 2016-11-04 19:09:39\nEnter \".help\" for usage hints.\nConnected to a transient in-memory database.\nUse \".open FILENAME\" to reopen on a persistent database.\nsqlite> create table users (id int, username varchar(255), email varchar(255));\nsqlite> .tables\nusers\nsqlite> .exit\n~\n```\n\n要做到这一点我们需要在主程序中用一个无限循环打印提示,  获取一行输入, 然后处理这行输入.\n\n```c\nint main(int argc, char* argv[]) {\n  InputBuffer* input_buffer = new_input_buffer();\n  while (true) {\n    print_prompt();\n    read_input(input_buffer);\n\n    if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n      exit(EXIT_SUCCESS);\n    } else {\n      printf(\"Unrecognized command '%s'.\\n\", input_buffer->buffer);\n    }\n  }\n}\n```\n\n我们将定义一个 InputBuffer 使用一个简单的包装器, 需要存储 `getline()` 的信息.\n\n```c\nstruct InputBuffer_t {\n  char* buffer;\n  size_t buffer_length;\n  ssize_t input_length;\n};\ntypedef struct InputBuffer_t InputBuffer;\n\nInputBuffer* new_input_buffer() {\n  InputBuffer* input_buffer = malloc(sizeof(InputBuffer));\n  input_buffer->buffer = NULL;\n  input_buffer->buffer_length = 0;\n  input_buffer->input_length = 0;\n\n  return input_buffer;\n}\n```\n\n下一步打印提示, 在每一行输入之前都需要打印它\n\n```c\nvoid print_prompt() { printf(\"db > \"); }\n```\n\n为了读取一行输入,需要使用到`getline()`:\n\n```c\nssize_t getline(char **lineptr, size_t *n, FILE *stream);\n```\n\nbuffer 开始的时候是 null 的, 所以在 getline 分配足够的内存来保存输入的内容.\n\n```c\nvoid read_input(InputBuffer* input_buffer) {\n  ssize_t bytes_read =\n      getline(&(input_buffer->buffer), &(input_buffer->buffer_length), stdin);\n\n  if (bytes_read <= 0) {\n    printf(\"Error reading input\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  // Ignore trailing newline(忽略换行符)\n  input_buffer->input_length = bytes_read - 1;\n  input_buffer->buffer[bytes_read - 1] = 0;\n}\n```\n\n最后,我们将执行命令, 在这仅有一个可解析的命令 `.exit` , 输入其它的内容都会继续循环.\n\n```c\nif (strcmp(input_buffer->buffer, \".exit\") == 0) {\n  exit(EXIT_SUCCESS);\n} else {\n  printf(\"Unrecognized command '%s'.\\n\", input_buffer->buffer);\n}\n```\n\n编译运行下吧~\n```sh\n~ ./db\ndb > .tables\nUnrecognized command '.tables'.\ndb > .exit\n~\n```\n\n完整实例:\n\n```c\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstruct InputBuffer_t {\n  char* buffer;\n  size_t buffer_length;\n  ssize_t input_length;\n};\ntypedef struct InputBuffer_t InputBuffer;\n\nInputBuffer* new_input_buffer() {\n  InputBuffer* input_buffer = malloc(sizeof(InputBuffer));\n  input_buffer->buffer = NULL;\n  input_buffer->buffer_length = 0;\n  input_buffer->input_length = 0;\n\n  return input_buffer;\n}\n\nvoid print_prompt() { printf(\"db > \"); }\n\nvoid read_input(InputBuffer* input_buffer) {\n  ssize_t bytes_read =\n      getline(&(input_buffer->buffer), &(input_buffer->buffer_length), stdin);\n\n  if (bytes_read <= 0) {\n    printf(\"Error reading input\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  // Ignore trailing newline\n  input_buffer->input_length = bytes_read - 1;\n  input_buffer->buffer[bytes_read - 1] = 0;\n}\n\nint main(int argc, char* argv[]) {\n  InputBuffer* input_buffer = new_input_buffer();\n  while (true) {\n    print_prompt();\n    read_input(input_buffer);\n\n    if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n      exit(EXIT_SUCCESS);\n    } else {\n      printf(\"Unrecognized command '%s'.\\n\", input_buffer->buffer);\n    }\n  }\n}\n```\n","source":"_posts/build_own_x/data_base/build_simple_database/Part1_Introduction_and_setting_up_the_REPL.md","raw":"---\ntitle: Part 1 - 介绍和设置 REPL\ndate: 2019-01-26 16:11:20\ncategories:\n- build-own-x\ntags:\n- database\n- db原理\n---\n\n# Part 1 - 介绍和设置 REPL\n\n> 下面涉及一些专业术语,不做具体翻译,第一次出现时可能会解释下.\n\n作为一个 web 开发者, 在工作中每天都会使用到关系型数据库,但是它对于我就像是一个黑箱子一样. 我存在好多问题:\n\n- 在内存和磁盘上, 数据保存的格式是啥?\n- 什么时候会从内存中移动到硬盘上?\n- 为什么每个表仅有一个主键呢?\n- 事务回滚是如何工作的呢?\n- 索引是如何格式化? FIXME(Jx)  (How are indexes formatted?)\n- 啥时候全表扫描会发生呢?\n- 保存前的预准备格式是啥样的呢? FIXME(Jx) (What format is a prepared statement saved in?)\n\n换而言之,它是如何工作的呢?\n\n为了弄清这些事情,我从头写了一个数据库. 它是已 sqlite 为原型, 因为sqlite 的设计相对于 mysql 和 PostgreSQL 简单不少. 所以能够更好的理解它, 整个数据存储在单个文件中.\n\n## Sqlite\n\nSqlite 官网有许多内部[设计文档](https://www.sqlite.org/arch.html) , 这里拷贝一份 [Sqlite 数据库系统的设计和实现文档](https://play.google.com/store/books/details?id=9Z6IQQnX1JEC)\n\n![sqlite architecture](https://cstack.github.io/db_tutorial/assets/images/arch1.gif)\nsqlite architecture (https://www.sqlite.org/zipvfs/doc/trunk/www/howitworks.wiki)\n\n一个查询是通过一条长链的组件来取回或者修改数据. 前端组件的组成:\n\n- tokenizer (标记生成器)\n- parser (解析器)\n- code generator (代码生成器)\n\n给前端输入一个 SQL 查询, 输出的是 Sqlite 虚拟机的字节码(本质上是一个可以在数据库上运行的编译程序)\n\n后端组件的组成:\n\n- virtual machine\n- B-tree\n- pager\n- os interface\n\n`virtual machine`: 虚拟机接收前端传过来的字节码, 它能够操作一个或者多个表或者索引, 所有的这些都是存储在一个数据结构中, is B 树. VM 其本质其实是一个字节指令, 一个大的 switch 语句.\n\n`B-tree`: 每个 B 树都是有许多个节点组成的, 每个节点是一个页. B树可以通过向 `pager` 发送指令从硬盘中取回一页 或者是将数据保存回硬盘.\n\n`pager`: 接收指令读取或者写入一页数据. 它的主要责任是在适当的时候读或写数据库文件. 同时会在内存中保存一份最近读取的页, 并且确定在什么时候需要就这页数据回写到硬盘.\n\n`os interface`: 根据操作系统的不同会有很大的不同, 在这份教程中, 不会去支持多操作系统.\n\n千里之行始于足下, so 让我们从第一步开始吧: the REPL\n\n## 制作一个简单的 REPL\n\nSqlite 开始于 read-execute-print(读取-执行-打印) 的循环, 从命令行开始吧:\n```sh\n~ sqlite3\nSQLite version 3.16.0 2016-11-04 19:09:39\nEnter \".help\" for usage hints.\nConnected to a transient in-memory database.\nUse \".open FILENAME\" to reopen on a persistent database.\nsqlite> create table users (id int, username varchar(255), email varchar(255));\nsqlite> .tables\nusers\nsqlite> .exit\n~\n```\n\n要做到这一点我们需要在主程序中用一个无限循环打印提示,  获取一行输入, 然后处理这行输入.\n\n```c\nint main(int argc, char* argv[]) {\n  InputBuffer* input_buffer = new_input_buffer();\n  while (true) {\n    print_prompt();\n    read_input(input_buffer);\n\n    if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n      exit(EXIT_SUCCESS);\n    } else {\n      printf(\"Unrecognized command '%s'.\\n\", input_buffer->buffer);\n    }\n  }\n}\n```\n\n我们将定义一个 InputBuffer 使用一个简单的包装器, 需要存储 `getline()` 的信息.\n\n```c\nstruct InputBuffer_t {\n  char* buffer;\n  size_t buffer_length;\n  ssize_t input_length;\n};\ntypedef struct InputBuffer_t InputBuffer;\n\nInputBuffer* new_input_buffer() {\n  InputBuffer* input_buffer = malloc(sizeof(InputBuffer));\n  input_buffer->buffer = NULL;\n  input_buffer->buffer_length = 0;\n  input_buffer->input_length = 0;\n\n  return input_buffer;\n}\n```\n\n下一步打印提示, 在每一行输入之前都需要打印它\n\n```c\nvoid print_prompt() { printf(\"db > \"); }\n```\n\n为了读取一行输入,需要使用到`getline()`:\n\n```c\nssize_t getline(char **lineptr, size_t *n, FILE *stream);\n```\n\nbuffer 开始的时候是 null 的, 所以在 getline 分配足够的内存来保存输入的内容.\n\n```c\nvoid read_input(InputBuffer* input_buffer) {\n  ssize_t bytes_read =\n      getline(&(input_buffer->buffer), &(input_buffer->buffer_length), stdin);\n\n  if (bytes_read <= 0) {\n    printf(\"Error reading input\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  // Ignore trailing newline(忽略换行符)\n  input_buffer->input_length = bytes_read - 1;\n  input_buffer->buffer[bytes_read - 1] = 0;\n}\n```\n\n最后,我们将执行命令, 在这仅有一个可解析的命令 `.exit` , 输入其它的内容都会继续循环.\n\n```c\nif (strcmp(input_buffer->buffer, \".exit\") == 0) {\n  exit(EXIT_SUCCESS);\n} else {\n  printf(\"Unrecognized command '%s'.\\n\", input_buffer->buffer);\n}\n```\n\n编译运行下吧~\n```sh\n~ ./db\ndb > .tables\nUnrecognized command '.tables'.\ndb > .exit\n~\n```\n\n完整实例:\n\n```c\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstruct InputBuffer_t {\n  char* buffer;\n  size_t buffer_length;\n  ssize_t input_length;\n};\ntypedef struct InputBuffer_t InputBuffer;\n\nInputBuffer* new_input_buffer() {\n  InputBuffer* input_buffer = malloc(sizeof(InputBuffer));\n  input_buffer->buffer = NULL;\n  input_buffer->buffer_length = 0;\n  input_buffer->input_length = 0;\n\n  return input_buffer;\n}\n\nvoid print_prompt() { printf(\"db > \"); }\n\nvoid read_input(InputBuffer* input_buffer) {\n  ssize_t bytes_read =\n      getline(&(input_buffer->buffer), &(input_buffer->buffer_length), stdin);\n\n  if (bytes_read <= 0) {\n    printf(\"Error reading input\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  // Ignore trailing newline\n  input_buffer->input_length = bytes_read - 1;\n  input_buffer->buffer[bytes_read - 1] = 0;\n}\n\nint main(int argc, char* argv[]) {\n  InputBuffer* input_buffer = new_input_buffer();\n  while (true) {\n    print_prompt();\n    read_input(input_buffer);\n\n    if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n      exit(EXIT_SUCCESS);\n    } else {\n      printf(\"Unrecognized command '%s'.\\n\", input_buffer->buffer);\n    }\n  }\n}\n```\n","slug":"build_own_x/data_base/build_simple_database/Part1_Introduction_and_setting_up_the_REPL","published":1,"updated":"2019-01-26T09:48:05.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgye004s8seoknubkd90","content":"<h1 id=\"Part-1-介绍和设置-REPL\"><a href=\"#Part-1-介绍和设置-REPL\" class=\"headerlink\" title=\"Part 1 - 介绍和设置 REPL\"></a>Part 1 - 介绍和设置 REPL</h1><blockquote>\n<p>下面涉及一些专业术语,不做具体翻译,第一次出现时可能会解释下.</p>\n</blockquote>\n<p>作为一个 web 开发者, 在工作中每天都会使用到关系型数据库,但是它对于我就像是一个黑箱子一样. 我存在好多问题:</p>\n<ul>\n<li>在内存和磁盘上, 数据保存的格式是啥?</li>\n<li>什么时候会从内存中移动到硬盘上?</li>\n<li>为什么每个表仅有一个主键呢?</li>\n<li>事务回滚是如何工作的呢?</li>\n<li>索引是如何格式化? FIXME(Jx)  (How are indexes formatted?)</li>\n<li>啥时候全表扫描会发生呢?</li>\n<li>保存前的预准备格式是啥样的呢? FIXME(Jx) (What format is a prepared statement saved in?)</li>\n</ul>\n<p>换而言之,它是如何工作的呢?</p>\n<p>为了弄清这些事情,我从头写了一个数据库. 它是已 sqlite 为原型, 因为sqlite 的设计相对于 mysql 和 PostgreSQL 简单不少. 所以能够更好的理解它, 整个数据存储在单个文件中.</p>\n<h2 id=\"Sqlite\"><a href=\"#Sqlite\" class=\"headerlink\" title=\"Sqlite\"></a>Sqlite</h2><p>Sqlite 官网有许多内部<a href=\"https://www.sqlite.org/arch.html\" target=\"_blank\" rel=\"noopener\">设计文档</a> , 这里拷贝一份 <a href=\"https://play.google.com/store/books/details?id=9Z6IQQnX1JEC\" target=\"_blank\" rel=\"noopener\">Sqlite 数据库系统的设计和实现文档</a></p>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/arch1.gif\" alt=\"sqlite architecture\"><br>sqlite architecture (<a href=\"https://www.sqlite.org/zipvfs/doc/trunk/www/howitworks.wiki\" target=\"_blank\" rel=\"noopener\">https://www.sqlite.org/zipvfs/doc/trunk/www/howitworks.wiki</a>)</p>\n<p>一个查询是通过一条长链的组件来取回或者修改数据. 前端组件的组成:</p>\n<ul>\n<li>tokenizer (标记生成器)</li>\n<li>parser (解析器)</li>\n<li>code generator (代码生成器)</li>\n</ul>\n<p>给前端输入一个 SQL 查询, 输出的是 Sqlite 虚拟机的字节码(本质上是一个可以在数据库上运行的编译程序)</p>\n<p>后端组件的组成:</p>\n<ul>\n<li>virtual machine</li>\n<li>B-tree</li>\n<li>pager</li>\n<li>os interface</li>\n</ul>\n<p><code>virtual machine</code>: 虚拟机接收前端传过来的字节码, 它能够操作一个或者多个表或者索引, 所有的这些都是存储在一个数据结构中, is B 树. VM 其本质其实是一个字节指令, 一个大的 switch 语句.</p>\n<p><code>B-tree</code>: 每个 B 树都是有许多个节点组成的, 每个节点是一个页. B树可以通过向 <code>pager</code> 发送指令从硬盘中取回一页 或者是将数据保存回硬盘.</p>\n<p><code>pager</code>: 接收指令读取或者写入一页数据. 它的主要责任是在适当的时候读或写数据库文件. 同时会在内存中保存一份最近读取的页, 并且确定在什么时候需要就这页数据回写到硬盘.</p>\n<p><code>os interface</code>: 根据操作系统的不同会有很大的不同, 在这份教程中, 不会去支持多操作系统.</p>\n<p>千里之行始于足下, so 让我们从第一步开始吧: the REPL</p>\n<h2 id=\"制作一个简单的-REPL\"><a href=\"#制作一个简单的-REPL\" class=\"headerlink\" title=\"制作一个简单的 REPL\"></a>制作一个简单的 REPL</h2><p>Sqlite 开始于 read-execute-print(读取-执行-打印) 的循环, 从命令行开始吧:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ sqlite3</span><br><span class=\"line\">SQLite version 3.16.0 2016-11-04 19:09:39</span><br><span class=\"line\">Enter <span class=\"string\">\".help\"</span> <span class=\"keyword\">for</span> usage hints.</span><br><span class=\"line\">Connected to a transient <span class=\"keyword\">in</span>-memory database.</span><br><span class=\"line\">Use <span class=\"string\">\".open FILENAME\"</span> to reopen on a persistent database.</span><br><span class=\"line\">sqlite&gt; create table users (id int, username varchar(255), email varchar(255));</span><br><span class=\"line\">sqlite&gt; .tables</span><br><span class=\"line\">users</span><br><span class=\"line\">sqlite&gt; .<span class=\"built_in\">exit</span></span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure></p>\n<p>要做到这一点我们需要在主程序中用一个无限循环打印提示,  获取一行输入, 然后处理这行输入.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">  InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    print_prompt();</span><br><span class=\"line\">    read_input(input_buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized command '%s'.\\n\"</span>, input_buffer-&gt;buffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们将定义一个 InputBuffer 使用一个简单的包装器, 需要存储 <code>getline()</code> 的信息.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* buffer;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> buffer_length;</span><br><span class=\"line\">  <span class=\"keyword\">ssize_t</span> input_length;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> <span class=\"title\">InputBuffer</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">InputBuffer* <span class=\"title\">new_input_buffer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  InputBuffer* input_buffer = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(InputBuffer));</span><br><span class=\"line\">  input_buffer-&gt;buffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  input_buffer-&gt;buffer_length = <span class=\"number\">0</span>;</span><br><span class=\"line\">  input_buffer-&gt;input_length = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> input_buffer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下一步打印提示, 在每一行输入之前都需要打印它</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_prompt</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"db &gt; \"</span>); &#125;</span><br></pre></td></tr></table></figure>\n<p>为了读取一行输入,需要使用到<code>getline()</code>:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ssize_t</span> getline(<span class=\"keyword\">char</span> **lineptr, <span class=\"keyword\">size_t</span> *n, FILE *stream);</span><br></pre></td></tr></table></figure>\n<p>buffer 开始的时候是 null 的, 所以在 getline 分配足够的内存来保存输入的内容.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_input</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">ssize_t</span> bytes_read =</span><br><span class=\"line\">      getline(&amp;(input_buffer-&gt;buffer), &amp;(input_buffer-&gt;buffer_length), <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (bytes_read &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error reading input\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Ignore trailing newline(忽略换行符)</span></span><br><span class=\"line\">  input_buffer-&gt;input_length = bytes_read - <span class=\"number\">1</span>;</span><br><span class=\"line\">  input_buffer-&gt;buffer[bytes_read - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后,我们将执行命令, 在这仅有一个可解析的命令 <code>.exit</code> , 输入其它的内容都会继续循环.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized command '%s'.\\n\"</span>, input_buffer-&gt;buffer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译运行下吧~<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ ./db</span><br><span class=\"line\">db &gt; .tables</span><br><span class=\"line\">Unrecognized <span class=\"built_in\">command</span> <span class=\"string\">'.tables'</span>.</span><br><span class=\"line\">db &gt; .<span class=\"built_in\">exit</span></span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure></p>\n<p>完整实例:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdbool.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* buffer;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> buffer_length;</span><br><span class=\"line\">  <span class=\"keyword\">ssize_t</span> input_length;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> <span class=\"title\">InputBuffer</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">InputBuffer* <span class=\"title\">new_input_buffer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  InputBuffer* input_buffer = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(InputBuffer));</span><br><span class=\"line\">  input_buffer-&gt;buffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  input_buffer-&gt;buffer_length = <span class=\"number\">0</span>;</span><br><span class=\"line\">  input_buffer-&gt;input_length = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> input_buffer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_prompt</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"db &gt; \"</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_input</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">ssize_t</span> bytes_read =</span><br><span class=\"line\">      getline(&amp;(input_buffer-&gt;buffer), &amp;(input_buffer-&gt;buffer_length), <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (bytes_read &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error reading input\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Ignore trailing newline</span></span><br><span class=\"line\">  input_buffer-&gt;input_length = bytes_read - <span class=\"number\">1</span>;</span><br><span class=\"line\">  input_buffer-&gt;buffer[bytes_read - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">  InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    print_prompt();</span><br><span class=\"line\">    read_input(input_buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized command '%s'.\\n\"</span>, input_buffer-&gt;buffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Part-1-介绍和设置-REPL\"><a href=\"#Part-1-介绍和设置-REPL\" class=\"headerlink\" title=\"Part 1 - 介绍和设置 REPL\"></a>Part 1 - 介绍和设置 REPL</h1><blockquote>\n<p>下面涉及一些专业术语,不做具体翻译,第一次出现时可能会解释下.</p>\n</blockquote>\n<p>作为一个 web 开发者, 在工作中每天都会使用到关系型数据库,但是它对于我就像是一个黑箱子一样. 我存在好多问题:</p>\n<ul>\n<li>在内存和磁盘上, 数据保存的格式是啥?</li>\n<li>什么时候会从内存中移动到硬盘上?</li>\n<li>为什么每个表仅有一个主键呢?</li>\n<li>事务回滚是如何工作的呢?</li>\n<li>索引是如何格式化? FIXME(Jx)  (How are indexes formatted?)</li>\n<li>啥时候全表扫描会发生呢?</li>\n<li>保存前的预准备格式是啥样的呢? FIXME(Jx) (What format is a prepared statement saved in?)</li>\n</ul>\n<p>换而言之,它是如何工作的呢?</p>\n<p>为了弄清这些事情,我从头写了一个数据库. 它是已 sqlite 为原型, 因为sqlite 的设计相对于 mysql 和 PostgreSQL 简单不少. 所以能够更好的理解它, 整个数据存储在单个文件中.</p>\n<h2 id=\"Sqlite\"><a href=\"#Sqlite\" class=\"headerlink\" title=\"Sqlite\"></a>Sqlite</h2><p>Sqlite 官网有许多内部<a href=\"https://www.sqlite.org/arch.html\" target=\"_blank\" rel=\"noopener\">设计文档</a> , 这里拷贝一份 <a href=\"https://play.google.com/store/books/details?id=9Z6IQQnX1JEC\" target=\"_blank\" rel=\"noopener\">Sqlite 数据库系统的设计和实现文档</a></p>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/arch1.gif\" alt=\"sqlite architecture\"><br>sqlite architecture (<a href=\"https://www.sqlite.org/zipvfs/doc/trunk/www/howitworks.wiki\" target=\"_blank\" rel=\"noopener\">https://www.sqlite.org/zipvfs/doc/trunk/www/howitworks.wiki</a>)</p>\n<p>一个查询是通过一条长链的组件来取回或者修改数据. 前端组件的组成:</p>\n<ul>\n<li>tokenizer (标记生成器)</li>\n<li>parser (解析器)</li>\n<li>code generator (代码生成器)</li>\n</ul>\n<p>给前端输入一个 SQL 查询, 输出的是 Sqlite 虚拟机的字节码(本质上是一个可以在数据库上运行的编译程序)</p>\n<p>后端组件的组成:</p>\n<ul>\n<li>virtual machine</li>\n<li>B-tree</li>\n<li>pager</li>\n<li>os interface</li>\n</ul>\n<p><code>virtual machine</code>: 虚拟机接收前端传过来的字节码, 它能够操作一个或者多个表或者索引, 所有的这些都是存储在一个数据结构中, is B 树. VM 其本质其实是一个字节指令, 一个大的 switch 语句.</p>\n<p><code>B-tree</code>: 每个 B 树都是有许多个节点组成的, 每个节点是一个页. B树可以通过向 <code>pager</code> 发送指令从硬盘中取回一页 或者是将数据保存回硬盘.</p>\n<p><code>pager</code>: 接收指令读取或者写入一页数据. 它的主要责任是在适当的时候读或写数据库文件. 同时会在内存中保存一份最近读取的页, 并且确定在什么时候需要就这页数据回写到硬盘.</p>\n<p><code>os interface</code>: 根据操作系统的不同会有很大的不同, 在这份教程中, 不会去支持多操作系统.</p>\n<p>千里之行始于足下, so 让我们从第一步开始吧: the REPL</p>\n<h2 id=\"制作一个简单的-REPL\"><a href=\"#制作一个简单的-REPL\" class=\"headerlink\" title=\"制作一个简单的 REPL\"></a>制作一个简单的 REPL</h2><p>Sqlite 开始于 read-execute-print(读取-执行-打印) 的循环, 从命令行开始吧:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ sqlite3</span><br><span class=\"line\">SQLite version 3.16.0 2016-11-04 19:09:39</span><br><span class=\"line\">Enter <span class=\"string\">\".help\"</span> <span class=\"keyword\">for</span> usage hints.</span><br><span class=\"line\">Connected to a transient <span class=\"keyword\">in</span>-memory database.</span><br><span class=\"line\">Use <span class=\"string\">\".open FILENAME\"</span> to reopen on a persistent database.</span><br><span class=\"line\">sqlite&gt; create table users (id int, username varchar(255), email varchar(255));</span><br><span class=\"line\">sqlite&gt; .tables</span><br><span class=\"line\">users</span><br><span class=\"line\">sqlite&gt; .<span class=\"built_in\">exit</span></span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure></p>\n<p>要做到这一点我们需要在主程序中用一个无限循环打印提示,  获取一行输入, 然后处理这行输入.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">  InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    print_prompt();</span><br><span class=\"line\">    read_input(input_buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized command '%s'.\\n\"</span>, input_buffer-&gt;buffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们将定义一个 InputBuffer 使用一个简单的包装器, 需要存储 <code>getline()</code> 的信息.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* buffer;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> buffer_length;</span><br><span class=\"line\">  <span class=\"keyword\">ssize_t</span> input_length;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> <span class=\"title\">InputBuffer</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">InputBuffer* <span class=\"title\">new_input_buffer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  InputBuffer* input_buffer = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(InputBuffer));</span><br><span class=\"line\">  input_buffer-&gt;buffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  input_buffer-&gt;buffer_length = <span class=\"number\">0</span>;</span><br><span class=\"line\">  input_buffer-&gt;input_length = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> input_buffer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下一步打印提示, 在每一行输入之前都需要打印它</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_prompt</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"db &gt; \"</span>); &#125;</span><br></pre></td></tr></table></figure>\n<p>为了读取一行输入,需要使用到<code>getline()</code>:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ssize_t</span> getline(<span class=\"keyword\">char</span> **lineptr, <span class=\"keyword\">size_t</span> *n, FILE *stream);</span><br></pre></td></tr></table></figure>\n<p>buffer 开始的时候是 null 的, 所以在 getline 分配足够的内存来保存输入的内容.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_input</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">ssize_t</span> bytes_read =</span><br><span class=\"line\">      getline(&amp;(input_buffer-&gt;buffer), &amp;(input_buffer-&gt;buffer_length), <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (bytes_read &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error reading input\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Ignore trailing newline(忽略换行符)</span></span><br><span class=\"line\">  input_buffer-&gt;input_length = bytes_read - <span class=\"number\">1</span>;</span><br><span class=\"line\">  input_buffer-&gt;buffer[bytes_read - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后,我们将执行命令, 在这仅有一个可解析的命令 <code>.exit</code> , 输入其它的内容都会继续循环.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized command '%s'.\\n\"</span>, input_buffer-&gt;buffer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译运行下吧~<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ ./db</span><br><span class=\"line\">db &gt; .tables</span><br><span class=\"line\">Unrecognized <span class=\"built_in\">command</span> <span class=\"string\">'.tables'</span>.</span><br><span class=\"line\">db &gt; .<span class=\"built_in\">exit</span></span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure></p>\n<p>完整实例:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdbool.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* buffer;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> buffer_length;</span><br><span class=\"line\">  <span class=\"keyword\">ssize_t</span> input_length;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> <span class=\"title\">InputBuffer</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">InputBuffer* <span class=\"title\">new_input_buffer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  InputBuffer* input_buffer = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(InputBuffer));</span><br><span class=\"line\">  input_buffer-&gt;buffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  input_buffer-&gt;buffer_length = <span class=\"number\">0</span>;</span><br><span class=\"line\">  input_buffer-&gt;input_length = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> input_buffer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_prompt</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"db &gt; \"</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_input</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">ssize_t</span> bytes_read =</span><br><span class=\"line\">      getline(&amp;(input_buffer-&gt;buffer), &amp;(input_buffer-&gt;buffer_length), <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (bytes_read &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error reading input\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Ignore trailing newline</span></span><br><span class=\"line\">  input_buffer-&gt;input_length = bytes_read - <span class=\"number\">1</span>;</span><br><span class=\"line\">  input_buffer-&gt;buffer[bytes_read - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">  InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    print_prompt();</span><br><span class=\"line\">    read_input(input_buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized command '%s'.\\n\"</span>, input_buffer-&gt;buffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"titile":"Part 12 - Scanning a Multi-Level B-Tree","date":"2019-03-09T03:05:29.000Z","_content":"\n# Part12 扫描多层 B 树\n\n我们现在支持构建一个多层的 B 树, 但是对于 select 语句确还不支持, 这是一个插入15条记录的然后打印它们的测试例子.\n```c\n+  it 'prints all rows in a multi-level tree' do\n+    script = []\n+    (1..15).each do |i|\n+      script << \"insert #{i} user#{i} person#{i}@example.com\"\n+    end\n+    script << \"select\"\n+    script << \".exit\"\n+    result = run_script(script)\n+\n+    expect(result[15...result.length]).to match_array([\n+      \"db > (1, user1, person1@example.com)\",\n+      \"(2, user2, person2@example.com)\",\n+      \"(3, user3, person3@example.com)\",\n+      \"(4, user4, person4@example.com)\",\n+      \"(5, user5, person5@example.com)\",\n+      \"(6, user6, person6@example.com)\",\n+      \"(7, user7, person7@example.com)\",\n+      \"(8, user8, person8@example.com)\",\n+      \"(9, user9, person9@example.com)\",\n+      \"(10, user10, person10@example.com)\",\n+      \"(11, user11, person11@example.com)\",\n+      \"(12, user12, person12@example.com)\",\n+      \"(13, user13, person13@example.com)\",\n+      \"(14, user14, person14@example.com)\",\n+      \"(15, user15, person15@example.com)\",\n+      \"Executed.\", \"db > \",\n+    ])\n+  end\n```\n\n但是当我们跑这个例子的时候, 会发生下面这样的情况:\n```sh\ndb > select\n(2, user1, person1@example.com)\nExecuted.\n```\n这太糟糕了, 仅打印了一条语句, 并且看起来这条记录好像损坏了. \n\n这糟糕的情况是因为 `execute_select()` 方法在表开始的时候, 我们当前接口`table_start()` 返回 的是根节点. 但是现在根节点现在是一个中间节点,不包含任何行信息. 打印的数据必须在根节点为叶子时保留. `execute_select()` 应该返回第0个 cell 最左边的叶子节点.\n\n所以我们需要改进下旧的实现.\n```c\n-Cursor* table_start(Table* table) {\n-  Cursor* cursor = malloc(sizeof(Cursor));\n-  cursor->table = table;\n-  cursor->page_num = table->root_page_num;\n-  cursor->cell_num = 0;\n-\n-  void* root_node = get_page(table->pager, table->root_page_num);\n-  uint32_t num_cells = *leaf_node_num_cells(root_node);\n-  cursor->end_of_table = (num_cells == 0);\n-\n-  return cursor;\n-}\n```\n\n并添加一个新的实现, 如果第0个 key 不存在, 这个方法将会返回一个最低位置的指针回去.\n```c\n+Cursor* table_start(Table* table) {\n+  Cursor* cursor =  table_find(table, 0);\n+\n+  void* node = get_page(table->pager, cursor->page_num);\n+  uint32_t num_cells = *leaf_node_num_cells(node);\n+  cursor->end_of_table = (num_cells == 0);\n+\n+  return cursor;\n+}\n```\n\n通过这些改变,它依旧只会打印一个节点的行数据:\n```sh\ndb > select\n(1, user1, person1@example.com)\n(2, user2, person2@example.com)\n(3, user3, person3@example.com)\n(4, user4, person4@example.com)\n(5, user5, person5@example.com)\n(6, user6, person6@example.com)\n(7, user7, person7@example.com)\nExecuted.\ndb >\n```\n\n有15条数据, 那么就包含1个中间节点和两个叶子节点, 它看起来就像这样:\n![structure of our btree](https://cstack.github.io/db_tutorial/assets/images/btree3.png)\nstructure of our btree\n\n要扫描整个表，我们需要在到达第一个叶节点后跳转到第二个叶节点。为此，我们将在名为“next_leaf”的叶节点标题中保存一个新字段，该字段将保存右侧叶子的兄弟节点的页码。最右边的叶节点将具有next_leaf值0以表示没有兄弟（无论如何，页0都保留给表的根节点）。\n\n更新叶节点标头格式以包含新字段:\n\n```sh\n const uint32_t LEAF_NODE_NUM_CELLS_SIZE = sizeof(uint32_t);\n const uint32_t LEAF_NODE_NUM_CELLS_OFFSET = COMMON_NODE_HEADER_SIZE;\n-const uint32_t LEAF_NODE_HEADER_SIZE =\n-    COMMON_NODE_HEADER_SIZE + LEAF_NODE_NUM_CELLS_SIZE;\n+const uint32_t LEAF_NODE_NEXT_LEAF_SIZE = sizeof(uint32_t);\n+const uint32_t LEAF_NODE_NEXT_LEAF_OFFSET =\n+    LEAF_NODE_NUM_CELLS_OFFSET + LEAF_NODE_NUM_CELLS_SIZE;\n+const uint32_t LEAF_NODE_HEADER_SIZE = COMMON_NODE_HEADER_SIZE +\n+                                       LEAF_NODE_NUM_CELLS_SIZE +\n+                                       LEAF_NODE_NEXT_LEAF_SIZE;\n```\n\n添加一个新的方法去访问新的文件:\n```sh\n+uint32_t* leaf_node_next_leaf(void* node) {\n+  return node + LEAF_NODE_NEXT_LEAF_OFFSET;\n+}\n```\n\n\n\n","source":"_posts/build_own_x/data_base/build_simple_database/Part12_scanning_a_multi-level_B-tree.md","raw":"---\ntitile: Part 12 - Scanning a Multi-Level B-Tree\ndate: 2019-03-09 11:05:29\ncategories:\n- build-own-x\ntags:\n- database\n- db原理\n---\n\n# Part12 扫描多层 B 树\n\n我们现在支持构建一个多层的 B 树, 但是对于 select 语句确还不支持, 这是一个插入15条记录的然后打印它们的测试例子.\n```c\n+  it 'prints all rows in a multi-level tree' do\n+    script = []\n+    (1..15).each do |i|\n+      script << \"insert #{i} user#{i} person#{i}@example.com\"\n+    end\n+    script << \"select\"\n+    script << \".exit\"\n+    result = run_script(script)\n+\n+    expect(result[15...result.length]).to match_array([\n+      \"db > (1, user1, person1@example.com)\",\n+      \"(2, user2, person2@example.com)\",\n+      \"(3, user3, person3@example.com)\",\n+      \"(4, user4, person4@example.com)\",\n+      \"(5, user5, person5@example.com)\",\n+      \"(6, user6, person6@example.com)\",\n+      \"(7, user7, person7@example.com)\",\n+      \"(8, user8, person8@example.com)\",\n+      \"(9, user9, person9@example.com)\",\n+      \"(10, user10, person10@example.com)\",\n+      \"(11, user11, person11@example.com)\",\n+      \"(12, user12, person12@example.com)\",\n+      \"(13, user13, person13@example.com)\",\n+      \"(14, user14, person14@example.com)\",\n+      \"(15, user15, person15@example.com)\",\n+      \"Executed.\", \"db > \",\n+    ])\n+  end\n```\n\n但是当我们跑这个例子的时候, 会发生下面这样的情况:\n```sh\ndb > select\n(2, user1, person1@example.com)\nExecuted.\n```\n这太糟糕了, 仅打印了一条语句, 并且看起来这条记录好像损坏了. \n\n这糟糕的情况是因为 `execute_select()` 方法在表开始的时候, 我们当前接口`table_start()` 返回 的是根节点. 但是现在根节点现在是一个中间节点,不包含任何行信息. 打印的数据必须在根节点为叶子时保留. `execute_select()` 应该返回第0个 cell 最左边的叶子节点.\n\n所以我们需要改进下旧的实现.\n```c\n-Cursor* table_start(Table* table) {\n-  Cursor* cursor = malloc(sizeof(Cursor));\n-  cursor->table = table;\n-  cursor->page_num = table->root_page_num;\n-  cursor->cell_num = 0;\n-\n-  void* root_node = get_page(table->pager, table->root_page_num);\n-  uint32_t num_cells = *leaf_node_num_cells(root_node);\n-  cursor->end_of_table = (num_cells == 0);\n-\n-  return cursor;\n-}\n```\n\n并添加一个新的实现, 如果第0个 key 不存在, 这个方法将会返回一个最低位置的指针回去.\n```c\n+Cursor* table_start(Table* table) {\n+  Cursor* cursor =  table_find(table, 0);\n+\n+  void* node = get_page(table->pager, cursor->page_num);\n+  uint32_t num_cells = *leaf_node_num_cells(node);\n+  cursor->end_of_table = (num_cells == 0);\n+\n+  return cursor;\n+}\n```\n\n通过这些改变,它依旧只会打印一个节点的行数据:\n```sh\ndb > select\n(1, user1, person1@example.com)\n(2, user2, person2@example.com)\n(3, user3, person3@example.com)\n(4, user4, person4@example.com)\n(5, user5, person5@example.com)\n(6, user6, person6@example.com)\n(7, user7, person7@example.com)\nExecuted.\ndb >\n```\n\n有15条数据, 那么就包含1个中间节点和两个叶子节点, 它看起来就像这样:\n![structure of our btree](https://cstack.github.io/db_tutorial/assets/images/btree3.png)\nstructure of our btree\n\n要扫描整个表，我们需要在到达第一个叶节点后跳转到第二个叶节点。为此，我们将在名为“next_leaf”的叶节点标题中保存一个新字段，该字段将保存右侧叶子的兄弟节点的页码。最右边的叶节点将具有next_leaf值0以表示没有兄弟（无论如何，页0都保留给表的根节点）。\n\n更新叶节点标头格式以包含新字段:\n\n```sh\n const uint32_t LEAF_NODE_NUM_CELLS_SIZE = sizeof(uint32_t);\n const uint32_t LEAF_NODE_NUM_CELLS_OFFSET = COMMON_NODE_HEADER_SIZE;\n-const uint32_t LEAF_NODE_HEADER_SIZE =\n-    COMMON_NODE_HEADER_SIZE + LEAF_NODE_NUM_CELLS_SIZE;\n+const uint32_t LEAF_NODE_NEXT_LEAF_SIZE = sizeof(uint32_t);\n+const uint32_t LEAF_NODE_NEXT_LEAF_OFFSET =\n+    LEAF_NODE_NUM_CELLS_OFFSET + LEAF_NODE_NUM_CELLS_SIZE;\n+const uint32_t LEAF_NODE_HEADER_SIZE = COMMON_NODE_HEADER_SIZE +\n+                                       LEAF_NODE_NUM_CELLS_SIZE +\n+                                       LEAF_NODE_NEXT_LEAF_SIZE;\n```\n\n添加一个新的方法去访问新的文件:\n```sh\n+uint32_t* leaf_node_next_leaf(void* node) {\n+  return node + LEAF_NODE_NEXT_LEAF_OFFSET;\n+}\n```\n\n\n\n","slug":"build_own_x/data_base/build_simple_database/Part12_scanning_a_multi-level_B-tree","published":1,"updated":"2019-03-09T04:52:36.441Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgyg004v8seoe2nvjxjt","content":"<h1 id=\"Part12-扫描多层-B-树\"><a href=\"#Part12-扫描多层-B-树\" class=\"headerlink\" title=\"Part12 扫描多层 B 树\"></a>Part12 扫描多层 B 树</h1><p>我们现在支持构建一个多层的 B 树, 但是对于 select 语句确还不支持, 这是一个插入15条记录的然后打印它们的测试例子.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  it 'prints all rows in a multi-level tree' do</span><br><span class=\"line\">+    script = []</span><br><span class=\"line\">+    (<span class=\"number\">1.</span><span class=\"number\">.15</span>).each <span class=\"keyword\">do</span> |i|</span><br><span class=\"line\">+      script &lt;&lt; <span class=\"string\">\"insert #&#123;i&#125; user#&#123;i&#125; person#&#123;i&#125;@example.com\"</span></span><br><span class=\"line\">+    end</span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\"select\"</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".exit\"</span></span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+</span><br><span class=\"line\">+    expect(result[<span class=\"number\">15.</span>..result.length]).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; (1, user1, person1@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(2, user2, person2@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(3, user3, person3@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(4, user4, person4@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(5, user5, person5@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(6, user6, person6@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(7, user7, person7@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(8, user8, person8@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(9, user9, person9@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(10, user10, person10@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(11, user11, person11@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(12, user12, person12@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(13, user13, person13@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(14, user14, person14@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(15, user15, person15@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"Executed.\"</span>, <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  end</span><br></pre></td></tr></table></figure></p>\n<p>但是当我们跑这个例子的时候, 会发生下面这样的情况:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db &gt; select</span><br><span class=\"line\">(2, user1, person1@example.com)</span><br><span class=\"line\">Executed.</span><br></pre></td></tr></table></figure></p>\n<p>这太糟糕了, 仅打印了一条语句, 并且看起来这条记录好像损坏了. </p>\n<p>这糟糕的情况是因为 <code>execute_select()</code> 方法在表开始的时候, 我们当前接口<code>table_start()</code> 返回 的是根节点. 但是现在根节点现在是一个中间节点,不包含任何行信息. 打印的数据必须在根节点为叶子时保留. <code>execute_select()</code> 应该返回第0个 cell 最左边的叶子节点.</p>\n<p>所以我们需要改进下旧的实现.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\">Cursor* <span class=\"title\">table_start</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">-  Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">-  cursor-&gt;table = table;</span><br><span class=\"line\">-  cursor-&gt;page_num = table-&gt;root_page_num;</span><br><span class=\"line\">-  cursor-&gt;cell_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">-</span><br><span class=\"line\">-  <span class=\"keyword\">void</span>* root_node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(root_node);</span><br><span class=\"line\">-  cursor-&gt;end_of_table = (num_cells == <span class=\"number\">0</span>);</span><br><span class=\"line\">-</span><br><span class=\"line\">-  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">-&#125;</span><br></pre></td></tr></table></figure></p>\n<p>并添加一个新的实现, 如果第0个 key 不存在, 这个方法将会返回一个最低位置的指针回去.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">table_start</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Cursor* cursor =  table_find(table, <span class=\"number\">0</span>);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(table-&gt;pager, cursor-&gt;page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">+  cursor-&gt;end_of_table = (num_cells == <span class=\"number\">0</span>);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过这些改变,它依旧只会打印一个节点的行数据:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db &gt; select</span><br><span class=\"line\">(1, user1, person1@example.com)</span><br><span class=\"line\">(2, user2, person2@example.com)</span><br><span class=\"line\">(3, user3, person3@example.com)</span><br><span class=\"line\">(4, user4, person4@example.com)</span><br><span class=\"line\">(5, user5, person5@example.com)</span><br><span class=\"line\">(6, user6, person6@example.com)</span><br><span class=\"line\">(7, user7, person7@example.com)</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt;</span><br></pre></td></tr></table></figure></p>\n<p>有15条数据, 那么就包含1个中间节点和两个叶子节点, 它看起来就像这样:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree3.png\" alt=\"structure of our btree\"><br>structure of our btree</p>\n<p>要扫描整个表，我们需要在到达第一个叶节点后跳转到第二个叶节点。为此，我们将在名为“next_leaf”的叶节点标题中保存一个新字段，该字段将保存右侧叶子的兄弟节点的页码。最右边的叶节点将具有next_leaf值0以表示没有兄弟（无论如何，页0都保留给表的根节点）。</p>\n<p>更新叶节点标头格式以包含新字段:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> const uint32_t LEAF_NODE_NUM_CELLS_SIZE = sizeof(uint32_t);</span><br><span class=\"line\"> const uint32_t LEAF_NODE_NUM_CELLS_OFFSET = COMMON_NODE_HEADER_SIZE;</span><br><span class=\"line\">-const uint32_t LEAF_NODE_HEADER_SIZE =</span><br><span class=\"line\">-    COMMON_NODE_HEADER_SIZE + LEAF_NODE_NUM_CELLS_SIZE;</span><br><span class=\"line\">+const uint32_t LEAF_NODE_NEXT_LEAF_SIZE = sizeof(uint32_t);</span><br><span class=\"line\">+const uint32_t LEAF_NODE_NEXT_LEAF_OFFSET =</span><br><span class=\"line\">+    LEAF_NODE_NUM_CELLS_OFFSET + LEAF_NODE_NUM_CELLS_SIZE;</span><br><span class=\"line\">+const uint32_t LEAF_NODE_HEADER_SIZE = COMMON_NODE_HEADER_SIZE +</span><br><span class=\"line\">+                                       LEAF_NODE_NUM_CELLS_SIZE +</span><br><span class=\"line\">+                                       LEAF_NODE_NEXT_LEAF_SIZE;</span><br></pre></td></tr></table></figure>\n<p>添加一个新的方法去访问新的文件:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+uint32_t* leaf_node_next_leaf(void* node) &#123;</span><br><span class=\"line\">+  <span class=\"built_in\">return</span> node + LEAF_NODE_NEXT_LEAF_OFFSET;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Part12-扫描多层-B-树\"><a href=\"#Part12-扫描多层-B-树\" class=\"headerlink\" title=\"Part12 扫描多层 B 树\"></a>Part12 扫描多层 B 树</h1><p>我们现在支持构建一个多层的 B 树, 但是对于 select 语句确还不支持, 这是一个插入15条记录的然后打印它们的测试例子.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  it 'prints all rows in a multi-level tree' do</span><br><span class=\"line\">+    script = []</span><br><span class=\"line\">+    (<span class=\"number\">1.</span><span class=\"number\">.15</span>).each <span class=\"keyword\">do</span> |i|</span><br><span class=\"line\">+      script &lt;&lt; <span class=\"string\">\"insert #&#123;i&#125; user#&#123;i&#125; person#&#123;i&#125;@example.com\"</span></span><br><span class=\"line\">+    end</span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\"select\"</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".exit\"</span></span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+</span><br><span class=\"line\">+    expect(result[<span class=\"number\">15.</span>..result.length]).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; (1, user1, person1@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(2, user2, person2@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(3, user3, person3@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(4, user4, person4@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(5, user5, person5@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(6, user6, person6@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(7, user7, person7@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(8, user8, person8@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(9, user9, person9@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(10, user10, person10@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(11, user11, person11@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(12, user12, person12@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(13, user13, person13@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(14, user14, person14@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"(15, user15, person15@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"Executed.\"</span>, <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  end</span><br></pre></td></tr></table></figure></p>\n<p>但是当我们跑这个例子的时候, 会发生下面这样的情况:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db &gt; select</span><br><span class=\"line\">(2, user1, person1@example.com)</span><br><span class=\"line\">Executed.</span><br></pre></td></tr></table></figure></p>\n<p>这太糟糕了, 仅打印了一条语句, 并且看起来这条记录好像损坏了. </p>\n<p>这糟糕的情况是因为 <code>execute_select()</code> 方法在表开始的时候, 我们当前接口<code>table_start()</code> 返回 的是根节点. 但是现在根节点现在是一个中间节点,不包含任何行信息. 打印的数据必须在根节点为叶子时保留. <code>execute_select()</code> 应该返回第0个 cell 最左边的叶子节点.</p>\n<p>所以我们需要改进下旧的实现.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\">Cursor* <span class=\"title\">table_start</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">-  Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">-  cursor-&gt;table = table;</span><br><span class=\"line\">-  cursor-&gt;page_num = table-&gt;root_page_num;</span><br><span class=\"line\">-  cursor-&gt;cell_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">-</span><br><span class=\"line\">-  <span class=\"keyword\">void</span>* root_node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(root_node);</span><br><span class=\"line\">-  cursor-&gt;end_of_table = (num_cells == <span class=\"number\">0</span>);</span><br><span class=\"line\">-</span><br><span class=\"line\">-  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">-&#125;</span><br></pre></td></tr></table></figure></p>\n<p>并添加一个新的实现, 如果第0个 key 不存在, 这个方法将会返回一个最低位置的指针回去.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">table_start</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Cursor* cursor =  table_find(table, <span class=\"number\">0</span>);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(table-&gt;pager, cursor-&gt;page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">+  cursor-&gt;end_of_table = (num_cells == <span class=\"number\">0</span>);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过这些改变,它依旧只会打印一个节点的行数据:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db &gt; select</span><br><span class=\"line\">(1, user1, person1@example.com)</span><br><span class=\"line\">(2, user2, person2@example.com)</span><br><span class=\"line\">(3, user3, person3@example.com)</span><br><span class=\"line\">(4, user4, person4@example.com)</span><br><span class=\"line\">(5, user5, person5@example.com)</span><br><span class=\"line\">(6, user6, person6@example.com)</span><br><span class=\"line\">(7, user7, person7@example.com)</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt;</span><br></pre></td></tr></table></figure></p>\n<p>有15条数据, 那么就包含1个中间节点和两个叶子节点, 它看起来就像这样:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree3.png\" alt=\"structure of our btree\"><br>structure of our btree</p>\n<p>要扫描整个表，我们需要在到达第一个叶节点后跳转到第二个叶节点。为此，我们将在名为“next_leaf”的叶节点标题中保存一个新字段，该字段将保存右侧叶子的兄弟节点的页码。最右边的叶节点将具有next_leaf值0以表示没有兄弟（无论如何，页0都保留给表的根节点）。</p>\n<p>更新叶节点标头格式以包含新字段:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> const uint32_t LEAF_NODE_NUM_CELLS_SIZE = sizeof(uint32_t);</span><br><span class=\"line\"> const uint32_t LEAF_NODE_NUM_CELLS_OFFSET = COMMON_NODE_HEADER_SIZE;</span><br><span class=\"line\">-const uint32_t LEAF_NODE_HEADER_SIZE =</span><br><span class=\"line\">-    COMMON_NODE_HEADER_SIZE + LEAF_NODE_NUM_CELLS_SIZE;</span><br><span class=\"line\">+const uint32_t LEAF_NODE_NEXT_LEAF_SIZE = sizeof(uint32_t);</span><br><span class=\"line\">+const uint32_t LEAF_NODE_NEXT_LEAF_OFFSET =</span><br><span class=\"line\">+    LEAF_NODE_NUM_CELLS_OFFSET + LEAF_NODE_NUM_CELLS_SIZE;</span><br><span class=\"line\">+const uint32_t LEAF_NODE_HEADER_SIZE = COMMON_NODE_HEADER_SIZE +</span><br><span class=\"line\">+                                       LEAF_NODE_NUM_CELLS_SIZE +</span><br><span class=\"line\">+                                       LEAF_NODE_NEXT_LEAF_SIZE;</span><br></pre></td></tr></table></figure>\n<p>添加一个新的方法去访问新的文件:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+uint32_t* leaf_node_next_leaf(void* node) &#123;</span><br><span class=\"line\">+  <span class=\"built_in\">return</span> node + LEAF_NODE_NEXT_LEAF_OFFSET;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Part 3 - 一个在内存, 仅追加的 单表数据库","date":"2019-01-26T08:11:20.000Z","_content":"\n# Part 3 - 一个在内存, 仅追加的 单表数据库\n\n我们将继续为我们的数据库添加一些小功能, 通过在数据库中添加一些限制. 添加的功能如下:\n\n- 支持两个操作: 插入新的一行数据 and 打印所有行数据\n- 让其暂住在内存中(并没有存储到硬盘中)\n- 支持单个硬编码表\n\n我们的硬编码表主要用于存储用户信息, 看起来像这样\n\ncolumn     |  type\n------------    | ----------\nid                | integer\nusername | varchar(32)\nemail          | varchar(255)\n\n这是一个简单的 schema, 但是它支持多数据类型和多类型大小的文本类型.\n\n插入语法现在看起来像这样:\n```sql\ninsert 1 cstack foo@bar.com\n```\n\n这意味着我们需要去更新 `prepare_statement` 方法去解析参数.\n\n```c\nif (strncmp(input_buffer->buffer, \"insert\", 6) == 0) {\n     statement->type = STATEMENT_INSERT;\n+    int args_assigned = sscanf(\n+        input_buffer->buffer, \"insert %d %s %s\", &(statement->row_to_insert.id),\n+        statement->row_to_insert.username, statement->row_to_insert.email);\n+    if (args_assigned < 3) {\n+      return PREPARE_SYNTAX_ERROR;\n+    }\n     return PREPARE_SUCCESS;\n   }\n   if (strcmp(input_buffer->buffer, \"select\") == 0) {\n```\n\n我们声明一个新的 `Row` 结构放在 `statement` 下, 并将传入的参数放在其中.\n\n```c\n+const uint32_t COLUMN_USERNAME_SIZE = 32;\n+const uint32_t COLUMN_EMAIL_SIZE = 255;\n+struct Row_t {\n+  uint32_t id;\n+  char username[COLUMN_USERNAME_SIZE];\n+  char email[COLUMN_EMAIL_SIZE];\n+};\n+typedef struct Row_t Row;\n+\n struct Statement_t {\n   StatementType type;\n+  Row row_to_insert;  // only used by insert statement\n };\n typedef struct Statement_t Statement;\n```\n\n现在我们需要将传入的数据复制到 `Row` 中, 以此来代替表. Sqlite 使用 B 树来快速的查询,插入和删除. 我们将从简单的事情开始, 像 B 树结构是将数据行进行分组到页中, 但是在这里我们将用数组来代替 B 树.\n\n这是我的计划:\n- 将行存在在内存块中, 将其称为页面\n- 每一个页面都用行数据填充\n- 每一行都将序列化为紧凑形式\n- 页面仅根据需要分配\n- 保持固定大小的页面指针数组\n\n第一, 我们将定义一个紧凑的行表示.\n\n```c\n+#define size_of_attribute(Struct, Attribute) sizeof(((Struct*)0)->Attribute)\n+\n+const uint32_t ID_SIZE = size_of_attribute(Row, id);\n+const uint32_t USERNAME_SIZE = size_of_attribute(Row, username);\n+const uint32_t EMAIL_SIZE = size_of_attribute(Row, email);\n+const uint32_t ID_OFFSET = 0;\n+const uint32_t USERNAME_OFFSET = ID_OFFSET + ID_SIZE;\n+const uint32_t EMAIL_OFFSET = USERNAME_OFFSET + USERNAME_SIZE;\n+const uint32_t ROW_SIZE = ID_SIZE + USERNAME_SIZE + EMAIL_SIZE;\n```\n\n这也意味着我们序列化行数据将会看起来像下面这样:\n\ncolumn      |   size (bytes)     |  offset\n-------------   |  ------------------   | ---------\nid                |           4              |   0\nusername |          32             |  4\nemail         |         255  \t   |  36\ntotal           |  \t     291   \t      |\n\n我们也需要使用代码将行数据转换成紧凑的形式\n\n```c\n+void serialize_row(Row* source, void* destination) {\n+  memcpy(destination + ID_OFFSET, &(source->id), ID_SIZE);\n+  memcpy(destination + USERNAME_OFFSET, &(source->username), USERNAME_SIZE);\n+  memcpy(destination + EMAIL_OFFSET, &(source->email), EMAIL_SIZE);\n+}\n+\n+void deserialize_row(void* source, Row* destination) {\n+  memcpy(&(destination->id), source + ID_OFFSET, ID_SIZE);\n+  memcpy(&(destination->username), source + USERNAME_OFFSET, USERNAME_SIZE);\n+  memcpy(&(destination->email), source + EMAIL_OFFSET, EMAIL_SIZE);\n+}\n```\n\n下一步, 一个表结构记录着到 page 的指针和有多少条记录的\n\n```c\n+const uint32_t PAGE_SIZE = 4096;\n+const uint32_t TABLE_MAX_PAGES = 100;\n+const uint32_t ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;\n+const uint32_t TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;\n+\n+struct Table_t {\n+  void* pages[TABLE_MAX_PAGES];\n+  uint32_t num_rows;\n+};\n+typedef struct Table_t Table;\n```\n\n我定义了一页的大小为4千字节, 因为这个和虚拟内存系统框架的页大小刚好一样. 这也意味在数据库中的一页对应着操作系统中的一页. 操作系统也是整页数据的进行着操作.\n\n我们随意的限制下页数为100页. 当我们使用数的结构的时候, 我们数据库最大的限制将会是文件的最大限制.(虽然我们依旧会去限制有多少页的数据驻留在内存中.)\n\n行不应该超过页的限制, 因为页面之间可能不会彼此相邻, 这样会使得读写更加方便.\n\n讲到这里, 我们将讲下如何计算特定的内存的位置.\n\n```c\n+void* row_slot(Table* table, uint32_t row_num) {\n+  uint32_t page_num = row_num / ROWS_PER_PAGE;\n+  void* page = table->pages[page_num];\n+  if (!page) {\n+    // Allocate memory only when we try to access page\n+    page = table->pages[page_num] = malloc(PAGE_SIZE);\n+  }\n+  uint32_t row_offset = row_num % ROWS_PER_PAGE;\n+  uint32_t byte_offset = row_offset * ROW_SIZE;\n+  return page + byte_offset;\n+}\n```\n\n现在, 我们可以让 `execute_statement` 方法可以从 table 结构中读写\n\n```c\n-void execute_statement(Statement* statement) {\n+ExecuteResult execute_insert(Statement* statement, Table* table) {\n+  if (table->num_rows >= TABLE_MAX_ROWS) {\n+    return EXECUTE_TABLE_FULL;\n+  }\n+\n+  Row* row_to_insert = &(statement->row_to_insert);\n+\n+  serialize_row(row_to_insert, row_slot(table, table->num_rows));\n+  table->num_rows += 1;\n+\n+  return EXECUTE_SUCCESS;\n+}\n+\n+ExecuteResult execute_select(Statement* statement, Table* table) {\n+  Row row;\n+  for (uint32_t i = 0; i < table->num_rows; i++) {\n+    deserialize_row(row_slot(table, i), &row);\n+    print_row(&row);\n+  }\n+  return EXECUTE_SUCCESS;\n+}\n+\n+ExecuteResult execute_statement(Statement* statement, Table* table) {\n   switch (statement->type) {\n     case (STATEMENT_INSERT):\n-      printf(\"This is where we would do an insert.\\n\");\n-      break;\n+      return execute_insert(statement, table);\n     case (STATEMENT_SELECT):\n-      printf(\"This is where we would do a select.\\n\");\n-      break;\n+      return execute_select(statement, table);\n   }\n }\n```\n\n最后, 我们需要初始化table 并且处理一些错误的情况.\n\n```c\n+ Table* new_table() {\n+  Table* table = malloc(sizeof(Table));\n+  table->num_rows = 0;\n+\n+  return table;\n+}\n```\n\n```c\nint main(int argc, char* argv[]) {\n+  Table* table = new_table();\n   InputBuffer* input_buffer = new_input_buffer();\n   while (true) {\n     print_prompt();\n@@ -105,13 +203,22 @@ int main(int argc, char* argv[]) {\n     switch (prepare_statement(input_buffer, &statement)) {\n       case (PREPARE_SUCCESS):\n         break;\n+      case (PREPARE_SYNTAX_ERROR):\n+        printf(\"Syntax error. Could not parse statement.\\n\");\n+        continue;\n       case (PREPARE_UNRECOGNIZED_STATEMENT):\n         printf(\"Unrecognized keyword at start of '%s'.\\n\",\n                input_buffer->buffer);\n         continue;\n     }\n\n-    execute_statement(&statement);\n-    printf(\"Executed.\\n\");\n+    switch (execute_statement(&statement, table)) {\n+      case (EXECUTE_SUCCESS):\n+        printf(\"Executed.\\n\");\n+        break;\n+      case (EXECUTE_TABLE_FULL):\n+        printf(\"Error: Table full.\\n\");\n+        break;\n+    }\n   }\n }\n```\n\n随着这些的修改,我们就能将数据保存到我们的数据库中了\n\n```sh\n~ ./db\ndb > insert 1 cstack foo@bar.com\nExecuted.\ndb > insert 2 bob bob@example.com\nExecuted.\ndb > select\n(1, cstack, foo@bar.com)\n(2, bob, bob@example.com)\nExecuted.\ndb > insert foo bar 1\nSyntax error. Could not parse statement.\ndb > .exit\n~\n```\n\n现在,我们可以写一些单元测试了, 原因有下面两点:\n- 我们将大幅的改变数据存储到我们的 table中, 并回归它们.\n- 还存在一些边缘情况我们还没有手动测试(如: 填满全表)\n\n我们将在下一节中完善这些问题, 现在, 让我们看看整体的修改吧:\n\n```c\ntypedef struct InputBuffer_t InputBuffer;\n \n+enum ExecuteResult_t { EXECUTE_SUCCESS, EXECUTE_TABLE_FULL };\n+typedef enum ExecuteResult_t ExecuteResult;\n+\n enum MetaCommandResult_t {\n   META_COMMAND_SUCCESS,\n   META_COMMAND_UNRECOGNIZED_COMMAND\n };\n typedef enum MetaCommandResult_t MetaCommandResult;\n \n-enum PrepareResult_t { PREPARE_SUCCESS, PREPARE_UNRECOGNIZED_STATEMENT };\n+enum PrepareResult_t {\n+  PREPARE_SUCCESS,\n+  PREPARE_SYNTAX_ERROR,\n+  PREPARE_UNRECOGNIZED_STATEMENT\n+};\n typedef enum PrepareResult_t PrepareResult;\n \n enum StatementType_t { STATEMENT_INSERT, STATEMENT_SELECT };\n typedef enum StatementType_t StatementType;\n \n+const uint32_t COLUMN_USERNAME_SIZE = 32;\n+const uint32_t COLUMN_EMAIL_SIZE = 255;\n+struct Row_t {\n+  uint32_t id;\n+  char username[COLUMN_USERNAME_SIZE];\n+  char email[COLUMN_EMAIL_SIZE];\n+};\n+typedef struct Row_t Row;\n+\n struct Statement_t {\n   StatementType type;\n+  Row row_to_insert;  // only used by insert statement\n };\n typedef struct Statement_t Statement;\n \n+#define size_of_attribute(Struct, Attribute) sizeof(((Struct*)0)->Attribute)\n+\n+const uint32_t ID_SIZE = size_of_attribute(Row, id);\n+const uint32_t USERNAME_SIZE = size_of_attribute(Row, username);\n+const uint32_t EMAIL_SIZE = size_of_attribute(Row, email);\n+const uint32_t ID_OFFSET = 0;\n+const uint32_t USERNAME_OFFSET = ID_OFFSET + ID_SIZE;\n+const uint32_t EMAIL_OFFSET = USERNAME_OFFSET + USERNAME_SIZE;\n+const uint32_t ROW_SIZE = ID_SIZE + USERNAME_SIZE + EMAIL_SIZE;\n+\n+const uint32_t PAGE_SIZE = 4096;\n+const uint32_t TABLE_MAX_PAGES = 100;\n+const uint32_t ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;\n+const uint32_t TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;\n+\n+struct Table_t {\n+  void* pages[TABLE_MAX_PAGES];\n+  uint32_t num_rows;\n+};\n+typedef struct Table_t Table;\n+\n+void print_row(Row* row) {\n+  printf(\"(%d, %s, %s)\\n\", row->id, row->username, row->email);\n+}\n+\n+void serialize_row(Row* source, void* destination) {\n+  memcpy(destination + ID_OFFSET, &(source->id), ID_SIZE);\n+  memcpy(destination + USERNAME_OFFSET, &(source->username), USERNAME_SIZE);\n+  memcpy(destination + EMAIL_OFFSET, &(source->email), EMAIL_SIZE);\n+}\n+\n+void deserialize_row(void* source, Row* destination) {\n+  memcpy(&(destination->id), source + ID_OFFSET, ID_SIZE);\n+  memcpy(&(destination->username), source + USERNAME_OFFSET, USERNAME_SIZE);\n+  memcpy(&(destination->email), source + EMAIL_OFFSET, EMAIL_SIZE);\n+}\n+\n+void* row_slot(Table* table, uint32_t row_num) {\n+  uint32_t page_num = row_num / ROWS_PER_PAGE;\n+  void* page = table->pages[page_num];\n+  if (!page) {\n+    // Allocate memory only when we try to access page\n+    page = table->pages[page_num] = malloc(PAGE_SIZE);\n+  }\n+  uint32_t row_offset = row_num % ROWS_PER_PAGE;\n+  uint32_t byte_offset = row_offset * ROW_SIZE;\n+  return page + byte_offset;\n+}\n+\n+Table* new_table() {\n+  Table* table = malloc(sizeof(Table));\n+  table->num_rows = 0;\n+\n+  return table;\n+}\n+\n InputBuffer* new_input_buffer() {\n   InputBuffer* input_buffer = malloc(sizeof(InputBuffer));\n   input_buffer->buffer = NULL;\n@@ -64,6 +137,12 @@ PrepareResult prepare_statement(InputBuffer* input_buffer,\n                                 Statement* statement) {\n   if (strncmp(input_buffer->buffer, \"insert\", 6) == 0) {\n     statement->type = STATEMENT_INSERT;\n+    int args_assigned = sscanf(\n+        input_buffer->buffer, \"insert %d %s %s\", &(statement->row_to_insert.id),\n+        statement->row_to_insert.username, statement->row_to_insert.email);\n+    if (args_assigned < 3) {\n+      return PREPARE_SYNTAX_ERROR;\n+    }\n     return PREPARE_SUCCESS;\n   }\n   if (strcmp(input_buffer->buffer, \"select\") == 0) {\n@@ -74,18 +153,39 @@ PrepareResult prepare_statement(InputBuffer* input_buffer,\n   return PREPARE_UNRECOGNIZED_STATEMENT;\n }\n \n-void execute_statement(Statement* statement) {\n+ExecuteResult execute_insert(Statement* statement, Table* table) {\n+  if (table->num_rows >= TABLE_MAX_ROWS) {\n+    return EXECUTE_TABLE_FULL;\n+  }\n+\n+  Row* row_to_insert = &(statement->row_to_insert);\n+\n+  serialize_row(row_to_insert, row_slot(table, table->num_rows));\n+  table->num_rows += 1;\n+\n+  return EXECUTE_SUCCESS;\n+}\n+\n+ExecuteResult execute_select(Statement* statement, Table* table) {\n+  Row row;\n+  for (uint32_t i = 0; i < table->num_rows; i++) {\n+    deserialize_row(row_slot(table, i), &row);\n+    print_row(&row);\n+  }\n+  return EXECUTE_SUCCESS;\n+}\n+\n+ExecuteResult execute_statement(Statement* statement, Table* table) {\n   switch (statement->type) {\n     case (STATEMENT_INSERT):\n-      printf(\"This is where we would do an insert.\\n\");\n-      break;\n+      return execute_insert(statement, table);\n     case (STATEMENT_SELECT):\n-      printf(\"This is where we would do a select.\\n\");\n-      break;\n+      return execute_select(statement, table);\n   }\n }\n \n int main(int argc, char* argv[]) {\n+  Table* table = new_table();\n   InputBuffer* input_buffer = new_input_buffer();\n   while (true) {\n     print_prompt();\n@@ -105,13 +205,22 @@ int main(int argc, char* argv[]) {\n     switch (prepare_statement(input_buffer, &statement)) {\n       case (PREPARE_SUCCESS):\n         break;\n+      case (PREPARE_SYNTAX_ERROR):\n+        printf(\"Syntax error. Could not parse statement.\\n\");\n+        continue;\n       case (PREPARE_UNRECOGNIZED_STATEMENT):\n         printf(\"Unrecognized keyword at start of '%s'.\\n\",\n                input_buffer->buffer);\n         continue;\n     }\n \n-    execute_statement(&statement);\n-    printf(\"Executed.\\n\");\n+    switch (execute_statement(&statement, table)) {\n+      case (EXECUTE_SUCCESS):\n+        printf(\"Executed.\\n\");\n+        break;\n+      case (EXECUTE_TABLE_FULL):\n+        printf(\"Error: Table full.\\n\");\n+        break;\n+    }\n   }\n }\n```","source":"_posts/build_own_x/data_base/build_simple_database/Part3_an_in-memory_append-only_single-table_database.md","raw":"---\ntitle: Part 3 - 一个在内存, 仅追加的 单表数据库\ndate: 2019-01-26 16:11:20\ncategories:\n- build-own-x\ntags:\n- database\n- db原理\n---\n\n# Part 3 - 一个在内存, 仅追加的 单表数据库\n\n我们将继续为我们的数据库添加一些小功能, 通过在数据库中添加一些限制. 添加的功能如下:\n\n- 支持两个操作: 插入新的一行数据 and 打印所有行数据\n- 让其暂住在内存中(并没有存储到硬盘中)\n- 支持单个硬编码表\n\n我们的硬编码表主要用于存储用户信息, 看起来像这样\n\ncolumn     |  type\n------------    | ----------\nid                | integer\nusername | varchar(32)\nemail          | varchar(255)\n\n这是一个简单的 schema, 但是它支持多数据类型和多类型大小的文本类型.\n\n插入语法现在看起来像这样:\n```sql\ninsert 1 cstack foo@bar.com\n```\n\n这意味着我们需要去更新 `prepare_statement` 方法去解析参数.\n\n```c\nif (strncmp(input_buffer->buffer, \"insert\", 6) == 0) {\n     statement->type = STATEMENT_INSERT;\n+    int args_assigned = sscanf(\n+        input_buffer->buffer, \"insert %d %s %s\", &(statement->row_to_insert.id),\n+        statement->row_to_insert.username, statement->row_to_insert.email);\n+    if (args_assigned < 3) {\n+      return PREPARE_SYNTAX_ERROR;\n+    }\n     return PREPARE_SUCCESS;\n   }\n   if (strcmp(input_buffer->buffer, \"select\") == 0) {\n```\n\n我们声明一个新的 `Row` 结构放在 `statement` 下, 并将传入的参数放在其中.\n\n```c\n+const uint32_t COLUMN_USERNAME_SIZE = 32;\n+const uint32_t COLUMN_EMAIL_SIZE = 255;\n+struct Row_t {\n+  uint32_t id;\n+  char username[COLUMN_USERNAME_SIZE];\n+  char email[COLUMN_EMAIL_SIZE];\n+};\n+typedef struct Row_t Row;\n+\n struct Statement_t {\n   StatementType type;\n+  Row row_to_insert;  // only used by insert statement\n };\n typedef struct Statement_t Statement;\n```\n\n现在我们需要将传入的数据复制到 `Row` 中, 以此来代替表. Sqlite 使用 B 树来快速的查询,插入和删除. 我们将从简单的事情开始, 像 B 树结构是将数据行进行分组到页中, 但是在这里我们将用数组来代替 B 树.\n\n这是我的计划:\n- 将行存在在内存块中, 将其称为页面\n- 每一个页面都用行数据填充\n- 每一行都将序列化为紧凑形式\n- 页面仅根据需要分配\n- 保持固定大小的页面指针数组\n\n第一, 我们将定义一个紧凑的行表示.\n\n```c\n+#define size_of_attribute(Struct, Attribute) sizeof(((Struct*)0)->Attribute)\n+\n+const uint32_t ID_SIZE = size_of_attribute(Row, id);\n+const uint32_t USERNAME_SIZE = size_of_attribute(Row, username);\n+const uint32_t EMAIL_SIZE = size_of_attribute(Row, email);\n+const uint32_t ID_OFFSET = 0;\n+const uint32_t USERNAME_OFFSET = ID_OFFSET + ID_SIZE;\n+const uint32_t EMAIL_OFFSET = USERNAME_OFFSET + USERNAME_SIZE;\n+const uint32_t ROW_SIZE = ID_SIZE + USERNAME_SIZE + EMAIL_SIZE;\n```\n\n这也意味着我们序列化行数据将会看起来像下面这样:\n\ncolumn      |   size (bytes)     |  offset\n-------------   |  ------------------   | ---------\nid                |           4              |   0\nusername |          32             |  4\nemail         |         255  \t   |  36\ntotal           |  \t     291   \t      |\n\n我们也需要使用代码将行数据转换成紧凑的形式\n\n```c\n+void serialize_row(Row* source, void* destination) {\n+  memcpy(destination + ID_OFFSET, &(source->id), ID_SIZE);\n+  memcpy(destination + USERNAME_OFFSET, &(source->username), USERNAME_SIZE);\n+  memcpy(destination + EMAIL_OFFSET, &(source->email), EMAIL_SIZE);\n+}\n+\n+void deserialize_row(void* source, Row* destination) {\n+  memcpy(&(destination->id), source + ID_OFFSET, ID_SIZE);\n+  memcpy(&(destination->username), source + USERNAME_OFFSET, USERNAME_SIZE);\n+  memcpy(&(destination->email), source + EMAIL_OFFSET, EMAIL_SIZE);\n+}\n```\n\n下一步, 一个表结构记录着到 page 的指针和有多少条记录的\n\n```c\n+const uint32_t PAGE_SIZE = 4096;\n+const uint32_t TABLE_MAX_PAGES = 100;\n+const uint32_t ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;\n+const uint32_t TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;\n+\n+struct Table_t {\n+  void* pages[TABLE_MAX_PAGES];\n+  uint32_t num_rows;\n+};\n+typedef struct Table_t Table;\n```\n\n我定义了一页的大小为4千字节, 因为这个和虚拟内存系统框架的页大小刚好一样. 这也意味在数据库中的一页对应着操作系统中的一页. 操作系统也是整页数据的进行着操作.\n\n我们随意的限制下页数为100页. 当我们使用数的结构的时候, 我们数据库最大的限制将会是文件的最大限制.(虽然我们依旧会去限制有多少页的数据驻留在内存中.)\n\n行不应该超过页的限制, 因为页面之间可能不会彼此相邻, 这样会使得读写更加方便.\n\n讲到这里, 我们将讲下如何计算特定的内存的位置.\n\n```c\n+void* row_slot(Table* table, uint32_t row_num) {\n+  uint32_t page_num = row_num / ROWS_PER_PAGE;\n+  void* page = table->pages[page_num];\n+  if (!page) {\n+    // Allocate memory only when we try to access page\n+    page = table->pages[page_num] = malloc(PAGE_SIZE);\n+  }\n+  uint32_t row_offset = row_num % ROWS_PER_PAGE;\n+  uint32_t byte_offset = row_offset * ROW_SIZE;\n+  return page + byte_offset;\n+}\n```\n\n现在, 我们可以让 `execute_statement` 方法可以从 table 结构中读写\n\n```c\n-void execute_statement(Statement* statement) {\n+ExecuteResult execute_insert(Statement* statement, Table* table) {\n+  if (table->num_rows >= TABLE_MAX_ROWS) {\n+    return EXECUTE_TABLE_FULL;\n+  }\n+\n+  Row* row_to_insert = &(statement->row_to_insert);\n+\n+  serialize_row(row_to_insert, row_slot(table, table->num_rows));\n+  table->num_rows += 1;\n+\n+  return EXECUTE_SUCCESS;\n+}\n+\n+ExecuteResult execute_select(Statement* statement, Table* table) {\n+  Row row;\n+  for (uint32_t i = 0; i < table->num_rows; i++) {\n+    deserialize_row(row_slot(table, i), &row);\n+    print_row(&row);\n+  }\n+  return EXECUTE_SUCCESS;\n+}\n+\n+ExecuteResult execute_statement(Statement* statement, Table* table) {\n   switch (statement->type) {\n     case (STATEMENT_INSERT):\n-      printf(\"This is where we would do an insert.\\n\");\n-      break;\n+      return execute_insert(statement, table);\n     case (STATEMENT_SELECT):\n-      printf(\"This is where we would do a select.\\n\");\n-      break;\n+      return execute_select(statement, table);\n   }\n }\n```\n\n最后, 我们需要初始化table 并且处理一些错误的情况.\n\n```c\n+ Table* new_table() {\n+  Table* table = malloc(sizeof(Table));\n+  table->num_rows = 0;\n+\n+  return table;\n+}\n```\n\n```c\nint main(int argc, char* argv[]) {\n+  Table* table = new_table();\n   InputBuffer* input_buffer = new_input_buffer();\n   while (true) {\n     print_prompt();\n@@ -105,13 +203,22 @@ int main(int argc, char* argv[]) {\n     switch (prepare_statement(input_buffer, &statement)) {\n       case (PREPARE_SUCCESS):\n         break;\n+      case (PREPARE_SYNTAX_ERROR):\n+        printf(\"Syntax error. Could not parse statement.\\n\");\n+        continue;\n       case (PREPARE_UNRECOGNIZED_STATEMENT):\n         printf(\"Unrecognized keyword at start of '%s'.\\n\",\n                input_buffer->buffer);\n         continue;\n     }\n\n-    execute_statement(&statement);\n-    printf(\"Executed.\\n\");\n+    switch (execute_statement(&statement, table)) {\n+      case (EXECUTE_SUCCESS):\n+        printf(\"Executed.\\n\");\n+        break;\n+      case (EXECUTE_TABLE_FULL):\n+        printf(\"Error: Table full.\\n\");\n+        break;\n+    }\n   }\n }\n```\n\n随着这些的修改,我们就能将数据保存到我们的数据库中了\n\n```sh\n~ ./db\ndb > insert 1 cstack foo@bar.com\nExecuted.\ndb > insert 2 bob bob@example.com\nExecuted.\ndb > select\n(1, cstack, foo@bar.com)\n(2, bob, bob@example.com)\nExecuted.\ndb > insert foo bar 1\nSyntax error. Could not parse statement.\ndb > .exit\n~\n```\n\n现在,我们可以写一些单元测试了, 原因有下面两点:\n- 我们将大幅的改变数据存储到我们的 table中, 并回归它们.\n- 还存在一些边缘情况我们还没有手动测试(如: 填满全表)\n\n我们将在下一节中完善这些问题, 现在, 让我们看看整体的修改吧:\n\n```c\ntypedef struct InputBuffer_t InputBuffer;\n \n+enum ExecuteResult_t { EXECUTE_SUCCESS, EXECUTE_TABLE_FULL };\n+typedef enum ExecuteResult_t ExecuteResult;\n+\n enum MetaCommandResult_t {\n   META_COMMAND_SUCCESS,\n   META_COMMAND_UNRECOGNIZED_COMMAND\n };\n typedef enum MetaCommandResult_t MetaCommandResult;\n \n-enum PrepareResult_t { PREPARE_SUCCESS, PREPARE_UNRECOGNIZED_STATEMENT };\n+enum PrepareResult_t {\n+  PREPARE_SUCCESS,\n+  PREPARE_SYNTAX_ERROR,\n+  PREPARE_UNRECOGNIZED_STATEMENT\n+};\n typedef enum PrepareResult_t PrepareResult;\n \n enum StatementType_t { STATEMENT_INSERT, STATEMENT_SELECT };\n typedef enum StatementType_t StatementType;\n \n+const uint32_t COLUMN_USERNAME_SIZE = 32;\n+const uint32_t COLUMN_EMAIL_SIZE = 255;\n+struct Row_t {\n+  uint32_t id;\n+  char username[COLUMN_USERNAME_SIZE];\n+  char email[COLUMN_EMAIL_SIZE];\n+};\n+typedef struct Row_t Row;\n+\n struct Statement_t {\n   StatementType type;\n+  Row row_to_insert;  // only used by insert statement\n };\n typedef struct Statement_t Statement;\n \n+#define size_of_attribute(Struct, Attribute) sizeof(((Struct*)0)->Attribute)\n+\n+const uint32_t ID_SIZE = size_of_attribute(Row, id);\n+const uint32_t USERNAME_SIZE = size_of_attribute(Row, username);\n+const uint32_t EMAIL_SIZE = size_of_attribute(Row, email);\n+const uint32_t ID_OFFSET = 0;\n+const uint32_t USERNAME_OFFSET = ID_OFFSET + ID_SIZE;\n+const uint32_t EMAIL_OFFSET = USERNAME_OFFSET + USERNAME_SIZE;\n+const uint32_t ROW_SIZE = ID_SIZE + USERNAME_SIZE + EMAIL_SIZE;\n+\n+const uint32_t PAGE_SIZE = 4096;\n+const uint32_t TABLE_MAX_PAGES = 100;\n+const uint32_t ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;\n+const uint32_t TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;\n+\n+struct Table_t {\n+  void* pages[TABLE_MAX_PAGES];\n+  uint32_t num_rows;\n+};\n+typedef struct Table_t Table;\n+\n+void print_row(Row* row) {\n+  printf(\"(%d, %s, %s)\\n\", row->id, row->username, row->email);\n+}\n+\n+void serialize_row(Row* source, void* destination) {\n+  memcpy(destination + ID_OFFSET, &(source->id), ID_SIZE);\n+  memcpy(destination + USERNAME_OFFSET, &(source->username), USERNAME_SIZE);\n+  memcpy(destination + EMAIL_OFFSET, &(source->email), EMAIL_SIZE);\n+}\n+\n+void deserialize_row(void* source, Row* destination) {\n+  memcpy(&(destination->id), source + ID_OFFSET, ID_SIZE);\n+  memcpy(&(destination->username), source + USERNAME_OFFSET, USERNAME_SIZE);\n+  memcpy(&(destination->email), source + EMAIL_OFFSET, EMAIL_SIZE);\n+}\n+\n+void* row_slot(Table* table, uint32_t row_num) {\n+  uint32_t page_num = row_num / ROWS_PER_PAGE;\n+  void* page = table->pages[page_num];\n+  if (!page) {\n+    // Allocate memory only when we try to access page\n+    page = table->pages[page_num] = malloc(PAGE_SIZE);\n+  }\n+  uint32_t row_offset = row_num % ROWS_PER_PAGE;\n+  uint32_t byte_offset = row_offset * ROW_SIZE;\n+  return page + byte_offset;\n+}\n+\n+Table* new_table() {\n+  Table* table = malloc(sizeof(Table));\n+  table->num_rows = 0;\n+\n+  return table;\n+}\n+\n InputBuffer* new_input_buffer() {\n   InputBuffer* input_buffer = malloc(sizeof(InputBuffer));\n   input_buffer->buffer = NULL;\n@@ -64,6 +137,12 @@ PrepareResult prepare_statement(InputBuffer* input_buffer,\n                                 Statement* statement) {\n   if (strncmp(input_buffer->buffer, \"insert\", 6) == 0) {\n     statement->type = STATEMENT_INSERT;\n+    int args_assigned = sscanf(\n+        input_buffer->buffer, \"insert %d %s %s\", &(statement->row_to_insert.id),\n+        statement->row_to_insert.username, statement->row_to_insert.email);\n+    if (args_assigned < 3) {\n+      return PREPARE_SYNTAX_ERROR;\n+    }\n     return PREPARE_SUCCESS;\n   }\n   if (strcmp(input_buffer->buffer, \"select\") == 0) {\n@@ -74,18 +153,39 @@ PrepareResult prepare_statement(InputBuffer* input_buffer,\n   return PREPARE_UNRECOGNIZED_STATEMENT;\n }\n \n-void execute_statement(Statement* statement) {\n+ExecuteResult execute_insert(Statement* statement, Table* table) {\n+  if (table->num_rows >= TABLE_MAX_ROWS) {\n+    return EXECUTE_TABLE_FULL;\n+  }\n+\n+  Row* row_to_insert = &(statement->row_to_insert);\n+\n+  serialize_row(row_to_insert, row_slot(table, table->num_rows));\n+  table->num_rows += 1;\n+\n+  return EXECUTE_SUCCESS;\n+}\n+\n+ExecuteResult execute_select(Statement* statement, Table* table) {\n+  Row row;\n+  for (uint32_t i = 0; i < table->num_rows; i++) {\n+    deserialize_row(row_slot(table, i), &row);\n+    print_row(&row);\n+  }\n+  return EXECUTE_SUCCESS;\n+}\n+\n+ExecuteResult execute_statement(Statement* statement, Table* table) {\n   switch (statement->type) {\n     case (STATEMENT_INSERT):\n-      printf(\"This is where we would do an insert.\\n\");\n-      break;\n+      return execute_insert(statement, table);\n     case (STATEMENT_SELECT):\n-      printf(\"This is where we would do a select.\\n\");\n-      break;\n+      return execute_select(statement, table);\n   }\n }\n \n int main(int argc, char* argv[]) {\n+  Table* table = new_table();\n   InputBuffer* input_buffer = new_input_buffer();\n   while (true) {\n     print_prompt();\n@@ -105,13 +205,22 @@ int main(int argc, char* argv[]) {\n     switch (prepare_statement(input_buffer, &statement)) {\n       case (PREPARE_SUCCESS):\n         break;\n+      case (PREPARE_SYNTAX_ERROR):\n+        printf(\"Syntax error. Could not parse statement.\\n\");\n+        continue;\n       case (PREPARE_UNRECOGNIZED_STATEMENT):\n         printf(\"Unrecognized keyword at start of '%s'.\\n\",\n                input_buffer->buffer);\n         continue;\n     }\n \n-    execute_statement(&statement);\n-    printf(\"Executed.\\n\");\n+    switch (execute_statement(&statement, table)) {\n+      case (EXECUTE_SUCCESS):\n+        printf(\"Executed.\\n\");\n+        break;\n+      case (EXECUTE_TABLE_FULL):\n+        printf(\"Error: Table full.\\n\");\n+        break;\n+    }\n   }\n }\n```","slug":"build_own_x/data_base/build_simple_database/Part3_an_in-memory_append-only_single-table_database","published":1,"updated":"2019-01-27T05:45:15.316Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgyk004y8seohc4sa3a1","content":"<h1 id=\"Part-3-一个在内存-仅追加的-单表数据库\"><a href=\"#Part-3-一个在内存-仅追加的-单表数据库\" class=\"headerlink\" title=\"Part 3 - 一个在内存, 仅追加的 单表数据库\"></a>Part 3 - 一个在内存, 仅追加的 单表数据库</h1><p>我们将继续为我们的数据库添加一些小功能, 通过在数据库中添加一些限制. 添加的功能如下:</p>\n<ul>\n<li>支持两个操作: 插入新的一行数据 and 打印所有行数据</li>\n<li>让其暂住在内存中(并没有存储到硬盘中)</li>\n<li>支持单个硬编码表</li>\n</ul>\n<p>我们的硬编码表主要用于存储用户信息, 看起来像这样</p>\n<table>\n<thead>\n<tr>\n<th>column</th>\n<th>type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>integer</td>\n</tr>\n<tr>\n<td>username</td>\n<td>varchar(32)</td>\n</tr>\n<tr>\n<td>email</td>\n<td>varchar(255)</td>\n</tr>\n</tbody>\n</table>\n<p>这是一个简单的 schema, 但是它支持多数据类型和多类型大小的文本类型.</p>\n<p>插入语法现在看起来像这样:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"number\">1</span> cstack foo@bar.com</span><br></pre></td></tr></table></figure></p>\n<p>这意味着我们需要去更新 <code>prepare_statement</code> 方法去解析参数.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"insert\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">+    <span class=\"keyword\">int</span> args_assigned = <span class=\"built_in\">sscanf</span>(</span><br><span class=\"line\">+        input_buffer-&gt;buffer, <span class=\"string\">\"insert %d %s %s\"</span>, &amp;(statement-&gt;row_to_insert.id),</span><br><span class=\"line\">+        statement-&gt;row_to_insert.username, statement-&gt;row_to_insert.email);</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (args_assigned &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"select\"</span>) == <span class=\"number\">0</span>) &#123;</span><br></pre></td></tr></table></figure>\n<p>我们声明一个新的 <code>Row</code> 结构放在 <code>statement</code> 下, 并将传入的参数放在其中.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> COLUMN_USERNAME_SIZE = <span class=\"number\">32</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> COLUMN_EMAIL_SIZE = <span class=\"number\">255</span>;</span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> &#123;</span></span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> id;</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> username[COLUMN_USERNAME_SIZE];</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> email[COLUMN_EMAIL_SIZE];</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> <span class=\"title\">Row</span>;</span></span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> &#123;</span></span><br><span class=\"line\">   StatementType type;</span><br><span class=\"line\">+  Row row_to_insert;  <span class=\"comment\">// only used by insert statement</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> <span class=\"title\">Statement</span>;</span></span><br></pre></td></tr></table></figure>\n<p>现在我们需要将传入的数据复制到 <code>Row</code> 中, 以此来代替表. Sqlite 使用 B 树来快速的查询,插入和删除. 我们将从简单的事情开始, 像 B 树结构是将数据行进行分组到页中, 但是在这里我们将用数组来代替 B 树.</p>\n<p>这是我的计划:</p>\n<ul>\n<li>将行存在在内存块中, 将其称为页面</li>\n<li>每一个页面都用行数据填充</li>\n<li>每一行都将序列化为紧凑形式</li>\n<li>页面仅根据需要分配</li>\n<li>保持固定大小的页面指针数组</li>\n</ul>\n<p>第一, 我们将定义一个紧凑的行表示.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"meta\">#<span class=\"meta-keyword\">define</span> size_of_attribute(Struct, Attribute) sizeof(((Struct*)0)-&gt;Attribute)</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ID_SIZE = size_of_attribute(Row, id);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> USERNAME_SIZE = size_of_attribute(Row, username);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> EMAIL_SIZE = size_of_attribute(Row, email);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ID_OFFSET = <span class=\"number\">0</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> USERNAME_OFFSET = ID_OFFSET + ID_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> EMAIL_OFFSET = USERNAME_OFFSET + USERNAME_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ROW_SIZE = ID_SIZE + USERNAME_SIZE + EMAIL_SIZE;</span><br></pre></td></tr></table></figure>\n<p>这也意味着我们序列化行数据将会看起来像下面这样:</p>\n<table>\n<thead>\n<tr>\n<th>column</th>\n<th>size (bytes)</th>\n<th>offset</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>4</td>\n<td>0</td>\n</tr>\n<tr>\n<td>username</td>\n<td>32</td>\n<td>4</td>\n</tr>\n<tr>\n<td>email</td>\n<td>255</td>\n<td>36</td>\n</tr>\n<tr>\n<td>total</td>\n<td>291</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>我们也需要使用代码将行数据转换成紧凑的形式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">serialize_row</span><span class=\"params\">(Row* source, <span class=\"keyword\">void</span>* destination)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(destination + ID_OFFSET, &amp;(source-&gt;id), ID_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(destination + USERNAME_OFFSET, &amp;(source-&gt;username), USERNAME_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(destination + EMAIL_OFFSET, &amp;(source-&gt;email), EMAIL_SIZE);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deserialize_row</span><span class=\"params\">(<span class=\"keyword\">void</span>* source, Row* destination)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;id), source + ID_OFFSET, ID_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;username), source + USERNAME_OFFSET, USERNAME_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;email), source + EMAIL_OFFSET, EMAIL_SIZE);</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>下一步, 一个表结构记录着到 page 的指针和有多少条记录的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PAGE_SIZE = <span class=\"number\">4096</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_PAGES = <span class=\"number\">100</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> &#123;</span></span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* pages[TABLE_MAX_PAGES];</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_rows;</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> <span class=\"title\">Table</span>;</span></span><br></pre></td></tr></table></figure>\n<p>我定义了一页的大小为4千字节, 因为这个和虚拟内存系统框架的页大小刚好一样. 这也意味在数据库中的一页对应着操作系统中的一页. 操作系统也是整页数据的进行着操作.</p>\n<p>我们随意的限制下页数为100页. 当我们使用数的结构的时候, 我们数据库最大的限制将会是文件的最大限制.(虽然我们依旧会去限制有多少页的数据驻留在内存中.)</p>\n<p>行不应该超过页的限制, 因为页面之间可能不会彼此相邻, 这样会使得读写更加方便.</p>\n<p>讲到这里, 我们将讲下如何计算特定的内存的位置.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">row_slot</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> row_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* page = table-&gt;pages[page_num];</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (!page) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Allocate memory only when we try to access page</span></span><br><span class=\"line\">+    page = table-&gt;pages[page_num] = <span class=\"built_in\">malloc</span>(PAGE_SIZE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>现在, 我们可以让 <code>execute_statement</code> 方法可以从 table 结构中读写</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute_statement</span><span class=\"params\">(Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\">ExecuteResult <span class=\"title\">execute_insert</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (table-&gt;num_rows &gt;= TABLE_MAX_ROWS) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> EXECUTE_TABLE_FULL;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  serialize_row(row_to_insert, row_slot(table, table-&gt;num_rows));</span><br><span class=\"line\">+  table-&gt;num_rows += <span class=\"number\">1</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">ExecuteResult <span class=\"title\">execute_select</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Row row;</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; table-&gt;num_rows; i++) &#123;</span><br><span class=\"line\">+    deserialize_row(row_slot(table, i), &amp;row);</span><br><span class=\"line\">+    print_row(&amp;row);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">ExecuteResult <span class=\"title\">execute_statement</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">switch</span> (statement-&gt;type) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">case</span> (STATEMENT_INSERT):</span><br><span class=\"line\">-      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do an insert.\\n\"</span>);</span><br><span class=\"line\">-      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> execute_insert(statement, table);</span><br><span class=\"line\">     <span class=\"keyword\">case</span> (STATEMENT_SELECT):</span><br><span class=\"line\">-      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do a select.\\n\"</span>);</span><br><span class=\"line\">-      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> execute_select(statement, table);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>最后, 我们需要初始化table 并且处理一些错误的情况.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ <span class=\"function\">Table* <span class=\"title\">new_table</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">+  Table* table = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Table));</span><br><span class=\"line\">+  table-&gt;num_rows = <span class=\"number\">0</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> table;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">+  Table* table = new_table();</span><br><span class=\"line\">   InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">     print_prompt();</span><br><span class=\"line\">@@ <span class=\"number\">-105</span>,<span class=\"number\">13</span> +<span class=\"number\">203</span>,<span class=\"number\">22</span> @@ <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (prepare_statement(input_buffer, &amp;statement)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_SUCCESS):</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_SYNTAX_ERROR):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Syntax error. Could not parse statement.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_UNRECOGNIZED_STATEMENT):</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized keyword at start of '%s'.\\n\"</span>,</span><br><span class=\"line\">                input_buffer-&gt;buffer);</span><br><span class=\"line\">         <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-    execute_statement(&amp;statement);</span><br><span class=\"line\">-    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Executed.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"keyword\">switch</span> (execute_statement(&amp;statement, table)) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (EXECUTE_SUCCESS):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Executed.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (EXECUTE_TABLE_FULL):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error: Table full.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>随着这些的修改,我们就能将数据保存到我们的数据库中了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ ./db</span><br><span class=\"line\">db &gt; insert 1 cstack foo@bar.com</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; insert 2 bob bob@example.com</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; select</span><br><span class=\"line\">(1, cstack, foo@bar.com)</span><br><span class=\"line\">(2, bob, bob@example.com)</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; insert foo bar 1</span><br><span class=\"line\">Syntax error. Could not parse statement.</span><br><span class=\"line\">db &gt; .<span class=\"built_in\">exit</span></span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure>\n<p>现在,我们可以写一些单元测试了, 原因有下面两点:</p>\n<ul>\n<li>我们将大幅的改变数据存储到我们的 table中, 并回归它们.</li>\n<li>还存在一些边缘情况我们还没有手动测试(如: 填满全表)</li>\n</ul>\n<p>我们将在下一节中完善这些问题, 现在, 让我们看看整体的修改吧:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> <span class=\"title\">InputBuffer</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"keyword\">enum</span> ExecuteResult_t &#123; EXECUTE_SUCCESS, EXECUTE_TABLE_FULL &#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> ExecuteResult_t ExecuteResult;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"keyword\">enum</span> MetaCommandResult_t &#123;</span><br><span class=\"line\">   META_COMMAND_SUCCESS,</span><br><span class=\"line\">   META_COMMAND_UNRECOGNIZED_COMMAND</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> MetaCommandResult_t MetaCommandResult;</span><br><span class=\"line\"> </span><br><span class=\"line\">-<span class=\"keyword\">enum</span> PrepareResult_t &#123; PREPARE_SUCCESS, PREPARE_UNRECOGNIZED_STATEMENT &#125;;</span><br><span class=\"line\">+<span class=\"keyword\">enum</span> PrepareResult_t &#123;</span><br><span class=\"line\">+  PREPARE_SUCCESS,</span><br><span class=\"line\">+  PREPARE_SYNTAX_ERROR,</span><br><span class=\"line\">+  PREPARE_UNRECOGNIZED_STATEMENT</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> PrepareResult_t PrepareResult;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">enum</span> StatementType_t &#123; STATEMENT_INSERT, STATEMENT_SELECT &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> StatementType_t StatementType;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> COLUMN_USERNAME_SIZE = <span class=\"number\">32</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> COLUMN_EMAIL_SIZE = <span class=\"number\">255</span>;</span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> &#123;</span></span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> id;</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> username[COLUMN_USERNAME_SIZE];</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> email[COLUMN_EMAIL_SIZE];</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> <span class=\"title\">Row</span>;</span></span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> &#123;</span></span><br><span class=\"line\">   StatementType type;</span><br><span class=\"line\">+  Row row_to_insert;  <span class=\"comment\">// only used by insert statement</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> <span class=\"title\">Statement</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"meta\">#<span class=\"meta-keyword\">define</span> size_of_attribute(Struct, Attribute) sizeof(((Struct*)0)-&gt;Attribute)</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ID_SIZE = size_of_attribute(Row, id);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> USERNAME_SIZE = size_of_attribute(Row, username);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> EMAIL_SIZE = size_of_attribute(Row, email);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ID_OFFSET = <span class=\"number\">0</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> USERNAME_OFFSET = ID_OFFSET + ID_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> EMAIL_OFFSET = USERNAME_OFFSET + USERNAME_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ROW_SIZE = ID_SIZE + USERNAME_SIZE + EMAIL_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PAGE_SIZE = <span class=\"number\">4096</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_PAGES = <span class=\"number\">100</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> &#123;</span></span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* pages[TABLE_MAX_PAGES];</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_rows;</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> <span class=\"title\">Table</span>;</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_row</span><span class=\"params\">(Row* row)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"(%d, %s, %s)\\n\"</span>, row-&gt;id, row-&gt;username, row-&gt;email);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">serialize_row</span><span class=\"params\">(Row* source, <span class=\"keyword\">void</span>* destination)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(destination + ID_OFFSET, &amp;(source-&gt;id), ID_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(destination + USERNAME_OFFSET, &amp;(source-&gt;username), USERNAME_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(destination + EMAIL_OFFSET, &amp;(source-&gt;email), EMAIL_SIZE);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deserialize_row</span><span class=\"params\">(<span class=\"keyword\">void</span>* source, Row* destination)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;id), source + ID_OFFSET, ID_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;username), source + USERNAME_OFFSET, USERNAME_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;email), source + EMAIL_OFFSET, EMAIL_SIZE);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">row_slot</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> row_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* page = table-&gt;pages[page_num];</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (!page) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Allocate memory only when we try to access page</span></span><br><span class=\"line\">+    page = table-&gt;pages[page_num] = <span class=\"built_in\">malloc</span>(PAGE_SIZE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">Table* <span class=\"title\">new_table</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">+  Table* table = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Table));</span><br><span class=\"line\">+  table-&gt;num_rows = <span class=\"number\">0</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> table;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\">InputBuffer* <span class=\"title\">new_input_buffer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   InputBuffer* input_buffer = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(InputBuffer));</span><br><span class=\"line\">   input_buffer-&gt;buffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">@@ <span class=\"number\">-64</span>,<span class=\"number\">6</span> +<span class=\"number\">137</span>,<span class=\"number\">12</span> @@ <span class=\"function\">PrepareResult <span class=\"title\">prepare_statement</span><span class=\"params\">(InputBuffer* input_buffer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                 Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"insert\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">+    <span class=\"keyword\">int</span> args_assigned = <span class=\"built_in\">sscanf</span>(</span><br><span class=\"line\">+        input_buffer-&gt;buffer, <span class=\"string\">\"insert %d %s %s\"</span>, &amp;(statement-&gt;row_to_insert.id),</span><br><span class=\"line\">+        statement-&gt;row_to_insert.username, statement-&gt;row_to_insert.email);</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (args_assigned &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"select\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">@@ <span class=\"number\">-74</span>,<span class=\"number\">18</span> +<span class=\"number\">153</span>,<span class=\"number\">39</span> @@ <span class=\"function\">PrepareResult <span class=\"title\">prepare_statement</span><span class=\"params\">(InputBuffer* input_buffer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">   <span class=\"keyword\">return</span> PREPARE_UNRECOGNIZED_STATEMENT;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> &#125;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">-<span class=\"keyword\">void</span> execute_statement(Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\">ExecuteResult <span class=\"title\">execute_insert</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (table-&gt;num_rows &gt;= TABLE_MAX_ROWS) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> EXECUTE_TABLE_FULL;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  serialize_row(row_to_insert, row_slot(table, table-&gt;num_rows));</span><br><span class=\"line\">+  table-&gt;num_rows += <span class=\"number\">1</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">ExecuteResult <span class=\"title\">execute_select</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Row row;</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; table-&gt;num_rows; i++) &#123;</span><br><span class=\"line\">+    deserialize_row(row_slot(table, i), &amp;row);</span><br><span class=\"line\">+    print_row(&amp;row);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">ExecuteResult <span class=\"title\">execute_statement</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">switch</span> (statement-&gt;type) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">case</span> (STATEMENT_INSERT):</span><br><span class=\"line\">-      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do an insert.\\n\"</span>);</span><br><span class=\"line\">-      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> execute_insert(statement, table);</span><br><span class=\"line\">     <span class=\"keyword\">case</span> (STATEMENT_SELECT):</span><br><span class=\"line\">-      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do a select.\\n\"</span>);</span><br><span class=\"line\">-      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> execute_select(statement, table);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">+  Table* table = new_table();</span><br><span class=\"line\">   InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">     print_prompt();</span><br><span class=\"line\">@@ <span class=\"number\">-105</span>,<span class=\"number\">13</span> +<span class=\"number\">205</span>,<span class=\"number\">22</span> @@ <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (prepare_statement(input_buffer, &amp;statement)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_SUCCESS):</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_SYNTAX_ERROR):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Syntax error. Could not parse statement.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_UNRECOGNIZED_STATEMENT):</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized keyword at start of '%s'.\\n\"</span>,</span><br><span class=\"line\">                input_buffer-&gt;buffer);</span><br><span class=\"line\">         <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-    execute_statement(&amp;statement);</span><br><span class=\"line\">-    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Executed.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"keyword\">switch</span> (execute_statement(&amp;statement, table)) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (EXECUTE_SUCCESS):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Executed.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (EXECUTE_TABLE_FULL):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error: Table full.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Part-3-一个在内存-仅追加的-单表数据库\"><a href=\"#Part-3-一个在内存-仅追加的-单表数据库\" class=\"headerlink\" title=\"Part 3 - 一个在内存, 仅追加的 单表数据库\"></a>Part 3 - 一个在内存, 仅追加的 单表数据库</h1><p>我们将继续为我们的数据库添加一些小功能, 通过在数据库中添加一些限制. 添加的功能如下:</p>\n<ul>\n<li>支持两个操作: 插入新的一行数据 and 打印所有行数据</li>\n<li>让其暂住在内存中(并没有存储到硬盘中)</li>\n<li>支持单个硬编码表</li>\n</ul>\n<p>我们的硬编码表主要用于存储用户信息, 看起来像这样</p>\n<table>\n<thead>\n<tr>\n<th>column</th>\n<th>type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>integer</td>\n</tr>\n<tr>\n<td>username</td>\n<td>varchar(32)</td>\n</tr>\n<tr>\n<td>email</td>\n<td>varchar(255)</td>\n</tr>\n</tbody>\n</table>\n<p>这是一个简单的 schema, 但是它支持多数据类型和多类型大小的文本类型.</p>\n<p>插入语法现在看起来像这样:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"number\">1</span> cstack foo@bar.com</span><br></pre></td></tr></table></figure></p>\n<p>这意味着我们需要去更新 <code>prepare_statement</code> 方法去解析参数.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"insert\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">+    <span class=\"keyword\">int</span> args_assigned = <span class=\"built_in\">sscanf</span>(</span><br><span class=\"line\">+        input_buffer-&gt;buffer, <span class=\"string\">\"insert %d %s %s\"</span>, &amp;(statement-&gt;row_to_insert.id),</span><br><span class=\"line\">+        statement-&gt;row_to_insert.username, statement-&gt;row_to_insert.email);</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (args_assigned &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"select\"</span>) == <span class=\"number\">0</span>) &#123;</span><br></pre></td></tr></table></figure>\n<p>我们声明一个新的 <code>Row</code> 结构放在 <code>statement</code> 下, 并将传入的参数放在其中.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> COLUMN_USERNAME_SIZE = <span class=\"number\">32</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> COLUMN_EMAIL_SIZE = <span class=\"number\">255</span>;</span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> &#123;</span></span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> id;</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> username[COLUMN_USERNAME_SIZE];</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> email[COLUMN_EMAIL_SIZE];</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> <span class=\"title\">Row</span>;</span></span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> &#123;</span></span><br><span class=\"line\">   StatementType type;</span><br><span class=\"line\">+  Row row_to_insert;  <span class=\"comment\">// only used by insert statement</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> <span class=\"title\">Statement</span>;</span></span><br></pre></td></tr></table></figure>\n<p>现在我们需要将传入的数据复制到 <code>Row</code> 中, 以此来代替表. Sqlite 使用 B 树来快速的查询,插入和删除. 我们将从简单的事情开始, 像 B 树结构是将数据行进行分组到页中, 但是在这里我们将用数组来代替 B 树.</p>\n<p>这是我的计划:</p>\n<ul>\n<li>将行存在在内存块中, 将其称为页面</li>\n<li>每一个页面都用行数据填充</li>\n<li>每一行都将序列化为紧凑形式</li>\n<li>页面仅根据需要分配</li>\n<li>保持固定大小的页面指针数组</li>\n</ul>\n<p>第一, 我们将定义一个紧凑的行表示.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"meta\">#<span class=\"meta-keyword\">define</span> size_of_attribute(Struct, Attribute) sizeof(((Struct*)0)-&gt;Attribute)</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ID_SIZE = size_of_attribute(Row, id);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> USERNAME_SIZE = size_of_attribute(Row, username);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> EMAIL_SIZE = size_of_attribute(Row, email);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ID_OFFSET = <span class=\"number\">0</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> USERNAME_OFFSET = ID_OFFSET + ID_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> EMAIL_OFFSET = USERNAME_OFFSET + USERNAME_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ROW_SIZE = ID_SIZE + USERNAME_SIZE + EMAIL_SIZE;</span><br></pre></td></tr></table></figure>\n<p>这也意味着我们序列化行数据将会看起来像下面这样:</p>\n<table>\n<thead>\n<tr>\n<th>column</th>\n<th>size (bytes)</th>\n<th>offset</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>4</td>\n<td>0</td>\n</tr>\n<tr>\n<td>username</td>\n<td>32</td>\n<td>4</td>\n</tr>\n<tr>\n<td>email</td>\n<td>255</td>\n<td>36</td>\n</tr>\n<tr>\n<td>total</td>\n<td>291</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>我们也需要使用代码将行数据转换成紧凑的形式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">serialize_row</span><span class=\"params\">(Row* source, <span class=\"keyword\">void</span>* destination)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(destination + ID_OFFSET, &amp;(source-&gt;id), ID_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(destination + USERNAME_OFFSET, &amp;(source-&gt;username), USERNAME_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(destination + EMAIL_OFFSET, &amp;(source-&gt;email), EMAIL_SIZE);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deserialize_row</span><span class=\"params\">(<span class=\"keyword\">void</span>* source, Row* destination)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;id), source + ID_OFFSET, ID_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;username), source + USERNAME_OFFSET, USERNAME_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;email), source + EMAIL_OFFSET, EMAIL_SIZE);</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>下一步, 一个表结构记录着到 page 的指针和有多少条记录的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PAGE_SIZE = <span class=\"number\">4096</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_PAGES = <span class=\"number\">100</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> &#123;</span></span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* pages[TABLE_MAX_PAGES];</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_rows;</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> <span class=\"title\">Table</span>;</span></span><br></pre></td></tr></table></figure>\n<p>我定义了一页的大小为4千字节, 因为这个和虚拟内存系统框架的页大小刚好一样. 这也意味在数据库中的一页对应着操作系统中的一页. 操作系统也是整页数据的进行着操作.</p>\n<p>我们随意的限制下页数为100页. 当我们使用数的结构的时候, 我们数据库最大的限制将会是文件的最大限制.(虽然我们依旧会去限制有多少页的数据驻留在内存中.)</p>\n<p>行不应该超过页的限制, 因为页面之间可能不会彼此相邻, 这样会使得读写更加方便.</p>\n<p>讲到这里, 我们将讲下如何计算特定的内存的位置.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">row_slot</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> row_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* page = table-&gt;pages[page_num];</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (!page) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Allocate memory only when we try to access page</span></span><br><span class=\"line\">+    page = table-&gt;pages[page_num] = <span class=\"built_in\">malloc</span>(PAGE_SIZE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>现在, 我们可以让 <code>execute_statement</code> 方法可以从 table 结构中读写</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute_statement</span><span class=\"params\">(Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\">ExecuteResult <span class=\"title\">execute_insert</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (table-&gt;num_rows &gt;= TABLE_MAX_ROWS) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> EXECUTE_TABLE_FULL;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  serialize_row(row_to_insert, row_slot(table, table-&gt;num_rows));</span><br><span class=\"line\">+  table-&gt;num_rows += <span class=\"number\">1</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">ExecuteResult <span class=\"title\">execute_select</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Row row;</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; table-&gt;num_rows; i++) &#123;</span><br><span class=\"line\">+    deserialize_row(row_slot(table, i), &amp;row);</span><br><span class=\"line\">+    print_row(&amp;row);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">ExecuteResult <span class=\"title\">execute_statement</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">switch</span> (statement-&gt;type) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">case</span> (STATEMENT_INSERT):</span><br><span class=\"line\">-      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do an insert.\\n\"</span>);</span><br><span class=\"line\">-      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> execute_insert(statement, table);</span><br><span class=\"line\">     <span class=\"keyword\">case</span> (STATEMENT_SELECT):</span><br><span class=\"line\">-      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do a select.\\n\"</span>);</span><br><span class=\"line\">-      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> execute_select(statement, table);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>最后, 我们需要初始化table 并且处理一些错误的情况.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ <span class=\"function\">Table* <span class=\"title\">new_table</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">+  Table* table = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Table));</span><br><span class=\"line\">+  table-&gt;num_rows = <span class=\"number\">0</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> table;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">+  Table* table = new_table();</span><br><span class=\"line\">   InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">     print_prompt();</span><br><span class=\"line\">@@ <span class=\"number\">-105</span>,<span class=\"number\">13</span> +<span class=\"number\">203</span>,<span class=\"number\">22</span> @@ <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (prepare_statement(input_buffer, &amp;statement)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_SUCCESS):</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_SYNTAX_ERROR):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Syntax error. Could not parse statement.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_UNRECOGNIZED_STATEMENT):</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized keyword at start of '%s'.\\n\"</span>,</span><br><span class=\"line\">                input_buffer-&gt;buffer);</span><br><span class=\"line\">         <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-    execute_statement(&amp;statement);</span><br><span class=\"line\">-    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Executed.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"keyword\">switch</span> (execute_statement(&amp;statement, table)) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (EXECUTE_SUCCESS):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Executed.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (EXECUTE_TABLE_FULL):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error: Table full.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>随着这些的修改,我们就能将数据保存到我们的数据库中了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ ./db</span><br><span class=\"line\">db &gt; insert 1 cstack foo@bar.com</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; insert 2 bob bob@example.com</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; select</span><br><span class=\"line\">(1, cstack, foo@bar.com)</span><br><span class=\"line\">(2, bob, bob@example.com)</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; insert foo bar 1</span><br><span class=\"line\">Syntax error. Could not parse statement.</span><br><span class=\"line\">db &gt; .<span class=\"built_in\">exit</span></span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure>\n<p>现在,我们可以写一些单元测试了, 原因有下面两点:</p>\n<ul>\n<li>我们将大幅的改变数据存储到我们的 table中, 并回归它们.</li>\n<li>还存在一些边缘情况我们还没有手动测试(如: 填满全表)</li>\n</ul>\n<p>我们将在下一节中完善这些问题, 现在, 让我们看看整体的修改吧:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> <span class=\"title\">InputBuffer</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"keyword\">enum</span> ExecuteResult_t &#123; EXECUTE_SUCCESS, EXECUTE_TABLE_FULL &#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> ExecuteResult_t ExecuteResult;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"keyword\">enum</span> MetaCommandResult_t &#123;</span><br><span class=\"line\">   META_COMMAND_SUCCESS,</span><br><span class=\"line\">   META_COMMAND_UNRECOGNIZED_COMMAND</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> MetaCommandResult_t MetaCommandResult;</span><br><span class=\"line\"> </span><br><span class=\"line\">-<span class=\"keyword\">enum</span> PrepareResult_t &#123; PREPARE_SUCCESS, PREPARE_UNRECOGNIZED_STATEMENT &#125;;</span><br><span class=\"line\">+<span class=\"keyword\">enum</span> PrepareResult_t &#123;</span><br><span class=\"line\">+  PREPARE_SUCCESS,</span><br><span class=\"line\">+  PREPARE_SYNTAX_ERROR,</span><br><span class=\"line\">+  PREPARE_UNRECOGNIZED_STATEMENT</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> PrepareResult_t PrepareResult;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">enum</span> StatementType_t &#123; STATEMENT_INSERT, STATEMENT_SELECT &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> StatementType_t StatementType;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> COLUMN_USERNAME_SIZE = <span class=\"number\">32</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> COLUMN_EMAIL_SIZE = <span class=\"number\">255</span>;</span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> &#123;</span></span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> id;</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> username[COLUMN_USERNAME_SIZE];</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> email[COLUMN_EMAIL_SIZE];</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> <span class=\"title\">Row</span>;</span></span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> &#123;</span></span><br><span class=\"line\">   StatementType type;</span><br><span class=\"line\">+  Row row_to_insert;  <span class=\"comment\">// only used by insert statement</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Statement_t</span> <span class=\"title\">Statement</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"meta\">#<span class=\"meta-keyword\">define</span> size_of_attribute(Struct, Attribute) sizeof(((Struct*)0)-&gt;Attribute)</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ID_SIZE = size_of_attribute(Row, id);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> USERNAME_SIZE = size_of_attribute(Row, username);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> EMAIL_SIZE = size_of_attribute(Row, email);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ID_OFFSET = <span class=\"number\">0</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> USERNAME_OFFSET = ID_OFFSET + ID_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> EMAIL_OFFSET = USERNAME_OFFSET + USERNAME_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ROW_SIZE = ID_SIZE + USERNAME_SIZE + EMAIL_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PAGE_SIZE = <span class=\"number\">4096</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_PAGES = <span class=\"number\">100</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> &#123;</span></span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* pages[TABLE_MAX_PAGES];</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_rows;</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> <span class=\"title\">Table</span>;</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_row</span><span class=\"params\">(Row* row)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"(%d, %s, %s)\\n\"</span>, row-&gt;id, row-&gt;username, row-&gt;email);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">serialize_row</span><span class=\"params\">(Row* source, <span class=\"keyword\">void</span>* destination)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(destination + ID_OFFSET, &amp;(source-&gt;id), ID_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(destination + USERNAME_OFFSET, &amp;(source-&gt;username), USERNAME_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(destination + EMAIL_OFFSET, &amp;(source-&gt;email), EMAIL_SIZE);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deserialize_row</span><span class=\"params\">(<span class=\"keyword\">void</span>* source, Row* destination)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;id), source + ID_OFFSET, ID_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;username), source + USERNAME_OFFSET, USERNAME_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;email), source + EMAIL_OFFSET, EMAIL_SIZE);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">row_slot</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> row_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* page = table-&gt;pages[page_num];</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (!page) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Allocate memory only when we try to access page</span></span><br><span class=\"line\">+    page = table-&gt;pages[page_num] = <span class=\"built_in\">malloc</span>(PAGE_SIZE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">Table* <span class=\"title\">new_table</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">+  Table* table = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Table));</span><br><span class=\"line\">+  table-&gt;num_rows = <span class=\"number\">0</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> table;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\">InputBuffer* <span class=\"title\">new_input_buffer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   InputBuffer* input_buffer = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(InputBuffer));</span><br><span class=\"line\">   input_buffer-&gt;buffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">@@ <span class=\"number\">-64</span>,<span class=\"number\">6</span> +<span class=\"number\">137</span>,<span class=\"number\">12</span> @@ <span class=\"function\">PrepareResult <span class=\"title\">prepare_statement</span><span class=\"params\">(InputBuffer* input_buffer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                 Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"insert\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">+    <span class=\"keyword\">int</span> args_assigned = <span class=\"built_in\">sscanf</span>(</span><br><span class=\"line\">+        input_buffer-&gt;buffer, <span class=\"string\">\"insert %d %s %s\"</span>, &amp;(statement-&gt;row_to_insert.id),</span><br><span class=\"line\">+        statement-&gt;row_to_insert.username, statement-&gt;row_to_insert.email);</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (args_assigned &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"select\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">@@ <span class=\"number\">-74</span>,<span class=\"number\">18</span> +<span class=\"number\">153</span>,<span class=\"number\">39</span> @@ <span class=\"function\">PrepareResult <span class=\"title\">prepare_statement</span><span class=\"params\">(InputBuffer* input_buffer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">   <span class=\"keyword\">return</span> PREPARE_UNRECOGNIZED_STATEMENT;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> &#125;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">-<span class=\"keyword\">void</span> execute_statement(Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\">ExecuteResult <span class=\"title\">execute_insert</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (table-&gt;num_rows &gt;= TABLE_MAX_ROWS) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> EXECUTE_TABLE_FULL;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  serialize_row(row_to_insert, row_slot(table, table-&gt;num_rows));</span><br><span class=\"line\">+  table-&gt;num_rows += <span class=\"number\">1</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">ExecuteResult <span class=\"title\">execute_select</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Row row;</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; table-&gt;num_rows; i++) &#123;</span><br><span class=\"line\">+    deserialize_row(row_slot(table, i), &amp;row);</span><br><span class=\"line\">+    print_row(&amp;row);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">ExecuteResult <span class=\"title\">execute_statement</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">switch</span> (statement-&gt;type) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">case</span> (STATEMENT_INSERT):</span><br><span class=\"line\">-      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do an insert.\\n\"</span>);</span><br><span class=\"line\">-      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> execute_insert(statement, table);</span><br><span class=\"line\">     <span class=\"keyword\">case</span> (STATEMENT_SELECT):</span><br><span class=\"line\">-      <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is where we would do a select.\\n\"</span>);</span><br><span class=\"line\">-      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> execute_select(statement, table);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">+  Table* table = new_table();</span><br><span class=\"line\">   InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">     print_prompt();</span><br><span class=\"line\">@@ <span class=\"number\">-105</span>,<span class=\"number\">13</span> +<span class=\"number\">205</span>,<span class=\"number\">22</span> @@ <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (prepare_statement(input_buffer, &amp;statement)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_SUCCESS):</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_SYNTAX_ERROR):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Syntax error. Could not parse statement.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_UNRECOGNIZED_STATEMENT):</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unrecognized keyword at start of '%s'.\\n\"</span>,</span><br><span class=\"line\">                input_buffer-&gt;buffer);</span><br><span class=\"line\">         <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-    execute_statement(&amp;statement);</span><br><span class=\"line\">-    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Executed.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"keyword\">switch</span> (execute_statement(&amp;statement, table)) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (EXECUTE_SUCCESS):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Executed.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (EXECUTE_TABLE_FULL):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error: Table full.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>"},{"title":"Part 4 - 第一个单元测试类(和一些 Bugs)","date":"2019-01-28T08:11:20.000Z","_content":"\nPart 4 - 第一个单元测试类(和一些 Bugs)\n\n我们可以插入一些行数据到我们的数据库中并且打印它们, 现在让我们花点时间测试下我们的代码吧.\n\n我将会使用 [rspec](http://rspec.info/) 来进行测试, 因为对它们比较熟悉, 并且具有可读性.\n\n我定义了一个简短的帮助函数向 db 程序发送一个命令集合, 然后为输出做短语.\n\n```ruby\ndescribe 'database' do\n  def run_script(commands)\n    raw_output = nil\n    IO.popen(\"./db\", \"r+\") do |pipe|\n      commands.each do |command|\n        pipe.puts command\n      end\n\n      pipe.close_write\n\n      # Read entire output\n      raw_output = pipe.gets(nil)\n    end\n    raw_output.split(\"\\n\")\n  end\n\n  it 'inserts and retreives a row' do\n    result = run_script([\n      \"insert 1 user1 person1@example.com\",\n      \"select\",\n      \".exit\",\n    ])\n    expect(result).to match_array([\n      \"db > Executed.\",\n      \"db > (1, user1, person1@example.com)\",\n      \"Executed.\",\n      \"db > \",\n    ])\n  end\nend\n```\n\n这个简单的测试可以帮助我们确定输入和输出对应的内容.\n\n```sh\nbundle exec rspec\n.\n\nFinished in 0.00871 seconds (files took 0.09506 seconds to load)\n1 example, 0 failures\n```\n\n现在将大量的数据插入数据库中变的可行了:\n\n```ruby\nit 'prints error message when table is full' do\n  script = (1..1401).map do |i|\n    \"insert #{i} user#{i} person#{i}@example.com\"\n  end\n  script << \".exit\"\n  result = run_script(script)\n  expect(result[-2]).to eq('db > Error: Table full.')\nend\n```\n\n再次跑测试用例..\n\n```sh\nbundle exec rspec\n..\n\nFinished in 0.01553 seconds (files took 0.08156 seconds to load)\n2 examples, 0 failures\n```\n\n美滋滋, 它是能正常工作的! 我们的 db 现在可以存错1400条数据, 因为我们设置了最大页面数是100, 且一页有 14 条数据.\n\n阅读到这里, 我意识到我们可能没有办法正常的处理文本数据, 我们可以从下面的例子中体现出来.\n\n```c\nit 'allows inserting strings that are the maximum length' do\n  long_username = \"a\"*32\n  long_email = \"a\"*255\n  script = [\n    \"insert 1 #{long_username} #{long_email}\",\n    \"select\",\n    \".exit\",\n  ]\n  result = run_script(script)\n  expect(result).to match_array([\n    \"db > Executed.\",\n    \"db > (1, #{long_username}, #{long_email})\",\n    \"Executed.\",\n    \"db > \",\n  ])\nend\n```\n\n测试失败了!\n\n```sh\nFailures:\n\n  1) database allows inserting strings that are the maximum length\n     Failure/Error: raw_output.split(\"\\n\")\n\n     ArgumentError:\n       invalid byte sequence in UTF-8\n     # ./spec/main_spec.rb:14:in `split'\n     # ./spec/main_spec.rb:14:in `run_script'\n     # ./spec/main_spec.rb:48:in `block (2 levels) in <top (required)>'\n```\n\n如果我们手动重试呢? 当我们尝试打印出行时，我们会看到有一些奇怪的字符\n\n```sh\ndb > insert 1 aaaaa... aaaaa...\nExecuted.\ndb > select\n(1, aaaaa...aaa\\�, aaaaa...aaa\\�)\nExecuted.\ndb >\n```\n\n这是咋回事呢? 如果你看一下我们对Row的定义，我们只为用户名分配32个字节，为电子邮件分配255个字节. 但是C字符串应该以空字符结尾，我们没有为其分配空间。解决方案是分配一个额外的字节:\n\n```c\nconst uint32_t COLUMN_EMAIL_SIZE = 255;\n struct Row_t {\n   uint32_t id;\n-  char username[COLUMN_USERNAME_SIZE];\n-  char email[COLUMN_EMAIL_SIZE];\n+  char username[COLUMN_USERNAME_SIZE + 1];\n+  char email[COLUMN_EMAIL_SIZE + 1];\n };\n typedef struct Row_t Row;\n```\n\n确定一下我们确实修复了它:\n```sh\nbundle exec rspec\n...\n\nFinished in 0.0188 seconds (files took 0.08516 seconds to load)\n3 examples, 0 failures\n```\n\n我们应该不允许插入过长的用户名和邮件, `spec` 看起来就像这样:\n\n```ruby\nit 'prints error message if strings are too long' do\n  long_username = \"a\"*33\n  long_email = \"a\"*256\n  script = [\n    \"insert 1 #{long_username} #{long_email}\",\n    \"select\",\n    \".exit\",\n  ]\n  result = run_script(script)\n  expect(result).to match_array([\n    \"db > String is too long.\",\n    \"db > Executed.\",\n    \"db > \",\n  ])\nend\n```\n\n因此我们需要升级下我们的解析器, 我们当前用的是 `scanf()` 方法:\n\n```c\nif (strncmp(input_buffer->buffer, \"insert\", 6) == 0) {\n  statement->type = STATEMENT_INSERT;\n  int args_assigned = sscanf(\n      input_buffer->buffer, \"insert %d %s %s\", &(statement->row_to_insert.id),\n      statement->row_to_insert.username, statement->row_to_insert.email);\n  if (args_assigned < 3) {\n    return PREPARE_SYNTAX_ERROR;\n  }\n  return PREPARE_SUCCESS;\n}\n```\n\n但是 `scanf` 存在一些缺点. 如果读取的字符串大于缓冲区, 它将导致缓冲区溢出问题, 并且开始写到不期望的地方. 我们想检查下每一个字符串的长度在将数据拷贝到行结构之前. 我们需要使用空格去划分它.\n\n我将使用 `strtok()` 方法, 我想这应该不难理解.\n\n```c\n+PrepareResult prepare_insert(InputBuffer* input_buffer, Statement* statement) {\n+  statement->type = STATEMENT_INSERT;\n+\n+  char* keyword = strtok(input_buffer->buffer, \" \");\n+  char* id_string = strtok(NULL, \" \");\n+  char* username = strtok(NULL, \" \");\n+  char* email = strtok(NULL, \" \");\n+\n+  if (id_string == NULL || username == NULL || email == NULL) {\n+    return PREPARE_SYNTAX_ERROR;\n+  }\n+\n+  int id = atoi(id_string);\n+  if (strlen(username) > COLUMN_USERNAME_SIZE) {\n+    return PREPARE_STRING_TOO_LONG;\n+  }\n+  if (strlen(email) > COLUMN_EMAIL_SIZE) {\n+    return PREPARE_STRING_TOO_LONG;\n+  }\n+\n+  statement->row_to_insert.id = id;\n+  strcpy(statement->row_to_insert.username, username);\n+  strcpy(statement->row_to_insert.email, email);\n+\n+  return PREPARE_SUCCESS;\n+}\n+\n PrepareResult prepare_statement(InputBuffer* input_buffer,\n                                 Statement* statement) {\n   if (strncmp(input_buffer->buffer, \"insert\", 6) == 0) {\n+    return prepare_insert(input_buffer, statement);\n-    statement->type = STATEMENT_INSERT;\n-    int args_assigned = sscanf(\n-        input_buffer->buffer, \"insert %d %s %s\", &(statement->row_to_insert.id),\n-        statement->row_to_insert.username, statement->row_to_insert.email);\n-    if (args_assigned < 3) {\n-      return PREPARE_SYNTAX_ERROR;\n-    }\n-    return PREPARE_SUCCESS;\n   }\n```\n\n在输入缓冲区上连续调用strtok会在到达分隔符（在我们的例子中为空格）时通过插入空字符将其分解为子字符串。它返回指向子字符串开头的指针。\n\n我们可以在每个文本值上调用`strlen()`来查看它是否太长。\n\n我们可以像处理任何其他错误代码一样处理错误：\n\n```c\nenum PrepareResult_t {\n   PREPARE_SUCCESS,\n+  PREPARE_STRING_TOO_LONG,\n   PREPARE_SYNTAX_ERROR,\n   PREPARE_UNRECOGNIZED_STATEMENT\n };\n```\n\n```c\nswitch (prepare_statement(input_buffer, &statement)) {\n   case (PREPARE_SUCCESS):\n     break;\n+  case (PREPARE_STRING_TOO_LONG):\n+    printf(\"String is too long.\\n\");\n+    continue;\n   case (PREPARE_SYNTAX_ERROR):\n     printf(\"Syntax error. Could not parse statement.\\n\");\n     continue;\n```\n\n使我们的测试用例通过\n\n```sh\nbundle exec rspec\n....\n\nFinished in 0.02284 seconds (files took 0.116 seconds to load)\n4 examples, 0 failures\n```\n\n虽然,我们在这里了,但是我们还有一个错误需要处理:\n\n```ruby\nit 'prints an error message if id is negative' do\n  script = [\n    \"insert -1 cstack foo@bar.com\",\n    \"select\",\n    \".exit\",\n  ]\n  result = run_script(script)\n  expect(result).to match_array([\n    \"db > ID must be positive.\",\n    \"db > Executed.\",\n    \"db > \",\n  ])\nend\n```\n\n```c\nenum PrepareResult_t {\n   PREPARE_SUCCESS,\n+  PREPARE_NEGATIVE_ID,\n   PREPARE_STRING_TOO_LONG,\n   PREPARE_SYNTAX_ERROR,\n   PREPARE_UNRECOGNIZED_STATEMENT\n@@ -148,9 +147,6 @@ PrepareResult prepare_insert(InputBuffer* input_buffer, Statement* statement) {\n   }\n\n   int id = atoi(id_string);\n+  if (id < 0) {\n+    return PREPARE_NEGATIVE_ID;\n+  }\n   if (strlen(username) > COLUMN_USERNAME_SIZE) {\n     return PREPARE_STRING_TOO_LONG;\n   }\n@@ -230,9 +226,6 @@ int main(int argc, char* argv[]) {\n     switch (prepare_statement(input_buffer, &statement)) {\n       case (PREPARE_SUCCESS):\n         break;\n+      case (PREPARE_NEGATIVE_ID):\n+        printf(\"ID must be positive.\\n\");\n+        continue;\n       case (PREPARE_STRING_TOO_LONG):\n         printf(\"String is too long.\\n\");\n         continue;\n```\n\n好的,现在应该测试的差不多了, 下一步,将是一个非常重要的特性: 持久化! 我们将保存我们的数据到一个文件中并且将其读回到内存中.\n\n代码完整的修改部分:\n\n```c\nenum PrepareResult_t {\n   PREPARE_SUCCESS,\n+  PREPARE_NEGATIVE_ID,\n+  PREPARE_STRING_TOO_LONG,\n   PREPARE_SYNTAX_ERROR,\n   PREPARE_UNRECOGNIZED_STATEMENT\n };\n@@ -33,8 +35,8 @@ const uint32_t COLUMN_USERNAME_SIZE = 32;\n const uint32_t COLUMN_EMAIL_SIZE = 255;\n struct Row_t {\n   uint32_t id;\n-  char username[COLUMN_USERNAME_SIZE];\n-  char email[COLUMN_EMAIL_SIZE];\n+  char username[COLUMN_USERNAME_SIZE + 1];\n+  char email[COLUMN_EMAIL_SIZE + 1];\n };\n typedef struct Row_t Row;\n \n@@ -133,17 +135,40 @@ MetaCommandResult do_meta_command(InputBuffer* input_buffer) {\n   }\n }\n \n+PrepareResult prepare_insert(InputBuffer* input_buffer, Statement* statement) {\n+  statement->type = STATEMENT_INSERT;\n+\n+  char* keyword = strtok(input_buffer->buffer, \" \");\n+  char* id_string = strtok(NULL, \" \");\n+  char* username = strtok(NULL, \" \");\n+  char* email = strtok(NULL, \" \");\n+\n+  if (id_string == NULL || username == NULL || email == NULL) {\n+    return PREPARE_SYNTAX_ERROR;\n+  }\n+\n+  int id = atoi(id_string);\n+  if (id < 0) {\n+    return PREPARE_NEGATIVE_ID;\n+  }\n+  if (strlen(username) > COLUMN_USERNAME_SIZE) {\n+    return PREPARE_STRING_TOO_LONG;\n+  }\n+  if (strlen(email) > COLUMN_EMAIL_SIZE) {\n+    return PREPARE_STRING_TOO_LONG;\n+  }\n+\n+  statement->row_to_insert.id = id;\n+  strcpy(statement->row_to_insert.username, username);\n+  strcpy(statement->row_to_insert.email, email);\n+\n+  return PREPARE_SUCCESS;\n+}\n+\n PrepareResult prepare_statement(InputBuffer* input_buffer,\n                                 Statement* statement) {\n   if (strncmp(input_buffer->buffer, \"insert\", 6) == 0) {\n-    statement->type = STATEMENT_INSERT;\n-    int args_assigned = sscanf(\n-        input_buffer->buffer, \"insert %d %s %s\", &(statement->row_to_insert.id),\n-        statement->row_to_insert.username, statement->row_to_insert.email);\n-    if (args_assigned < 3) {\n-      return PREPARE_SYNTAX_ERROR;\n-    }\n-    return PREPARE_SUCCESS;\n+    return prepare_insert(input_buffer, statement);\n   }\n   if (strcmp(input_buffer->buffer, \"select\") == 0) {\n     statement->type = STATEMENT_SELECT;\n@@ -205,6 +230,12 @@ int main(int argc, char* argv[]) {\n     switch (prepare_statement(input_buffer, &statement)) {\n       case (PREPARE_SUCCESS):\n         break;\n+      case (PREPARE_NEGATIVE_ID):\n+        printf(\"ID must be positive.\\n\");\n+        continue;\n+      case (PREPARE_STRING_TOO_LONG):\n+        printf(\"String is too long.\\n\");\n+        continue;\n       case (PREPARE_SYNTAX_ERROR):\n         printf(\"Syntax error. Could not parse statement.\\n\");\n         continue;\n```\n\n我们添加的单元测试:\n\n```ruby\n+describe 'database' do\n+  def run_script(commands)\n+    raw_output = nil\n+    IO.popen(\"./db\", \"r+\") do |pipe|\n+      commands.each do |command|\n+        pipe.puts command\n+      end\n+\n+      pipe.close_write\n+\n+      # Read entire output\n+      raw_output = pipe.gets(nil)\n+    end\n+    raw_output.split(\"\\n\")\n+  end\n+\n+  it 'inserts and retreives a row' do\n+    result = run_script([\n+      \"insert 1 user1 person1@example.com\",\n+      \"select\",\n+      \".exit\",\n+    ])\n+    expect(result).to match_array([\n+      \"db > Executed.\",\n+      \"db > (1, user1, person1@example.com)\",\n+      \"Executed.\",\n+      \"db > \",\n+    ])\n+  end\n+\n+  it 'prints error message when table is full' do\n+    script = (1..1401).map do |i|\n+      \"insert #{i} user#{i} person#{i}@example.com\"\n+    end\n+    script << \".exit\"\n+    result = run_script(script)\n+    expect(result[-2]).to eq('db > Error: Table full.')\n+  end\n+\n+  it 'allows inserting strings that are the maximum length' do\n+    long_username = \"a\"*32\n+    long_email = \"a\"*255\n+    script = [\n+      \"insert 1 #{long_username} #{long_email}\",\n+      \"select\",\n+      \".exit\",\n+    ]\n+    result = run_script(script)\n+    expect(result).to match_array([\n+      \"db > Executed.\",\n+      \"db > (1, #{long_username}, #{long_email})\",\n+      \"Executed.\",\n+      \"db > \",\n+    ])\n+  end\n+\n+  it 'prints error message if strings are too long' do\n+    long_username = \"a\"*33\n+    long_email = \"a\"*256\n+    script = [\n+      \"insert 1 #{long_username} #{long_email}\",\n+      \"select\",\n+      \".exit\",\n+    ]\n+    result = run_script(script)\n+    expect(result).to match_array([\n+      \"db > String is too long.\",\n+      \"db > Executed.\",\n+      \"db > \",\n+    ])\n+  end\n+\n+  it 'prints an error message if id is negative' do\n+    script = [\n+      \"insert -1 cstack foo@bar.com\",\n+      \"select\",\n+      \".exit\",\n+    ]\n+    result = run_script(script)\n+    expect(result).to match_array([\n+      \"db > ID must be positive.\",\n+      \"db > Executed.\",\n+      \"db > \",\n+    ])\n+  end\n+end\n```","source":"_posts/build_own_x/data_base/build_simple_database/Part4_our_first_tests.md","raw":"---\ntitle: Part 4 - 第一个单元测试类(和一些 Bugs)\ndate: 2019-01-28 16:11:20\ncategories:\n- build-own-x\ntags:\n- database\n- db原理\n---\n\nPart 4 - 第一个单元测试类(和一些 Bugs)\n\n我们可以插入一些行数据到我们的数据库中并且打印它们, 现在让我们花点时间测试下我们的代码吧.\n\n我将会使用 [rspec](http://rspec.info/) 来进行测试, 因为对它们比较熟悉, 并且具有可读性.\n\n我定义了一个简短的帮助函数向 db 程序发送一个命令集合, 然后为输出做短语.\n\n```ruby\ndescribe 'database' do\n  def run_script(commands)\n    raw_output = nil\n    IO.popen(\"./db\", \"r+\") do |pipe|\n      commands.each do |command|\n        pipe.puts command\n      end\n\n      pipe.close_write\n\n      # Read entire output\n      raw_output = pipe.gets(nil)\n    end\n    raw_output.split(\"\\n\")\n  end\n\n  it 'inserts and retreives a row' do\n    result = run_script([\n      \"insert 1 user1 person1@example.com\",\n      \"select\",\n      \".exit\",\n    ])\n    expect(result).to match_array([\n      \"db > Executed.\",\n      \"db > (1, user1, person1@example.com)\",\n      \"Executed.\",\n      \"db > \",\n    ])\n  end\nend\n```\n\n这个简单的测试可以帮助我们确定输入和输出对应的内容.\n\n```sh\nbundle exec rspec\n.\n\nFinished in 0.00871 seconds (files took 0.09506 seconds to load)\n1 example, 0 failures\n```\n\n现在将大量的数据插入数据库中变的可行了:\n\n```ruby\nit 'prints error message when table is full' do\n  script = (1..1401).map do |i|\n    \"insert #{i} user#{i} person#{i}@example.com\"\n  end\n  script << \".exit\"\n  result = run_script(script)\n  expect(result[-2]).to eq('db > Error: Table full.')\nend\n```\n\n再次跑测试用例..\n\n```sh\nbundle exec rspec\n..\n\nFinished in 0.01553 seconds (files took 0.08156 seconds to load)\n2 examples, 0 failures\n```\n\n美滋滋, 它是能正常工作的! 我们的 db 现在可以存错1400条数据, 因为我们设置了最大页面数是100, 且一页有 14 条数据.\n\n阅读到这里, 我意识到我们可能没有办法正常的处理文本数据, 我们可以从下面的例子中体现出来.\n\n```c\nit 'allows inserting strings that are the maximum length' do\n  long_username = \"a\"*32\n  long_email = \"a\"*255\n  script = [\n    \"insert 1 #{long_username} #{long_email}\",\n    \"select\",\n    \".exit\",\n  ]\n  result = run_script(script)\n  expect(result).to match_array([\n    \"db > Executed.\",\n    \"db > (1, #{long_username}, #{long_email})\",\n    \"Executed.\",\n    \"db > \",\n  ])\nend\n```\n\n测试失败了!\n\n```sh\nFailures:\n\n  1) database allows inserting strings that are the maximum length\n     Failure/Error: raw_output.split(\"\\n\")\n\n     ArgumentError:\n       invalid byte sequence in UTF-8\n     # ./spec/main_spec.rb:14:in `split'\n     # ./spec/main_spec.rb:14:in `run_script'\n     # ./spec/main_spec.rb:48:in `block (2 levels) in <top (required)>'\n```\n\n如果我们手动重试呢? 当我们尝试打印出行时，我们会看到有一些奇怪的字符\n\n```sh\ndb > insert 1 aaaaa... aaaaa...\nExecuted.\ndb > select\n(1, aaaaa...aaa\\�, aaaaa...aaa\\�)\nExecuted.\ndb >\n```\n\n这是咋回事呢? 如果你看一下我们对Row的定义，我们只为用户名分配32个字节，为电子邮件分配255个字节. 但是C字符串应该以空字符结尾，我们没有为其分配空间。解决方案是分配一个额外的字节:\n\n```c\nconst uint32_t COLUMN_EMAIL_SIZE = 255;\n struct Row_t {\n   uint32_t id;\n-  char username[COLUMN_USERNAME_SIZE];\n-  char email[COLUMN_EMAIL_SIZE];\n+  char username[COLUMN_USERNAME_SIZE + 1];\n+  char email[COLUMN_EMAIL_SIZE + 1];\n };\n typedef struct Row_t Row;\n```\n\n确定一下我们确实修复了它:\n```sh\nbundle exec rspec\n...\n\nFinished in 0.0188 seconds (files took 0.08516 seconds to load)\n3 examples, 0 failures\n```\n\n我们应该不允许插入过长的用户名和邮件, `spec` 看起来就像这样:\n\n```ruby\nit 'prints error message if strings are too long' do\n  long_username = \"a\"*33\n  long_email = \"a\"*256\n  script = [\n    \"insert 1 #{long_username} #{long_email}\",\n    \"select\",\n    \".exit\",\n  ]\n  result = run_script(script)\n  expect(result).to match_array([\n    \"db > String is too long.\",\n    \"db > Executed.\",\n    \"db > \",\n  ])\nend\n```\n\n因此我们需要升级下我们的解析器, 我们当前用的是 `scanf()` 方法:\n\n```c\nif (strncmp(input_buffer->buffer, \"insert\", 6) == 0) {\n  statement->type = STATEMENT_INSERT;\n  int args_assigned = sscanf(\n      input_buffer->buffer, \"insert %d %s %s\", &(statement->row_to_insert.id),\n      statement->row_to_insert.username, statement->row_to_insert.email);\n  if (args_assigned < 3) {\n    return PREPARE_SYNTAX_ERROR;\n  }\n  return PREPARE_SUCCESS;\n}\n```\n\n但是 `scanf` 存在一些缺点. 如果读取的字符串大于缓冲区, 它将导致缓冲区溢出问题, 并且开始写到不期望的地方. 我们想检查下每一个字符串的长度在将数据拷贝到行结构之前. 我们需要使用空格去划分它.\n\n我将使用 `strtok()` 方法, 我想这应该不难理解.\n\n```c\n+PrepareResult prepare_insert(InputBuffer* input_buffer, Statement* statement) {\n+  statement->type = STATEMENT_INSERT;\n+\n+  char* keyword = strtok(input_buffer->buffer, \" \");\n+  char* id_string = strtok(NULL, \" \");\n+  char* username = strtok(NULL, \" \");\n+  char* email = strtok(NULL, \" \");\n+\n+  if (id_string == NULL || username == NULL || email == NULL) {\n+    return PREPARE_SYNTAX_ERROR;\n+  }\n+\n+  int id = atoi(id_string);\n+  if (strlen(username) > COLUMN_USERNAME_SIZE) {\n+    return PREPARE_STRING_TOO_LONG;\n+  }\n+  if (strlen(email) > COLUMN_EMAIL_SIZE) {\n+    return PREPARE_STRING_TOO_LONG;\n+  }\n+\n+  statement->row_to_insert.id = id;\n+  strcpy(statement->row_to_insert.username, username);\n+  strcpy(statement->row_to_insert.email, email);\n+\n+  return PREPARE_SUCCESS;\n+}\n+\n PrepareResult prepare_statement(InputBuffer* input_buffer,\n                                 Statement* statement) {\n   if (strncmp(input_buffer->buffer, \"insert\", 6) == 0) {\n+    return prepare_insert(input_buffer, statement);\n-    statement->type = STATEMENT_INSERT;\n-    int args_assigned = sscanf(\n-        input_buffer->buffer, \"insert %d %s %s\", &(statement->row_to_insert.id),\n-        statement->row_to_insert.username, statement->row_to_insert.email);\n-    if (args_assigned < 3) {\n-      return PREPARE_SYNTAX_ERROR;\n-    }\n-    return PREPARE_SUCCESS;\n   }\n```\n\n在输入缓冲区上连续调用strtok会在到达分隔符（在我们的例子中为空格）时通过插入空字符将其分解为子字符串。它返回指向子字符串开头的指针。\n\n我们可以在每个文本值上调用`strlen()`来查看它是否太长。\n\n我们可以像处理任何其他错误代码一样处理错误：\n\n```c\nenum PrepareResult_t {\n   PREPARE_SUCCESS,\n+  PREPARE_STRING_TOO_LONG,\n   PREPARE_SYNTAX_ERROR,\n   PREPARE_UNRECOGNIZED_STATEMENT\n };\n```\n\n```c\nswitch (prepare_statement(input_buffer, &statement)) {\n   case (PREPARE_SUCCESS):\n     break;\n+  case (PREPARE_STRING_TOO_LONG):\n+    printf(\"String is too long.\\n\");\n+    continue;\n   case (PREPARE_SYNTAX_ERROR):\n     printf(\"Syntax error. Could not parse statement.\\n\");\n     continue;\n```\n\n使我们的测试用例通过\n\n```sh\nbundle exec rspec\n....\n\nFinished in 0.02284 seconds (files took 0.116 seconds to load)\n4 examples, 0 failures\n```\n\n虽然,我们在这里了,但是我们还有一个错误需要处理:\n\n```ruby\nit 'prints an error message if id is negative' do\n  script = [\n    \"insert -1 cstack foo@bar.com\",\n    \"select\",\n    \".exit\",\n  ]\n  result = run_script(script)\n  expect(result).to match_array([\n    \"db > ID must be positive.\",\n    \"db > Executed.\",\n    \"db > \",\n  ])\nend\n```\n\n```c\nenum PrepareResult_t {\n   PREPARE_SUCCESS,\n+  PREPARE_NEGATIVE_ID,\n   PREPARE_STRING_TOO_LONG,\n   PREPARE_SYNTAX_ERROR,\n   PREPARE_UNRECOGNIZED_STATEMENT\n@@ -148,9 +147,6 @@ PrepareResult prepare_insert(InputBuffer* input_buffer, Statement* statement) {\n   }\n\n   int id = atoi(id_string);\n+  if (id < 0) {\n+    return PREPARE_NEGATIVE_ID;\n+  }\n   if (strlen(username) > COLUMN_USERNAME_SIZE) {\n     return PREPARE_STRING_TOO_LONG;\n   }\n@@ -230,9 +226,6 @@ int main(int argc, char* argv[]) {\n     switch (prepare_statement(input_buffer, &statement)) {\n       case (PREPARE_SUCCESS):\n         break;\n+      case (PREPARE_NEGATIVE_ID):\n+        printf(\"ID must be positive.\\n\");\n+        continue;\n       case (PREPARE_STRING_TOO_LONG):\n         printf(\"String is too long.\\n\");\n         continue;\n```\n\n好的,现在应该测试的差不多了, 下一步,将是一个非常重要的特性: 持久化! 我们将保存我们的数据到一个文件中并且将其读回到内存中.\n\n代码完整的修改部分:\n\n```c\nenum PrepareResult_t {\n   PREPARE_SUCCESS,\n+  PREPARE_NEGATIVE_ID,\n+  PREPARE_STRING_TOO_LONG,\n   PREPARE_SYNTAX_ERROR,\n   PREPARE_UNRECOGNIZED_STATEMENT\n };\n@@ -33,8 +35,8 @@ const uint32_t COLUMN_USERNAME_SIZE = 32;\n const uint32_t COLUMN_EMAIL_SIZE = 255;\n struct Row_t {\n   uint32_t id;\n-  char username[COLUMN_USERNAME_SIZE];\n-  char email[COLUMN_EMAIL_SIZE];\n+  char username[COLUMN_USERNAME_SIZE + 1];\n+  char email[COLUMN_EMAIL_SIZE + 1];\n };\n typedef struct Row_t Row;\n \n@@ -133,17 +135,40 @@ MetaCommandResult do_meta_command(InputBuffer* input_buffer) {\n   }\n }\n \n+PrepareResult prepare_insert(InputBuffer* input_buffer, Statement* statement) {\n+  statement->type = STATEMENT_INSERT;\n+\n+  char* keyword = strtok(input_buffer->buffer, \" \");\n+  char* id_string = strtok(NULL, \" \");\n+  char* username = strtok(NULL, \" \");\n+  char* email = strtok(NULL, \" \");\n+\n+  if (id_string == NULL || username == NULL || email == NULL) {\n+    return PREPARE_SYNTAX_ERROR;\n+  }\n+\n+  int id = atoi(id_string);\n+  if (id < 0) {\n+    return PREPARE_NEGATIVE_ID;\n+  }\n+  if (strlen(username) > COLUMN_USERNAME_SIZE) {\n+    return PREPARE_STRING_TOO_LONG;\n+  }\n+  if (strlen(email) > COLUMN_EMAIL_SIZE) {\n+    return PREPARE_STRING_TOO_LONG;\n+  }\n+\n+  statement->row_to_insert.id = id;\n+  strcpy(statement->row_to_insert.username, username);\n+  strcpy(statement->row_to_insert.email, email);\n+\n+  return PREPARE_SUCCESS;\n+}\n+\n PrepareResult prepare_statement(InputBuffer* input_buffer,\n                                 Statement* statement) {\n   if (strncmp(input_buffer->buffer, \"insert\", 6) == 0) {\n-    statement->type = STATEMENT_INSERT;\n-    int args_assigned = sscanf(\n-        input_buffer->buffer, \"insert %d %s %s\", &(statement->row_to_insert.id),\n-        statement->row_to_insert.username, statement->row_to_insert.email);\n-    if (args_assigned < 3) {\n-      return PREPARE_SYNTAX_ERROR;\n-    }\n-    return PREPARE_SUCCESS;\n+    return prepare_insert(input_buffer, statement);\n   }\n   if (strcmp(input_buffer->buffer, \"select\") == 0) {\n     statement->type = STATEMENT_SELECT;\n@@ -205,6 +230,12 @@ int main(int argc, char* argv[]) {\n     switch (prepare_statement(input_buffer, &statement)) {\n       case (PREPARE_SUCCESS):\n         break;\n+      case (PREPARE_NEGATIVE_ID):\n+        printf(\"ID must be positive.\\n\");\n+        continue;\n+      case (PREPARE_STRING_TOO_LONG):\n+        printf(\"String is too long.\\n\");\n+        continue;\n       case (PREPARE_SYNTAX_ERROR):\n         printf(\"Syntax error. Could not parse statement.\\n\");\n         continue;\n```\n\n我们添加的单元测试:\n\n```ruby\n+describe 'database' do\n+  def run_script(commands)\n+    raw_output = nil\n+    IO.popen(\"./db\", \"r+\") do |pipe|\n+      commands.each do |command|\n+        pipe.puts command\n+      end\n+\n+      pipe.close_write\n+\n+      # Read entire output\n+      raw_output = pipe.gets(nil)\n+    end\n+    raw_output.split(\"\\n\")\n+  end\n+\n+  it 'inserts and retreives a row' do\n+    result = run_script([\n+      \"insert 1 user1 person1@example.com\",\n+      \"select\",\n+      \".exit\",\n+    ])\n+    expect(result).to match_array([\n+      \"db > Executed.\",\n+      \"db > (1, user1, person1@example.com)\",\n+      \"Executed.\",\n+      \"db > \",\n+    ])\n+  end\n+\n+  it 'prints error message when table is full' do\n+    script = (1..1401).map do |i|\n+      \"insert #{i} user#{i} person#{i}@example.com\"\n+    end\n+    script << \".exit\"\n+    result = run_script(script)\n+    expect(result[-2]).to eq('db > Error: Table full.')\n+  end\n+\n+  it 'allows inserting strings that are the maximum length' do\n+    long_username = \"a\"*32\n+    long_email = \"a\"*255\n+    script = [\n+      \"insert 1 #{long_username} #{long_email}\",\n+      \"select\",\n+      \".exit\",\n+    ]\n+    result = run_script(script)\n+    expect(result).to match_array([\n+      \"db > Executed.\",\n+      \"db > (1, #{long_username}, #{long_email})\",\n+      \"Executed.\",\n+      \"db > \",\n+    ])\n+  end\n+\n+  it 'prints error message if strings are too long' do\n+    long_username = \"a\"*33\n+    long_email = \"a\"*256\n+    script = [\n+      \"insert 1 #{long_username} #{long_email}\",\n+      \"select\",\n+      \".exit\",\n+    ]\n+    result = run_script(script)\n+    expect(result).to match_array([\n+      \"db > String is too long.\",\n+      \"db > Executed.\",\n+      \"db > \",\n+    ])\n+  end\n+\n+  it 'prints an error message if id is negative' do\n+    script = [\n+      \"insert -1 cstack foo@bar.com\",\n+      \"select\",\n+      \".exit\",\n+    ]\n+    result = run_script(script)\n+    expect(result).to match_array([\n+      \"db > ID must be positive.\",\n+      \"db > Executed.\",\n+      \"db > \",\n+    ])\n+  end\n+end\n```","slug":"build_own_x/data_base/build_simple_database/Part4_our_first_tests","published":1,"updated":"2019-01-28T14:34:23.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgyn00508seoi5pstelu","content":"<p>Part 4 - 第一个单元测试类(和一些 Bugs)</p>\n<p>我们可以插入一些行数据到我们的数据库中并且打印它们, 现在让我们花点时间测试下我们的代码吧.</p>\n<p>我将会使用 <a href=\"http://rspec.info/\" target=\"_blank\" rel=\"noopener\">rspec</a> 来进行测试, 因为对它们比较熟悉, 并且具有可读性.</p>\n<p>我定义了一个简短的帮助函数向 db 程序发送一个命令集合, 然后为输出做短语.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe <span class=\"string\">'database'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_script</span><span class=\"params\">(commands)</span></span></span><br><span class=\"line\">    raw_output = <span class=\"literal\">nil</span></span><br><span class=\"line\">    IO.popen(<span class=\"string\">\"./db\"</span>, <span class=\"string\">\"r+\"</span>) <span class=\"keyword\">do</span> <span class=\"params\">|pipe|</span></span><br><span class=\"line\">      commands.each <span class=\"keyword\">do</span> <span class=\"params\">|command|</span></span><br><span class=\"line\">        pipe.puts command</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">      pipe.close_write</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># Read entire output</span></span><br><span class=\"line\">      raw_output = pipe.gets(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    raw_output.split(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  it <span class=\"string\">'inserts and retreives a row'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    result = run_script([</span><br><span class=\"line\">      <span class=\"string\">\"insert 1 user1 person1@example.com\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    expect(result).to match_array([</span><br><span class=\"line\">      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"db &gt; (1, user1, person1@example.com)\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>这个简单的测试可以帮助我们确定输入和输出对应的内容.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle <span class=\"built_in\">exec</span> rspec</span><br><span class=\"line\">.</span><br><span class=\"line\"></span><br><span class=\"line\">Finished <span class=\"keyword\">in</span> 0.00871 seconds (files took 0.09506 seconds to load)</span><br><span class=\"line\">1 example, 0 failures</span><br></pre></td></tr></table></figure>\n<p>现在将大量的数据插入数据库中变的可行了:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it <span class=\"string\">'prints error message when table is full'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  script = (<span class=\"number\">1</span>..<span class=\"number\">1401</span>).map <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">    <span class=\"string\">\"insert <span class=\"subst\">#&#123;i&#125;</span> user<span class=\"subst\">#&#123;i&#125;</span> person<span class=\"subst\">#&#123;i&#125;</span>@example.com\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  script &lt;&lt; <span class=\"string\">\".exit\"</span></span><br><span class=\"line\">  result = run_script(script)</span><br><span class=\"line\">  expect(result[-<span class=\"number\">2</span>]).to eq(<span class=\"string\">'db &gt; Error: Table full.'</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>再次跑测试用例..</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle <span class=\"built_in\">exec</span> rspec</span><br><span class=\"line\">..</span><br><span class=\"line\"></span><br><span class=\"line\">Finished <span class=\"keyword\">in</span> 0.01553 seconds (files took 0.08156 seconds to load)</span><br><span class=\"line\">2 examples, 0 failures</span><br></pre></td></tr></table></figure>\n<p>美滋滋, 它是能正常工作的! 我们的 db 现在可以存错1400条数据, 因为我们设置了最大页面数是100, 且一页有 14 条数据.</p>\n<p>阅读到这里, 我意识到我们可能没有办法正常的处理文本数据, 我们可以从下面的例子中体现出来.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it 'allows inserting strings that are the maximum length' do</span><br><span class=\"line\">  long_username = <span class=\"string\">\"a\"</span>*<span class=\"number\">32</span></span><br><span class=\"line\">  long_email = <span class=\"string\">\"a\"</span>*<span class=\"number\">255</span></span><br><span class=\"line\">  script = [</span><br><span class=\"line\">    <span class=\"string\">\"insert 1 #&#123;long_username&#125; #&#123;long_email&#125;\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  result = run_script(script)</span><br><span class=\"line\">  expect(result).to match_array([</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; (1, #&#123;long_username&#125;, #&#123;long_email&#125;)\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">  ])</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>测试失败了!</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Failures:</span><br><span class=\"line\"></span><br><span class=\"line\">  1) database allows inserting strings that are the maximum length</span><br><span class=\"line\">     Failure/Error: raw_output.split(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     ArgumentError:</span><br><span class=\"line\">       invalid byte sequence <span class=\"keyword\">in</span> UTF-8</span><br><span class=\"line\">     <span class=\"comment\"># ./spec/main_spec.rb:14:in `split'</span></span><br><span class=\"line\">     <span class=\"comment\"># ./spec/main_spec.rb:14:in `run_script'</span></span><br><span class=\"line\">     <span class=\"comment\"># ./spec/main_spec.rb:48:in `block (2 levels) in &lt;top (required)&gt;'</span></span><br></pre></td></tr></table></figure>\n<p>如果我们手动重试呢? 当我们尝试打印出行时，我们会看到有一些奇怪的字符</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db &gt; insert 1 aaaaa... aaaaa...</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; select</span><br><span class=\"line\">(1, aaaaa...aaa\\�, aaaaa...aaa\\�)</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt;</span><br></pre></td></tr></table></figure>\n<p>这是咋回事呢? 如果你看一下我们对Row的定义，我们只为用户名分配32个字节，为电子邮件分配255个字节. 但是C字符串应该以空字符结尾，我们没有为其分配空间。解决方案是分配一个额外的字节:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> COLUMN_EMAIL_SIZE = <span class=\"number\">255</span>;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> &#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> id;</span><br><span class=\"line\">-  <span class=\"keyword\">char</span> username[COLUMN_USERNAME_SIZE];</span><br><span class=\"line\">-  <span class=\"keyword\">char</span> email[COLUMN_EMAIL_SIZE];</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> username[COLUMN_USERNAME_SIZE + <span class=\"number\">1</span>];</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> email[COLUMN_EMAIL_SIZE + <span class=\"number\">1</span>];</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> <span class=\"title\">Row</span>;</span></span><br></pre></td></tr></table></figure>\n<p>确定一下我们确实修复了它:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle <span class=\"built_in\">exec</span> rspec</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Finished <span class=\"keyword\">in</span> 0.0188 seconds (files took 0.08516 seconds to load)</span><br><span class=\"line\">3 examples, 0 failures</span><br></pre></td></tr></table></figure></p>\n<p>我们应该不允许插入过长的用户名和邮件, <code>spec</code> 看起来就像这样:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it <span class=\"string\">'prints error message if strings are too long'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  long_username = <span class=\"string\">\"a\"</span>*<span class=\"number\">33</span></span><br><span class=\"line\">  long_email = <span class=\"string\">\"a\"</span>*<span class=\"number\">256</span></span><br><span class=\"line\">  script = [</span><br><span class=\"line\">    <span class=\"string\">\"insert 1 <span class=\"subst\">#&#123;long_username&#125;</span> <span class=\"subst\">#&#123;long_email&#125;</span>\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  result = run_script(script)</span><br><span class=\"line\">  expect(result).to match_array([</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; String is too long.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">  ])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>因此我们需要升级下我们的解析器, 我们当前用的是 <code>scanf()</code> 方法:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"insert\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> args_assigned = <span class=\"built_in\">sscanf</span>(</span><br><span class=\"line\">      input_buffer-&gt;buffer, <span class=\"string\">\"insert %d %s %s\"</span>, &amp;(statement-&gt;row_to_insert.id),</span><br><span class=\"line\">      statement-&gt;row_to_insert.username, statement-&gt;row_to_insert.email);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (args_assigned &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是 <code>scanf</code> 存在一些缺点. 如果读取的字符串大于缓冲区, 它将导致缓冲区溢出问题, 并且开始写到不期望的地方. 我们想检查下每一个字符串的长度在将数据拷贝到行结构之前. 我们需要使用空格去划分它.</p>\n<p>我将使用 <code>strtok()</code> 方法, 我想这应该不难理解.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\">PrepareResult <span class=\"title\">prepare_insert</span><span class=\"params\">(InputBuffer* input_buffer, Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">+  statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* keyword = strtok(input_buffer-&gt;buffer, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* id_string = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* username = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* email = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (id_string == <span class=\"literal\">NULL</span> || username == <span class=\"literal\">NULL</span> || email == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">int</span> id = atoi(id_string);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(username) &gt; COLUMN_USERNAME_SIZE) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_STRING_TOO_LONG;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(email) &gt; COLUMN_EMAIL_SIZE) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_STRING_TOO_LONG;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  statement-&gt;row_to_insert.id = id;</span><br><span class=\"line\">+  <span class=\"built_in\">strcpy</span>(statement-&gt;row_to_insert.username, username);</span><br><span class=\"line\">+  <span class=\"built_in\">strcpy</span>(statement-&gt;row_to_insert.email, email);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\">PrepareResult <span class=\"title\">prepare_statement</span><span class=\"params\">(InputBuffer* input_buffer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                 Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"insert\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> prepare_insert(input_buffer, statement);</span><br><span class=\"line\">-    statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">-    <span class=\"keyword\">int</span> args_assigned = <span class=\"built_in\">sscanf</span>(</span><br><span class=\"line\">-        input_buffer-&gt;buffer, <span class=\"string\">\"insert %d %s %s\"</span>, &amp;(statement-&gt;row_to_insert.id),</span><br><span class=\"line\">-        statement-&gt;row_to_insert.username, statement-&gt;row_to_insert.email);</span><br><span class=\"line\">-    <span class=\"keyword\">if</span> (args_assigned &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">-      <span class=\"keyword\">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class=\"line\">-    &#125;</span><br><span class=\"line\">-    <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>在输入缓冲区上连续调用strtok会在到达分隔符（在我们的例子中为空格）时通过插入空字符将其分解为子字符串。它返回指向子字符串开头的指针。</p>\n<p>我们可以在每个文本值上调用<code>strlen()</code>来查看它是否太长。</p>\n<p>我们可以像处理任何其他错误代码一样处理错误：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> PrepareResult_t &#123;</span><br><span class=\"line\">   PREPARE_SUCCESS,</span><br><span class=\"line\">+  PREPARE_STRING_TOO_LONG,</span><br><span class=\"line\">   PREPARE_SYNTAX_ERROR,</span><br><span class=\"line\">   PREPARE_UNRECOGNIZED_STATEMENT</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (prepare_statement(input_buffer, &amp;statement)) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">case</span> (PREPARE_SUCCESS):</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">case</span> (PREPARE_STRING_TOO_LONG):</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"String is too long.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">   <span class=\"keyword\">case</span> (PREPARE_SYNTAX_ERROR):</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Syntax error. Could not parse statement.\\n\"</span>);</span><br><span class=\"line\">     <span class=\"keyword\">continue</span>;</span><br></pre></td></tr></table></figure>\n<p>使我们的测试用例通过</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle <span class=\"built_in\">exec</span> rspec</span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\">Finished <span class=\"keyword\">in</span> 0.02284 seconds (files took 0.116 seconds to load)</span><br><span class=\"line\">4 examples, 0 failures</span><br></pre></td></tr></table></figure>\n<p>虽然,我们在这里了,但是我们还有一个错误需要处理:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it <span class=\"string\">'prints an error message if id is negative'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  script = [</span><br><span class=\"line\">    <span class=\"string\">\"insert -1 cstack foo@bar.com\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  result = run_script(script)</span><br><span class=\"line\">  expect(result).to match_array([</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; ID must be positive.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">  ])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> PrepareResult_t &#123;</span><br><span class=\"line\">   PREPARE_SUCCESS,</span><br><span class=\"line\">+  PREPARE_NEGATIVE_ID,</span><br><span class=\"line\">   PREPARE_STRING_TOO_LONG,</span><br><span class=\"line\">   PREPARE_SYNTAX_ERROR,</span><br><span class=\"line\">   PREPARE_UNRECOGNIZED_STATEMENT</span><br><span class=\"line\">@@ <span class=\"number\">-148</span>,<span class=\"number\">9</span> +<span class=\"number\">147</span>,<span class=\"number\">6</span> @@ <span class=\"function\">PrepareResult <span class=\"title\">prepare_insert</span><span class=\"params\">(InputBuffer* input_buffer, Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">int</span> id = atoi(id_string);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (id &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_NEGATIVE_ID;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(username) &gt; COLUMN_USERNAME_SIZE) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> PREPARE_STRING_TOO_LONG;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">@@ <span class=\"number\">-230</span>,<span class=\"number\">9</span> +<span class=\"number\">226</span>,<span class=\"number\">6</span> @@ <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (prepare_statement(input_buffer, &amp;statement)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_SUCCESS):</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_NEGATIVE_ID):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"ID must be positive.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_STRING_TOO_LONG):</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"String is too long.\\n\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">continue</span>;</span><br></pre></td></tr></table></figure>\n<p>好的,现在应该测试的差不多了, 下一步,将是一个非常重要的特性: 持久化! 我们将保存我们的数据到一个文件中并且将其读回到内存中.</p>\n<p>代码完整的修改部分:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> PrepareResult_t &#123;</span><br><span class=\"line\">   PREPARE_SUCCESS,</span><br><span class=\"line\">+  PREPARE_NEGATIVE_ID,</span><br><span class=\"line\">+  PREPARE_STRING_TOO_LONG,</span><br><span class=\"line\">   PREPARE_SYNTAX_ERROR,</span><br><span class=\"line\">   PREPARE_UNRECOGNIZED_STATEMENT</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\">@@ <span class=\"number\">-33</span>,<span class=\"number\">8</span> +<span class=\"number\">35</span>,<span class=\"number\">8</span> @@ <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> COLUMN_USERNAME_SIZE = <span class=\"number\">32</span>;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> COLUMN_EMAIL_SIZE = <span class=\"number\">255</span>;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> &#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> id;</span><br><span class=\"line\">-  <span class=\"keyword\">char</span> username[COLUMN_USERNAME_SIZE];</span><br><span class=\"line\">-  <span class=\"keyword\">char</span> email[COLUMN_EMAIL_SIZE];</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> username[COLUMN_USERNAME_SIZE + <span class=\"number\">1</span>];</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> email[COLUMN_EMAIL_SIZE + <span class=\"number\">1</span>];</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> <span class=\"title\">Row</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">@@ <span class=\"number\">-133</span>,<span class=\"number\">17</span> +<span class=\"number\">135</span>,<span class=\"number\">40</span> @@ <span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"function\">PrepareResult <span class=\"title\">prepare_insert</span><span class=\"params\">(InputBuffer* input_buffer, Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">+  statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* keyword = strtok(input_buffer-&gt;buffer, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* id_string = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* username = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* email = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (id_string == <span class=\"literal\">NULL</span> || username == <span class=\"literal\">NULL</span> || email == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">int</span> id = atoi(id_string);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (id &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_NEGATIVE_ID;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(username) &gt; COLUMN_USERNAME_SIZE) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_STRING_TOO_LONG;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(email) &gt; COLUMN_EMAIL_SIZE) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_STRING_TOO_LONG;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  statement-&gt;row_to_insert.id = id;</span><br><span class=\"line\">+  <span class=\"built_in\">strcpy</span>(statement-&gt;row_to_insert.username, username);</span><br><span class=\"line\">+  <span class=\"built_in\">strcpy</span>(statement-&gt;row_to_insert.email, email);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\">PrepareResult <span class=\"title\">prepare_statement</span><span class=\"params\">(InputBuffer* input_buffer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                 Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"insert\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">-    statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">-    <span class=\"keyword\">int</span> args_assigned = <span class=\"built_in\">sscanf</span>(</span><br><span class=\"line\">-        input_buffer-&gt;buffer, <span class=\"string\">\"insert %d %s %s\"</span>, &amp;(statement-&gt;row_to_insert.id),</span><br><span class=\"line\">-        statement-&gt;row_to_insert.username, statement-&gt;row_to_insert.email);</span><br><span class=\"line\">-    <span class=\"keyword\">if</span> (args_assigned &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">-      <span class=\"keyword\">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class=\"line\">-    &#125;</span><br><span class=\"line\">-    <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> prepare_insert(input_buffer, statement);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"select\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     statement-&gt;type = STATEMENT_SELECT;</span><br><span class=\"line\">@@ <span class=\"number\">-205</span>,<span class=\"number\">6</span> +<span class=\"number\">230</span>,<span class=\"number\">12</span> @@ <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (prepare_statement(input_buffer, &amp;statement)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_SUCCESS):</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_NEGATIVE_ID):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"ID must be positive.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_STRING_TOO_LONG):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"String is too long.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_SYNTAX_ERROR):</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"Syntax error. Could not parse statement.\\n\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">continue</span>;</span><br></pre></td></tr></table></figure>\n<p>我们添加的单元测试:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+describe <span class=\"string\">'database'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_script</span><span class=\"params\">(commands)</span></span></span><br><span class=\"line\">+    raw_output = <span class=\"literal\">nil</span></span><br><span class=\"line\">+    IO.popen(<span class=\"string\">\"./db\"</span>, <span class=\"string\">\"r+\"</span>) <span class=\"keyword\">do</span> <span class=\"params\">|pipe|</span></span><br><span class=\"line\">+      commands.each <span class=\"keyword\">do</span> <span class=\"params\">|command|</span></span><br><span class=\"line\">+        pipe.puts command</span><br><span class=\"line\">+      <span class=\"keyword\">end</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+      pipe.close_write</span><br><span class=\"line\">+</span><br><span class=\"line\">+      <span class=\"comment\"># Read entire output</span></span><br><span class=\"line\">+      raw_output = pipe.gets(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">+    <span class=\"keyword\">end</span></span><br><span class=\"line\">+    raw_output.split(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  it <span class=\"string\">'inserts and retreives a row'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    result = run_script([</span><br><span class=\"line\">+      <span class=\"string\">\"insert 1 user1 person1@example.com\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; (1, user1, person1@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  it <span class=\"string\">'prints error message when table is full'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    script = (<span class=\"number\">1</span>..<span class=\"number\">1401</span>).map <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">+      <span class=\"string\">\"insert <span class=\"subst\">#&#123;i&#125;</span> user<span class=\"subst\">#&#123;i&#125;</span> person<span class=\"subst\">#&#123;i&#125;</span>@example.com\"</span></span><br><span class=\"line\">+    <span class=\"keyword\">end</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".exit\"</span></span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+    expect(result[-<span class=\"number\">2</span>]).to eq(<span class=\"string\">'db &gt; Error: Table full.'</span>)</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  it <span class=\"string\">'allows inserting strings that are the maximum length'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    long_username = <span class=\"string\">\"a\"</span>*<span class=\"number\">32</span></span><br><span class=\"line\">+    long_email = <span class=\"string\">\"a\"</span>*<span class=\"number\">255</span></span><br><span class=\"line\">+    script = [</span><br><span class=\"line\">+      <span class=\"string\">\"insert 1 <span class=\"subst\">#&#123;long_username&#125;</span> <span class=\"subst\">#&#123;long_email&#125;</span>\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ]</span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; (1, <span class=\"subst\">#&#123;long_username&#125;</span>, <span class=\"subst\">#&#123;long_email&#125;</span>)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  it <span class=\"string\">'prints error message if strings are too long'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    long_username = <span class=\"string\">\"a\"</span>*<span class=\"number\">33</span></span><br><span class=\"line\">+    long_email = <span class=\"string\">\"a\"</span>*<span class=\"number\">256</span></span><br><span class=\"line\">+    script = [</span><br><span class=\"line\">+      <span class=\"string\">\"insert 1 <span class=\"subst\">#&#123;long_username&#125;</span> <span class=\"subst\">#&#123;long_email&#125;</span>\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ]</span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; String is too long.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  it <span class=\"string\">'prints an error message if id is negative'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    script = [</span><br><span class=\"line\">+      <span class=\"string\">\"insert -1 cstack foo@bar.com\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ]</span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; ID must be positive.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\">+<span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Part 4 - 第一个单元测试类(和一些 Bugs)</p>\n<p>我们可以插入一些行数据到我们的数据库中并且打印它们, 现在让我们花点时间测试下我们的代码吧.</p>\n<p>我将会使用 <a href=\"http://rspec.info/\" target=\"_blank\" rel=\"noopener\">rspec</a> 来进行测试, 因为对它们比较熟悉, 并且具有可读性.</p>\n<p>我定义了一个简短的帮助函数向 db 程序发送一个命令集合, 然后为输出做短语.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe <span class=\"string\">'database'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_script</span><span class=\"params\">(commands)</span></span></span><br><span class=\"line\">    raw_output = <span class=\"literal\">nil</span></span><br><span class=\"line\">    IO.popen(<span class=\"string\">\"./db\"</span>, <span class=\"string\">\"r+\"</span>) <span class=\"keyword\">do</span> <span class=\"params\">|pipe|</span></span><br><span class=\"line\">      commands.each <span class=\"keyword\">do</span> <span class=\"params\">|command|</span></span><br><span class=\"line\">        pipe.puts command</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">      pipe.close_write</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># Read entire output</span></span><br><span class=\"line\">      raw_output = pipe.gets(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    raw_output.split(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  it <span class=\"string\">'inserts and retreives a row'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    result = run_script([</span><br><span class=\"line\">      <span class=\"string\">\"insert 1 user1 person1@example.com\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    expect(result).to match_array([</span><br><span class=\"line\">      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"db &gt; (1, user1, person1@example.com)\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>这个简单的测试可以帮助我们确定输入和输出对应的内容.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle <span class=\"built_in\">exec</span> rspec</span><br><span class=\"line\">.</span><br><span class=\"line\"></span><br><span class=\"line\">Finished <span class=\"keyword\">in</span> 0.00871 seconds (files took 0.09506 seconds to load)</span><br><span class=\"line\">1 example, 0 failures</span><br></pre></td></tr></table></figure>\n<p>现在将大量的数据插入数据库中变的可行了:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it <span class=\"string\">'prints error message when table is full'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  script = (<span class=\"number\">1</span>..<span class=\"number\">1401</span>).map <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">    <span class=\"string\">\"insert <span class=\"subst\">#&#123;i&#125;</span> user<span class=\"subst\">#&#123;i&#125;</span> person<span class=\"subst\">#&#123;i&#125;</span>@example.com\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  script &lt;&lt; <span class=\"string\">\".exit\"</span></span><br><span class=\"line\">  result = run_script(script)</span><br><span class=\"line\">  expect(result[-<span class=\"number\">2</span>]).to eq(<span class=\"string\">'db &gt; Error: Table full.'</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>再次跑测试用例..</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle <span class=\"built_in\">exec</span> rspec</span><br><span class=\"line\">..</span><br><span class=\"line\"></span><br><span class=\"line\">Finished <span class=\"keyword\">in</span> 0.01553 seconds (files took 0.08156 seconds to load)</span><br><span class=\"line\">2 examples, 0 failures</span><br></pre></td></tr></table></figure>\n<p>美滋滋, 它是能正常工作的! 我们的 db 现在可以存错1400条数据, 因为我们设置了最大页面数是100, 且一页有 14 条数据.</p>\n<p>阅读到这里, 我意识到我们可能没有办法正常的处理文本数据, 我们可以从下面的例子中体现出来.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it 'allows inserting strings that are the maximum length' do</span><br><span class=\"line\">  long_username = <span class=\"string\">\"a\"</span>*<span class=\"number\">32</span></span><br><span class=\"line\">  long_email = <span class=\"string\">\"a\"</span>*<span class=\"number\">255</span></span><br><span class=\"line\">  script = [</span><br><span class=\"line\">    <span class=\"string\">\"insert 1 #&#123;long_username&#125; #&#123;long_email&#125;\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  result = run_script(script)</span><br><span class=\"line\">  expect(result).to match_array([</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; (1, #&#123;long_username&#125;, #&#123;long_email&#125;)\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">  ])</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>测试失败了!</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Failures:</span><br><span class=\"line\"></span><br><span class=\"line\">  1) database allows inserting strings that are the maximum length</span><br><span class=\"line\">     Failure/Error: raw_output.split(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     ArgumentError:</span><br><span class=\"line\">       invalid byte sequence <span class=\"keyword\">in</span> UTF-8</span><br><span class=\"line\">     <span class=\"comment\"># ./spec/main_spec.rb:14:in `split'</span></span><br><span class=\"line\">     <span class=\"comment\"># ./spec/main_spec.rb:14:in `run_script'</span></span><br><span class=\"line\">     <span class=\"comment\"># ./spec/main_spec.rb:48:in `block (2 levels) in &lt;top (required)&gt;'</span></span><br></pre></td></tr></table></figure>\n<p>如果我们手动重试呢? 当我们尝试打印出行时，我们会看到有一些奇怪的字符</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db &gt; insert 1 aaaaa... aaaaa...</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; select</span><br><span class=\"line\">(1, aaaaa...aaa\\�, aaaaa...aaa\\�)</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt;</span><br></pre></td></tr></table></figure>\n<p>这是咋回事呢? 如果你看一下我们对Row的定义，我们只为用户名分配32个字节，为电子邮件分配255个字节. 但是C字符串应该以空字符结尾，我们没有为其分配空间。解决方案是分配一个额外的字节:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> COLUMN_EMAIL_SIZE = <span class=\"number\">255</span>;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> &#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> id;</span><br><span class=\"line\">-  <span class=\"keyword\">char</span> username[COLUMN_USERNAME_SIZE];</span><br><span class=\"line\">-  <span class=\"keyword\">char</span> email[COLUMN_EMAIL_SIZE];</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> username[COLUMN_USERNAME_SIZE + <span class=\"number\">1</span>];</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> email[COLUMN_EMAIL_SIZE + <span class=\"number\">1</span>];</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> <span class=\"title\">Row</span>;</span></span><br></pre></td></tr></table></figure>\n<p>确定一下我们确实修复了它:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle <span class=\"built_in\">exec</span> rspec</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Finished <span class=\"keyword\">in</span> 0.0188 seconds (files took 0.08516 seconds to load)</span><br><span class=\"line\">3 examples, 0 failures</span><br></pre></td></tr></table></figure></p>\n<p>我们应该不允许插入过长的用户名和邮件, <code>spec</code> 看起来就像这样:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it <span class=\"string\">'prints error message if strings are too long'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  long_username = <span class=\"string\">\"a\"</span>*<span class=\"number\">33</span></span><br><span class=\"line\">  long_email = <span class=\"string\">\"a\"</span>*<span class=\"number\">256</span></span><br><span class=\"line\">  script = [</span><br><span class=\"line\">    <span class=\"string\">\"insert 1 <span class=\"subst\">#&#123;long_username&#125;</span> <span class=\"subst\">#&#123;long_email&#125;</span>\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  result = run_script(script)</span><br><span class=\"line\">  expect(result).to match_array([</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; String is too long.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">  ])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>因此我们需要升级下我们的解析器, 我们当前用的是 <code>scanf()</code> 方法:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"insert\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> args_assigned = <span class=\"built_in\">sscanf</span>(</span><br><span class=\"line\">      input_buffer-&gt;buffer, <span class=\"string\">\"insert %d %s %s\"</span>, &amp;(statement-&gt;row_to_insert.id),</span><br><span class=\"line\">      statement-&gt;row_to_insert.username, statement-&gt;row_to_insert.email);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (args_assigned &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是 <code>scanf</code> 存在一些缺点. 如果读取的字符串大于缓冲区, 它将导致缓冲区溢出问题, 并且开始写到不期望的地方. 我们想检查下每一个字符串的长度在将数据拷贝到行结构之前. 我们需要使用空格去划分它.</p>\n<p>我将使用 <code>strtok()</code> 方法, 我想这应该不难理解.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\">PrepareResult <span class=\"title\">prepare_insert</span><span class=\"params\">(InputBuffer* input_buffer, Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">+  statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* keyword = strtok(input_buffer-&gt;buffer, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* id_string = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* username = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* email = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (id_string == <span class=\"literal\">NULL</span> || username == <span class=\"literal\">NULL</span> || email == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">int</span> id = atoi(id_string);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(username) &gt; COLUMN_USERNAME_SIZE) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_STRING_TOO_LONG;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(email) &gt; COLUMN_EMAIL_SIZE) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_STRING_TOO_LONG;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  statement-&gt;row_to_insert.id = id;</span><br><span class=\"line\">+  <span class=\"built_in\">strcpy</span>(statement-&gt;row_to_insert.username, username);</span><br><span class=\"line\">+  <span class=\"built_in\">strcpy</span>(statement-&gt;row_to_insert.email, email);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\">PrepareResult <span class=\"title\">prepare_statement</span><span class=\"params\">(InputBuffer* input_buffer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                 Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"insert\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> prepare_insert(input_buffer, statement);</span><br><span class=\"line\">-    statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">-    <span class=\"keyword\">int</span> args_assigned = <span class=\"built_in\">sscanf</span>(</span><br><span class=\"line\">-        input_buffer-&gt;buffer, <span class=\"string\">\"insert %d %s %s\"</span>, &amp;(statement-&gt;row_to_insert.id),</span><br><span class=\"line\">-        statement-&gt;row_to_insert.username, statement-&gt;row_to_insert.email);</span><br><span class=\"line\">-    <span class=\"keyword\">if</span> (args_assigned &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">-      <span class=\"keyword\">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class=\"line\">-    &#125;</span><br><span class=\"line\">-    <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>在输入缓冲区上连续调用strtok会在到达分隔符（在我们的例子中为空格）时通过插入空字符将其分解为子字符串。它返回指向子字符串开头的指针。</p>\n<p>我们可以在每个文本值上调用<code>strlen()</code>来查看它是否太长。</p>\n<p>我们可以像处理任何其他错误代码一样处理错误：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> PrepareResult_t &#123;</span><br><span class=\"line\">   PREPARE_SUCCESS,</span><br><span class=\"line\">+  PREPARE_STRING_TOO_LONG,</span><br><span class=\"line\">   PREPARE_SYNTAX_ERROR,</span><br><span class=\"line\">   PREPARE_UNRECOGNIZED_STATEMENT</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (prepare_statement(input_buffer, &amp;statement)) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">case</span> (PREPARE_SUCCESS):</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">case</span> (PREPARE_STRING_TOO_LONG):</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"String is too long.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">   <span class=\"keyword\">case</span> (PREPARE_SYNTAX_ERROR):</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Syntax error. Could not parse statement.\\n\"</span>);</span><br><span class=\"line\">     <span class=\"keyword\">continue</span>;</span><br></pre></td></tr></table></figure>\n<p>使我们的测试用例通过</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle <span class=\"built_in\">exec</span> rspec</span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\">Finished <span class=\"keyword\">in</span> 0.02284 seconds (files took 0.116 seconds to load)</span><br><span class=\"line\">4 examples, 0 failures</span><br></pre></td></tr></table></figure>\n<p>虽然,我们在这里了,但是我们还有一个错误需要处理:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it <span class=\"string\">'prints an error message if id is negative'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  script = [</span><br><span class=\"line\">    <span class=\"string\">\"insert -1 cstack foo@bar.com\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  result = run_script(script)</span><br><span class=\"line\">  expect(result).to match_array([</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; ID must be positive.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">  ])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> PrepareResult_t &#123;</span><br><span class=\"line\">   PREPARE_SUCCESS,</span><br><span class=\"line\">+  PREPARE_NEGATIVE_ID,</span><br><span class=\"line\">   PREPARE_STRING_TOO_LONG,</span><br><span class=\"line\">   PREPARE_SYNTAX_ERROR,</span><br><span class=\"line\">   PREPARE_UNRECOGNIZED_STATEMENT</span><br><span class=\"line\">@@ <span class=\"number\">-148</span>,<span class=\"number\">9</span> +<span class=\"number\">147</span>,<span class=\"number\">6</span> @@ <span class=\"function\">PrepareResult <span class=\"title\">prepare_insert</span><span class=\"params\">(InputBuffer* input_buffer, Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">int</span> id = atoi(id_string);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (id &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_NEGATIVE_ID;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(username) &gt; COLUMN_USERNAME_SIZE) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> PREPARE_STRING_TOO_LONG;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">@@ <span class=\"number\">-230</span>,<span class=\"number\">9</span> +<span class=\"number\">226</span>,<span class=\"number\">6</span> @@ <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (prepare_statement(input_buffer, &amp;statement)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_SUCCESS):</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_NEGATIVE_ID):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"ID must be positive.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_STRING_TOO_LONG):</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"String is too long.\\n\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">continue</span>;</span><br></pre></td></tr></table></figure>\n<p>好的,现在应该测试的差不多了, 下一步,将是一个非常重要的特性: 持久化! 我们将保存我们的数据到一个文件中并且将其读回到内存中.</p>\n<p>代码完整的修改部分:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> PrepareResult_t &#123;</span><br><span class=\"line\">   PREPARE_SUCCESS,</span><br><span class=\"line\">+  PREPARE_NEGATIVE_ID,</span><br><span class=\"line\">+  PREPARE_STRING_TOO_LONG,</span><br><span class=\"line\">   PREPARE_SYNTAX_ERROR,</span><br><span class=\"line\">   PREPARE_UNRECOGNIZED_STATEMENT</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\">@@ <span class=\"number\">-33</span>,<span class=\"number\">8</span> +<span class=\"number\">35</span>,<span class=\"number\">8</span> @@ <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> COLUMN_USERNAME_SIZE = <span class=\"number\">32</span>;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> COLUMN_EMAIL_SIZE = <span class=\"number\">255</span>;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> &#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> id;</span><br><span class=\"line\">-  <span class=\"keyword\">char</span> username[COLUMN_USERNAME_SIZE];</span><br><span class=\"line\">-  <span class=\"keyword\">char</span> email[COLUMN_EMAIL_SIZE];</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> username[COLUMN_USERNAME_SIZE + <span class=\"number\">1</span>];</span><br><span class=\"line\">+  <span class=\"keyword\">char</span> email[COLUMN_EMAIL_SIZE + <span class=\"number\">1</span>];</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Row_t</span> <span class=\"title\">Row</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">@@ <span class=\"number\">-133</span>,<span class=\"number\">17</span> +<span class=\"number\">135</span>,<span class=\"number\">40</span> @@ <span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"function\">PrepareResult <span class=\"title\">prepare_insert</span><span class=\"params\">(InputBuffer* input_buffer, Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">+  statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* keyword = strtok(input_buffer-&gt;buffer, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* id_string = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* username = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* email = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (id_string == <span class=\"literal\">NULL</span> || username == <span class=\"literal\">NULL</span> || email == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">int</span> id = atoi(id_string);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (id &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_NEGATIVE_ID;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(username) &gt; COLUMN_USERNAME_SIZE) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_STRING_TOO_LONG;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(email) &gt; COLUMN_EMAIL_SIZE) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> PREPARE_STRING_TOO_LONG;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  statement-&gt;row_to_insert.id = id;</span><br><span class=\"line\">+  <span class=\"built_in\">strcpy</span>(statement-&gt;row_to_insert.username, username);</span><br><span class=\"line\">+  <span class=\"built_in\">strcpy</span>(statement-&gt;row_to_insert.email, email);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\">PrepareResult <span class=\"title\">prepare_statement</span><span class=\"params\">(InputBuffer* input_buffer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                 Statement* statement)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"insert\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">-    statement-&gt;type = STATEMENT_INSERT;</span><br><span class=\"line\">-    <span class=\"keyword\">int</span> args_assigned = <span class=\"built_in\">sscanf</span>(</span><br><span class=\"line\">-        input_buffer-&gt;buffer, <span class=\"string\">\"insert %d %s %s\"</span>, &amp;(statement-&gt;row_to_insert.id),</span><br><span class=\"line\">-        statement-&gt;row_to_insert.username, statement-&gt;row_to_insert.email);</span><br><span class=\"line\">-    <span class=\"keyword\">if</span> (args_assigned &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">-      <span class=\"keyword\">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class=\"line\">-    &#125;</span><br><span class=\"line\">-    <span class=\"keyword\">return</span> PREPARE_SUCCESS;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> prepare_insert(input_buffer, statement);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\"select\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     statement-&gt;type = STATEMENT_SELECT;</span><br><span class=\"line\">@@ <span class=\"number\">-205</span>,<span class=\"number\">6</span> +<span class=\"number\">230</span>,<span class=\"number\">12</span> @@ <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (prepare_statement(input_buffer, &amp;statement)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_SUCCESS):</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_NEGATIVE_ID):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"ID must be positive.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (PREPARE_STRING_TOO_LONG):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"String is too long.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (PREPARE_SYNTAX_ERROR):</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"Syntax error. Could not parse statement.\\n\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">continue</span>;</span><br></pre></td></tr></table></figure>\n<p>我们添加的单元测试:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+describe <span class=\"string\">'database'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_script</span><span class=\"params\">(commands)</span></span></span><br><span class=\"line\">+    raw_output = <span class=\"literal\">nil</span></span><br><span class=\"line\">+    IO.popen(<span class=\"string\">\"./db\"</span>, <span class=\"string\">\"r+\"</span>) <span class=\"keyword\">do</span> <span class=\"params\">|pipe|</span></span><br><span class=\"line\">+      commands.each <span class=\"keyword\">do</span> <span class=\"params\">|command|</span></span><br><span class=\"line\">+        pipe.puts command</span><br><span class=\"line\">+      <span class=\"keyword\">end</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+      pipe.close_write</span><br><span class=\"line\">+</span><br><span class=\"line\">+      <span class=\"comment\"># Read entire output</span></span><br><span class=\"line\">+      raw_output = pipe.gets(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">+    <span class=\"keyword\">end</span></span><br><span class=\"line\">+    raw_output.split(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  it <span class=\"string\">'inserts and retreives a row'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    result = run_script([</span><br><span class=\"line\">+      <span class=\"string\">\"insert 1 user1 person1@example.com\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; (1, user1, person1@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  it <span class=\"string\">'prints error message when table is full'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    script = (<span class=\"number\">1</span>..<span class=\"number\">1401</span>).map <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">+      <span class=\"string\">\"insert <span class=\"subst\">#&#123;i&#125;</span> user<span class=\"subst\">#&#123;i&#125;</span> person<span class=\"subst\">#&#123;i&#125;</span>@example.com\"</span></span><br><span class=\"line\">+    <span class=\"keyword\">end</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".exit\"</span></span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+    expect(result[-<span class=\"number\">2</span>]).to eq(<span class=\"string\">'db &gt; Error: Table full.'</span>)</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  it <span class=\"string\">'allows inserting strings that are the maximum length'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    long_username = <span class=\"string\">\"a\"</span>*<span class=\"number\">32</span></span><br><span class=\"line\">+    long_email = <span class=\"string\">\"a\"</span>*<span class=\"number\">255</span></span><br><span class=\"line\">+    script = [</span><br><span class=\"line\">+      <span class=\"string\">\"insert 1 <span class=\"subst\">#&#123;long_username&#125;</span> <span class=\"subst\">#&#123;long_email&#125;</span>\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ]</span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; (1, <span class=\"subst\">#&#123;long_username&#125;</span>, <span class=\"subst\">#&#123;long_email&#125;</span>)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  it <span class=\"string\">'prints error message if strings are too long'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    long_username = <span class=\"string\">\"a\"</span>*<span class=\"number\">33</span></span><br><span class=\"line\">+    long_email = <span class=\"string\">\"a\"</span>*<span class=\"number\">256</span></span><br><span class=\"line\">+    script = [</span><br><span class=\"line\">+      <span class=\"string\">\"insert 1 <span class=\"subst\">#&#123;long_username&#125;</span> <span class=\"subst\">#&#123;long_email&#125;</span>\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ]</span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; String is too long.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  it <span class=\"string\">'prints an error message if id is negative'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    script = [</span><br><span class=\"line\">+      <span class=\"string\">\"insert -1 cstack foo@bar.com\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ]</span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; ID must be positive.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\">+<span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>"},{"title":"Part 5 - 游标的抽象化","date":"2019-02-03T09:18:34.000Z","_content":"\n# Part 5 - 游标的抽象化\n\n这应该是最短的一章了, 我们仅仅是重构了一点,为了更好的开始 B 树的抽象化.\n\n我们将会添加一个 `Cursor` 类, 标识数据在表的位置. 你可能需要做的事情:\n- 在表开始之前创建游标\n- 在表结束之后创建游标\n- 访问光标指向的行\n- 将光标前进到下一行\n\n基于上面的行为,我们需要将会实现下面的一些东西:\n- 通过游标删除行点\n- 通过游标修改行点\n- 通过给你的 ID 搜索表, 通过行的 ID 创建游标点.\n\n游标的类型:\n```c\n+struct Cursor_t {\n+  Table* table;\n+  uint32_t row_num;\n+  bool end_of_table;  // Indicates a position one past the last element\n+};\n+typedef struct Cursor_t Cursor;\n```\n\n根据我们当前的表数据结构，您需要在表中标识位置的所有内容都是行号。\n一个游标当然还有对表的应用.\n最后有一个布尔类型的标识`end_of_table`, 所以我们可以代表这是表的末尾\n\n`table_start()` 和 `table_end()` 会创建一些新的游标.\n\n```c\n+Cursor* table_start(Table* table) {\n+  Cursor* cursor = malloc(sizeof(Cursor));\n+  cursor->table = table;\n+  cursor->row_num = 0;\n+  cursor->end_of_table = (table->num_rows == 0);\n+\n+  return cursor;\n+}\n+\n+Cursor* table_end(Table* table) {\n+  Cursor* cursor = malloc(sizeof(Cursor));\n+  cursor->table = table;\n+  cursor->row_num = table->num_rows;\n+  cursor->end_of_table = true;\n+\n+  return cursor;\n+}\n```\n\n我们的`row_slot()` 方法将会变为`cursor_value()` 它返回一个指向光标所描述位置的指针.\n\n```c\n-void* row_slot(Table* table, uint32_t row_num) {\n+void* cursor_value(Cursor* cursor) {\n+  uint32_t row_num = cursor->row_num;\n   uint32_t page_num = row_num / ROWS_PER_PAGE;\n-  void* page = get_page(table->pager, page_num);\n+  void* page = get_page(cursor->table->pager, page_num);\n   uint32_t row_offset = row_num % ROWS_PER_PAGE;\n   uint32_t byte_offset = row_offset * ROW_SIZE;\n   return page + byte_offset;\n }\n```\n\n在我们当前的表结构中推进游标就像递增行号一样简单. 这在 B 树中会更加复杂\n\n```c\n+void cursor_advance(Cursor* cursor) {\n+  cursor->row_num += 1;\n+  if (cursor->row_num >= cursor->table->num_rows) {\n+    cursor->end_of_table = true;\n+  }\n+}\n```\n\n最后,我们可以改变虚拟机方法来使用游标抽象, 当我们查出一行数据, 我们将在表的尾部开一个游标, 将地址写入, 然后关闭游标.\n```c\n   Row* row_to_insert = &(statement->row_to_insert);\n+  Cursor* cursor = table_end(table);\n\n-  serialize_row(row_to_insert, row_slot(table, table->num_rows));\n+  serialize_row(row_to_insert, cursor_value(cursor));\n   table->num_rows += 1;\n\n+  free(cursor);\n+\n   return EXECUTE_SUCCESS;\n }\n```\n\n当我们 select 所有的行的时候, 我们在表开始的地方开一个游标, 打印行,然后移动游标到下一行, 一直重复直到行末.\n\n```c\nExecuteResult execute_select(Statement* statement, Table* table) {\n+  Cursor* cursor = table_start(table);\n+\n   Row row;\n-  for (uint32_t i = 0; i < table->num_rows; i++) {\n-    deserialize_row(row_slot(table, i), &row);\n+  while (!(cursor->end_of_table)) {\n+    deserialize_row(cursor_value(cursor), &row);\n     print_row(&row);\n+    cursor_advance(cursor);\n   }\n+\n+  free(cursor);\n+\n   return EXECUTE_SUCCESS;\n }\n```\n\n正如我所讲的, 这是一个简短的重构,为了将我们的table 数据重新写到 B 树中.\n`execute_select()` 和 `execute_insert()` 可以完全通过游标与表进行交互，而无需假设表的存储方式。\n\n下面是完整的代码改动:\n\n```c\n };\n typedef struct Table_t Table;\n \n+struct Cursor_t {\n+  Table* table;\n+  uint32_t row_num;\n+  bool end_of_table;  // Indicates a position one past the last element\n+};\n+typedef struct Cursor_t Cursor;\n+\n void print_row(Row* row) {\n   printf(\"(%d, %s, %s)\\n\", row->id, row->username, row->email);\n }\n@@ -125,14 +132,40 @@ void* get_page(Pager* pager, uint32_t page_num) {\n   return pager->pages[page_num];\n }\n \n-void* row_slot(Table* table, uint32_t row_num) {\n+Cursor* table_start(Table* table) {\n+  Cursor* cursor = malloc(sizeof(Cursor));\n+  cursor->table = table;\n+  cursor->row_num = 0;\n+  cursor->end_of_table = (table->num_rows == 0);\n+\n+  return cursor;\n+}\n+\n+Cursor* table_end(Table* table) {\n+  Cursor* cursor = malloc(sizeof(Cursor));\n+  cursor->table = table;\n+  cursor->row_num = table->num_rows;\n+  cursor->end_of_table = true;\n+\n+  return cursor;\n+}\n+\n+void* cursor_value(Cursor* cursor) {\n+  uint32_t row_num = cursor->row_num;\n   uint32_t page_num = row_num / ROWS_PER_PAGE;\n-  void* page = get_page(table->pager, page_num);\n+  void* page = get_page(cursor->table->pager, page_num);\n   uint32_t row_offset = row_num % ROWS_PER_PAGE;\n   uint32_t byte_offset = row_offset * ROW_SIZE;\n   return page + byte_offset;\n }\n \n+void cursor_advance(Cursor* cursor) {\n+  cursor->row_num += 1;\n+  if (cursor->row_num >= cursor->table->num_rows) {\n+    cursor->end_of_table = true;\n+  }\n+}\n+\n Pager* pager_open(const char* filename) {\n   int fd = open(filename,\n                 O_RDWR |      // Read/Write mode\n@@ -315,19 +348,28 @@ ExecuteResult execute_insert(Statement* statement, Table* table) {\n   }\n \n   Row* row_to_insert = &(statement->row_to_insert);\n+  Cursor* cursor = table_end(table);\n \n-  serialize_row(row_to_insert, row_slot(table, table->num_rows));\n+  serialize_row(row_to_insert, cursor_value(cursor));\n   table->num_rows += 1;\n \n+  free(cursor);\n+\n   return EXECUTE_SUCCESS;\n }\n \n ExecuteResult execute_select(Statement* statement, Table* table) {\n+  Cursor* cursor = table_start(table);\n+\n   Row row;\n-  for (uint32_t i = 0; i < table->num_rows; i++) {\n-    deserialize_row(row_slot(table, i), &row);\n+  while (!(cursor->end_of_table)) {\n+    deserialize_row(cursor_value(cursor), &row);\n     print_row(&row);\n+    cursor_advance(cursor);\n   }\n+\n+  free(cursor);\n+\n   return EXECUTE_SUCCESS;\n }\n```","source":"_posts/build_own_x/data_base/build_simple_database/Part6_the_cursor_abstrction.md","raw":"---\ntitle: Part 5 - 游标的抽象化\ndate: 2019-02-03 17:18:34\ncategories:\n- build-own-x\ntags:\n- database\n- db原理\n---\n\n# Part 5 - 游标的抽象化\n\n这应该是最短的一章了, 我们仅仅是重构了一点,为了更好的开始 B 树的抽象化.\n\n我们将会添加一个 `Cursor` 类, 标识数据在表的位置. 你可能需要做的事情:\n- 在表开始之前创建游标\n- 在表结束之后创建游标\n- 访问光标指向的行\n- 将光标前进到下一行\n\n基于上面的行为,我们需要将会实现下面的一些东西:\n- 通过游标删除行点\n- 通过游标修改行点\n- 通过给你的 ID 搜索表, 通过行的 ID 创建游标点.\n\n游标的类型:\n```c\n+struct Cursor_t {\n+  Table* table;\n+  uint32_t row_num;\n+  bool end_of_table;  // Indicates a position one past the last element\n+};\n+typedef struct Cursor_t Cursor;\n```\n\n根据我们当前的表数据结构，您需要在表中标识位置的所有内容都是行号。\n一个游标当然还有对表的应用.\n最后有一个布尔类型的标识`end_of_table`, 所以我们可以代表这是表的末尾\n\n`table_start()` 和 `table_end()` 会创建一些新的游标.\n\n```c\n+Cursor* table_start(Table* table) {\n+  Cursor* cursor = malloc(sizeof(Cursor));\n+  cursor->table = table;\n+  cursor->row_num = 0;\n+  cursor->end_of_table = (table->num_rows == 0);\n+\n+  return cursor;\n+}\n+\n+Cursor* table_end(Table* table) {\n+  Cursor* cursor = malloc(sizeof(Cursor));\n+  cursor->table = table;\n+  cursor->row_num = table->num_rows;\n+  cursor->end_of_table = true;\n+\n+  return cursor;\n+}\n```\n\n我们的`row_slot()` 方法将会变为`cursor_value()` 它返回一个指向光标所描述位置的指针.\n\n```c\n-void* row_slot(Table* table, uint32_t row_num) {\n+void* cursor_value(Cursor* cursor) {\n+  uint32_t row_num = cursor->row_num;\n   uint32_t page_num = row_num / ROWS_PER_PAGE;\n-  void* page = get_page(table->pager, page_num);\n+  void* page = get_page(cursor->table->pager, page_num);\n   uint32_t row_offset = row_num % ROWS_PER_PAGE;\n   uint32_t byte_offset = row_offset * ROW_SIZE;\n   return page + byte_offset;\n }\n```\n\n在我们当前的表结构中推进游标就像递增行号一样简单. 这在 B 树中会更加复杂\n\n```c\n+void cursor_advance(Cursor* cursor) {\n+  cursor->row_num += 1;\n+  if (cursor->row_num >= cursor->table->num_rows) {\n+    cursor->end_of_table = true;\n+  }\n+}\n```\n\n最后,我们可以改变虚拟机方法来使用游标抽象, 当我们查出一行数据, 我们将在表的尾部开一个游标, 将地址写入, 然后关闭游标.\n```c\n   Row* row_to_insert = &(statement->row_to_insert);\n+  Cursor* cursor = table_end(table);\n\n-  serialize_row(row_to_insert, row_slot(table, table->num_rows));\n+  serialize_row(row_to_insert, cursor_value(cursor));\n   table->num_rows += 1;\n\n+  free(cursor);\n+\n   return EXECUTE_SUCCESS;\n }\n```\n\n当我们 select 所有的行的时候, 我们在表开始的地方开一个游标, 打印行,然后移动游标到下一行, 一直重复直到行末.\n\n```c\nExecuteResult execute_select(Statement* statement, Table* table) {\n+  Cursor* cursor = table_start(table);\n+\n   Row row;\n-  for (uint32_t i = 0; i < table->num_rows; i++) {\n-    deserialize_row(row_slot(table, i), &row);\n+  while (!(cursor->end_of_table)) {\n+    deserialize_row(cursor_value(cursor), &row);\n     print_row(&row);\n+    cursor_advance(cursor);\n   }\n+\n+  free(cursor);\n+\n   return EXECUTE_SUCCESS;\n }\n```\n\n正如我所讲的, 这是一个简短的重构,为了将我们的table 数据重新写到 B 树中.\n`execute_select()` 和 `execute_insert()` 可以完全通过游标与表进行交互，而无需假设表的存储方式。\n\n下面是完整的代码改动:\n\n```c\n };\n typedef struct Table_t Table;\n \n+struct Cursor_t {\n+  Table* table;\n+  uint32_t row_num;\n+  bool end_of_table;  // Indicates a position one past the last element\n+};\n+typedef struct Cursor_t Cursor;\n+\n void print_row(Row* row) {\n   printf(\"(%d, %s, %s)\\n\", row->id, row->username, row->email);\n }\n@@ -125,14 +132,40 @@ void* get_page(Pager* pager, uint32_t page_num) {\n   return pager->pages[page_num];\n }\n \n-void* row_slot(Table* table, uint32_t row_num) {\n+Cursor* table_start(Table* table) {\n+  Cursor* cursor = malloc(sizeof(Cursor));\n+  cursor->table = table;\n+  cursor->row_num = 0;\n+  cursor->end_of_table = (table->num_rows == 0);\n+\n+  return cursor;\n+}\n+\n+Cursor* table_end(Table* table) {\n+  Cursor* cursor = malloc(sizeof(Cursor));\n+  cursor->table = table;\n+  cursor->row_num = table->num_rows;\n+  cursor->end_of_table = true;\n+\n+  return cursor;\n+}\n+\n+void* cursor_value(Cursor* cursor) {\n+  uint32_t row_num = cursor->row_num;\n   uint32_t page_num = row_num / ROWS_PER_PAGE;\n-  void* page = get_page(table->pager, page_num);\n+  void* page = get_page(cursor->table->pager, page_num);\n   uint32_t row_offset = row_num % ROWS_PER_PAGE;\n   uint32_t byte_offset = row_offset * ROW_SIZE;\n   return page + byte_offset;\n }\n \n+void cursor_advance(Cursor* cursor) {\n+  cursor->row_num += 1;\n+  if (cursor->row_num >= cursor->table->num_rows) {\n+    cursor->end_of_table = true;\n+  }\n+}\n+\n Pager* pager_open(const char* filename) {\n   int fd = open(filename,\n                 O_RDWR |      // Read/Write mode\n@@ -315,19 +348,28 @@ ExecuteResult execute_insert(Statement* statement, Table* table) {\n   }\n \n   Row* row_to_insert = &(statement->row_to_insert);\n+  Cursor* cursor = table_end(table);\n \n-  serialize_row(row_to_insert, row_slot(table, table->num_rows));\n+  serialize_row(row_to_insert, cursor_value(cursor));\n   table->num_rows += 1;\n \n+  free(cursor);\n+\n   return EXECUTE_SUCCESS;\n }\n \n ExecuteResult execute_select(Statement* statement, Table* table) {\n+  Cursor* cursor = table_start(table);\n+\n   Row row;\n-  for (uint32_t i = 0; i < table->num_rows; i++) {\n-    deserialize_row(row_slot(table, i), &row);\n+  while (!(cursor->end_of_table)) {\n+    deserialize_row(cursor_value(cursor), &row);\n     print_row(&row);\n+    cursor_advance(cursor);\n   }\n+\n+  free(cursor);\n+\n   return EXECUTE_SUCCESS;\n }\n```","slug":"build_own_x/data_base/build_simple_database/Part6_the_cursor_abstrction","published":1,"updated":"2019-02-03T09:54:43.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgyw00558seosp5hxixg","content":"<h1 id=\"Part-5-游标的抽象化\"><a href=\"#Part-5-游标的抽象化\" class=\"headerlink\" title=\"Part 5 - 游标的抽象化\"></a>Part 5 - 游标的抽象化</h1><p>这应该是最短的一章了, 我们仅仅是重构了一点,为了更好的开始 B 树的抽象化.</p>\n<p>我们将会添加一个 <code>Cursor</code> 类, 标识数据在表的位置. 你可能需要做的事情:</p>\n<ul>\n<li>在表开始之前创建游标</li>\n<li>在表结束之后创建游标</li>\n<li>访问光标指向的行</li>\n<li>将光标前进到下一行</li>\n</ul>\n<p>基于上面的行为,我们需要将会实现下面的一些东西:</p>\n<ul>\n<li>通过游标删除行点</li>\n<li>通过游标修改行点</li>\n<li>通过给你的 ID 搜索表, 通过行的 ID 创建游标点.</li>\n</ul>\n<p>游标的类型:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> &#123;</span></span><br><span class=\"line\">+  Table* table;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> row_num;</span><br><span class=\"line\">+  <span class=\"keyword\">bool</span> end_of_table;  <span class=\"comment\">// Indicates a position one past the last element</span></span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> <span class=\"title\">Cursor</span>;</span></span><br></pre></td></tr></table></figure></p>\n<p>根据我们当前的表数据结构，您需要在表中标识位置的所有内容都是行号。<br>一个游标当然还有对表的应用.<br>最后有一个布尔类型的标识<code>end_of_table</code>, 所以我们可以代表这是表的末尾</p>\n<p><code>table_start()</code> 和 <code>table_end()</code> 会创建一些新的游标.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">table_start</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">+  cursor-&gt;table = table;</span><br><span class=\"line\">+  cursor-&gt;row_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">+  cursor-&gt;end_of_table = (table-&gt;num_rows == <span class=\"number\">0</span>);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">table_end</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">+  cursor-&gt;table = table;</span><br><span class=\"line\">+  cursor-&gt;row_num = table-&gt;num_rows;</span><br><span class=\"line\">+  cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>我们的<code>row_slot()</code> 方法将会变为<code>cursor_value()</code> 它返回一个指向光标所描述位置的指针.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">row_slot</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> row_num)</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">cursor_value</span><span class=\"params\">(Cursor* cursor)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> row_num = cursor-&gt;row_num;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">void</span>* page = get_page(table-&gt;pager, page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* page = get_page(cursor-&gt;table-&gt;pager, page_num);</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>在我们当前的表结构中推进游标就像递增行号一样简单. 这在 B 树中会更加复杂</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cursor_advance</span><span class=\"params\">(Cursor* cursor)</span> </span>&#123;</span><br><span class=\"line\">+  cursor-&gt;row_num += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (cursor-&gt;row_num &gt;= cursor-&gt;table-&gt;num_rows) &#123;</span><br><span class=\"line\">+    cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>最后,我们可以改变虚拟机方法来使用游标抽象, 当我们查出一行数据, 我们将在表的尾部开一个游标, 将地址写入, 然后关闭游标.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">+  Cursor* cursor = table_end(table);</span><br><span class=\"line\"></span><br><span class=\"line\">-  serialize_row(row_to_insert, row_slot(table, table-&gt;num_rows));</span><br><span class=\"line\">+  serialize_row(row_to_insert, cursor_value(cursor));</span><br><span class=\"line\">   table-&gt;num_rows += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">+  <span class=\"built_in\">free</span>(cursor);</span><br><span class=\"line\">+</span><br><span class=\"line\">   <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>当我们 select 所有的行的时候, 我们在表开始的地方开一个游标, 打印行,然后移动游标到下一行, 一直重复直到行末.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ExecuteResult <span class=\"title\">execute_select</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Cursor* cursor = table_start(table);</span><br><span class=\"line\">+</span><br><span class=\"line\">   Row row;</span><br><span class=\"line\">-  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; table-&gt;num_rows; i++) &#123;</span><br><span class=\"line\">-    deserialize_row(row_slot(table, i), &amp;row);</span><br><span class=\"line\">+  <span class=\"keyword\">while</span> (!(cursor-&gt;end_of_table)) &#123;</span><br><span class=\"line\">+    deserialize_row(cursor_value(cursor), &amp;row);</span><br><span class=\"line\">     print_row(&amp;row);</span><br><span class=\"line\">+    cursor_advance(cursor);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"built_in\">free</span>(cursor);</span><br><span class=\"line\">+</span><br><span class=\"line\">   <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>正如我所讲的, 这是一个简短的重构,为了将我们的table 数据重新写到 B 树中.<br><code>execute_select()</code> 和 <code>execute_insert()</code> 可以完全通过游标与表进行交互，而无需假设表的存储方式。</p>\n<p>下面是完整的代码改动:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> <span class=\"title\">Table</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> &#123;</span></span><br><span class=\"line\">+  Table* table;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> row_num;</span><br><span class=\"line\">+  <span class=\"keyword\">bool</span> end_of_table;  <span class=\"comment\">// Indicates a position one past the last element</span></span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> <span class=\"title\">Cursor</span>;</span></span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_row</span><span class=\"params\">(Row* row)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"(%d, %s, %s)\\n\"</span>, row-&gt;id, row-&gt;username, row-&gt;email);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">@@ <span class=\"number\">-125</span>,<span class=\"number\">14</span> +<span class=\"number\">132</span>,<span class=\"number\">40</span> @@ <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">get_page</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> pager-&gt;pages[page_num];</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">row_slot</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> row_num)</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">table_start</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">+  cursor-&gt;table = table;</span><br><span class=\"line\">+  cursor-&gt;row_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">+  cursor-&gt;end_of_table = (table-&gt;num_rows == <span class=\"number\">0</span>);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">table_end</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">+  cursor-&gt;table = table;</span><br><span class=\"line\">+  cursor-&gt;row_num = table-&gt;num_rows;</span><br><span class=\"line\">+  cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">cursor_value</span><span class=\"params\">(Cursor* cursor)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> row_num = cursor-&gt;row_num;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">void</span>* page = get_page(table-&gt;pager, page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* page = get_page(cursor-&gt;table-&gt;pager, page_num);</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cursor_advance</span><span class=\"params\">(Cursor* cursor)</span> </span>&#123;</span><br><span class=\"line\">+  cursor-&gt;row_num += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (cursor-&gt;row_num &gt;= cursor-&gt;table-&gt;num_rows) &#123;</span><br><span class=\"line\">+    cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\">Pager* <span class=\"title\">pager_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> fd = open(filename,</span><br><span class=\"line\">                 O_RDWR |      <span class=\"comment\">// Read/Write mode</span></span><br><span class=\"line\">@@ <span class=\"number\">-315</span>,<span class=\"number\">19</span> +<span class=\"number\">348</span>,<span class=\"number\">28</span> @@ ExecuteResult execute_insert(Statement* statement, Table* table) &#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">+  Cursor* cursor = table_end(table);</span><br><span class=\"line\"> </span><br><span class=\"line\">-  serialize_row(row_to_insert, row_slot(table, table-&gt;num_rows));</span><br><span class=\"line\">+  serialize_row(row_to_insert, cursor_value(cursor));</span><br><span class=\"line\">   table-&gt;num_rows += <span class=\"number\">1</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">+  <span class=\"built_in\">free</span>(cursor);</span><br><span class=\"line\">+</span><br><span class=\"line\">   <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> ExecuteResult execute_select(Statement* statement, Table* table) &#123;</span><br><span class=\"line\">+  Cursor* cursor = table_start(table);</span><br><span class=\"line\">+</span><br><span class=\"line\">   Row row;</span><br><span class=\"line\">-  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; table-&gt;num_rows; i++) &#123;</span><br><span class=\"line\">-    deserialize_row(row_slot(table, i), &amp;row);</span><br><span class=\"line\">+  <span class=\"keyword\">while</span> (!(cursor-&gt;end_of_table)) &#123;</span><br><span class=\"line\">+    deserialize_row(cursor_value(cursor), &amp;row);</span><br><span class=\"line\">     print_row(&amp;row);</span><br><span class=\"line\">+    cursor_advance(cursor);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"built_in\">free</span>(cursor);</span><br><span class=\"line\">+</span><br><span class=\"line\">   <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Part-5-游标的抽象化\"><a href=\"#Part-5-游标的抽象化\" class=\"headerlink\" title=\"Part 5 - 游标的抽象化\"></a>Part 5 - 游标的抽象化</h1><p>这应该是最短的一章了, 我们仅仅是重构了一点,为了更好的开始 B 树的抽象化.</p>\n<p>我们将会添加一个 <code>Cursor</code> 类, 标识数据在表的位置. 你可能需要做的事情:</p>\n<ul>\n<li>在表开始之前创建游标</li>\n<li>在表结束之后创建游标</li>\n<li>访问光标指向的行</li>\n<li>将光标前进到下一行</li>\n</ul>\n<p>基于上面的行为,我们需要将会实现下面的一些东西:</p>\n<ul>\n<li>通过游标删除行点</li>\n<li>通过游标修改行点</li>\n<li>通过给你的 ID 搜索表, 通过行的 ID 创建游标点.</li>\n</ul>\n<p>游标的类型:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> &#123;</span></span><br><span class=\"line\">+  Table* table;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> row_num;</span><br><span class=\"line\">+  <span class=\"keyword\">bool</span> end_of_table;  <span class=\"comment\">// Indicates a position one past the last element</span></span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> <span class=\"title\">Cursor</span>;</span></span><br></pre></td></tr></table></figure></p>\n<p>根据我们当前的表数据结构，您需要在表中标识位置的所有内容都是行号。<br>一个游标当然还有对表的应用.<br>最后有一个布尔类型的标识<code>end_of_table</code>, 所以我们可以代表这是表的末尾</p>\n<p><code>table_start()</code> 和 <code>table_end()</code> 会创建一些新的游标.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">table_start</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">+  cursor-&gt;table = table;</span><br><span class=\"line\">+  cursor-&gt;row_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">+  cursor-&gt;end_of_table = (table-&gt;num_rows == <span class=\"number\">0</span>);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">table_end</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">+  cursor-&gt;table = table;</span><br><span class=\"line\">+  cursor-&gt;row_num = table-&gt;num_rows;</span><br><span class=\"line\">+  cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>我们的<code>row_slot()</code> 方法将会变为<code>cursor_value()</code> 它返回一个指向光标所描述位置的指针.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">row_slot</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> row_num)</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">cursor_value</span><span class=\"params\">(Cursor* cursor)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> row_num = cursor-&gt;row_num;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">void</span>* page = get_page(table-&gt;pager, page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* page = get_page(cursor-&gt;table-&gt;pager, page_num);</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>在我们当前的表结构中推进游标就像递增行号一样简单. 这在 B 树中会更加复杂</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cursor_advance</span><span class=\"params\">(Cursor* cursor)</span> </span>&#123;</span><br><span class=\"line\">+  cursor-&gt;row_num += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (cursor-&gt;row_num &gt;= cursor-&gt;table-&gt;num_rows) &#123;</span><br><span class=\"line\">+    cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>最后,我们可以改变虚拟机方法来使用游标抽象, 当我们查出一行数据, 我们将在表的尾部开一个游标, 将地址写入, 然后关闭游标.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">+  Cursor* cursor = table_end(table);</span><br><span class=\"line\"></span><br><span class=\"line\">-  serialize_row(row_to_insert, row_slot(table, table-&gt;num_rows));</span><br><span class=\"line\">+  serialize_row(row_to_insert, cursor_value(cursor));</span><br><span class=\"line\">   table-&gt;num_rows += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">+  <span class=\"built_in\">free</span>(cursor);</span><br><span class=\"line\">+</span><br><span class=\"line\">   <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>当我们 select 所有的行的时候, 我们在表开始的地方开一个游标, 打印行,然后移动游标到下一行, 一直重复直到行末.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ExecuteResult <span class=\"title\">execute_select</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Cursor* cursor = table_start(table);</span><br><span class=\"line\">+</span><br><span class=\"line\">   Row row;</span><br><span class=\"line\">-  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; table-&gt;num_rows; i++) &#123;</span><br><span class=\"line\">-    deserialize_row(row_slot(table, i), &amp;row);</span><br><span class=\"line\">+  <span class=\"keyword\">while</span> (!(cursor-&gt;end_of_table)) &#123;</span><br><span class=\"line\">+    deserialize_row(cursor_value(cursor), &amp;row);</span><br><span class=\"line\">     print_row(&amp;row);</span><br><span class=\"line\">+    cursor_advance(cursor);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"built_in\">free</span>(cursor);</span><br><span class=\"line\">+</span><br><span class=\"line\">   <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>正如我所讲的, 这是一个简短的重构,为了将我们的table 数据重新写到 B 树中.<br><code>execute_select()</code> 和 <code>execute_insert()</code> 可以完全通过游标与表进行交互，而无需假设表的存储方式。</p>\n<p>下面是完整的代码改动:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> <span class=\"title\">Table</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> &#123;</span></span><br><span class=\"line\">+  Table* table;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> row_num;</span><br><span class=\"line\">+  <span class=\"keyword\">bool</span> end_of_table;  <span class=\"comment\">// Indicates a position one past the last element</span></span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> <span class=\"title\">Cursor</span>;</span></span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_row</span><span class=\"params\">(Row* row)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"(%d, %s, %s)\\n\"</span>, row-&gt;id, row-&gt;username, row-&gt;email);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">@@ <span class=\"number\">-125</span>,<span class=\"number\">14</span> +<span class=\"number\">132</span>,<span class=\"number\">40</span> @@ <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">get_page</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> pager-&gt;pages[page_num];</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">row_slot</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> row_num)</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">table_start</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">+  cursor-&gt;table = table;</span><br><span class=\"line\">+  cursor-&gt;row_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">+  cursor-&gt;end_of_table = (table-&gt;num_rows == <span class=\"number\">0</span>);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">table_end</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">+  cursor-&gt;table = table;</span><br><span class=\"line\">+  cursor-&gt;row_num = table-&gt;num_rows;</span><br><span class=\"line\">+  cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">cursor_value</span><span class=\"params\">(Cursor* cursor)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> row_num = cursor-&gt;row_num;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">void</span>* page = get_page(table-&gt;pager, page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* page = get_page(cursor-&gt;table-&gt;pager, page_num);</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cursor_advance</span><span class=\"params\">(Cursor* cursor)</span> </span>&#123;</span><br><span class=\"line\">+  cursor-&gt;row_num += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (cursor-&gt;row_num &gt;= cursor-&gt;table-&gt;num_rows) &#123;</span><br><span class=\"line\">+    cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\">Pager* <span class=\"title\">pager_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> fd = open(filename,</span><br><span class=\"line\">                 O_RDWR |      <span class=\"comment\">// Read/Write mode</span></span><br><span class=\"line\">@@ <span class=\"number\">-315</span>,<span class=\"number\">19</span> +<span class=\"number\">348</span>,<span class=\"number\">28</span> @@ ExecuteResult execute_insert(Statement* statement, Table* table) &#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">+  Cursor* cursor = table_end(table);</span><br><span class=\"line\"> </span><br><span class=\"line\">-  serialize_row(row_to_insert, row_slot(table, table-&gt;num_rows));</span><br><span class=\"line\">+  serialize_row(row_to_insert, cursor_value(cursor));</span><br><span class=\"line\">   table-&gt;num_rows += <span class=\"number\">1</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">+  <span class=\"built_in\">free</span>(cursor);</span><br><span class=\"line\">+</span><br><span class=\"line\">   <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> ExecuteResult execute_select(Statement* statement, Table* table) &#123;</span><br><span class=\"line\">+  Cursor* cursor = table_start(table);</span><br><span class=\"line\">+</span><br><span class=\"line\">   Row row;</span><br><span class=\"line\">-  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; table-&gt;num_rows; i++) &#123;</span><br><span class=\"line\">-    deserialize_row(row_slot(table, i), &amp;row);</span><br><span class=\"line\">+  <span class=\"keyword\">while</span> (!(cursor-&gt;end_of_table)) &#123;</span><br><span class=\"line\">+    deserialize_row(cursor_value(cursor), &amp;row);</span><br><span class=\"line\">     print_row(&amp;row);</span><br><span class=\"line\">+    cursor_advance(cursor);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"built_in\">free</span>(cursor);</span><br><span class=\"line\">+</span><br><span class=\"line\">   <span class=\"keyword\">return</span> EXECUTE_SUCCESS;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>"},{"title":"Part 5 - 持久化到硬盘","date":"2019-01-28T14:30:00.000Z","_content":"\n# Part 5 - 持久化到硬盘\n\n> “Nothing in the world can take the place of persistence.” – Calvin Coolidge\n\n我们的数据库允许你插入数据并且取回数据, 但是仅仅是在程序运行的时候.如果你 kill 程序或者重启它, 你的数据将会丢失. 这个spec单元测试类可以模拟这个情况:\n\n```ruby\nit 'keeps data after closing connection' do\n  result1 = run_script([\n    \"insert 1 user1 person1@example.com\",\n    \".exit\",\n  ])\n  expect(result1).to match_array([\n    \"db > Executed.\",\n    \"db > \",\n  ])\n  result2 = run_script([\n    \"select\",\n    \".exit\",\n  ])\n  expect(result2).to match_array([\n    \"db > (1, user1, person1@example.com)\",\n    \"Executed.\",\n    \"db > \",\n  ])\nend\n```\n\n就行 Sqlite 一样, 我们将持久化数据到一个文件中.\n\n我们已经将行数据序列化行数据到内存块中了, 添加序列化, 我们可以简单的将内存块数据到文件中, 并且在下次程序启动时读取文件到内存中.\n\n为了使其更加简单,我们将定义一个抽象的`pager` , 我们可以向 `pager` 获取页面 x 的内容, 可以简单的将内存块写到文件中. 它首先会在缓存中查看, 如果缓存中没有再从硬盘从拷贝数据.\n\n![How our program matches up with SQLite architecture](https://cstack.github.io/db_tutorial/assets/images/arch-part5.gif)\nHow our program matches up with SQLite architecture\n\n`Pager` 访问页面缓存和文件, `Tabel` 通过 `pager` 请求页面数据.\n\n```c\n+struct Pager_t {\n+  int file_descriptor;\n+  uint32_t file_length;\n+  void* pages[TABLE_MAX_PAGES];\n+};\n+typedef struct Pager_t Pager;\n+\n struct Table_t {\n-  void* pages[TABLE_MAX_PAGES];\n+  Pager* pager;\n   uint32_t num_rows;\n };\n```\n\n我重新命名下 `new_table()` 为 `db_open()` , 它现在有打开数据库的效果了, 通过打开一个连接, 我的意思是:\n- 打开数据库文件\n- 初始化一页数据\n- 初始化一个 table 的结构\n\n```c\n-Table* new_table() {\n+Table* db_open(const char* filename) {\n+  Pager* pager = pager_open(filename);\n+  uint32_t num_rows = pager->file_length / ROW_SIZE;\n+\n   Table* table = malloc(sizeof(Table));\n-  table->num_rows = 0;\n+  table->pager = pager;\n+  table->num_rows = num_rows;\n\n   return table;\n }\n```\n\n`db_open()` 方法调用的是 `pager_open()` 方法, 将打开数据库文件并且跟踪它的大小, 同时初始化page 的缓存为 NULL.\n\n```c\n+Pager* pager_open(const char* filename) {\n+  int fd = open(filename,\n+                O_RDWR |      // Read/Write mode\n+                    O_CREAT,  // Create file if it does not exist\n+                S_IWUSR |     // User write permission\n+                    S_IRUSR   // User read permission\n+                );\n+\n+  if (fd == -1) {\n+    printf(\"Unable to open file\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  off_t file_length = lseek(fd, 0, SEEK_END);\n+\n+  Pager* pager = malloc(sizeof(Pager));\n+  pager->file_descriptor = fd;\n+  pager->file_length = file_length;\n+\n+  for (uint32_t i = 0; i < TABLE_MAX_PAGES; i++) {\n+    pager->pages[i] = NULL;\n+  }\n+\n+  return pager;\n+}\n```\n\n随着我们新的抽象, 我们需要将我们获取页数据的代码移动到新的方法中.\n\n```c\n void* row_slot(Table* table, uint32_t row_num) {\n   uint32_t page_num = row_num / ROWS_PER_PAGE;\n-  void* page = table->pages[page_num];\n-  if (!page) {\n-    // Allocate memory only when we try to access page\n-    page = table->pages[page_num] = malloc(PAGE_SIZE);\n-  }\n+  void* page = get_page(table->pager, page_num);\n   uint32_t row_offset = row_num % ROWS_PER_PAGE;\n   uint32_t byte_offset = row_offset * ROW_SIZE;\n   return page + byte_offset;\n }\n```\n\n`get_page()` 方法中存在一个逻辑是处理丢失的缓存问题. 我们假设页面在数据库文件中一个接一个地保存：第0页的偏移量是0, 第一页的偏移量是4096, 第二页的偏移量是8192,等等. 如果请求的页面超出了文件边界值, 我们知道将会是空白的. 所以我们仅分配一些内存并且返回它. 当我 flush 缓存数据到硬盘后, 添加到文件中.\n\n```c\n+void* get_page(Pager* pager, uint32_t page_num) {\n+  if (page_num > TABLE_MAX_PAGES) {\n+    printf(\"Tried to fetch page number out of bounds. %d > %d\\n\", page_num,\n+           TABLE_MAX_PAGES);\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  if (pager->pages[page_num] == NULL) {\n+    // Cache miss. Allocate memory and load from file.\n+    void* page = malloc(PAGE_SIZE);\n+    uint32_t num_pages = pager->file_length / PAGE_SIZE;\n+\n+    // We might save a partial page at the end of the file\n+    if (pager->file_length % PAGE_SIZE) {\n+      num_pages += 1;\n+    }\n+\n+    if (page_num <= num_pages) {\n+      lseek(pager->file_descriptor, page_num * PAGE_SIZE, SEEK_SET);\n+      ssize_t bytes_read = read(pager->file_descriptor, page, PAGE_SIZE);\n+      if (bytes_read == -1) {\n+        printf(\"Error reading file: %d\\n\", errno);\n+        exit(EXIT_FAILURE);\n+      }\n+    }\n+\n+    pager->pages[page_num] = page;\n+  }\n+\n+  return pager->pages[page_num];\n+}\n```\n\n现在我们将等待缓存flush 到硬盘, 直到用户关闭了数据库连接, 当用户退出后,我们会去调用`db_close()` 方法\n- flush 页面缓存到硬盘\n- 关闭数据库文件\n- 释放 `pager` 和 `table` 的内存\n\n```c\n+void db_close(Table* table) {\n+  Pager* pager = table->pager;\n+  uint32_t num_full_pages = table->num_rows / ROWS_PER_PAGE;\n+\n+  for (uint32_t i = 0; i < num_full_pages; i++) {\n+    if (pager->pages[i] == NULL) {\n+      continue;\n+    }\n+    pager_flush(pager, i, PAGE_SIZE);\n+    free(pager->pages[i]);\n+    pager->pages[i] = NULL;\n+  }\n+\n+  // There may be a partial page to write to the end of the file\n+  // This should not be needed after we switch to a B-tree\n+  uint32_t num_additional_rows = table->num_rows % ROWS_PER_PAGE;\n+  if (num_additional_rows > 0) {\n+    uint32_t page_num = num_full_pages;\n+    if (pager->pages[page_num] != NULL) {\n+      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);\n+      free(pager->pages[page_num]);\n+      pager->pages[page_num] = NULL;\n+    }\n+  }\n+\n+  int result = close(pager->file_descriptor);\n+  if (result == -1) {\n+    printf(\"Error closing db file.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+  for (uint32_t i = 0; i < TABLE_MAX_PAGES; i++) {\n+    void* page = pager->pages[i];\n+    if (page) {\n+      free(page);\n+      pager->pages[i] = NULL;\n+    }\n+  }\n+  free(pager);\n+}\n+\n-MetaCommandResult do_meta_command(InputBuffer* input_buffer) {\n+MetaCommandResult do_meta_command(InputBuffer* input_buffer, Table* table) {\n   if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n+    db_close(table);\n     exit(EXIT_SUCCESS);\n   } else {\n     return META_COMMAND_UNRECOGNIZED_COMMAND;\n```\n\n在我们当前的设计中, 文件的长度取决于有多少数据在数据库中. 所以我们需要写一个局部的文件在文件的尾部.  这就是为啥`pager_flush()` 同时需要一个页面和文件大小.这不是最好的设计, 当我们使用 B 树后, 这个会变好的.\n\n```c\n+void pager_flush(Pager* pager, uint32_t page_num, uint32_t size) {\n+  if (pager->pages[page_num] == NULL) {\n+    printf(\"Tried to flush null page\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  off_t offset = lseek(pager->file_descriptor, page_num * PAGE_SIZE, SEEK_SET);\n+\n+  if (offset == -1) {\n+    printf(\"Error seeking: %d\\n\", errno);\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  ssize_t bytes_written =\n+      write(pager->file_descriptor, pager->pages[page_num], size);\n+\n+  if (bytes_written == -1) {\n+    printf(\"Error writing: %d\\n\", errno);\n+    exit(EXIT_FAILURE);\n+  }\n+}\n```\n\n最后, 我们需要从命令行接收文件名的参数, 别忘了添加扩展参数到do_meta_command方法中.\n\n```c\nint main(int argc, char* argv[]) {\n-  Table* table = new_table();\n+  if (argc < 2) {\n+    printf(\"Must supply a database filename.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  char* filename = argv[1];\n+  Table* table = db_open(filename);\n+\n   InputBuffer* input_buffer = new_input_buffer();\n   while (true) {\n     print_prompt();\n     read_input(input_buffer);\n \n     if (input_buffer->buffer[0] == '.') {\n-      switch (do_meta_command(input_buffer)) {\n+      switch (do_meta_command(input_buffer, table)) {\n```\n\n通过这些改变, 我们的数据库可以关闭重新打开, 我们的数据依旧存在着\n\n```sh\n~ ./db mydb.db\ndb > insert 1 cstack foo@bar.com\nExecuted.\ndb > insert 2 voltorb volty@example.com\nExecuted.\ndb > .exit\n~\n~ ./db mydb.db\ndb > select\n(1, cstack, foo@bar.com)\n(2, voltorb, volty@example.com)\nExecuted.\ndb > .exit\n~\n```\n\n为找一些有趣的事, 我们来看下 mydb.db 文件 看看我们的数据是如何存储的. 我们将使用 vim 的16进制编辑器打开它.\n\n```sh\nvim mydb.db\n:%!xxd\n```\n\n![文件内容](https://cstack.github.io/db_tutorial/assets/images/file-format.png)\n\n第一行的4个字节是我们的 ID (4个字节是因为我们存储了一个 uint32_t). 它以[little-endian字节顺序](https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F)存储，因此最低有效字节首先出现（01）,随后跟的是高位字节(00 00 00). 我们使用`memcpy()`方法将 Row 结构的中的数据拷贝到 page 缓存中, 所以这个也意味着这个结构在内存中也是底字节序的. 这个属性是我们汇编程序所决定的. 如果我们写了一个小端序的数据库文件,然后在大端序的机器上打开的, 我们需要修改`serialize_now()` 和 `deserialize_now()`方法保证读取和存储都是相同的顺序.\n\n下一个33字节存储的是用户名, 并且一个终止符结束.  显示出了 \"cstack\" 在 ASCII 码 在16进制 63 73 74 61 63 6b, 紧随其后的是的一个空字符(00). 剩下的33个字节是没有用的\n\n下一个256字节存储的是邮箱,用的同样的方式. 这里我们能看见一堆随机码在空字符后面.这个很可能是在Row结构没有初始化的内存. 我们拷贝了整个256字节的邮件 buffer 到文件中, 包含了在字符串结束后的内容. 当我们分配该结构时，内存中的内容仍然存在. 但由于我们使用终止空字符，因此它对行为没有影响。\n\n## 总结\n\n好的,我们已经持久化了, 但是现在他并不是最好的. 例如, 如果你 kill 进程没有使用 `.exit` 命令, 你将会丢失你的修改. 另外我们写了所有的 page 到磁盘中, 甚至自从我们从磁盘读取它们以来没有改变的页面。\n\n下一步我们将介绍游标, 这会使实现 B 树更加简单.\n\n### 完整的修改\n\n```c\n+#include <errno.h>\n+#include <fcntl.h>\n #include <stdbool.h>\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n+#include <unistd.h>\n \n struct InputBuffer_t {\n   char* buffer;\n@@ -61,8 +64,15 @@ const uint32_t TABLE_MAX_PAGES = 100;\n const uint32_t ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;\n const uint32_t TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;\n \n-struct Table_t {\n+struct Pager_t {\n+  int file_descriptor;\n+  uint32_t file_length;\n   void* pages[TABLE_MAX_PAGES];\n+};\n+typedef struct Pager_t Pager;\n+\n+struct Table_t {\n+  Pager* pager;\n   uint32_t num_rows;\n };\n typedef struct Table_t Table;\n@@ -83,21 +93,79 @@ void deserialize_row(void* source, Row* destination) {\n   memcpy(&(destination->email), source + EMAIL_OFFSET, EMAIL_SIZE);\n }\n \n+void* get_page(Pager* pager, uint32_t page_num) {\n+  if (page_num > TABLE_MAX_PAGES) {\n+    printf(\"Tried to fetch page number out of bounds. %d > %d\\n\", page_num,\n+           TABLE_MAX_PAGES);\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  if (pager->pages[page_num] == NULL) {\n+    // Cache miss. Allocate memory and load from file.\n+    void* page = malloc(PAGE_SIZE);\n+    uint32_t num_pages = pager->file_length / PAGE_SIZE;\n+\n+    // We might save a partial page at the end of the file\n+    if (pager->file_length % PAGE_SIZE) {\n+      num_pages += 1;\n+    }\n+\n+    if (page_num <= num_pages) {\n+      lseek(pager->file_descriptor, page_num * PAGE_SIZE, SEEK_SET);\n+      ssize_t bytes_read = read(pager->file_descriptor, page, PAGE_SIZE);\n+      if (bytes_read == -1) {\n+        printf(\"Error reading file: %d\\n\", errno);\n+        exit(EXIT_FAILURE);\n+      }\n+    }\n+\n+    pager->pages[page_num] = page;\n+  }\n+\n+  return pager->pages[page_num];\n+}\n+\n void* row_slot(Table* table, uint32_t row_num) {\n   uint32_t page_num = row_num / ROWS_PER_PAGE;\n-  void* page = table->pages[page_num];\n-  if (!page) {\n-    // Allocate memory only when we try to access page\n-    page = table->pages[page_num] = malloc(PAGE_SIZE);\n-  }\n+  void* page = get_page(table->pager, page_num);\n   uint32_t row_offset = row_num % ROWS_PER_PAGE;\n   uint32_t byte_offset = row_offset * ROW_SIZE;\n   return page + byte_offset;\n }\n \n-Table* new_table() {\n+Pager* pager_open(const char* filename) {\n+  int fd = open(filename,\n+                O_RDWR |      // Read/Write mode\n+                    O_CREAT,  // Create file if it does not exist\n+                S_IWUSR |     // User write permission\n+                    S_IRUSR   // User read permission\n+                );\n+\n+  if (fd == -1) {\n+    printf(\"Unable to open file\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  off_t file_length = lseek(fd, 0, SEEK_END);\n+\n+  Pager* pager = malloc(sizeof(Pager));\n+  pager->file_descriptor = fd;\n+  pager->file_length = file_length;\n+\n+  for (uint32_t i = 0; i < TABLE_MAX_PAGES; i++) {\n+    pager->pages[i] = NULL;\n+  }\n+\n+  return pager;\n+}\n+\n+Table* db_open(const char* filename) {\n+  Pager* pager = pager_open(filename);\n+  uint32_t num_rows = pager->file_length / ROW_SIZE;\n+\n   Table* table = malloc(sizeof(Table));\n-  table->num_rows = 0;\n+  table->pager = pager;\n+  table->num_rows = num_rows;\n \n   return table;\n }\n@@ -127,8 +195,71 @@ void read_input(InputBuffer* input_buffer) {\n   input_buffer->buffer[bytes_read - 1] = 0;\n }\n \n-MetaCommandResult do_meta_command(InputBuffer* input_buffer) {\n+void pager_flush(Pager* pager, uint32_t page_num, uint32_t size) {\n+  if (pager->pages[page_num] == NULL) {\n+    printf(\"Tried to flush null page\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  off_t offset = lseek(pager->file_descriptor, page_num * PAGE_SIZE, SEEK_SET);\n+\n+  if (offset == -1) {\n+    printf(\"Error seeking: %d\\n\", errno);\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  ssize_t bytes_written =\n+      write(pager->file_descriptor, pager->pages[page_num], size);\n+\n+  if (bytes_written == -1) {\n+    printf(\"Error writing: %d\\n\", errno);\n+    exit(EXIT_FAILURE);\n+  }\n+}\n+\n+void db_close(Table* table) {\n+  Pager* pager = table->pager;\n+  uint32_t num_full_pages = table->num_rows / ROWS_PER_PAGE;\n+\n+  for (uint32_t i = 0; i < num_full_pages; i++) {\n+    if (pager->pages[i] == NULL) {\n+      continue;\n+    }\n+    pager_flush(pager, i, PAGE_SIZE);\n+    free(pager->pages[i]);\n+    pager->pages[i] = NULL;\n+  }\n+\n+  // There may be a partial page to write to the end of the file\n+  // This should not be needed after we switch to a B-tree\n+  uint32_t num_additional_rows = table->num_rows % ROWS_PER_PAGE;\n+  if (num_additional_rows > 0) {\n+    uint32_t page_num = num_full_pages;\n+    if (pager->pages[page_num] != NULL) {\n+      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);\n+      free(pager->pages[page_num]);\n+      pager->pages[page_num] = NULL;\n+    }\n+  }\n+\n+  int result = close(pager->file_descriptor);\n+  if (result == -1) {\n+    printf(\"Error closing db file.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+  for (uint32_t i = 0; i < TABLE_MAX_PAGES; i++) {\n+    void* page = pager->pages[i];\n+    if (page) {\n+      free(page);\n+      pager->pages[i] = NULL;\n+    }\n+  }\n+  free(pager);\n+}\n+\n+MetaCommandResult do_meta_command(InputBuffer* input_buffer, Table* table) {\n   if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n+    db_close(table);\n     exit(EXIT_SUCCESS);\n   } else {\n     return META_COMMAND_UNRECOGNIZED_COMMAND;\n@@ -210,14 +341,21 @@ ExecuteResult execute_statement(Statement* statement, Table* table) {\n }\n \n int main(int argc, char* argv[]) {\n-  Table* table = new_table();\n+  if (argc < 2) {\n+    printf(\"Must supply a database filename.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  char* filename = argv[1];\n+  Table* table = db_open(filename);\n+\n   InputBuffer* input_buffer = new_input_buffer();\n   while (true) {\n     print_prompt();\n     read_input(input_buffer);\n \n     if (input_buffer->buffer[0] == '.') {\n-      switch (do_meta_command(input_buffer)) {\n+      switch (do_meta_command(input_buffer, table)) {\n         case (META_COMMAND_SUCCESS):\n           continue;\n         case (META_COMMAND_UNRECOGNIZED_COMMAND):\ndiff --git a/spec/main_spec.rb b/spec/main_spec.rb\nindex 21561ce..bc0180a 100644\n--- a/spec/main_spec.rb\n+++ b/spec/main_spec.rb\n@@ -1,7 +1,11 @@\n describe 'database' do\n+  before do\n+    `rm -rf test.db`\n+  end\n+\n   def run_script(commands)\n     raw_output = nil\n-    IO.popen(\"./db\", \"r+\") do |pipe|\n+    IO.popen(\"./db test.db\", \"r+\") do |pipe|\n       commands.each do |command|\n         pipe.puts command\n       end\n@@ -28,6 +32,27 @@ describe 'database' do\n     ])\n   end\n \n+  it 'keeps data after closing connection' do\n+    result1 = run_script([\n+      \"insert 1 user1 person1@example.com\",\n+      \".exit\",\n+    ])\n+    expect(result1).to match_array([\n+      \"db > Executed.\",\n+      \"db > \",\n+    ])\n+\n+    result2 = run_script([\n+      \"select\",\n+      \".exit\",\n+    ])\n+    expect(result2).to match_array([\n+      \"db > (1, user1, person1@example.com)\",\n+      \"Executed.\",\n+      \"db > \",\n+    ])\n+  end\n+\n   it 'prints error message when table is full' do\n     script = (1..1401).map do |i|\n       \"insert #{i} user#{i} person#{i}@example.com\"\nAnd the diff to our tests:\n\n describe 'database' do\n+  before do\n+    `rm -rf test.db`\n+  end\n+\n   def run_script(commands)\n     raw_output = nil\n-    IO.popen(\"./db\", \"r+\") do |pipe|\n+    IO.popen(\"./db test.db\", \"r+\") do |pipe|\n       commands.each do |command|\n         pipe.puts command\n       end\n@@ -28,6 +32,27 @@ describe 'database' do\n     ])\n   end\n \n+  it 'keeps data after closing connection' do\n+    result1 = run_script([\n+      \"insert 1 user1 person1@example.com\",\n+      \".exit\",\n+    ])\n+    expect(result1).to match_array([\n+      \"db > Executed.\",\n+      \"db > \",\n+    ])\n+\n+    result2 = run_script([\n+      \"select\",\n+      \".exit\",\n+    ])\n+    expect(result2).to match_array([\n+      \"db > (1, user1, person1@example.com)\",\n+      \"Executed.\",\n+      \"db > \",\n+    ])\n+  end\n+\n   it 'prints error message when table is full' do\n     script = (1..1401).map do |i|\n       \"insert #{i} user#{i} person#{i}@example.com\"\n```\n\n\n\n","source":"_posts/build_own_x/data_base/build_simple_database/Part5_persistence_to_disk.md","raw":"---\ntitle: Part 5 - 持久化到硬盘\ndate: 2019-01-28 22:30:00\ncategories:\n- build-own-x\ntags:\n- database\n- db原理\n---\n\n# Part 5 - 持久化到硬盘\n\n> “Nothing in the world can take the place of persistence.” – Calvin Coolidge\n\n我们的数据库允许你插入数据并且取回数据, 但是仅仅是在程序运行的时候.如果你 kill 程序或者重启它, 你的数据将会丢失. 这个spec单元测试类可以模拟这个情况:\n\n```ruby\nit 'keeps data after closing connection' do\n  result1 = run_script([\n    \"insert 1 user1 person1@example.com\",\n    \".exit\",\n  ])\n  expect(result1).to match_array([\n    \"db > Executed.\",\n    \"db > \",\n  ])\n  result2 = run_script([\n    \"select\",\n    \".exit\",\n  ])\n  expect(result2).to match_array([\n    \"db > (1, user1, person1@example.com)\",\n    \"Executed.\",\n    \"db > \",\n  ])\nend\n```\n\n就行 Sqlite 一样, 我们将持久化数据到一个文件中.\n\n我们已经将行数据序列化行数据到内存块中了, 添加序列化, 我们可以简单的将内存块数据到文件中, 并且在下次程序启动时读取文件到内存中.\n\n为了使其更加简单,我们将定义一个抽象的`pager` , 我们可以向 `pager` 获取页面 x 的内容, 可以简单的将内存块写到文件中. 它首先会在缓存中查看, 如果缓存中没有再从硬盘从拷贝数据.\n\n![How our program matches up with SQLite architecture](https://cstack.github.io/db_tutorial/assets/images/arch-part5.gif)\nHow our program matches up with SQLite architecture\n\n`Pager` 访问页面缓存和文件, `Tabel` 通过 `pager` 请求页面数据.\n\n```c\n+struct Pager_t {\n+  int file_descriptor;\n+  uint32_t file_length;\n+  void* pages[TABLE_MAX_PAGES];\n+};\n+typedef struct Pager_t Pager;\n+\n struct Table_t {\n-  void* pages[TABLE_MAX_PAGES];\n+  Pager* pager;\n   uint32_t num_rows;\n };\n```\n\n我重新命名下 `new_table()` 为 `db_open()` , 它现在有打开数据库的效果了, 通过打开一个连接, 我的意思是:\n- 打开数据库文件\n- 初始化一页数据\n- 初始化一个 table 的结构\n\n```c\n-Table* new_table() {\n+Table* db_open(const char* filename) {\n+  Pager* pager = pager_open(filename);\n+  uint32_t num_rows = pager->file_length / ROW_SIZE;\n+\n   Table* table = malloc(sizeof(Table));\n-  table->num_rows = 0;\n+  table->pager = pager;\n+  table->num_rows = num_rows;\n\n   return table;\n }\n```\n\n`db_open()` 方法调用的是 `pager_open()` 方法, 将打开数据库文件并且跟踪它的大小, 同时初始化page 的缓存为 NULL.\n\n```c\n+Pager* pager_open(const char* filename) {\n+  int fd = open(filename,\n+                O_RDWR |      // Read/Write mode\n+                    O_CREAT,  // Create file if it does not exist\n+                S_IWUSR |     // User write permission\n+                    S_IRUSR   // User read permission\n+                );\n+\n+  if (fd == -1) {\n+    printf(\"Unable to open file\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  off_t file_length = lseek(fd, 0, SEEK_END);\n+\n+  Pager* pager = malloc(sizeof(Pager));\n+  pager->file_descriptor = fd;\n+  pager->file_length = file_length;\n+\n+  for (uint32_t i = 0; i < TABLE_MAX_PAGES; i++) {\n+    pager->pages[i] = NULL;\n+  }\n+\n+  return pager;\n+}\n```\n\n随着我们新的抽象, 我们需要将我们获取页数据的代码移动到新的方法中.\n\n```c\n void* row_slot(Table* table, uint32_t row_num) {\n   uint32_t page_num = row_num / ROWS_PER_PAGE;\n-  void* page = table->pages[page_num];\n-  if (!page) {\n-    // Allocate memory only when we try to access page\n-    page = table->pages[page_num] = malloc(PAGE_SIZE);\n-  }\n+  void* page = get_page(table->pager, page_num);\n   uint32_t row_offset = row_num % ROWS_PER_PAGE;\n   uint32_t byte_offset = row_offset * ROW_SIZE;\n   return page + byte_offset;\n }\n```\n\n`get_page()` 方法中存在一个逻辑是处理丢失的缓存问题. 我们假设页面在数据库文件中一个接一个地保存：第0页的偏移量是0, 第一页的偏移量是4096, 第二页的偏移量是8192,等等. 如果请求的页面超出了文件边界值, 我们知道将会是空白的. 所以我们仅分配一些内存并且返回它. 当我 flush 缓存数据到硬盘后, 添加到文件中.\n\n```c\n+void* get_page(Pager* pager, uint32_t page_num) {\n+  if (page_num > TABLE_MAX_PAGES) {\n+    printf(\"Tried to fetch page number out of bounds. %d > %d\\n\", page_num,\n+           TABLE_MAX_PAGES);\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  if (pager->pages[page_num] == NULL) {\n+    // Cache miss. Allocate memory and load from file.\n+    void* page = malloc(PAGE_SIZE);\n+    uint32_t num_pages = pager->file_length / PAGE_SIZE;\n+\n+    // We might save a partial page at the end of the file\n+    if (pager->file_length % PAGE_SIZE) {\n+      num_pages += 1;\n+    }\n+\n+    if (page_num <= num_pages) {\n+      lseek(pager->file_descriptor, page_num * PAGE_SIZE, SEEK_SET);\n+      ssize_t bytes_read = read(pager->file_descriptor, page, PAGE_SIZE);\n+      if (bytes_read == -1) {\n+        printf(\"Error reading file: %d\\n\", errno);\n+        exit(EXIT_FAILURE);\n+      }\n+    }\n+\n+    pager->pages[page_num] = page;\n+  }\n+\n+  return pager->pages[page_num];\n+}\n```\n\n现在我们将等待缓存flush 到硬盘, 直到用户关闭了数据库连接, 当用户退出后,我们会去调用`db_close()` 方法\n- flush 页面缓存到硬盘\n- 关闭数据库文件\n- 释放 `pager` 和 `table` 的内存\n\n```c\n+void db_close(Table* table) {\n+  Pager* pager = table->pager;\n+  uint32_t num_full_pages = table->num_rows / ROWS_PER_PAGE;\n+\n+  for (uint32_t i = 0; i < num_full_pages; i++) {\n+    if (pager->pages[i] == NULL) {\n+      continue;\n+    }\n+    pager_flush(pager, i, PAGE_SIZE);\n+    free(pager->pages[i]);\n+    pager->pages[i] = NULL;\n+  }\n+\n+  // There may be a partial page to write to the end of the file\n+  // This should not be needed after we switch to a B-tree\n+  uint32_t num_additional_rows = table->num_rows % ROWS_PER_PAGE;\n+  if (num_additional_rows > 0) {\n+    uint32_t page_num = num_full_pages;\n+    if (pager->pages[page_num] != NULL) {\n+      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);\n+      free(pager->pages[page_num]);\n+      pager->pages[page_num] = NULL;\n+    }\n+  }\n+\n+  int result = close(pager->file_descriptor);\n+  if (result == -1) {\n+    printf(\"Error closing db file.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+  for (uint32_t i = 0; i < TABLE_MAX_PAGES; i++) {\n+    void* page = pager->pages[i];\n+    if (page) {\n+      free(page);\n+      pager->pages[i] = NULL;\n+    }\n+  }\n+  free(pager);\n+}\n+\n-MetaCommandResult do_meta_command(InputBuffer* input_buffer) {\n+MetaCommandResult do_meta_command(InputBuffer* input_buffer, Table* table) {\n   if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n+    db_close(table);\n     exit(EXIT_SUCCESS);\n   } else {\n     return META_COMMAND_UNRECOGNIZED_COMMAND;\n```\n\n在我们当前的设计中, 文件的长度取决于有多少数据在数据库中. 所以我们需要写一个局部的文件在文件的尾部.  这就是为啥`pager_flush()` 同时需要一个页面和文件大小.这不是最好的设计, 当我们使用 B 树后, 这个会变好的.\n\n```c\n+void pager_flush(Pager* pager, uint32_t page_num, uint32_t size) {\n+  if (pager->pages[page_num] == NULL) {\n+    printf(\"Tried to flush null page\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  off_t offset = lseek(pager->file_descriptor, page_num * PAGE_SIZE, SEEK_SET);\n+\n+  if (offset == -1) {\n+    printf(\"Error seeking: %d\\n\", errno);\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  ssize_t bytes_written =\n+      write(pager->file_descriptor, pager->pages[page_num], size);\n+\n+  if (bytes_written == -1) {\n+    printf(\"Error writing: %d\\n\", errno);\n+    exit(EXIT_FAILURE);\n+  }\n+}\n```\n\n最后, 我们需要从命令行接收文件名的参数, 别忘了添加扩展参数到do_meta_command方法中.\n\n```c\nint main(int argc, char* argv[]) {\n-  Table* table = new_table();\n+  if (argc < 2) {\n+    printf(\"Must supply a database filename.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  char* filename = argv[1];\n+  Table* table = db_open(filename);\n+\n   InputBuffer* input_buffer = new_input_buffer();\n   while (true) {\n     print_prompt();\n     read_input(input_buffer);\n \n     if (input_buffer->buffer[0] == '.') {\n-      switch (do_meta_command(input_buffer)) {\n+      switch (do_meta_command(input_buffer, table)) {\n```\n\n通过这些改变, 我们的数据库可以关闭重新打开, 我们的数据依旧存在着\n\n```sh\n~ ./db mydb.db\ndb > insert 1 cstack foo@bar.com\nExecuted.\ndb > insert 2 voltorb volty@example.com\nExecuted.\ndb > .exit\n~\n~ ./db mydb.db\ndb > select\n(1, cstack, foo@bar.com)\n(2, voltorb, volty@example.com)\nExecuted.\ndb > .exit\n~\n```\n\n为找一些有趣的事, 我们来看下 mydb.db 文件 看看我们的数据是如何存储的. 我们将使用 vim 的16进制编辑器打开它.\n\n```sh\nvim mydb.db\n:%!xxd\n```\n\n![文件内容](https://cstack.github.io/db_tutorial/assets/images/file-format.png)\n\n第一行的4个字节是我们的 ID (4个字节是因为我们存储了一个 uint32_t). 它以[little-endian字节顺序](https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F)存储，因此最低有效字节首先出现（01）,随后跟的是高位字节(00 00 00). 我们使用`memcpy()`方法将 Row 结构的中的数据拷贝到 page 缓存中, 所以这个也意味着这个结构在内存中也是底字节序的. 这个属性是我们汇编程序所决定的. 如果我们写了一个小端序的数据库文件,然后在大端序的机器上打开的, 我们需要修改`serialize_now()` 和 `deserialize_now()`方法保证读取和存储都是相同的顺序.\n\n下一个33字节存储的是用户名, 并且一个终止符结束.  显示出了 \"cstack\" 在 ASCII 码 在16进制 63 73 74 61 63 6b, 紧随其后的是的一个空字符(00). 剩下的33个字节是没有用的\n\n下一个256字节存储的是邮箱,用的同样的方式. 这里我们能看见一堆随机码在空字符后面.这个很可能是在Row结构没有初始化的内存. 我们拷贝了整个256字节的邮件 buffer 到文件中, 包含了在字符串结束后的内容. 当我们分配该结构时，内存中的内容仍然存在. 但由于我们使用终止空字符，因此它对行为没有影响。\n\n## 总结\n\n好的,我们已经持久化了, 但是现在他并不是最好的. 例如, 如果你 kill 进程没有使用 `.exit` 命令, 你将会丢失你的修改. 另外我们写了所有的 page 到磁盘中, 甚至自从我们从磁盘读取它们以来没有改变的页面。\n\n下一步我们将介绍游标, 这会使实现 B 树更加简单.\n\n### 完整的修改\n\n```c\n+#include <errno.h>\n+#include <fcntl.h>\n #include <stdbool.h>\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n+#include <unistd.h>\n \n struct InputBuffer_t {\n   char* buffer;\n@@ -61,8 +64,15 @@ const uint32_t TABLE_MAX_PAGES = 100;\n const uint32_t ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;\n const uint32_t TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;\n \n-struct Table_t {\n+struct Pager_t {\n+  int file_descriptor;\n+  uint32_t file_length;\n   void* pages[TABLE_MAX_PAGES];\n+};\n+typedef struct Pager_t Pager;\n+\n+struct Table_t {\n+  Pager* pager;\n   uint32_t num_rows;\n };\n typedef struct Table_t Table;\n@@ -83,21 +93,79 @@ void deserialize_row(void* source, Row* destination) {\n   memcpy(&(destination->email), source + EMAIL_OFFSET, EMAIL_SIZE);\n }\n \n+void* get_page(Pager* pager, uint32_t page_num) {\n+  if (page_num > TABLE_MAX_PAGES) {\n+    printf(\"Tried to fetch page number out of bounds. %d > %d\\n\", page_num,\n+           TABLE_MAX_PAGES);\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  if (pager->pages[page_num] == NULL) {\n+    // Cache miss. Allocate memory and load from file.\n+    void* page = malloc(PAGE_SIZE);\n+    uint32_t num_pages = pager->file_length / PAGE_SIZE;\n+\n+    // We might save a partial page at the end of the file\n+    if (pager->file_length % PAGE_SIZE) {\n+      num_pages += 1;\n+    }\n+\n+    if (page_num <= num_pages) {\n+      lseek(pager->file_descriptor, page_num * PAGE_SIZE, SEEK_SET);\n+      ssize_t bytes_read = read(pager->file_descriptor, page, PAGE_SIZE);\n+      if (bytes_read == -1) {\n+        printf(\"Error reading file: %d\\n\", errno);\n+        exit(EXIT_FAILURE);\n+      }\n+    }\n+\n+    pager->pages[page_num] = page;\n+  }\n+\n+  return pager->pages[page_num];\n+}\n+\n void* row_slot(Table* table, uint32_t row_num) {\n   uint32_t page_num = row_num / ROWS_PER_PAGE;\n-  void* page = table->pages[page_num];\n-  if (!page) {\n-    // Allocate memory only when we try to access page\n-    page = table->pages[page_num] = malloc(PAGE_SIZE);\n-  }\n+  void* page = get_page(table->pager, page_num);\n   uint32_t row_offset = row_num % ROWS_PER_PAGE;\n   uint32_t byte_offset = row_offset * ROW_SIZE;\n   return page + byte_offset;\n }\n \n-Table* new_table() {\n+Pager* pager_open(const char* filename) {\n+  int fd = open(filename,\n+                O_RDWR |      // Read/Write mode\n+                    O_CREAT,  // Create file if it does not exist\n+                S_IWUSR |     // User write permission\n+                    S_IRUSR   // User read permission\n+                );\n+\n+  if (fd == -1) {\n+    printf(\"Unable to open file\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  off_t file_length = lseek(fd, 0, SEEK_END);\n+\n+  Pager* pager = malloc(sizeof(Pager));\n+  pager->file_descriptor = fd;\n+  pager->file_length = file_length;\n+\n+  for (uint32_t i = 0; i < TABLE_MAX_PAGES; i++) {\n+    pager->pages[i] = NULL;\n+  }\n+\n+  return pager;\n+}\n+\n+Table* db_open(const char* filename) {\n+  Pager* pager = pager_open(filename);\n+  uint32_t num_rows = pager->file_length / ROW_SIZE;\n+\n   Table* table = malloc(sizeof(Table));\n-  table->num_rows = 0;\n+  table->pager = pager;\n+  table->num_rows = num_rows;\n \n   return table;\n }\n@@ -127,8 +195,71 @@ void read_input(InputBuffer* input_buffer) {\n   input_buffer->buffer[bytes_read - 1] = 0;\n }\n \n-MetaCommandResult do_meta_command(InputBuffer* input_buffer) {\n+void pager_flush(Pager* pager, uint32_t page_num, uint32_t size) {\n+  if (pager->pages[page_num] == NULL) {\n+    printf(\"Tried to flush null page\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  off_t offset = lseek(pager->file_descriptor, page_num * PAGE_SIZE, SEEK_SET);\n+\n+  if (offset == -1) {\n+    printf(\"Error seeking: %d\\n\", errno);\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  ssize_t bytes_written =\n+      write(pager->file_descriptor, pager->pages[page_num], size);\n+\n+  if (bytes_written == -1) {\n+    printf(\"Error writing: %d\\n\", errno);\n+    exit(EXIT_FAILURE);\n+  }\n+}\n+\n+void db_close(Table* table) {\n+  Pager* pager = table->pager;\n+  uint32_t num_full_pages = table->num_rows / ROWS_PER_PAGE;\n+\n+  for (uint32_t i = 0; i < num_full_pages; i++) {\n+    if (pager->pages[i] == NULL) {\n+      continue;\n+    }\n+    pager_flush(pager, i, PAGE_SIZE);\n+    free(pager->pages[i]);\n+    pager->pages[i] = NULL;\n+  }\n+\n+  // There may be a partial page to write to the end of the file\n+  // This should not be needed after we switch to a B-tree\n+  uint32_t num_additional_rows = table->num_rows % ROWS_PER_PAGE;\n+  if (num_additional_rows > 0) {\n+    uint32_t page_num = num_full_pages;\n+    if (pager->pages[page_num] != NULL) {\n+      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);\n+      free(pager->pages[page_num]);\n+      pager->pages[page_num] = NULL;\n+    }\n+  }\n+\n+  int result = close(pager->file_descriptor);\n+  if (result == -1) {\n+    printf(\"Error closing db file.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+  for (uint32_t i = 0; i < TABLE_MAX_PAGES; i++) {\n+    void* page = pager->pages[i];\n+    if (page) {\n+      free(page);\n+      pager->pages[i] = NULL;\n+    }\n+  }\n+  free(pager);\n+}\n+\n+MetaCommandResult do_meta_command(InputBuffer* input_buffer, Table* table) {\n   if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n+    db_close(table);\n     exit(EXIT_SUCCESS);\n   } else {\n     return META_COMMAND_UNRECOGNIZED_COMMAND;\n@@ -210,14 +341,21 @@ ExecuteResult execute_statement(Statement* statement, Table* table) {\n }\n \n int main(int argc, char* argv[]) {\n-  Table* table = new_table();\n+  if (argc < 2) {\n+    printf(\"Must supply a database filename.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  char* filename = argv[1];\n+  Table* table = db_open(filename);\n+\n   InputBuffer* input_buffer = new_input_buffer();\n   while (true) {\n     print_prompt();\n     read_input(input_buffer);\n \n     if (input_buffer->buffer[0] == '.') {\n-      switch (do_meta_command(input_buffer)) {\n+      switch (do_meta_command(input_buffer, table)) {\n         case (META_COMMAND_SUCCESS):\n           continue;\n         case (META_COMMAND_UNRECOGNIZED_COMMAND):\ndiff --git a/spec/main_spec.rb b/spec/main_spec.rb\nindex 21561ce..bc0180a 100644\n--- a/spec/main_spec.rb\n+++ b/spec/main_spec.rb\n@@ -1,7 +1,11 @@\n describe 'database' do\n+  before do\n+    `rm -rf test.db`\n+  end\n+\n   def run_script(commands)\n     raw_output = nil\n-    IO.popen(\"./db\", \"r+\") do |pipe|\n+    IO.popen(\"./db test.db\", \"r+\") do |pipe|\n       commands.each do |command|\n         pipe.puts command\n       end\n@@ -28,6 +32,27 @@ describe 'database' do\n     ])\n   end\n \n+  it 'keeps data after closing connection' do\n+    result1 = run_script([\n+      \"insert 1 user1 person1@example.com\",\n+      \".exit\",\n+    ])\n+    expect(result1).to match_array([\n+      \"db > Executed.\",\n+      \"db > \",\n+    ])\n+\n+    result2 = run_script([\n+      \"select\",\n+      \".exit\",\n+    ])\n+    expect(result2).to match_array([\n+      \"db > (1, user1, person1@example.com)\",\n+      \"Executed.\",\n+      \"db > \",\n+    ])\n+  end\n+\n   it 'prints error message when table is full' do\n     script = (1..1401).map do |i|\n       \"insert #{i} user#{i} person#{i}@example.com\"\nAnd the diff to our tests:\n\n describe 'database' do\n+  before do\n+    `rm -rf test.db`\n+  end\n+\n   def run_script(commands)\n     raw_output = nil\n-    IO.popen(\"./db\", \"r+\") do |pipe|\n+    IO.popen(\"./db test.db\", \"r+\") do |pipe|\n       commands.each do |command|\n         pipe.puts command\n       end\n@@ -28,6 +32,27 @@ describe 'database' do\n     ])\n   end\n \n+  it 'keeps data after closing connection' do\n+    result1 = run_script([\n+      \"insert 1 user1 person1@example.com\",\n+      \".exit\",\n+    ])\n+    expect(result1).to match_array([\n+      \"db > Executed.\",\n+      \"db > \",\n+    ])\n+\n+    result2 = run_script([\n+      \"select\",\n+      \".exit\",\n+    ])\n+    expect(result2).to match_array([\n+      \"db > (1, user1, person1@example.com)\",\n+      \"Executed.\",\n+      \"db > \",\n+    ])\n+  end\n+\n   it 'prints error message when table is full' do\n     script = (1..1401).map do |i|\n       \"insert #{i} user#{i} person#{i}@example.com\"\n```\n\n\n\n","slug":"build_own_x/data_base/build_simple_database/Part5_persistence_to_disk","published":1,"updated":"2019-02-01T13:41:25.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgyy00588seozpwbhbwf","content":"<h1 id=\"Part-5-持久化到硬盘\"><a href=\"#Part-5-持久化到硬盘\" class=\"headerlink\" title=\"Part 5 - 持久化到硬盘\"></a>Part 5 - 持久化到硬盘</h1><blockquote>\n<p>“Nothing in the world can take the place of persistence.” – Calvin Coolidge</p>\n</blockquote>\n<p>我们的数据库允许你插入数据并且取回数据, 但是仅仅是在程序运行的时候.如果你 kill 程序或者重启它, 你的数据将会丢失. 这个spec单元测试类可以模拟这个情况:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it <span class=\"string\">'keeps data after closing connection'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  result1 = run_script([</span><br><span class=\"line\">    <span class=\"string\">\"insert 1 user1 person1@example.com\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">  ])</span><br><span class=\"line\">  expect(result1).to match_array([</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">  ])</span><br><span class=\"line\">  result2 = run_script([</span><br><span class=\"line\">    <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">  ])</span><br><span class=\"line\">  expect(result2).to match_array([</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; (1, user1, person1@example.com)\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">  ])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>就行 Sqlite 一样, 我们将持久化数据到一个文件中.</p>\n<p>我们已经将行数据序列化行数据到内存块中了, 添加序列化, 我们可以简单的将内存块数据到文件中, 并且在下次程序启动时读取文件到内存中.</p>\n<p>为了使其更加简单,我们将定义一个抽象的<code>pager</code> , 我们可以向 <code>pager</code> 获取页面 x 的内容, 可以简单的将内存块写到文件中. 它首先会在缓存中查看, 如果缓存中没有再从硬盘从拷贝数据.</p>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/arch-part5.gif\" alt=\"How our program matches up with SQLite architecture\"><br>How our program matches up with SQLite architecture</p>\n<p><code>Pager</code> 访问页面缓存和文件, <code>Tabel</code> 通过 <code>pager</code> 请求页面数据.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> &#123;</span></span><br><span class=\"line\">+  <span class=\"keyword\">int</span> file_descriptor;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> file_length;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* pages[TABLE_MAX_PAGES];</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> <span class=\"title\">Pager</span>;</span></span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> &#123;</span></span><br><span class=\"line\">-  <span class=\"keyword\">void</span>* pages[TABLE_MAX_PAGES];</span><br><span class=\"line\">+  Pager* pager;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> num_rows;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>我重新命名下 <code>new_table()</code> 为 <code>db_open()</code> , 它现在有打开数据库的效果了, 通过打开一个连接, 我的意思是:</p>\n<ul>\n<li>打开数据库文件</li>\n<li>初始化一页数据</li>\n<li>初始化一个 table 的结构</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\">Table* <span class=\"title\">new_table</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\">Table* <span class=\"title\">db_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename)</span> </span>&#123;</span><br><span class=\"line\">+  Pager* pager = pager_open(filename);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_rows = pager-&gt;file_length / ROW_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">   Table* table = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Table));</span><br><span class=\"line\">-  table-&gt;num_rows = <span class=\"number\">0</span>;</span><br><span class=\"line\">+  table-&gt;pager = pager;</span><br><span class=\"line\">+  table-&gt;num_rows = num_rows;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> table;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><code>db_open()</code> 方法调用的是 <code>pager_open()</code> 方法, 将打开数据库文件并且跟踪它的大小, 同时初始化page 的缓存为 NULL.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\">Pager* <span class=\"title\">pager_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">int</span> fd = open(filename,</span><br><span class=\"line\">+                O_RDWR |      <span class=\"comment\">// Read/Write mode</span></span><br><span class=\"line\">+                    O_CREAT,  <span class=\"comment\">// Create file if it does not exist</span></span><br><span class=\"line\">+                S_IWUSR |     <span class=\"comment\">// User write permission</span></span><br><span class=\"line\">+                    S_IRUSR   <span class=\"comment\">// User read permission</span></span><br><span class=\"line\">+                );</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unable to open file\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">off_t</span> file_length = lseek(fd, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  Pager* pager = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Pager));</span><br><span class=\"line\">+  pager-&gt;file_descriptor = fd;</span><br><span class=\"line\">+  pager-&gt;file_length = file_length;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;</span><br><span class=\"line\">+    pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> pager;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>随着我们新的抽象, 我们需要将我们获取页数据的代码移动到新的方法中.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">row_slot</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> row_num)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">void</span>* page = table-&gt;pages[page_num];</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (!page) &#123;</span><br><span class=\"line\">-    <span class=\"comment\">// Allocate memory only when we try to access page</span></span><br><span class=\"line\">-    page = table-&gt;pages[page_num] = <span class=\"built_in\">malloc</span>(PAGE_SIZE);</span><br><span class=\"line\">-  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* page = get_page(table-&gt;pager, page_num);</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><code>get_page()</code> 方法中存在一个逻辑是处理丢失的缓存问题. 我们假设页面在数据库文件中一个接一个地保存：第0页的偏移量是0, 第一页的偏移量是4096, 第二页的偏移量是8192,等等. 如果请求的页面超出了文件边界值, 我们知道将会是空白的. 所以我们仅分配一些内存并且返回它. 当我 flush 缓存数据到硬盘后, 添加到文件中.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">get_page</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (page_num &gt; TABLE_MAX_PAGES) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to fetch page number out of bounds. %d &gt; %d\\n\"</span>, page_num,</span><br><span class=\"line\">+           TABLE_MAX_PAGES);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Cache miss. Allocate memory and load from file.</span></span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* page = <span class=\"built_in\">malloc</span>(PAGE_SIZE);</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> num_pages = pager-&gt;file_length / PAGE_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    <span class=\"comment\">// We might save a partial page at the end of the file</span></span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (pager-&gt;file_length % PAGE_SIZE) &#123;</span><br><span class=\"line\">+      num_pages += <span class=\"number\">1</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (page_num &lt;= num_pages) &#123;</span><br><span class=\"line\">+      lseek(pager-&gt;file_descriptor, page_num * PAGE_SIZE, SEEK_SET);</span><br><span class=\"line\">+      <span class=\"keyword\">ssize_t</span> bytes_read = read(pager-&gt;file_descriptor, page, PAGE_SIZE);</span><br><span class=\"line\">+      <span class=\"keyword\">if</span> (bytes_read == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error reading file: %d\\n\"</span>, errno);</span><br><span class=\"line\">+        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+      &#125;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    pager-&gt;pages[page_num] = page;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> pager-&gt;pages[page_num];</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们将等待缓存flush 到硬盘, 直到用户关闭了数据库连接, 当用户退出后,我们会去调用<code>db_close()</code> 方法</p>\n<ul>\n<li>flush 页面缓存到硬盘</li>\n<li>关闭数据库文件</li>\n<li>释放 <code>pager</code> 和 <code>table</code> 的内存</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">db_close</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Pager* pager = table-&gt;pager;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_full_pages = table-&gt;num_rows / ROWS_PER_PAGE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_full_pages; i++) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (pager-&gt;pages[i] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+    pager_flush(pager, i, PAGE_SIZE);</span><br><span class=\"line\">+    <span class=\"built_in\">free</span>(pager-&gt;pages[i]);</span><br><span class=\"line\">+    pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"comment\">// There may be a partial page to write to the end of the file</span></span><br><span class=\"line\">+  <span class=\"comment\">// This should not be needed after we switch to a B-tree</span></span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_additional_rows = table-&gt;num_rows % ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (num_additional_rows &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> page_num = num_full_pages;</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);</span><br><span class=\"line\">+      <span class=\"built_in\">free</span>(pager-&gt;pages[page_num]);</span><br><span class=\"line\">+      pager-&gt;pages[page_num] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">int</span> result = close(pager-&gt;file_descriptor);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (result == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error closing db file.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* page = pager-&gt;pages[i];</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (page) &#123;</span><br><span class=\"line\">+      <span class=\"built_in\">free</span>(page);</span><br><span class=\"line\">+      pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"built_in\">free</span>(pager);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">-<span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    db_close(table);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;</span><br></pre></td></tr></table></figure>\n<p>在我们当前的设计中, 文件的长度取决于有多少数据在数据库中. 所以我们需要写一个局部的文件在文件的尾部.  这就是为啥<code>pager_flush()</code> 同时需要一个页面和文件大小.这不是最好的设计, 当我们使用 B 树后, 这个会变好的.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pager_flush</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> size)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to flush null page\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">off_t</span> offset = lseek(pager-&gt;file_descriptor, page_num * PAGE_SIZE, SEEK_SET);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (offset == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error seeking: %d\\n\"</span>, errno);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">ssize_t</span> bytes_written =</span><br><span class=\"line\">+      write(pager-&gt;file_descriptor, pager-&gt;pages[page_num], size);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (bytes_written == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error writing: %d\\n\"</span>, errno);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>最后, 我们需要从命令行接收文件名的参数, 别忘了添加扩展参数到do_meta_command方法中.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">-  Table* table = new_table();</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Must supply a database filename.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* filename = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">+  Table* table = db_open(filename);</span><br><span class=\"line\">+</span><br><span class=\"line\">   InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">     print_prompt();</span><br><span class=\"line\">     read_input(input_buffer);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (input_buffer-&gt;buffer[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">-      <span class=\"keyword\">switch</span> (do_meta_command(input_buffer)) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">switch</span> (do_meta_command(input_buffer, table)) &#123;</span><br></pre></td></tr></table></figure>\n<p>通过这些改变, 我们的数据库可以关闭重新打开, 我们的数据依旧存在着</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ ./db mydb.db</span><br><span class=\"line\">db &gt; insert 1 cstack foo@bar.com</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; insert 2 voltorb volty@example.com</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; .<span class=\"built_in\">exit</span></span><br><span class=\"line\">~</span><br><span class=\"line\">~ ./db mydb.db</span><br><span class=\"line\">db &gt; select</span><br><span class=\"line\">(1, cstack, foo@bar.com)</span><br><span class=\"line\">(2, voltorb, volty@example.com)</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; .<span class=\"built_in\">exit</span></span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure>\n<p>为找一些有趣的事, 我们来看下 mydb.db 文件 看看我们的数据是如何存储的. 我们将使用 vim 的16进制编辑器打开它.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim mydb.db</span><br><span class=\"line\">:%!xxd</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/file-format.png\" alt=\"文件内容\"></p>\n<p>第一行的4个字节是我们的 ID (4个字节是因为我们存储了一个 uint32_t). 它以<a href=\"https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">little-endian字节顺序</a>存储，因此最低有效字节首先出现（01）,随后跟的是高位字节(00 00 00). 我们使用<code>memcpy()</code>方法将 Row 结构的中的数据拷贝到 page 缓存中, 所以这个也意味着这个结构在内存中也是底字节序的. 这个属性是我们汇编程序所决定的. 如果我们写了一个小端序的数据库文件,然后在大端序的机器上打开的, 我们需要修改<code>serialize_now()</code> 和 <code>deserialize_now()</code>方法保证读取和存储都是相同的顺序.</p>\n<p>下一个33字节存储的是用户名, 并且一个终止符结束.  显示出了 “cstack” 在 ASCII 码 在16进制 63 73 74 61 63 6b, 紧随其后的是的一个空字符(00). 剩下的33个字节是没有用的</p>\n<p>下一个256字节存储的是邮箱,用的同样的方式. 这里我们能看见一堆随机码在空字符后面.这个很可能是在Row结构没有初始化的内存. 我们拷贝了整个256字节的邮件 buffer 到文件中, 包含了在字符串结束后的内容. 当我们分配该结构时，内存中的内容仍然存在. 但由于我们使用终止空字符，因此它对行为没有影响。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好的,我们已经持久化了, 但是现在他并不是最好的. 例如, 如果你 kill 进程没有使用 <code>.exit</code> 命令, 你将会丢失你的修改. 另外我们写了所有的 page 到磁盘中, 甚至自从我们从磁盘读取它们以来没有改变的页面。</p>\n<p>下一步我们将介绍游标, 这会使实现 B 树更加简单.</p>\n<h3 id=\"完整的修改\"><a href=\"#完整的修改\" class=\"headerlink\" title=\"完整的修改\"></a>完整的修改</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\">+<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdbool.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\">+<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> &#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">char</span>* buffer;</span><br><span class=\"line\">@@ <span class=\"number\">-61</span>,<span class=\"number\">8</span> +<span class=\"number\">64</span>,<span class=\"number\">15</span> @@ <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_PAGES = <span class=\"number\">100</span>;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;</span><br><span class=\"line\"> </span><br><span class=\"line\">-<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> &#123;</span></span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> &#123;</span></span><br><span class=\"line\">+  <span class=\"keyword\">int</span> file_descriptor;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> file_length;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* pages[TABLE_MAX_PAGES];</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> <span class=\"title\">Pager</span>;</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> &#123;</span></span><br><span class=\"line\">+  Pager* pager;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> num_rows;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> <span class=\"title\">Table</span>;</span></span><br><span class=\"line\">@@ <span class=\"number\">-83</span>,<span class=\"number\">21</span> +<span class=\"number\">93</span>,<span class=\"number\">79</span> @@ <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deserialize_row</span><span class=\"params\">(<span class=\"keyword\">void</span>* source, Row* destination)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;email), source + EMAIL_OFFSET, EMAIL_SIZE);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">get_page</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (page_num &gt; TABLE_MAX_PAGES) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to fetch page number out of bounds. %d &gt; %d\\n\"</span>, page_num,</span><br><span class=\"line\">+           TABLE_MAX_PAGES);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Cache miss. Allocate memory and load from file.</span></span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* page = <span class=\"built_in\">malloc</span>(PAGE_SIZE);</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> num_pages = pager-&gt;file_length / PAGE_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    <span class=\"comment\">// We might save a partial page at the end of the file</span></span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (pager-&gt;file_length % PAGE_SIZE) &#123;</span><br><span class=\"line\">+      num_pages += <span class=\"number\">1</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (page_num &lt;= num_pages) &#123;</span><br><span class=\"line\">+      lseek(pager-&gt;file_descriptor, page_num * PAGE_SIZE, SEEK_SET);</span><br><span class=\"line\">+      <span class=\"keyword\">ssize_t</span> bytes_read = read(pager-&gt;file_descriptor, page, PAGE_SIZE);</span><br><span class=\"line\">+      <span class=\"keyword\">if</span> (bytes_read == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error reading file: %d\\n\"</span>, errno);</span><br><span class=\"line\">+        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+      &#125;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    pager-&gt;pages[page_num] = page;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> pager-&gt;pages[page_num];</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">row_slot</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> row_num)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">void</span>* page = table-&gt;pages[page_num];</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (!page) &#123;</span><br><span class=\"line\">-    <span class=\"comment\">// Allocate memory only when we try to access page</span></span><br><span class=\"line\">-    page = table-&gt;pages[page_num] = <span class=\"built_in\">malloc</span>(PAGE_SIZE);</span><br><span class=\"line\">-  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* page = get_page(table-&gt;pager, page_num);</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-<span class=\"function\">Table* <span class=\"title\">new_table</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\">Pager* <span class=\"title\">pager_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">int</span> fd = open(filename,</span><br><span class=\"line\">+                O_RDWR |      <span class=\"comment\">// Read/Write mode</span></span><br><span class=\"line\">+                    O_CREAT,  <span class=\"comment\">// Create file if it does not exist</span></span><br><span class=\"line\">+                S_IWUSR |     <span class=\"comment\">// User write permission</span></span><br><span class=\"line\">+                    S_IRUSR   <span class=\"comment\">// User read permission</span></span><br><span class=\"line\">+                );</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unable to open file\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">off_t</span> file_length = lseek(fd, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  Pager* pager = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Pager));</span><br><span class=\"line\">+  pager-&gt;file_descriptor = fd;</span><br><span class=\"line\">+  pager-&gt;file_length = file_length;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;</span><br><span class=\"line\">+    pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> pager;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">Table* <span class=\"title\">db_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename)</span> </span>&#123;</span><br><span class=\"line\">+  Pager* pager = pager_open(filename);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_rows = pager-&gt;file_length / ROW_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">   Table* table = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Table));</span><br><span class=\"line\">-  table-&gt;num_rows = <span class=\"number\">0</span>;</span><br><span class=\"line\">+  table-&gt;pager = pager;</span><br><span class=\"line\">+  table-&gt;num_rows = num_rows;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> table;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">@@ <span class=\"number\">-127</span>,<span class=\"number\">8</span> +<span class=\"number\">195</span>,<span class=\"number\">71</span> @@ <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_input</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">   input_buffer-&gt;buffer[bytes_read - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-<span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pager_flush</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> size)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to flush null page\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">off_t</span> offset = lseek(pager-&gt;file_descriptor, page_num * PAGE_SIZE, SEEK_SET);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (offset == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error seeking: %d\\n\"</span>, errno);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">ssize_t</span> bytes_written =</span><br><span class=\"line\">+      write(pager-&gt;file_descriptor, pager-&gt;pages[page_num], size);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (bytes_written == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error writing: %d\\n\"</span>, errno);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">db_close</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Pager* pager = table-&gt;pager;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_full_pages = table-&gt;num_rows / ROWS_PER_PAGE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_full_pages; i++) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (pager-&gt;pages[i] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+    pager_flush(pager, i, PAGE_SIZE);</span><br><span class=\"line\">+    <span class=\"built_in\">free</span>(pager-&gt;pages[i]);</span><br><span class=\"line\">+    pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"comment\">// There may be a partial page to write to the end of the file</span></span><br><span class=\"line\">+  <span class=\"comment\">// This should not be needed after we switch to a B-tree</span></span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_additional_rows = table-&gt;num_rows % ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (num_additional_rows &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> page_num = num_full_pages;</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);</span><br><span class=\"line\">+      <span class=\"built_in\">free</span>(pager-&gt;pages[page_num]);</span><br><span class=\"line\">+      pager-&gt;pages[page_num] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">int</span> result = close(pager-&gt;file_descriptor);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (result == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error closing db file.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* page = pager-&gt;pages[i];</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (page) &#123;</span><br><span class=\"line\">+      <span class=\"built_in\">free</span>(page);</span><br><span class=\"line\">+      pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"built_in\">free</span>(pager);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    db_close(table);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;</span><br><span class=\"line\">@@ <span class=\"number\">-210</span>,<span class=\"number\">14</span> +<span class=\"number\">341</span>,<span class=\"number\">21</span> @@ <span class=\"function\">ExecuteResult <span class=\"title\">execute_statement</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">-  Table* table = new_table();</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Must supply a database filename.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* filename = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">+  Table* table = db_open(filename);</span><br><span class=\"line\">+</span><br><span class=\"line\">   InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">     print_prompt();</span><br><span class=\"line\">     read_input(input_buffer);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (input_buffer-&gt;buffer[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">-      <span class=\"keyword\">switch</span> (do_meta_command(input_buffer)) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">switch</span> (do_meta_command(input_buffer, table)) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> (META_COMMAND_SUCCESS):</span><br><span class=\"line\">           <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> (META_COMMAND_UNRECOGNIZED_COMMAND):</span><br><span class=\"line\">diff --git a/spec/main_spec.rb b/spec/main_spec.rb</span><br><span class=\"line\">index <span class=\"number\">21561</span>ce..bc0180a <span class=\"number\">100644</span></span><br><span class=\"line\">--- a/spec/main_spec.rb</span><br><span class=\"line\">+++ b/spec/main_spec.rb</span><br><span class=\"line\">@@ <span class=\"number\">-1</span>,<span class=\"number\">7</span> +<span class=\"number\">1</span>,<span class=\"number\">11</span> @@</span><br><span class=\"line\"> describe 'database' do</span><br><span class=\"line\">+  before <span class=\"keyword\">do</span></span><br><span class=\"line\">+    `rm -rf test.db`</span><br><span class=\"line\">+  end</span><br><span class=\"line\">+</span><br><span class=\"line\">   <span class=\"function\">def <span class=\"title\">run_script</span><span class=\"params\">(commands)</span></span></span><br><span class=\"line\"><span class=\"function\">     raw_output </span>= nil</span><br><span class=\"line\">-    IO.popen(<span class=\"string\">\"./db\"</span>, <span class=\"string\">\"r+\"</span>) <span class=\"keyword\">do</span> |pipe|</span><br><span class=\"line\">+    IO.popen(<span class=\"string\">\"./db test.db\"</span>, <span class=\"string\">\"r+\"</span>) <span class=\"keyword\">do</span> |pipe|</span><br><span class=\"line\">       commands.each <span class=\"keyword\">do</span> |command|</span><br><span class=\"line\">         pipe.<span class=\"built_in\">puts</span> command</span><br><span class=\"line\">       end</span><br><span class=\"line\">@@ -28,6 +32,27 @@ describe 'database' do</span><br><span class=\"line\">     ])</span><br><span class=\"line\">   end</span><br><span class=\"line\"> </span><br><span class=\"line\">+  it 'keeps data after closing connection' do</span><br><span class=\"line\">+    result1 = run_script([</span><br><span class=\"line\">+      <span class=\"string\">\"insert 1 user1 person1@example.com\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+    expect(result1).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+</span><br><span class=\"line\">+    result2 = run_script([</span><br><span class=\"line\">+      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+    expect(result2).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; (1, user1, person1@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  end</span><br><span class=\"line\">+</span><br><span class=\"line\">   it 'prints error message when table is full' do</span><br><span class=\"line\">     script = (<span class=\"number\">1.</span><span class=\"number\">.1401</span>).<span class=\"built_in\">map</span> <span class=\"keyword\">do</span> |i|</span><br><span class=\"line\">       <span class=\"string\">\"insert #&#123;i&#125; user#&#123;i&#125; person#&#123;i&#125;@example.com\"</span></span><br><span class=\"line\">And the diff to our tests:</span><br><span class=\"line\"></span><br><span class=\"line\"> describe 'database' do</span><br><span class=\"line\">+  before <span class=\"keyword\">do</span></span><br><span class=\"line\">+    `rm -rf test.db`</span><br><span class=\"line\">+  end</span><br><span class=\"line\">+</span><br><span class=\"line\">   <span class=\"function\">def <span class=\"title\">run_script</span><span class=\"params\">(commands)</span></span></span><br><span class=\"line\"><span class=\"function\">     raw_output </span>= nil</span><br><span class=\"line\">-    IO.popen(<span class=\"string\">\"./db\"</span>, <span class=\"string\">\"r+\"</span>) <span class=\"keyword\">do</span> |pipe|</span><br><span class=\"line\">+    IO.popen(<span class=\"string\">\"./db test.db\"</span>, <span class=\"string\">\"r+\"</span>) <span class=\"keyword\">do</span> |pipe|</span><br><span class=\"line\">       commands.each <span class=\"keyword\">do</span> |command|</span><br><span class=\"line\">         pipe.<span class=\"built_in\">puts</span> command</span><br><span class=\"line\">       end</span><br><span class=\"line\">@@ -28,6 +32,27 @@ describe 'database' do</span><br><span class=\"line\">     ])</span><br><span class=\"line\">   end</span><br><span class=\"line\"> </span><br><span class=\"line\">+  it 'keeps data after closing connection' do</span><br><span class=\"line\">+    result1 = run_script([</span><br><span class=\"line\">+      <span class=\"string\">\"insert 1 user1 person1@example.com\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+    expect(result1).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+</span><br><span class=\"line\">+    result2 = run_script([</span><br><span class=\"line\">+      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+    expect(result2).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; (1, user1, person1@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  end</span><br><span class=\"line\">+</span><br><span class=\"line\">   it 'prints error message when table is full' do</span><br><span class=\"line\">     script = (<span class=\"number\">1.</span><span class=\"number\">.1401</span>).<span class=\"built_in\">map</span> <span class=\"keyword\">do</span> |i|</span><br><span class=\"line\">       <span class=\"string\">\"insert #&#123;i&#125; user#&#123;i&#125; person#&#123;i&#125;@example.com\"</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Part-5-持久化到硬盘\"><a href=\"#Part-5-持久化到硬盘\" class=\"headerlink\" title=\"Part 5 - 持久化到硬盘\"></a>Part 5 - 持久化到硬盘</h1><blockquote>\n<p>“Nothing in the world can take the place of persistence.” – Calvin Coolidge</p>\n</blockquote>\n<p>我们的数据库允许你插入数据并且取回数据, 但是仅仅是在程序运行的时候.如果你 kill 程序或者重启它, 你的数据将会丢失. 这个spec单元测试类可以模拟这个情况:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it <span class=\"string\">'keeps data after closing connection'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  result1 = run_script([</span><br><span class=\"line\">    <span class=\"string\">\"insert 1 user1 person1@example.com\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">  ])</span><br><span class=\"line\">  expect(result1).to match_array([</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">  ])</span><br><span class=\"line\">  result2 = run_script([</span><br><span class=\"line\">    <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">  ])</span><br><span class=\"line\">  expect(result2).to match_array([</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; (1, user1, person1@example.com)\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">  ])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>就行 Sqlite 一样, 我们将持久化数据到一个文件中.</p>\n<p>我们已经将行数据序列化行数据到内存块中了, 添加序列化, 我们可以简单的将内存块数据到文件中, 并且在下次程序启动时读取文件到内存中.</p>\n<p>为了使其更加简单,我们将定义一个抽象的<code>pager</code> , 我们可以向 <code>pager</code> 获取页面 x 的内容, 可以简单的将内存块写到文件中. 它首先会在缓存中查看, 如果缓存中没有再从硬盘从拷贝数据.</p>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/arch-part5.gif\" alt=\"How our program matches up with SQLite architecture\"><br>How our program matches up with SQLite architecture</p>\n<p><code>Pager</code> 访问页面缓存和文件, <code>Tabel</code> 通过 <code>pager</code> 请求页面数据.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> &#123;</span></span><br><span class=\"line\">+  <span class=\"keyword\">int</span> file_descriptor;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> file_length;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* pages[TABLE_MAX_PAGES];</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> <span class=\"title\">Pager</span>;</span></span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> &#123;</span></span><br><span class=\"line\">-  <span class=\"keyword\">void</span>* pages[TABLE_MAX_PAGES];</span><br><span class=\"line\">+  Pager* pager;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> num_rows;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>我重新命名下 <code>new_table()</code> 为 <code>db_open()</code> , 它现在有打开数据库的效果了, 通过打开一个连接, 我的意思是:</p>\n<ul>\n<li>打开数据库文件</li>\n<li>初始化一页数据</li>\n<li>初始化一个 table 的结构</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\">Table* <span class=\"title\">new_table</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\">Table* <span class=\"title\">db_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename)</span> </span>&#123;</span><br><span class=\"line\">+  Pager* pager = pager_open(filename);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_rows = pager-&gt;file_length / ROW_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">   Table* table = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Table));</span><br><span class=\"line\">-  table-&gt;num_rows = <span class=\"number\">0</span>;</span><br><span class=\"line\">+  table-&gt;pager = pager;</span><br><span class=\"line\">+  table-&gt;num_rows = num_rows;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> table;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><code>db_open()</code> 方法调用的是 <code>pager_open()</code> 方法, 将打开数据库文件并且跟踪它的大小, 同时初始化page 的缓存为 NULL.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\">Pager* <span class=\"title\">pager_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">int</span> fd = open(filename,</span><br><span class=\"line\">+                O_RDWR |      <span class=\"comment\">// Read/Write mode</span></span><br><span class=\"line\">+                    O_CREAT,  <span class=\"comment\">// Create file if it does not exist</span></span><br><span class=\"line\">+                S_IWUSR |     <span class=\"comment\">// User write permission</span></span><br><span class=\"line\">+                    S_IRUSR   <span class=\"comment\">// User read permission</span></span><br><span class=\"line\">+                );</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unable to open file\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">off_t</span> file_length = lseek(fd, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  Pager* pager = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Pager));</span><br><span class=\"line\">+  pager-&gt;file_descriptor = fd;</span><br><span class=\"line\">+  pager-&gt;file_length = file_length;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;</span><br><span class=\"line\">+    pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> pager;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>随着我们新的抽象, 我们需要将我们获取页数据的代码移动到新的方法中.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">row_slot</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> row_num)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">void</span>* page = table-&gt;pages[page_num];</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (!page) &#123;</span><br><span class=\"line\">-    <span class=\"comment\">// Allocate memory only when we try to access page</span></span><br><span class=\"line\">-    page = table-&gt;pages[page_num] = <span class=\"built_in\">malloc</span>(PAGE_SIZE);</span><br><span class=\"line\">-  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* page = get_page(table-&gt;pager, page_num);</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><code>get_page()</code> 方法中存在一个逻辑是处理丢失的缓存问题. 我们假设页面在数据库文件中一个接一个地保存：第0页的偏移量是0, 第一页的偏移量是4096, 第二页的偏移量是8192,等等. 如果请求的页面超出了文件边界值, 我们知道将会是空白的. 所以我们仅分配一些内存并且返回它. 当我 flush 缓存数据到硬盘后, 添加到文件中.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">get_page</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (page_num &gt; TABLE_MAX_PAGES) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to fetch page number out of bounds. %d &gt; %d\\n\"</span>, page_num,</span><br><span class=\"line\">+           TABLE_MAX_PAGES);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Cache miss. Allocate memory and load from file.</span></span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* page = <span class=\"built_in\">malloc</span>(PAGE_SIZE);</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> num_pages = pager-&gt;file_length / PAGE_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    <span class=\"comment\">// We might save a partial page at the end of the file</span></span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (pager-&gt;file_length % PAGE_SIZE) &#123;</span><br><span class=\"line\">+      num_pages += <span class=\"number\">1</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (page_num &lt;= num_pages) &#123;</span><br><span class=\"line\">+      lseek(pager-&gt;file_descriptor, page_num * PAGE_SIZE, SEEK_SET);</span><br><span class=\"line\">+      <span class=\"keyword\">ssize_t</span> bytes_read = read(pager-&gt;file_descriptor, page, PAGE_SIZE);</span><br><span class=\"line\">+      <span class=\"keyword\">if</span> (bytes_read == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error reading file: %d\\n\"</span>, errno);</span><br><span class=\"line\">+        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+      &#125;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    pager-&gt;pages[page_num] = page;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> pager-&gt;pages[page_num];</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们将等待缓存flush 到硬盘, 直到用户关闭了数据库连接, 当用户退出后,我们会去调用<code>db_close()</code> 方法</p>\n<ul>\n<li>flush 页面缓存到硬盘</li>\n<li>关闭数据库文件</li>\n<li>释放 <code>pager</code> 和 <code>table</code> 的内存</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">db_close</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Pager* pager = table-&gt;pager;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_full_pages = table-&gt;num_rows / ROWS_PER_PAGE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_full_pages; i++) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (pager-&gt;pages[i] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+    pager_flush(pager, i, PAGE_SIZE);</span><br><span class=\"line\">+    <span class=\"built_in\">free</span>(pager-&gt;pages[i]);</span><br><span class=\"line\">+    pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"comment\">// There may be a partial page to write to the end of the file</span></span><br><span class=\"line\">+  <span class=\"comment\">// This should not be needed after we switch to a B-tree</span></span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_additional_rows = table-&gt;num_rows % ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (num_additional_rows &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> page_num = num_full_pages;</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);</span><br><span class=\"line\">+      <span class=\"built_in\">free</span>(pager-&gt;pages[page_num]);</span><br><span class=\"line\">+      pager-&gt;pages[page_num] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">int</span> result = close(pager-&gt;file_descriptor);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (result == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error closing db file.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* page = pager-&gt;pages[i];</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (page) &#123;</span><br><span class=\"line\">+      <span class=\"built_in\">free</span>(page);</span><br><span class=\"line\">+      pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"built_in\">free</span>(pager);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">-<span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    db_close(table);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;</span><br></pre></td></tr></table></figure>\n<p>在我们当前的设计中, 文件的长度取决于有多少数据在数据库中. 所以我们需要写一个局部的文件在文件的尾部.  这就是为啥<code>pager_flush()</code> 同时需要一个页面和文件大小.这不是最好的设计, 当我们使用 B 树后, 这个会变好的.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pager_flush</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> size)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to flush null page\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">off_t</span> offset = lseek(pager-&gt;file_descriptor, page_num * PAGE_SIZE, SEEK_SET);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (offset == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error seeking: %d\\n\"</span>, errno);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">ssize_t</span> bytes_written =</span><br><span class=\"line\">+      write(pager-&gt;file_descriptor, pager-&gt;pages[page_num], size);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (bytes_written == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error writing: %d\\n\"</span>, errno);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>最后, 我们需要从命令行接收文件名的参数, 别忘了添加扩展参数到do_meta_command方法中.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">-  Table* table = new_table();</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Must supply a database filename.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* filename = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">+  Table* table = db_open(filename);</span><br><span class=\"line\">+</span><br><span class=\"line\">   InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">     print_prompt();</span><br><span class=\"line\">     read_input(input_buffer);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (input_buffer-&gt;buffer[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">-      <span class=\"keyword\">switch</span> (do_meta_command(input_buffer)) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">switch</span> (do_meta_command(input_buffer, table)) &#123;</span><br></pre></td></tr></table></figure>\n<p>通过这些改变, 我们的数据库可以关闭重新打开, 我们的数据依旧存在着</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ ./db mydb.db</span><br><span class=\"line\">db &gt; insert 1 cstack foo@bar.com</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; insert 2 voltorb volty@example.com</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; .<span class=\"built_in\">exit</span></span><br><span class=\"line\">~</span><br><span class=\"line\">~ ./db mydb.db</span><br><span class=\"line\">db &gt; select</span><br><span class=\"line\">(1, cstack, foo@bar.com)</span><br><span class=\"line\">(2, voltorb, volty@example.com)</span><br><span class=\"line\">Executed.</span><br><span class=\"line\">db &gt; .<span class=\"built_in\">exit</span></span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure>\n<p>为找一些有趣的事, 我们来看下 mydb.db 文件 看看我们的数据是如何存储的. 我们将使用 vim 的16进制编辑器打开它.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim mydb.db</span><br><span class=\"line\">:%!xxd</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/file-format.png\" alt=\"文件内容\"></p>\n<p>第一行的4个字节是我们的 ID (4个字节是因为我们存储了一个 uint32_t). 它以<a href=\"https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">little-endian字节顺序</a>存储，因此最低有效字节首先出现（01）,随后跟的是高位字节(00 00 00). 我们使用<code>memcpy()</code>方法将 Row 结构的中的数据拷贝到 page 缓存中, 所以这个也意味着这个结构在内存中也是底字节序的. 这个属性是我们汇编程序所决定的. 如果我们写了一个小端序的数据库文件,然后在大端序的机器上打开的, 我们需要修改<code>serialize_now()</code> 和 <code>deserialize_now()</code>方法保证读取和存储都是相同的顺序.</p>\n<p>下一个33字节存储的是用户名, 并且一个终止符结束.  显示出了 “cstack” 在 ASCII 码 在16进制 63 73 74 61 63 6b, 紧随其后的是的一个空字符(00). 剩下的33个字节是没有用的</p>\n<p>下一个256字节存储的是邮箱,用的同样的方式. 这里我们能看见一堆随机码在空字符后面.这个很可能是在Row结构没有初始化的内存. 我们拷贝了整个256字节的邮件 buffer 到文件中, 包含了在字符串结束后的内容. 当我们分配该结构时，内存中的内容仍然存在. 但由于我们使用终止空字符，因此它对行为没有影响。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好的,我们已经持久化了, 但是现在他并不是最好的. 例如, 如果你 kill 进程没有使用 <code>.exit</code> 命令, 你将会丢失你的修改. 另外我们写了所有的 page 到磁盘中, 甚至自从我们从磁盘读取它们以来没有改变的页面。</p>\n<p>下一步我们将介绍游标, 这会使实现 B 树更加简单.</p>\n<h3 id=\"完整的修改\"><a href=\"#完整的修改\" class=\"headerlink\" title=\"完整的修改\"></a>完整的修改</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\">+<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdbool.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\">+<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">InputBuffer_t</span> &#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">char</span>* buffer;</span><br><span class=\"line\">@@ <span class=\"number\">-61</span>,<span class=\"number\">8</span> +<span class=\"number\">64</span>,<span class=\"number\">15</span> @@ <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_PAGES = <span class=\"number\">100</span>;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;</span><br><span class=\"line\"> </span><br><span class=\"line\">-<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> &#123;</span></span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> &#123;</span></span><br><span class=\"line\">+  <span class=\"keyword\">int</span> file_descriptor;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> file_length;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* pages[TABLE_MAX_PAGES];</span><br><span class=\"line\">+&#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> <span class=\"title\">Pager</span>;</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> &#123;</span></span><br><span class=\"line\">+  Pager* pager;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> num_rows;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> <span class=\"title\">Table</span>;</span></span><br><span class=\"line\">@@ <span class=\"number\">-83</span>,<span class=\"number\">21</span> +<span class=\"number\">93</span>,<span class=\"number\">79</span> @@ <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deserialize_row</span><span class=\"params\">(<span class=\"keyword\">void</span>* source, Row* destination)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;email), source + EMAIL_OFFSET, EMAIL_SIZE);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">get_page</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (page_num &gt; TABLE_MAX_PAGES) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to fetch page number out of bounds. %d &gt; %d\\n\"</span>, page_num,</span><br><span class=\"line\">+           TABLE_MAX_PAGES);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Cache miss. Allocate memory and load from file.</span></span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* page = <span class=\"built_in\">malloc</span>(PAGE_SIZE);</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> num_pages = pager-&gt;file_length / PAGE_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    <span class=\"comment\">// We might save a partial page at the end of the file</span></span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (pager-&gt;file_length % PAGE_SIZE) &#123;</span><br><span class=\"line\">+      num_pages += <span class=\"number\">1</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (page_num &lt;= num_pages) &#123;</span><br><span class=\"line\">+      lseek(pager-&gt;file_descriptor, page_num * PAGE_SIZE, SEEK_SET);</span><br><span class=\"line\">+      <span class=\"keyword\">ssize_t</span> bytes_read = read(pager-&gt;file_descriptor, page, PAGE_SIZE);</span><br><span class=\"line\">+      <span class=\"keyword\">if</span> (bytes_read == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error reading file: %d\\n\"</span>, errno);</span><br><span class=\"line\">+        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+      &#125;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    pager-&gt;pages[page_num] = page;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> pager-&gt;pages[page_num];</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">row_slot</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> row_num)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">void</span>* page = table-&gt;pages[page_num];</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (!page) &#123;</span><br><span class=\"line\">-    <span class=\"comment\">// Allocate memory only when we try to access page</span></span><br><span class=\"line\">-    page = table-&gt;pages[page_num] = <span class=\"built_in\">malloc</span>(PAGE_SIZE);</span><br><span class=\"line\">-  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* page = get_page(table-&gt;pager, page_num);</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-<span class=\"function\">Table* <span class=\"title\">new_table</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\">Pager* <span class=\"title\">pager_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">int</span> fd = open(filename,</span><br><span class=\"line\">+                O_RDWR |      <span class=\"comment\">// Read/Write mode</span></span><br><span class=\"line\">+                    O_CREAT,  <span class=\"comment\">// Create file if it does not exist</span></span><br><span class=\"line\">+                S_IWUSR |     <span class=\"comment\">// User write permission</span></span><br><span class=\"line\">+                    S_IRUSR   <span class=\"comment\">// User read permission</span></span><br><span class=\"line\">+                );</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Unable to open file\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">off_t</span> file_length = lseek(fd, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  Pager* pager = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Pager));</span><br><span class=\"line\">+  pager-&gt;file_descriptor = fd;</span><br><span class=\"line\">+  pager-&gt;file_length = file_length;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;</span><br><span class=\"line\">+    pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> pager;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">Table* <span class=\"title\">db_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename)</span> </span>&#123;</span><br><span class=\"line\">+  Pager* pager = pager_open(filename);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_rows = pager-&gt;file_length / ROW_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">   Table* table = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Table));</span><br><span class=\"line\">-  table-&gt;num_rows = <span class=\"number\">0</span>;</span><br><span class=\"line\">+  table-&gt;pager = pager;</span><br><span class=\"line\">+  table-&gt;num_rows = num_rows;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> table;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">@@ <span class=\"number\">-127</span>,<span class=\"number\">8</span> +<span class=\"number\">195</span>,<span class=\"number\">71</span> @@ <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_input</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">   input_buffer-&gt;buffer[bytes_read - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-<span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer)</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pager_flush</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> size)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to flush null page\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">off_t</span> offset = lseek(pager-&gt;file_descriptor, page_num * PAGE_SIZE, SEEK_SET);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (offset == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error seeking: %d\\n\"</span>, errno);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">ssize_t</span> bytes_written =</span><br><span class=\"line\">+      write(pager-&gt;file_descriptor, pager-&gt;pages[page_num], size);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (bytes_written == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error writing: %d\\n\"</span>, errno);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">db_close</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">+  Pager* pager = table-&gt;pager;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_full_pages = table-&gt;num_rows / ROWS_PER_PAGE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_full_pages; i++) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (pager-&gt;pages[i] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+    pager_flush(pager, i, PAGE_SIZE);</span><br><span class=\"line\">+    <span class=\"built_in\">free</span>(pager-&gt;pages[i]);</span><br><span class=\"line\">+    pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"comment\">// There may be a partial page to write to the end of the file</span></span><br><span class=\"line\">+  <span class=\"comment\">// This should not be needed after we switch to a B-tree</span></span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_additional_rows = table-&gt;num_rows % ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (num_additional_rows &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> page_num = num_full_pages;</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">+      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);</span><br><span class=\"line\">+      <span class=\"built_in\">free</span>(pager-&gt;pages[page_num]);</span><br><span class=\"line\">+      pager-&gt;pages[page_num] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">int</span> result = close(pager-&gt;file_descriptor);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (result == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error closing db file.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* page = pager-&gt;pages[i];</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (page) &#123;</span><br><span class=\"line\">+      <span class=\"built_in\">free</span>(page);</span><br><span class=\"line\">+      pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+  <span class=\"built_in\">free</span>(pager);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    db_close(table);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;</span><br><span class=\"line\">@@ <span class=\"number\">-210</span>,<span class=\"number\">14</span> +<span class=\"number\">341</span>,<span class=\"number\">21</span> @@ <span class=\"function\">ExecuteResult <span class=\"title\">execute_statement</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">-  Table* table = new_table();</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Must supply a database filename.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">char</span>* filename = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">+  Table* table = db_open(filename);</span><br><span class=\"line\">+</span><br><span class=\"line\">   InputBuffer* input_buffer = new_input_buffer();</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">     print_prompt();</span><br><span class=\"line\">     read_input(input_buffer);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (input_buffer-&gt;buffer[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">-      <span class=\"keyword\">switch</span> (do_meta_command(input_buffer)) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">switch</span> (do_meta_command(input_buffer, table)) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> (META_COMMAND_SUCCESS):</span><br><span class=\"line\">           <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> (META_COMMAND_UNRECOGNIZED_COMMAND):</span><br><span class=\"line\">diff --git a/spec/main_spec.rb b/spec/main_spec.rb</span><br><span class=\"line\">index <span class=\"number\">21561</span>ce..bc0180a <span class=\"number\">100644</span></span><br><span class=\"line\">--- a/spec/main_spec.rb</span><br><span class=\"line\">+++ b/spec/main_spec.rb</span><br><span class=\"line\">@@ <span class=\"number\">-1</span>,<span class=\"number\">7</span> +<span class=\"number\">1</span>,<span class=\"number\">11</span> @@</span><br><span class=\"line\"> describe 'database' do</span><br><span class=\"line\">+  before <span class=\"keyword\">do</span></span><br><span class=\"line\">+    `rm -rf test.db`</span><br><span class=\"line\">+  end</span><br><span class=\"line\">+</span><br><span class=\"line\">   <span class=\"function\">def <span class=\"title\">run_script</span><span class=\"params\">(commands)</span></span></span><br><span class=\"line\"><span class=\"function\">     raw_output </span>= nil</span><br><span class=\"line\">-    IO.popen(<span class=\"string\">\"./db\"</span>, <span class=\"string\">\"r+\"</span>) <span class=\"keyword\">do</span> |pipe|</span><br><span class=\"line\">+    IO.popen(<span class=\"string\">\"./db test.db\"</span>, <span class=\"string\">\"r+\"</span>) <span class=\"keyword\">do</span> |pipe|</span><br><span class=\"line\">       commands.each <span class=\"keyword\">do</span> |command|</span><br><span class=\"line\">         pipe.<span class=\"built_in\">puts</span> command</span><br><span class=\"line\">       end</span><br><span class=\"line\">@@ -28,6 +32,27 @@ describe 'database' do</span><br><span class=\"line\">     ])</span><br><span class=\"line\">   end</span><br><span class=\"line\"> </span><br><span class=\"line\">+  it 'keeps data after closing connection' do</span><br><span class=\"line\">+    result1 = run_script([</span><br><span class=\"line\">+      <span class=\"string\">\"insert 1 user1 person1@example.com\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+    expect(result1).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+</span><br><span class=\"line\">+    result2 = run_script([</span><br><span class=\"line\">+      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+    expect(result2).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; (1, user1, person1@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  end</span><br><span class=\"line\">+</span><br><span class=\"line\">   it 'prints error message when table is full' do</span><br><span class=\"line\">     script = (<span class=\"number\">1.</span><span class=\"number\">.1401</span>).<span class=\"built_in\">map</span> <span class=\"keyword\">do</span> |i|</span><br><span class=\"line\">       <span class=\"string\">\"insert #&#123;i&#125; user#&#123;i&#125; person#&#123;i&#125;@example.com\"</span></span><br><span class=\"line\">And the diff to our tests:</span><br><span class=\"line\"></span><br><span class=\"line\"> describe 'database' do</span><br><span class=\"line\">+  before <span class=\"keyword\">do</span></span><br><span class=\"line\">+    `rm -rf test.db`</span><br><span class=\"line\">+  end</span><br><span class=\"line\">+</span><br><span class=\"line\">   <span class=\"function\">def <span class=\"title\">run_script</span><span class=\"params\">(commands)</span></span></span><br><span class=\"line\"><span class=\"function\">     raw_output </span>= nil</span><br><span class=\"line\">-    IO.popen(<span class=\"string\">\"./db\"</span>, <span class=\"string\">\"r+\"</span>) <span class=\"keyword\">do</span> |pipe|</span><br><span class=\"line\">+    IO.popen(<span class=\"string\">\"./db test.db\"</span>, <span class=\"string\">\"r+\"</span>) <span class=\"keyword\">do</span> |pipe|</span><br><span class=\"line\">       commands.each <span class=\"keyword\">do</span> |command|</span><br><span class=\"line\">         pipe.<span class=\"built_in\">puts</span> command</span><br><span class=\"line\">       end</span><br><span class=\"line\">@@ -28,6 +32,27 @@ describe 'database' do</span><br><span class=\"line\">     ])</span><br><span class=\"line\">   end</span><br><span class=\"line\"> </span><br><span class=\"line\">+  it 'keeps data after closing connection' do</span><br><span class=\"line\">+    result1 = run_script([</span><br><span class=\"line\">+      <span class=\"string\">\"insert 1 user1 person1@example.com\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+    expect(result1).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+</span><br><span class=\"line\">+    result2 = run_script([</span><br><span class=\"line\">+      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+    expect(result2).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; (1, user1, person1@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  end</span><br><span class=\"line\">+</span><br><span class=\"line\">   it 'prints error message when table is full' do</span><br><span class=\"line\">     script = (<span class=\"number\">1.</span><span class=\"number\">.1401</span>).<span class=\"built_in\">map</span> <span class=\"keyword\">do</span> |i|</span><br><span class=\"line\">       <span class=\"string\">\"insert #&#123;i&#125; user#&#123;i&#125; person#&#123;i&#125;@example.com\"</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Part 6 - B树介绍","date":"2019-02-03T10:08:34.000Z","_content":"\n# 介绍 B 树\n\nB树在SQLite中同时代表了表和索引, 这是一个非常棒的idea. 这一篇文章仅仅介绍数据结构, 所以不涉及代码的改动.\n\n为什么 B 树对于数据库是一个非常棒的结构.\n- 搜索一部分内容非常快(时间复杂度是 log 基本)\n- 插入和删除一个值你也会发现相等的快(重新平衡是常数时间).\n- 便利一个范围的数据也是非常快(当然不能和 map 比).\n\nB 树不像二叉树, B树的 \"B\"可能代表发现者的名称, 但是也有平衡的意思.下图是一个 B 树的例子:\n![example B-Tree](https://cstack.github.io/db_tutorial/assets/images/B-tree.png)\nexample B-Tree (https://en.wikipedia.org/wiki/File:B-tree.svg)\n\n不像二叉树, B树的每个节点可以有 m 个孩子, 这里 m 叫树的 \"order\". 为了保证树尽可能的平衡, 我们不得不控制节点个数在 m/2 的数量下.\n\n一些例外:\n- 叶子节点有0个孩子\n- 根节点可能可能有少于 m 个节点,但是至少是有两个的\n- 如果根节点是一个叶子节点,他就会有0个孩子.\n\n\n上图是一个B树,在 Sqlite 中被用于存储索引, 为了存储表数据 Sqlite 用了一个 B+ 树.\n\ntitle |  B-tree   | B+ tree\n ------ | ------- | ------\nPronounced | “Bee Tree” | “Bee Plus Tree”\nUsed to store | Indexes | Tables\nInternal nodes store keys | Yes | Yes\nInternal nodes store values | Yes | No\nNumber of children per node | Less | More\nInternal nodes vs. leaf nodes | Same structure | Different structure\n\n在我们开始实现索引之前，我将仅讨论B +树，但我只是将其称为B树或b树\n\n带子节点的节点称为“内部”节点。内部节点和叶节点的结构不同：\n\nFor an order-m tree… |  Internal Node   | Leaf Node\n ------ | ------- | ------\nStores | keys and pointers to children | keys and values\nNumber of keys | up to m-1 | as many as will fit\nNumber of pointers | number of keys + 1 | none\nNumber of values | none | number of keys\nKey purpose | used for routing | paired with value\nStores values? | No | Yes\n\n让我们通过一个例子来看下B树在插入元素后是如何增长的. 为了简单, 树的 `order` 是3. 这也意味着: \n- 每个内部节点最多有三个孩子\n- 每一个内部节点最多两个键.\n- 每个内部节点至少有2个子节点\n- 每个内部节点至少有一个key\n\n一个空的B树就一个单节点: 根节点. 根节点开始于叶子接口存在0个键值对:\n![empty btree](https://cstack.github.io/db_tutorial/assets/images/btree1.png)\nempty btree\n\n如果我们插入一个键值对, 它们将按顺序存储在叶子节点中.\n\n![one-node btree](https://cstack.github.io/db_tutorial/assets/images/btree2.png)\none-node btree\n\n\n假设叶节点的容量是两个键/值对。当我们插入另一个时，我们必须拆分叶节点并在每个节点中放置一半对。两个节点都成为新内部节点的子节点，现在它将成为根节点。\n\n![two-level btree](https://cstack.github.io/db_tutorial/assets/images/btree3.png)\ntwo-level btree\n\n内部节点有1个键和2个指向子节点的指针。如果我们想要查找小于或等于5的键，我们会查看左边的孩子。如果我们想要查找大于5的密钥，我们会找到合适的孩子。\n![](https://cstack.github.io/db_tutorial/assets/images/btree4.png)","source":"_posts/build_own_x/data_base/build_simple_database/Part7_introduction_b_tree.md","raw":"---\ntitle: Part 6 - B树介绍\ndate: 2019-02-03 18:08:34\ncategories:\n- build-own-x\ntags:\n- database\n- db原理\n---\n\n# 介绍 B 树\n\nB树在SQLite中同时代表了表和索引, 这是一个非常棒的idea. 这一篇文章仅仅介绍数据结构, 所以不涉及代码的改动.\n\n为什么 B 树对于数据库是一个非常棒的结构.\n- 搜索一部分内容非常快(时间复杂度是 log 基本)\n- 插入和删除一个值你也会发现相等的快(重新平衡是常数时间).\n- 便利一个范围的数据也是非常快(当然不能和 map 比).\n\nB 树不像二叉树, B树的 \"B\"可能代表发现者的名称, 但是也有平衡的意思.下图是一个 B 树的例子:\n![example B-Tree](https://cstack.github.io/db_tutorial/assets/images/B-tree.png)\nexample B-Tree (https://en.wikipedia.org/wiki/File:B-tree.svg)\n\n不像二叉树, B树的每个节点可以有 m 个孩子, 这里 m 叫树的 \"order\". 为了保证树尽可能的平衡, 我们不得不控制节点个数在 m/2 的数量下.\n\n一些例外:\n- 叶子节点有0个孩子\n- 根节点可能可能有少于 m 个节点,但是至少是有两个的\n- 如果根节点是一个叶子节点,他就会有0个孩子.\n\n\n上图是一个B树,在 Sqlite 中被用于存储索引, 为了存储表数据 Sqlite 用了一个 B+ 树.\n\ntitle |  B-tree   | B+ tree\n ------ | ------- | ------\nPronounced | “Bee Tree” | “Bee Plus Tree”\nUsed to store | Indexes | Tables\nInternal nodes store keys | Yes | Yes\nInternal nodes store values | Yes | No\nNumber of children per node | Less | More\nInternal nodes vs. leaf nodes | Same structure | Different structure\n\n在我们开始实现索引之前，我将仅讨论B +树，但我只是将其称为B树或b树\n\n带子节点的节点称为“内部”节点。内部节点和叶节点的结构不同：\n\nFor an order-m tree… |  Internal Node   | Leaf Node\n ------ | ------- | ------\nStores | keys and pointers to children | keys and values\nNumber of keys | up to m-1 | as many as will fit\nNumber of pointers | number of keys + 1 | none\nNumber of values | none | number of keys\nKey purpose | used for routing | paired with value\nStores values? | No | Yes\n\n让我们通过一个例子来看下B树在插入元素后是如何增长的. 为了简单, 树的 `order` 是3. 这也意味着: \n- 每个内部节点最多有三个孩子\n- 每一个内部节点最多两个键.\n- 每个内部节点至少有2个子节点\n- 每个内部节点至少有一个key\n\n一个空的B树就一个单节点: 根节点. 根节点开始于叶子接口存在0个键值对:\n![empty btree](https://cstack.github.io/db_tutorial/assets/images/btree1.png)\nempty btree\n\n如果我们插入一个键值对, 它们将按顺序存储在叶子节点中.\n\n![one-node btree](https://cstack.github.io/db_tutorial/assets/images/btree2.png)\none-node btree\n\n\n假设叶节点的容量是两个键/值对。当我们插入另一个时，我们必须拆分叶节点并在每个节点中放置一半对。两个节点都成为新内部节点的子节点，现在它将成为根节点。\n\n![two-level btree](https://cstack.github.io/db_tutorial/assets/images/btree3.png)\ntwo-level btree\n\n内部节点有1个键和2个指向子节点的指针。如果我们想要查找小于或等于5的键，我们会查看左边的孩子。如果我们想要查找大于5的密钥，我们会找到合适的孩子。\n![](https://cstack.github.io/db_tutorial/assets/images/btree4.png)","slug":"build_own_x/data_base/build_simple_database/Part7_introduction_b_tree","published":1,"updated":"2019-02-08T01:00:44.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgz1005b8seooi5sloq6","content":"<h1 id=\"介绍-B-树\"><a href=\"#介绍-B-树\" class=\"headerlink\" title=\"介绍 B 树\"></a>介绍 B 树</h1><p>B树在SQLite中同时代表了表和索引, 这是一个非常棒的idea. 这一篇文章仅仅介绍数据结构, 所以不涉及代码的改动.</p>\n<p>为什么 B 树对于数据库是一个非常棒的结构.</p>\n<ul>\n<li>搜索一部分内容非常快(时间复杂度是 log 基本)</li>\n<li>插入和删除一个值你也会发现相等的快(重新平衡是常数时间).</li>\n<li>便利一个范围的数据也是非常快(当然不能和 map 比).</li>\n</ul>\n<p>B 树不像二叉树, B树的 “B”可能代表发现者的名称, 但是也有平衡的意思.下图是一个 B 树的例子:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/B-tree.png\" alt=\"example B-Tree\"><br>example B-Tree (<a href=\"https://en.wikipedia.org/wiki/File:B-tree.svg\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/File:B-tree.svg</a>)</p>\n<p>不像二叉树, B树的每个节点可以有 m 个孩子, 这里 m 叫树的 “order”. 为了保证树尽可能的平衡, 我们不得不控制节点个数在 m/2 的数量下.</p>\n<p>一些例外:</p>\n<ul>\n<li>叶子节点有0个孩子</li>\n<li>根节点可能可能有少于 m 个节点,但是至少是有两个的</li>\n<li>如果根节点是一个叶子节点,他就会有0个孩子.</li>\n</ul>\n<p>上图是一个B树,在 Sqlite 中被用于存储索引, 为了存储表数据 Sqlite 用了一个 B+ 树.</p>\n<table>\n<thead>\n<tr>\n<th>title</th>\n<th>B-tree</th>\n<th>B+ tree</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Pronounced</td>\n<td>“Bee Tree”</td>\n<td>“Bee Plus Tree”</td>\n</tr>\n<tr>\n<td>Used to store</td>\n<td>Indexes</td>\n<td>Tables</td>\n</tr>\n<tr>\n<td>Internal nodes store keys</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Internal nodes store values</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Number of children per node</td>\n<td>Less</td>\n<td>More</td>\n</tr>\n<tr>\n<td>Internal nodes vs. leaf nodes</td>\n<td>Same structure</td>\n<td>Different structure</td>\n</tr>\n</tbody>\n</table>\n<p>在我们开始实现索引之前，我将仅讨论B +树，但我只是将其称为B树或b树</p>\n<p>带子节点的节点称为“内部”节点。内部节点和叶节点的结构不同：</p>\n<table>\n<thead>\n<tr>\n<th>For an order-m tree…</th>\n<th>Internal Node</th>\n<th>Leaf Node</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Stores</td>\n<td>keys and pointers to children</td>\n<td>keys and values</td>\n</tr>\n<tr>\n<td>Number of keys</td>\n<td>up to m-1</td>\n<td>as many as will fit</td>\n</tr>\n<tr>\n<td>Number of pointers</td>\n<td>number of keys + 1</td>\n<td>none</td>\n</tr>\n<tr>\n<td>Number of values</td>\n<td>none</td>\n<td>number of keys</td>\n</tr>\n<tr>\n<td>Key purpose</td>\n<td>used for routing</td>\n<td>paired with value</td>\n</tr>\n<tr>\n<td>Stores values?</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n<p>让我们通过一个例子来看下B树在插入元素后是如何增长的. 为了简单, 树的 <code>order</code> 是3. 这也意味着: </p>\n<ul>\n<li>每个内部节点最多有三个孩子</li>\n<li>每一个内部节点最多两个键.</li>\n<li>每个内部节点至少有2个子节点</li>\n<li>每个内部节点至少有一个key</li>\n</ul>\n<p>一个空的B树就一个单节点: 根节点. 根节点开始于叶子接口存在0个键值对:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree1.png\" alt=\"empty btree\"><br>empty btree</p>\n<p>如果我们插入一个键值对, 它们将按顺序存储在叶子节点中.</p>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree2.png\" alt=\"one-node btree\"><br>one-node btree</p>\n<p>假设叶节点的容量是两个键/值对。当我们插入另一个时，我们必须拆分叶节点并在每个节点中放置一半对。两个节点都成为新内部节点的子节点，现在它将成为根节点。</p>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree3.png\" alt=\"two-level btree\"><br>two-level btree</p>\n<p>内部节点有1个键和2个指向子节点的指针。如果我们想要查找小于或等于5的键，我们会查看左边的孩子。如果我们想要查找大于5的密钥，我们会找到合适的孩子。<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree4.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"介绍-B-树\"><a href=\"#介绍-B-树\" class=\"headerlink\" title=\"介绍 B 树\"></a>介绍 B 树</h1><p>B树在SQLite中同时代表了表和索引, 这是一个非常棒的idea. 这一篇文章仅仅介绍数据结构, 所以不涉及代码的改动.</p>\n<p>为什么 B 树对于数据库是一个非常棒的结构.</p>\n<ul>\n<li>搜索一部分内容非常快(时间复杂度是 log 基本)</li>\n<li>插入和删除一个值你也会发现相等的快(重新平衡是常数时间).</li>\n<li>便利一个范围的数据也是非常快(当然不能和 map 比).</li>\n</ul>\n<p>B 树不像二叉树, B树的 “B”可能代表发现者的名称, 但是也有平衡的意思.下图是一个 B 树的例子:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/B-tree.png\" alt=\"example B-Tree\"><br>example B-Tree (<a href=\"https://en.wikipedia.org/wiki/File:B-tree.svg\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/File:B-tree.svg</a>)</p>\n<p>不像二叉树, B树的每个节点可以有 m 个孩子, 这里 m 叫树的 “order”. 为了保证树尽可能的平衡, 我们不得不控制节点个数在 m/2 的数量下.</p>\n<p>一些例外:</p>\n<ul>\n<li>叶子节点有0个孩子</li>\n<li>根节点可能可能有少于 m 个节点,但是至少是有两个的</li>\n<li>如果根节点是一个叶子节点,他就会有0个孩子.</li>\n</ul>\n<p>上图是一个B树,在 Sqlite 中被用于存储索引, 为了存储表数据 Sqlite 用了一个 B+ 树.</p>\n<table>\n<thead>\n<tr>\n<th>title</th>\n<th>B-tree</th>\n<th>B+ tree</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Pronounced</td>\n<td>“Bee Tree”</td>\n<td>“Bee Plus Tree”</td>\n</tr>\n<tr>\n<td>Used to store</td>\n<td>Indexes</td>\n<td>Tables</td>\n</tr>\n<tr>\n<td>Internal nodes store keys</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Internal nodes store values</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Number of children per node</td>\n<td>Less</td>\n<td>More</td>\n</tr>\n<tr>\n<td>Internal nodes vs. leaf nodes</td>\n<td>Same structure</td>\n<td>Different structure</td>\n</tr>\n</tbody>\n</table>\n<p>在我们开始实现索引之前，我将仅讨论B +树，但我只是将其称为B树或b树</p>\n<p>带子节点的节点称为“内部”节点。内部节点和叶节点的结构不同：</p>\n<table>\n<thead>\n<tr>\n<th>For an order-m tree…</th>\n<th>Internal Node</th>\n<th>Leaf Node</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Stores</td>\n<td>keys and pointers to children</td>\n<td>keys and values</td>\n</tr>\n<tr>\n<td>Number of keys</td>\n<td>up to m-1</td>\n<td>as many as will fit</td>\n</tr>\n<tr>\n<td>Number of pointers</td>\n<td>number of keys + 1</td>\n<td>none</td>\n</tr>\n<tr>\n<td>Number of values</td>\n<td>none</td>\n<td>number of keys</td>\n</tr>\n<tr>\n<td>Key purpose</td>\n<td>used for routing</td>\n<td>paired with value</td>\n</tr>\n<tr>\n<td>Stores values?</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n<p>让我们通过一个例子来看下B树在插入元素后是如何增长的. 为了简单, 树的 <code>order</code> 是3. 这也意味着: </p>\n<ul>\n<li>每个内部节点最多有三个孩子</li>\n<li>每一个内部节点最多两个键.</li>\n<li>每个内部节点至少有2个子节点</li>\n<li>每个内部节点至少有一个key</li>\n</ul>\n<p>一个空的B树就一个单节点: 根节点. 根节点开始于叶子接口存在0个键值对:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree1.png\" alt=\"empty btree\"><br>empty btree</p>\n<p>如果我们插入一个键值对, 它们将按顺序存储在叶子节点中.</p>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree2.png\" alt=\"one-node btree\"><br>one-node btree</p>\n<p>假设叶节点的容量是两个键/值对。当我们插入另一个时，我们必须拆分叶节点并在每个节点中放置一半对。两个节点都成为新内部节点的子节点，现在它将成为根节点。</p>\n<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree3.png\" alt=\"two-level btree\"><br>two-level btree</p>\n<p>内部节点有1个键和2个指向子节点的指针。如果我们想要查找小于或等于5的键，我们会查看左边的孩子。如果我们想要查找大于5的密钥，我们会找到合适的孩子。<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree4.png\" alt=\"\"></p>\n"},{"title":"Part 9 - Binary Search and Duplicate Keys","date":"2019-02-23T10:10:54.000Z","_content":"\n# 二叉搜索和唯一键\n\n上一章节我们注意到, 我们仍然按未排序的顺序存储密钥. 我们将会 fix 这个问题, 加检测并且拒绝唯一键. \n现在, 我们 `execute_insert()` 方法总是插入到表的末尾. 因此,我们应该搜索表insert 到正确的地方. 如果键已经存在返回错误.\n\n```c\nExecuteResult execute_insert(Statement* statement, Table* table) {\n   void* node = get_page(table->pager, table->root_page_num);\n-  if ((*leaf_node_num_cells(node) >= LEAF_NODE_MAX_CELLS)) {\n+  uint32_t num_cells = (*leaf_node_num_cells(node));\n+  if (num_cells >= LEAF_NODE_MAX_CELLS) {\n     return EXECUTE_TABLE_FULL;\n   }\n\n   Row* row_to_insert = &(statement->row_to_insert);\n-  Cursor* cursor = table_end(table);\n+  uint32_t key_to_insert = row_to_insert->id;\n+  Cursor* cursor = table_find(table, key_to_insert);\n+\n+  if (cursor->cell_num < num_cells) {\n+    uint32_t key_at_index = *leaf_node_key(node, cursor->cell_num);\n+    if (key_at_index == key_to_insert) {\n+      return EXECUTE_DUPLICATE_KEY;\n+    }\n+  }\n\n   leaf_node_insert(cursor, row_to_insert->id, row_to_insert);\n```\n\n我们不需要 `table_end()` 方法.\n```c\n-Cursor* table_end(Table* table) {\n-  Cursor* cursor = malloc(sizeof(Cursor));\n-  cursor->table = table;\n-  cursor->page_num = table->root_page_num;\n-\n-  void* root_node = get_page(table->pager, table->root_page_num);\n-  uint32_t num_cells = *leaf_node_num_cells(root_node);\n-  cursor->cell_num = num_cells;\n-  cursor->end_of_table = true;\n-\n-  return cursor;\n-}\n```\n\n我们将会有一个替代方法, 给定一个 key 搜索树.\n\n```c\n+/*\n+Return the position of the given key.\n+If the key is not present, return the position\n+where it should be inserted\n+*/\n+Cursor* table_find(Table* table, uint32_t key) {\n+  uint32_t root_page_num = table->root_page_num;\n+  void* root_node = get_page(table->pager, root_page_num);\n+\n+  if (get_node_type(root_node) == NODE_LEAF) {\n+    return leaf_node_find(table, root_page_num, key);\n+  } else {\n+    printf(\"Need to implement searching an internal node\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+}\n```\n\n我忽略了内部节点的分支,因为我们还没有实现内部节点. 我们可以通过二分查找来搜索叶子节点.\n\n```c\n+Cursor* leaf_node_find(Table* table, uint32_t page_num, uint32_t key) {\n+  void* node = get_page(table->pager, page_num);\n+  uint32_t num_cells = *leaf_node_num_cells(node);\n+\n+  Cursor* cursor = malloc(sizeof(Cursor));\n+  cursor->table = table;\n+  cursor->page_num = page_num;\n+\n+  // Binary search\n+  uint32_t min_index = 0;\n+  uint32_t one_past_max_index = num_cells;\n+  while (one_past_max_index != min_index) {\n+    uint32_t index = (min_index + one_past_max_index) / 2;\n+    uint32_t key_at_index = *leaf_node_key(node, index);\n+    if (key == key_at_index) {\n+      cursor->cell_num = index;\n+      return cursor;\n+    }\n+    if (key < key_at_index) {\n+      one_past_max_index = index;\n+    } else {\n+      min_index = index + 1;\n+    }\n+  }\n+\n+  cursor->cell_num = min_index;\n+  return cursor;\n+}\n```\n这就会返回\n- key 的位置\n- 如果我们想插入新 key, 返回的是下一个我们想要移动的位置\n- 最后一个 key 的位置\n\n因为我们现在需要检查节点的类型, 需要方法来获取和设置一个节点的值.\n\n```c\n+NodeType get_node_type(void* node) {\n+  uint8_t value = *((uint8_t*)(node + NODE_TYPE_OFFSET));\n+  return (NodeType)value;\n+}\n+\n+void set_node_type(void* node, NodeType type) {\n+  uint8_t value = type;\n+  *((uint8_t*)(node + NODE_TYPE_OFFSET)) = value;\n+}\n```\n\n我们首先需要转换为 uint8_t ,确保它被序列化为单个字节.\n我们也需要初始化节点类型.\n\n```c\n-void initialize_leaf_node(void* node) { *leaf_node_num_cells(node) = 0; }\n+void initialize_leaf_node(void* node) {\n+  set_node_type(node, NODE_LEAF);\n+  *leaf_node_num_cells(node) = 0;\n+}\n```\n\n最后, 我们需要一个新的错误并捕获它.\n\n```c\n-enum ExecuteResult_t { EXECUTE_SUCCESS, EXECUTE_TABLE_FULL };\n+enum ExecuteResult_t {\n+  EXECUTE_SUCCESS,\n+  EXECUTE_DUPLICATE_KEY,\n+  EXECUTE_TABLE_FULL\n+};\n```\n\n```c\n       case (EXECUTE_SUCCESS):\n         printf(\"Executed.\\n\");\n         break;\n+      case (EXECUTE_DUPLICATE_KEY):\n+        printf(\"Error: Duplicate key.\\n\");\n+        break;\n       case (EXECUTE_TABLE_FULL):\n         printf(\"Error: Table full.\\n\");\n         break;\n```\n\n随着这些改变, 我们可以改变测试来检测订单的排序.\n\n```c\n       \"db > Executed.\",\n       \"db > Tree:\",\n       \"leaf (size 3)\",\n-      \"  - 0 : 3\",\n-      \"  - 1 : 1\",\n-      \"  - 2 : 2\",\n+      \"  - 0 : 1\",\n+      \"  - 1 : 2\",\n+      \"  - 2 : 3\",\n       \"db > \"\n     ])\n   end\n```\n\n我们也可以为唯一键添加一个新的测试.\n\n```c\n+  it 'prints an error message if there is a duplicate id' do\n+    script = [\n+      \"insert 1 user1 person1@example.com\",\n+      \"insert 1 user1 person1@example.com\",\n+      \"select\",\n+      \".exit\",\n+    ]\n+    result = run_script(script)\n+    expect(result).to match_array([\n+      \"db > Executed.\",\n+      \"db > Error: Duplicate key.\",\n+      \"db > (1, user1, person1@example.com)\",\n+      \"Executed.\",\n+      \"db > \",\n+    ])\n+  end\n```\n\n下一个,我们将实现分叶子节点和创建中间节点.\n\n\n","source":"_posts/build_own_x/data_base/build_simple_database/Part9_binary_search_and_duplicate_keys.md","raw":"---\ntitle: Part 9 - Binary Search and Duplicate Keys\ndate: 2019-02-23 18:10:54\ncategories:\n- build-own-x\ntags:\n- database\n- db原理\n---\n\n# 二叉搜索和唯一键\n\n上一章节我们注意到, 我们仍然按未排序的顺序存储密钥. 我们将会 fix 这个问题, 加检测并且拒绝唯一键. \n现在, 我们 `execute_insert()` 方法总是插入到表的末尾. 因此,我们应该搜索表insert 到正确的地方. 如果键已经存在返回错误.\n\n```c\nExecuteResult execute_insert(Statement* statement, Table* table) {\n   void* node = get_page(table->pager, table->root_page_num);\n-  if ((*leaf_node_num_cells(node) >= LEAF_NODE_MAX_CELLS)) {\n+  uint32_t num_cells = (*leaf_node_num_cells(node));\n+  if (num_cells >= LEAF_NODE_MAX_CELLS) {\n     return EXECUTE_TABLE_FULL;\n   }\n\n   Row* row_to_insert = &(statement->row_to_insert);\n-  Cursor* cursor = table_end(table);\n+  uint32_t key_to_insert = row_to_insert->id;\n+  Cursor* cursor = table_find(table, key_to_insert);\n+\n+  if (cursor->cell_num < num_cells) {\n+    uint32_t key_at_index = *leaf_node_key(node, cursor->cell_num);\n+    if (key_at_index == key_to_insert) {\n+      return EXECUTE_DUPLICATE_KEY;\n+    }\n+  }\n\n   leaf_node_insert(cursor, row_to_insert->id, row_to_insert);\n```\n\n我们不需要 `table_end()` 方法.\n```c\n-Cursor* table_end(Table* table) {\n-  Cursor* cursor = malloc(sizeof(Cursor));\n-  cursor->table = table;\n-  cursor->page_num = table->root_page_num;\n-\n-  void* root_node = get_page(table->pager, table->root_page_num);\n-  uint32_t num_cells = *leaf_node_num_cells(root_node);\n-  cursor->cell_num = num_cells;\n-  cursor->end_of_table = true;\n-\n-  return cursor;\n-}\n```\n\n我们将会有一个替代方法, 给定一个 key 搜索树.\n\n```c\n+/*\n+Return the position of the given key.\n+If the key is not present, return the position\n+where it should be inserted\n+*/\n+Cursor* table_find(Table* table, uint32_t key) {\n+  uint32_t root_page_num = table->root_page_num;\n+  void* root_node = get_page(table->pager, root_page_num);\n+\n+  if (get_node_type(root_node) == NODE_LEAF) {\n+    return leaf_node_find(table, root_page_num, key);\n+  } else {\n+    printf(\"Need to implement searching an internal node\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+}\n```\n\n我忽略了内部节点的分支,因为我们还没有实现内部节点. 我们可以通过二分查找来搜索叶子节点.\n\n```c\n+Cursor* leaf_node_find(Table* table, uint32_t page_num, uint32_t key) {\n+  void* node = get_page(table->pager, page_num);\n+  uint32_t num_cells = *leaf_node_num_cells(node);\n+\n+  Cursor* cursor = malloc(sizeof(Cursor));\n+  cursor->table = table;\n+  cursor->page_num = page_num;\n+\n+  // Binary search\n+  uint32_t min_index = 0;\n+  uint32_t one_past_max_index = num_cells;\n+  while (one_past_max_index != min_index) {\n+    uint32_t index = (min_index + one_past_max_index) / 2;\n+    uint32_t key_at_index = *leaf_node_key(node, index);\n+    if (key == key_at_index) {\n+      cursor->cell_num = index;\n+      return cursor;\n+    }\n+    if (key < key_at_index) {\n+      one_past_max_index = index;\n+    } else {\n+      min_index = index + 1;\n+    }\n+  }\n+\n+  cursor->cell_num = min_index;\n+  return cursor;\n+}\n```\n这就会返回\n- key 的位置\n- 如果我们想插入新 key, 返回的是下一个我们想要移动的位置\n- 最后一个 key 的位置\n\n因为我们现在需要检查节点的类型, 需要方法来获取和设置一个节点的值.\n\n```c\n+NodeType get_node_type(void* node) {\n+  uint8_t value = *((uint8_t*)(node + NODE_TYPE_OFFSET));\n+  return (NodeType)value;\n+}\n+\n+void set_node_type(void* node, NodeType type) {\n+  uint8_t value = type;\n+  *((uint8_t*)(node + NODE_TYPE_OFFSET)) = value;\n+}\n```\n\n我们首先需要转换为 uint8_t ,确保它被序列化为单个字节.\n我们也需要初始化节点类型.\n\n```c\n-void initialize_leaf_node(void* node) { *leaf_node_num_cells(node) = 0; }\n+void initialize_leaf_node(void* node) {\n+  set_node_type(node, NODE_LEAF);\n+  *leaf_node_num_cells(node) = 0;\n+}\n```\n\n最后, 我们需要一个新的错误并捕获它.\n\n```c\n-enum ExecuteResult_t { EXECUTE_SUCCESS, EXECUTE_TABLE_FULL };\n+enum ExecuteResult_t {\n+  EXECUTE_SUCCESS,\n+  EXECUTE_DUPLICATE_KEY,\n+  EXECUTE_TABLE_FULL\n+};\n```\n\n```c\n       case (EXECUTE_SUCCESS):\n         printf(\"Executed.\\n\");\n         break;\n+      case (EXECUTE_DUPLICATE_KEY):\n+        printf(\"Error: Duplicate key.\\n\");\n+        break;\n       case (EXECUTE_TABLE_FULL):\n         printf(\"Error: Table full.\\n\");\n         break;\n```\n\n随着这些改变, 我们可以改变测试来检测订单的排序.\n\n```c\n       \"db > Executed.\",\n       \"db > Tree:\",\n       \"leaf (size 3)\",\n-      \"  - 0 : 3\",\n-      \"  - 1 : 1\",\n-      \"  - 2 : 2\",\n+      \"  - 0 : 1\",\n+      \"  - 1 : 2\",\n+      \"  - 2 : 3\",\n       \"db > \"\n     ])\n   end\n```\n\n我们也可以为唯一键添加一个新的测试.\n\n```c\n+  it 'prints an error message if there is a duplicate id' do\n+    script = [\n+      \"insert 1 user1 person1@example.com\",\n+      \"insert 1 user1 person1@example.com\",\n+      \"select\",\n+      \".exit\",\n+    ]\n+    result = run_script(script)\n+    expect(result).to match_array([\n+      \"db > Executed.\",\n+      \"db > Error: Duplicate key.\",\n+      \"db > (1, user1, person1@example.com)\",\n+      \"Executed.\",\n+      \"db > \",\n+    ])\n+  end\n```\n\n下一个,我们将实现分叶子节点和创建中间节点.\n\n\n","slug":"build_own_x/data_base/build_simple_database/Part9_binary_search_and_duplicate_keys","published":1,"updated":"2019-02-23T12:52:42.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgz3005d8seopk1vg4lm","content":"<h1 id=\"二叉搜索和唯一键\"><a href=\"#二叉搜索和唯一键\" class=\"headerlink\" title=\"二叉搜索和唯一键\"></a>二叉搜索和唯一键</h1><p>上一章节我们注意到, 我们仍然按未排序的顺序存储密钥. 我们将会 fix 这个问题, 加检测并且拒绝唯一键.<br>现在, 我们 <code>execute_insert()</code> 方法总是插入到表的末尾. 因此,我们应该搜索表insert 到正确的地方. 如果键已经存在返回错误.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ExecuteResult <span class=\"title\">execute_insert</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> ((*leaf_node_num_cells(node) &gt;= LEAF_NODE_MAX_CELLS)) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = (*leaf_node_num_cells(node));</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (num_cells &gt;= LEAF_NODE_MAX_CELLS) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> EXECUTE_TABLE_FULL;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">-  Cursor* cursor = table_end(table);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> key_to_insert = row_to_insert-&gt;id;</span><br><span class=\"line\">+  Cursor* cursor = table_find(table, key_to_insert);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (cursor-&gt;cell_num &lt; num_cells) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> key_at_index = *leaf_node_key(node, cursor-&gt;cell_num);</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (key_at_index == key_to_insert) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> EXECUTE_DUPLICATE_KEY;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   leaf_node_insert(cursor, row_to_insert-&gt;id, row_to_insert);</span><br></pre></td></tr></table></figure>\n<p>我们不需要 <code>table_end()</code> 方法.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\">Cursor* <span class=\"title\">table_end</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">-  Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">-  cursor-&gt;table = table;</span><br><span class=\"line\">-  cursor-&gt;page_num = table-&gt;root_page_num;</span><br><span class=\"line\">-</span><br><span class=\"line\">-  <span class=\"keyword\">void</span>* root_node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(root_node);</span><br><span class=\"line\">-  cursor-&gt;cell_num = num_cells;</span><br><span class=\"line\">-  cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\">-</span><br><span class=\"line\">-  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">-&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们将会有一个替代方法, 给定一个 key 搜索树.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+Return the position of the given key.</span></span><br><span class=\"line\"><span class=\"comment\">+If the key is not present, return the position</span></span><br><span class=\"line\"><span class=\"comment\">+where it should be inserted</span></span><br><span class=\"line\"><span class=\"comment\">+*/</span></span><br><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">table_find</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> key)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> root_page_num = table-&gt;root_page_num;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* root_node = get_page(table-&gt;pager, root_page_num);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (get_node_type(root_node) == NODE_LEAF) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> leaf_node_find(table, root_page_num, key);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Need to implement searching an internal node\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>我忽略了内部节点的分支,因为我们还没有实现内部节点. 我们可以通过二分查找来搜索叶子节点.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">leaf_node_find</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> key)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(table-&gt;pager, page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">+  cursor-&gt;table = table;</span><br><span class=\"line\">+  cursor-&gt;page_num = page_num;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"comment\">// Binary search</span></span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> min_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> one_past_max_index = num_cells;</span><br><span class=\"line\">+  <span class=\"keyword\">while</span> (one_past_max_index != min_index) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> index = (min_index + one_past_max_index) / <span class=\"number\">2</span>;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> key_at_index = *leaf_node_key(node, index);</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (key == key_at_index) &#123;</span><br><span class=\"line\">+      cursor-&gt;cell_num = index;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (key &lt; key_at_index) &#123;</span><br><span class=\"line\">+      one_past_max_index = index;</span><br><span class=\"line\">+    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+      min_index = index + <span class=\"number\">1</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  cursor-&gt;cell_num = min_index;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>这就会返回</p>\n<ul>\n<li>key 的位置</li>\n<li>如果我们想插入新 key, 返回的是下一个我们想要移动的位置</li>\n<li>最后一个 key 的位置</li>\n</ul>\n<p>因为我们现在需要检查节点的类型, 需要方法来获取和设置一个节点的值.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\">NodeType <span class=\"title\">get_node_type</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint8_t</span> value = *((<span class=\"keyword\">uint8_t</span>*)(node + NODE_TYPE_OFFSET));</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> (NodeType)value;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_node_type</span><span class=\"params\">(<span class=\"keyword\">void</span>* node, NodeType type)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint8_t</span> value = type;</span><br><span class=\"line\">+  *((<span class=\"keyword\">uint8_t</span>*)(node + NODE_TYPE_OFFSET)) = value;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>我们首先需要转换为 uint8_t ,确保它被序列化为单个字节.<br>我们也需要初始化节点类型.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123; *leaf_node_num_cells(node) = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">+  set_node_type(node, NODE_LEAF);</span><br><span class=\"line\">+  *leaf_node_num_cells(node) = <span class=\"number\">0</span>;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>最后, 我们需要一个新的错误并捕获它.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"keyword\">enum</span> ExecuteResult_t &#123; EXECUTE_SUCCESS, EXECUTE_TABLE_FULL &#125;;</span><br><span class=\"line\">+<span class=\"keyword\">enum</span> ExecuteResult_t &#123;</span><br><span class=\"line\">+  EXECUTE_SUCCESS,</span><br><span class=\"line\">+  EXECUTE_DUPLICATE_KEY,</span><br><span class=\"line\">+  EXECUTE_TABLE_FULL</span><br><span class=\"line\">+&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       <span class=\"keyword\">case</span> (EXECUTE_SUCCESS):</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"Executed.\\n\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (EXECUTE_DUPLICATE_KEY):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error: Duplicate key.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (EXECUTE_TABLE_FULL):</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error: Table full.\\n\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>随着这些改变, 我们可以改变测试来检测订单的排序.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"db &gt; Tree:\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"leaf (size 3)\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"  - 0 : 3\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"  - 1 : 1\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"  - 2 : 2\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 0 : 1\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 1 : 2\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 2 : 3\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"db &gt; \"</span></span><br><span class=\"line\">     ])</span><br><span class=\"line\">   end</span><br></pre></td></tr></table></figure>\n<p>我们也可以为唯一键添加一个新的测试.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  it 'prints an error message if there is a duplicate id' do</span><br><span class=\"line\">+    script = [</span><br><span class=\"line\">+      <span class=\"string\">\"insert 1 user1 person1@example.com\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"insert 1 user1 person1@example.com\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ]</span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Error: Duplicate key.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; (1, user1, person1@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  end</span><br></pre></td></tr></table></figure>\n<p>下一个,我们将实现分叶子节点和创建中间节点.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"二叉搜索和唯一键\"><a href=\"#二叉搜索和唯一键\" class=\"headerlink\" title=\"二叉搜索和唯一键\"></a>二叉搜索和唯一键</h1><p>上一章节我们注意到, 我们仍然按未排序的顺序存储密钥. 我们将会 fix 这个问题, 加检测并且拒绝唯一键.<br>现在, 我们 <code>execute_insert()</code> 方法总是插入到表的末尾. 因此,我们应该搜索表insert 到正确的地方. 如果键已经存在返回错误.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ExecuteResult <span class=\"title\">execute_insert</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> ((*leaf_node_num_cells(node) &gt;= LEAF_NODE_MAX_CELLS)) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = (*leaf_node_num_cells(node));</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (num_cells &gt;= LEAF_NODE_MAX_CELLS) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> EXECUTE_TABLE_FULL;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">-  Cursor* cursor = table_end(table);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> key_to_insert = row_to_insert-&gt;id;</span><br><span class=\"line\">+  Cursor* cursor = table_find(table, key_to_insert);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (cursor-&gt;cell_num &lt; num_cells) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> key_at_index = *leaf_node_key(node, cursor-&gt;cell_num);</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (key_at_index == key_to_insert) &#123;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> EXECUTE_DUPLICATE_KEY;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   leaf_node_insert(cursor, row_to_insert-&gt;id, row_to_insert);</span><br></pre></td></tr></table></figure>\n<p>我们不需要 <code>table_end()</code> 方法.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\">Cursor* <span class=\"title\">table_end</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">-  Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">-  cursor-&gt;table = table;</span><br><span class=\"line\">-  cursor-&gt;page_num = table-&gt;root_page_num;</span><br><span class=\"line\">-</span><br><span class=\"line\">-  <span class=\"keyword\">void</span>* root_node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(root_node);</span><br><span class=\"line\">-  cursor-&gt;cell_num = num_cells;</span><br><span class=\"line\">-  cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\">-</span><br><span class=\"line\">-  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">-&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们将会有一个替代方法, 给定一个 key 搜索树.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+Return the position of the given key.</span></span><br><span class=\"line\"><span class=\"comment\">+If the key is not present, return the position</span></span><br><span class=\"line\"><span class=\"comment\">+where it should be inserted</span></span><br><span class=\"line\"><span class=\"comment\">+*/</span></span><br><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">table_find</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> key)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> root_page_num = table-&gt;root_page_num;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* root_node = get_page(table-&gt;pager, root_page_num);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (get_node_type(root_node) == NODE_LEAF) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> leaf_node_find(table, root_page_num, key);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Need to implement searching an internal node\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>我忽略了内部节点的分支,因为我们还没有实现内部节点. 我们可以通过二分查找来搜索叶子节点.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\">Cursor* <span class=\"title\">leaf_node_find</span><span class=\"params\">(Table* table, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> key)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(table-&gt;pager, page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">+  cursor-&gt;table = table;</span><br><span class=\"line\">+  cursor-&gt;page_num = page_num;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"comment\">// Binary search</span></span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> min_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> one_past_max_index = num_cells;</span><br><span class=\"line\">+  <span class=\"keyword\">while</span> (one_past_max_index != min_index) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> index = (min_index + one_past_max_index) / <span class=\"number\">2</span>;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> key_at_index = *leaf_node_key(node, index);</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (key == key_at_index) &#123;</span><br><span class=\"line\">+      cursor-&gt;cell_num = index;</span><br><span class=\"line\">+      <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (key &lt; key_at_index) &#123;</span><br><span class=\"line\">+      one_past_max_index = index;</span><br><span class=\"line\">+    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+      min_index = index + <span class=\"number\">1</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  cursor-&gt;cell_num = min_index;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>这就会返回</p>\n<ul>\n<li>key 的位置</li>\n<li>如果我们想插入新 key, 返回的是下一个我们想要移动的位置</li>\n<li>最后一个 key 的位置</li>\n</ul>\n<p>因为我们现在需要检查节点的类型, 需要方法来获取和设置一个节点的值.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\">NodeType <span class=\"title\">get_node_type</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint8_t</span> value = *((<span class=\"keyword\">uint8_t</span>*)(node + NODE_TYPE_OFFSET));</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> (NodeType)value;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_node_type</span><span class=\"params\">(<span class=\"keyword\">void</span>* node, NodeType type)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint8_t</span> value = type;</span><br><span class=\"line\">+  *((<span class=\"keyword\">uint8_t</span>*)(node + NODE_TYPE_OFFSET)) = value;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>我们首先需要转换为 uint8_t ,确保它被序列化为单个字节.<br>我们也需要初始化节点类型.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123; *leaf_node_num_cells(node) = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">+  set_node_type(node, NODE_LEAF);</span><br><span class=\"line\">+  *leaf_node_num_cells(node) = <span class=\"number\">0</span>;</span><br><span class=\"line\">+&#125;</span><br></pre></td></tr></table></figure>\n<p>最后, 我们需要一个新的错误并捕获它.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"keyword\">enum</span> ExecuteResult_t &#123; EXECUTE_SUCCESS, EXECUTE_TABLE_FULL &#125;;</span><br><span class=\"line\">+<span class=\"keyword\">enum</span> ExecuteResult_t &#123;</span><br><span class=\"line\">+  EXECUTE_SUCCESS,</span><br><span class=\"line\">+  EXECUTE_DUPLICATE_KEY,</span><br><span class=\"line\">+  EXECUTE_TABLE_FULL</span><br><span class=\"line\">+&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       <span class=\"keyword\">case</span> (EXECUTE_SUCCESS):</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"Executed.\\n\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">+      <span class=\"keyword\">case</span> (EXECUTE_DUPLICATE_KEY):</span><br><span class=\"line\">+        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error: Duplicate key.\\n\"</span>);</span><br><span class=\"line\">+        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> (EXECUTE_TABLE_FULL):</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error: Table full.\\n\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>随着这些改变, 我们可以改变测试来检测订单的排序.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"db &gt; Tree:\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"leaf (size 3)\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"  - 0 : 3\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"  - 1 : 1\"</span>,</span><br><span class=\"line\">-      <span class=\"string\">\"  - 2 : 2\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 0 : 1\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 1 : 2\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 2 : 3\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"db &gt; \"</span></span><br><span class=\"line\">     ])</span><br><span class=\"line\">   end</span><br></pre></td></tr></table></figure>\n<p>我们也可以为唯一键添加一个新的测试.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  it 'prints an error message if there is a duplicate id' do</span><br><span class=\"line\">+    script = [</span><br><span class=\"line\">+      <span class=\"string\">\"insert 1 user1 person1@example.com\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"insert 1 user1 person1@example.com\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"select\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ]</span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Error: Duplicate key.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; (1, user1, person1@example.com)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  end</span><br></pre></td></tr></table></figure>\n<p>下一个,我们将实现分叶子节点和创建中间节点.</p>\n"},{"title":"Part 8 - B-Tree Leaf Node Format","date":"2019-02-08T01:02:03.000Z","_content":"\n# B 树叶子节点格式\n\n我们将table 中未排序的行数据变成B树形状, 这是一个非常大的改变需要多个章节才能完成.\n在文章结束的时候,我们将定义叶子节点层,并且支持插入键值对到单节点树. 但是首先让我们回忆下选择树型结构的原因.\n\n### 替换表的结构\n\n使用当前格式，每个页面仅存储行（没有元数据），因此它非常节省空间。插入也很快，因为我们只是追加到最后。但是，只能通过扫描整个表来查找特定行。如果我们想要删除一行，我们必须通过移动它后面的每一行来填充这个洞。\n\n如果我们将表存储为数组，但保留按id排序的行，我们可以使用二进制搜索来查找特定的id。但是，插入会很慢，因为我们必须移动很多行来腾出空间。\n\n相反，我们将采用树形结构。树中的每个节点都可以包含可变数量的行，因此我们必须在每个节点中存储一些信息以跟踪它包含的行数。此外，所有内部节点的存储开销都不存储任何行。作为更大的数据库文件的交换，我们可以快速插入，删除和查找。\n\nname | Unsorted Array of rows | Sorted Array of rows | Tree of nodes\n :----: | :------: | :------: | :-------:\nPages contain | only data | only data | metadata, primary keys, and data\nRows per page | more | more | fewer\nInsertion | O(1) | O(n) | O(log(n))\nDeletion | O(n) | O(n) | O(log(n))\nLookup by id | O(n) | O(log(n)) | O(log(n))\n\n## 节点的头部格式\n\n叶子节点和中间节点在不同的层上,声明一个枚举类型来跟踪节点类型:\n\n```c\n+enum NodeType_t { NODE_INTERNAL, NODE_LEAF };\n+typedef enum NodeType_t NodeType;\n```\n\n每个节点都对应一页. 内部节点将通过存储存储子项的页码来指向其子项。B树 向寻呼机询问特定页码并返回指向页面缓存的指针。页面按页码顺序依次存储在数据库文件中。\n\n节点需要在页面开头的标题中存储一些元数据. 每个节点将存储它是什么类型的节点，它是否是根节点，以及指向其父节点的指针（以允许查找节点的兄弟节点）.我为每个标题字段的大小和偏移量定义常量:\n```c\n+/*\n+ * Common Node Header Layout\n+ */\n+const uint32_t NODE_TYPE_SIZE = sizeof(uint8_t);\n+const uint32_t NODE_TYPE_OFFSET = 0;\n+const uint32_t IS_ROOT_SIZE = sizeof(uint8_t);\n+const uint32_t IS_ROOT_OFFSET = NODE_TYPE_SIZE;\n+const uint32_t PARENT_POINTER_SIZE = sizeof(uint32_t);\n+const uint32_t PARENT_POINTER_OFFSET = IS_ROOT_OFFSET + IS_ROOT_SIZE;\n+const uint8_t COMMON_NODE_HEADER_SIZE =\n+    NODE_TYPE_SIZE + IS_ROOT_SIZE + PARENT_POINTER_SIZE;\n```\n\n## 叶子节点格式\n\n除了这些常见的头字段,叶子节点还需要存储包含有多少\"cells\". 一个\"Cell\" 包含着一个 key/value 对.\n```c\n+/*\n+ * Leaf Node Header Layout\n+ */\n+const uint32_t LEAF_NODE_NUM_CELLS_SIZE = sizeof(uint32_t);\n+const uint32_t LEAF_NODE_NUM_CELLS_OFFSET = COMMON_NODE_HEADER_SIZE;\n+const uint32_t LEAF_NODE_HEADER_SIZE =\n+    COMMON_NODE_HEADER_SIZE + LEAF_NODE_NUM_CELLS_SIZE;\n```\n\n叶子节点的内容是一个 cells 的数组, 每一个 cell 包含一个键与值(序列化的一行).\n```c\n+/*\n+ * Leaf Node Body Layout\n+ */\n+const uint32_t LEAF_NODE_KEY_SIZE = sizeof(uint32_t);\n+const uint32_t LEAF_NODE_KEY_OFFSET = 0;\n+const uint32_t LEAF_NODE_VALUE_SIZE = ROW_SIZE;\n+const uint32_t LEAF_NODE_VALUE_OFFSET =\n+    LEAF_NODE_KEY_OFFSET + LEAF_NODE_KEY_SIZE;\n+const uint32_t LEAF_NODE_CELL_SIZE = LEAF_NODE_KEY_SIZE + LEAF_NODE_VALUE_SIZE;\n+const uint32_t LEAF_NODE_SPACE_FOR_CELLS = PAGE_SIZE - LEAF_NODE_HEADER_SIZE;\n+const uint32_t LEAF_NODE_MAX_CELLS =\n+    LEAF_NODE_SPACE_FOR_CELLS / LEAF_NODE_CELL_SIZE;\n```\n\n基于这些常量的定义, 叶子节点格式看起来就像这样:\n![Our leaf node format](https://cstack.github.io/db_tutorial/assets/images/leaf-node-format.png)\nOur leaf node format\n\n在表头中使用一个字节来存储一个 bool 位是及其浪费空间的, 但是这样可以简化代码去访问这些值.\n注意,在尾部也浪费了一些空间. 在头部后, 我们存储尽可能多的 cells , 但是剩余的空间可能无法容纳一个完整的 cell. 我们将其留空为了避免 cells 拆分到不同的节点.\n\n## 访问叶子节点文件\n\n访问keys , values 和 元数据的代码都涉及使用我们刚刚定义的常量.\n\n```c\n+uint32_t* leaf_node_num_cells(void* node) {\n+  return (char *)node + LEAF_NODE_NUM_CELLS_OFFSET;\n+}\n+\n+void* leaf_node_cell(void* node, uint32_t cell_num) {\n+  return (char *)node + LEAF_NODE_HEADER_SIZE + cell_num * LEAF_NODE_CELL_SIZE;\n+}\n+\n+uint32_t* leaf_node_key(void* node, uint32_t cell_num) {\n+  return leaf_node_cell(node, cell_num);\n+}\n+\n+void* leaf_node_value(void* node, uint32_t cell_num) {\n+  return leaf_node_cell(node, cell_num) + LEAF_NODE_KEY_SIZE;\n+}\n+\n+void initialize_leaf_node(void* node) { *leaf_node_num_cells(node) = 0; }\n+\n```\n\n这些方法返回一个指向 value 的一个指针, 所以他们可以用在获取或者设置上.\n\n## 改变 Parger 和 table 对象\n\n每个节点仅占用一页, 即使没有填满. 这也意味着, 我们的 pager 不再需要支持读/写部分页面.\n```c\n-void pager_flush(Pager* pager, uint32_t page_num, uint32_t size) {\n+void pager_flush(Pager* pager, uint32_t page_num) {\n   if (pager->pages[page_num] == NULL) {\n     printf(\"Tried to flush null page\\n\");\n     exit(EXIT_FAILURE);\n@@ -242,7 +337,7 @@ void pager_flush(Pager* pager, uint32_t page_num, uint32_t size) {\n   }\n \n   ssize_t bytes_written =\n-      write(pager->file_descriptor, pager->pages[page_num], size);\n+      write(pager->file_descriptor, pager->pages[page_num], PAGE_SIZE);\n \n   if (bytes_written == -1) {\n     printf(\"Error writing: %d\\n\", errno);\n```\n\n```c\nvoid db_close(Table* table) {\n   Pager* pager = table->pager;\n-  uint32_t num_full_pages = table->num_rows / ROWS_PER_PAGE;\n \n-  for (uint32_t i = 0; i < num_full_pages; i++) {\n+  for (uint32_t i = 0; i < pager->num_pages; i++) {\n     if (pager->pages[i] == NULL) {\n       continue;\n     }\n-    pager_flush(pager, i, PAGE_SIZE);\n+    pager_flush(pager, i);\n     free(pager->pages[i]);\n     pager->pages[i] = NULL;\n   }\n \n-  // There may be a partial page to write to the end of the file\n-  // This should not be needed after we switch to a B-tree\n-  uint32_t num_additional_rows = table->num_rows % ROWS_PER_PAGE;\n-  if (num_additional_rows > 0) {\n-    uint32_t page_num = num_full_pages;\n-    if (pager->pages[page_num] != NULL) {\n-      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);\n-      free(pager->pages[page_num]);\n-      pager->pages[page_num] = NULL;\n-    }\n-  }\n-\n   int result = close(pager->file_descriptor);\n   if (result == -1) {\n     printf(\"Error closing db file.\\n\");\n```\n\n在数据库中存储页码会比存储行数更加有用. 页码应该关联上 pager 对象, 而不是 table, 因为这是数据库使用的页码, 而不是特定的表. 一个 B树定义了一个根节点页码, 所以表需要追踪这些信息.\n\n```c\nconst uint32_t PAGE_SIZE = 4096;\n const uint32_t TABLE_MAX_PAGES = 100;\n-const uint32_t ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;\n-const uint32_t TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;\n \n struct Pager_t {\n   int file_descriptor;\n   uint32_t file_length;\n+  uint32_t num_pages;\n   void* pages[TABLE_MAX_PAGES];\n };\n typedef struct Pager_t Pager;\n \n struct Table_t {\n   Pager* pager;\n-  uint32_t num_rows;\n+  uint32_t root_page_num;\n };\n typedef struct Table_t Table;\n```\n\n```c\n@@ -127,6 +200,10 @@ void* get_page(Pager* pager, uint32_t page_num) {\n     }\n \n     pager->pages[page_num] = page;\n+\n+    if (page_num >= pager->num_pages) {\n+      pager->num_pages = page_num + 1;\n+    }\n   }\n \n   return pager->pages[page_num];\n```\n\n```c\n@@ -184,6 +269,12 @@ Pager* pager_open(const char* filename) {\n   Pager* pager = malloc(sizeof(Pager));\n   pager->file_descriptor = fd;\n   pager->file_length = file_length;\n+  pager->num_pages = (file_length / PAGE_SIZE);\n+\n+  if (file_length % PAGE_SIZE != 0) {\n+    printf(\"Db file is not a whole number of pages. Corrupt file.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n \n   for (uint32_t i = 0; i < TABLE_MAX_PAGES; i++) {\n     pager->pages[i] = NULL;\n```\n\n## 游标类的改变\n\n一个游标代表了表中的一个位置. 当我们的 table 是一个简单的数据行元素的时候, 我们可以仅通过行号来访问一行数据. 现在这个一棵树, 我们通过节点的页码来确定位置. 并且 cell 的个数在节点中.\n\n```c\n struct Cursor_t {\n   Table* table;\n-  uint32_t row_num;\n+  uint32_t page_num;\n+  uint32_t cell_num;\n   bool end_of_table;  // Indicates a position one past the last element\n };\n typedef struct Cursor_t Cursor;\n```\n\n```c\n Cursor* table_start(Table* table) {\n   Cursor* cursor = malloc(sizeof(Cursor));\n   cursor->table = table;\n-  cursor->row_num = 0;\n-  cursor->end_of_table = (table->num_rows == 0);\n+  cursor->page_num = table->root_page_num;\n+  cursor->cell_num = 0;\n+\n+  void* root_node = get_page(table->pager, table->root_page_num);\n+  uint32_t num_cells = *leaf_node_num_cells(root_node);\n+  cursor->end_of_table = (num_cells == 0);\n \n   return cursor;\n }\n```\n\n```c\n Cursor* table_end(Table* table) {\n   Cursor* cursor = malloc(sizeof(Cursor));\n   cursor->table = table;\n-  cursor->row_num = table->num_rows;\n+  cursor->page_num = table->root_page_num;\n+\n+  void* root_node = get_page(table->pager, table->root_page_num);\n+  uint32_t num_cells = *leaf_node_num_cells(root_node);\n+  cursor->cell_num = num_cells;\n   cursor->end_of_table = true;\n \n   return cursor;\n }\n```\n\n```c\n void* cursor_value(Cursor* cursor) {\n-  uint32_t row_num = cursor->row_num;\n-  uint32_t page_num = row_num / ROWS_PER_PAGE;\n+  uint32_t page_num = cursor->page_num;\n   void* page = get_page(cursor->table->pager, page_num);\n-  uint32_t row_offset = row_num % ROWS_PER_PAGE;\n-  uint32_t byte_offset = row_offset * ROW_SIZE;\n-  return page + byte_offset;\n+  return leaf_node_value(page, cursor->cell_num);\n }\n```\n\n```c\n void cursor_advance(Cursor* cursor) {\n-  cursor->row_num += 1;\n-  if (cursor->row_num >= cursor->table->num_rows) {\n+  uint32_t page_num = cursor->page_num;\n+  void* node = get_page(cursor->table->pager, page_num);\n+\n+  cursor->cell_num += 1;\n+  if (cursor->cell_num >= (*leaf_node_num_cells(node))) {\n     cursor->end_of_table = true;\n   }\n }\n```\n\n## 插入叶子节点\n在本文中，我们将只实现足以获得单节点树. 回想一下上一篇文章，树开始是一个空叶节点:\n![empty btree](https://cstack.github.io/db_tutorial/assets/images/btree1.png)\nempty btree\n\n键值对可以增加直到叶子节点填满:\n![one-node btree](https://cstack.github.io/db_tutorial/assets/images/btree2.png)\n\n当我们第一打开数据库的时候, 数据库文件将会是一个空的文件, 所以我们初始化页码为0为东的叶子节点(根节点):\n```c\n Table* db_open(const char* filename) {\n   Pager* pager = pager_open(filename);\n-  uint32_t num_rows = pager->file_length / ROW_SIZE;\n \n   Table* table = malloc(sizeof(Table));\n   table->pager = pager;\n-  table->num_rows = num_rows;\n+  table->root_page_num = 0;\n+\n+  if (pager->num_pages == 0) {\n+    // New database file. Initialize page 0 as leaf node.\n+    void* root_node = get_page(pager, 0);\n+    initialize_leaf_node(root_node);\n+  }\n \n   return table;\n }\n```\n\n下一步我们将写一个函数插入键值对到叶子节点. 它将会有一个游标代表插入的位置.\n\n```c\n+void leaf_node_insert(Cursor* cursor, uint32_t key, Row* value) {\n+  void* node = get_page(cursor->table->pager, cursor->page_num);\n+\n+  uint32_t num_cells = *leaf_node_num_cells(node);\n+  if (num_cells >= LEAF_NODE_MAX_CELLS) {\n+    // Node full\n+    printf(\"Need to implement splitting a leaf node.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  if (cursor->cell_num < num_cells) {\n+    // Make room for new cell\n+    for (uint32_t i = num_cells; i > cursor->cell_num; i--) {\n+      memcpy(leaf_node_cell(node, i), leaf_node_cell(node, i - 1),\n+             LEAF_NODE_CELL_SIZE);\n+    }\n+  }\n+\n+  *(leaf_node_num_cells(node)) += 1;\n+  *(leaf_node_key(node, cursor->cell_num)) = key;\n+  serialize_row(value, leaf_node_value(node, cursor->cell_num));\n+}\n+\n```\n\n我们并没有实现切分, 所以如果节点满了将会报错. 下一步, 我们将 cells 向右移动一个空间, 为新的 cell 腾出空间,然后写一个新的键值对到空的空间中.\n\n因为我们的树目前仅有一个节点, 我们的 `execute_insert()` 方法仅需要调用这么帮助方法:\n```c\nExecuteResult execute_insert(Statement* statement, Table* table) {\n-  if (table->num_rows >= TABLE_MAX_ROWS) {\n+  void* node = get_page(table->pager, table->root_page_num);\n+  if ((*leaf_node_num_cells(node) >= LEAF_NODE_MAX_CELLS)) {\n     return EXECUTE_TABLE_FULL;\n   }\n \n   Row* row_to_insert = &(statement->row_to_insert);\n   Cursor* cursor = table_end(table);\n \n-  serialize_row(row_to_insert, cursor_value(cursor));\n-  table->num_rows += 1;\n+  leaf_node_insert(cursor, row_to_insert->id, row_to_insert);\n \n   free(cursor);\n```\n随着这些改变,我们的数据应该是还能向以前一样工作. 异常现在会返回一个\"Table Full\" , 因为我们没有切分根节点.\n\n叶子节点可以容纳多少行呢?\n\n## 打印常量的命令\n\n我添加了一个新的命令打印一些常量.\n```c\n+void print_constants() {\n+  printf(\"ROW_SIZE: %d\\n\", ROW_SIZE);\n+  printf(\"COMMON_NODE_HEADER_SIZE: %d\\n\", COMMON_NODE_HEADER_SIZE);\n+  printf(\"LEAF_NODE_HEADER_SIZE: %d\\n\", LEAF_NODE_HEADER_SIZE);\n+  printf(\"LEAF_NODE_CELL_SIZE: %d\\n\", LEAF_NODE_CELL_SIZE);\n+  printf(\"LEAF_NODE_SPACE_FOR_CELLS: %d\\n\", LEAF_NODE_SPACE_FOR_CELLS);\n+  printf(\"LEAF_NODE_MAX_CELLS: %d\\n\", LEAF_NODE_MAX_CELLS);\n+}\n+\n@@ -294,6 +376,14 @@ MetaCommandResult do_meta_command(InputBuffer* input_buffer, Table* table) {\n   if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n     db_close(table);\n     exit(EXIT_SUCCESS);\n+  } else if (strcmp(input_buffer->buffer, \".constants\") == 0) {\n+    printf(\"Constants:\\n\");\n+    print_constants();\n+    return META_COMMAND_SUCCESS;\n   } else {\n     return META_COMMAND_UNRECOGNIZED_COMMAND;\n   }\n```\n\n添加了一个单元测试\n\n```ruby\n+  it 'prints constants' do\n+    script = [\n+      \".constants\",\n+      \".exit\",\n+    ]\n+    result = run_script(script)\n+\n+    expect(result).to match_array([\n+      \"db > Constants:\",\n+      \"ROW_SIZE: 293\",\n+      \"COMMON_NODE_HEADER_SIZE: 6\",\n+      \"LEAF_NODE_HEADER_SIZE: 10\",\n+      \"LEAF_NODE_CELL_SIZE: 297\",\n+      \"LEAF_NODE_SPACE_FOR_CELLS: 4086\",\n+      \"LEAF_NODE_MAX_CELLS: 13\",\n+      \"db > \",\n+    ])\n+  end\n```\n\n所以现在表能放下13行数据.\n\n## 树的可视化\n\n为了帮助我们调试和可视化, 我添加了一个命令打印我们目前的B树.\n\n```c\n+void print_leaf_node(void* node) {\n+  uint32_t num_cells = *leaf_node_num_cells(node);\n+  printf(\"leaf (size %d)\\n\", num_cells);\n+  for (uint32_t i = 0; i < num_cells; i++) {\n+    uint32_t key = *leaf_node_key(node, i);\n+    printf(\"  - %d : %d\\n\", i, key);\n+  }\n+}\n+\n```\n\n```c\n@@ -294,6 +376,14 @@ MetaCommandResult do_meta_command(InputBuffer* input_buffer, Table* table) {\n   if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n     db_close(table);\n     exit(EXIT_SUCCESS);\n+  } else if (strcmp(input_buffer->buffer, \".btree\") == 0) {\n+    printf(\"Tree:\\n\");\n+    print_leaf_node(get_page(table->pager, 0));\n+    return META_COMMAND_SUCCESS;\n   } else if (strcmp(input_buffer->buffer, \".constants\") == 0) {\n     printf(\"Constants:\\n\");\n     print_constants();\n     return META_COMMAND_SUCCESS;\n   } else {\n     return META_COMMAND_UNRECOGNIZED_COMMAND;\n   }\n```\n\n和一个测试\n\n```ruby\n+  it 'allows printing out the structure of a one-node btree' do\n+    script = [3, 1, 2].map do |i|\n+      \"insert #{i} user#{i} person#{i}@example.com\"\n+    end\n+    script << \".btree\"\n+    script << \".exit\"\n+    result = run_script(script)\n+\n+    expect(result).to match_array([\n+      \"db > Executed.\",\n+      \"db > Executed.\",\n+      \"db > Executed.\",\n+      \"db > Tree:\",\n+      \"leaf (size 3)\",\n+      \"  - 0 : 3\",\n+      \"  - 1 : 1\",\n+      \"  - 2 : 2\",\n+      \"db > \"\n+    ])\n+  end\n```\n\n我们目前依旧没有按排序顺序存储rows. 我们将注意到 `execute_insert()` 插入到叶子节点在`table_end()` 返回的时候. 所以行按插入顺序存储，就像之前一样.\n\n## 下一讲\n\n\n\n## 完整的改动\n\n```c\nconst uint32_t PAGE_SIZE = 4096;\n const uint32_t TABLE_MAX_PAGES = 100;\n-const uint32_t ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;\n-const uint32_t TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;\n \n struct Pager_t {\n   int file_descriptor;\n   uint32_t file_length;\n+  uint32_t num_pages;\n   void* pages[TABLE_MAX_PAGES];\n };\n typedef struct Pager_t Pager;\n \n struct Table_t {\n   Pager* pager;\n-  uint32_t num_rows;\n+  uint32_t root_page_num;\n };\n typedef struct Table_t Table;\n \n struct Cursor_t {\n   Table* table;\n-  uint32_t row_num;\n+  uint32_t page_num;\n+  uint32_t cell_num;\n   bool end_of_table;  // Indicates a position one past the last element\n };\n typedef struct Cursor_t Cursor;\n@@ -88,6 +88,77 @@ void print_row(Row* row) {\n   printf(\"(%d, %s, %s)\\n\", row->id, row->username, row->email);\n }\n \n+enum NodeType_t { NODE_INTERNAL, NODE_LEAF };\n+typedef enum NodeType_t NodeType;\n+\n+/*\n+ * Common Node Header Layout\n+ */\n+const uint32_t NODE_TYPE_SIZE = sizeof(uint8_t);\n+const uint32_t NODE_TYPE_OFFSET = 0;\n+const uint32_t IS_ROOT_SIZE = sizeof(uint8_t);\n+const uint32_t IS_ROOT_OFFSET = NODE_TYPE_SIZE;\n+const uint32_t PARENT_POINTER_SIZE = sizeof(uint32_t);\n+const uint32_t PARENT_POINTER_OFFSET = IS_ROOT_OFFSET + IS_ROOT_SIZE;\n+const uint8_t COMMON_NODE_HEADER_SIZE =\n+    NODE_TYPE_SIZE + IS_ROOT_SIZE + PARENT_POINTER_SIZE;\n+\n+/*\n+ * Leaf Node Header Layout\n+ */\n+const uint32_t LEAF_NODE_NUM_CELLS_SIZE = sizeof(uint32_t);\n+const uint32_t LEAF_NODE_NUM_CELLS_OFFSET = COMMON_NODE_HEADER_SIZE;\n+const uint32_t LEAF_NODE_HEADER_SIZE =\n+    COMMON_NODE_HEADER_SIZE + LEAF_NODE_NUM_CELLS_SIZE;\n+\n+/*\n+ * Leaf Node Body Layout\n+ */\n+const uint32_t LEAF_NODE_KEY_SIZE = sizeof(uint32_t);\n+const uint32_t LEAF_NODE_KEY_OFFSET = 0;\n+const uint32_t LEAF_NODE_VALUE_SIZE = ROW_SIZE;\n+const uint32_t LEAF_NODE_VALUE_OFFSET =\n+    LEAF_NODE_KEY_OFFSET + LEAF_NODE_KEY_SIZE;\n+const uint32_t LEAF_NODE_CELL_SIZE = LEAF_NODE_KEY_SIZE + LEAF_NODE_VALUE_SIZE;\n+const uint32_t LEAF_NODE_SPACE_FOR_CELLS = PAGE_SIZE - LEAF_NODE_HEADER_SIZE;\n+const uint32_t LEAF_NODE_MAX_CELLS =\n+    LEAF_NODE_SPACE_FOR_CELLS / LEAF_NODE_CELL_SIZE;\n+\n+uint32_t* leaf_node_num_cells(void* node) {\n+  return node + LEAF_NODE_NUM_CELLS_OFFSET;\n+}\n+\n+void* leaf_node_cell(void* node, uint32_t cell_num) {\n+  return node + LEAF_NODE_HEADER_SIZE + cell_num * LEAF_NODE_CELL_SIZE;\n+}\n+\n+uint32_t* leaf_node_key(void* node, uint32_t cell_num) {\n+  return leaf_node_cell(node, cell_num);\n+}\n+\n+void* leaf_node_value(void* node, uint32_t cell_num) {\n+  return leaf_node_cell(node, cell_num) + LEAF_NODE_KEY_SIZE;\n+}\n+\n+void print_constants() {\n+  printf(\"ROW_SIZE: %d\\n\", ROW_SIZE);\n+  printf(\"COMMON_NODE_HEADER_SIZE: %d\\n\", COMMON_NODE_HEADER_SIZE);\n+  printf(\"LEAF_NODE_HEADER_SIZE: %d\\n\", LEAF_NODE_HEADER_SIZE);\n+  printf(\"LEAF_NODE_CELL_SIZE: %d\\n\", LEAF_NODE_CELL_SIZE);\n+  printf(\"LEAF_NODE_SPACE_FOR_CELLS: %d\\n\", LEAF_NODE_SPACE_FOR_CELLS);\n+  printf(\"LEAF_NODE_MAX_CELLS: %d\\n\", LEAF_NODE_MAX_CELLS);\n+}\n+\n+void print_leaf_node(void* node) {\n+  uint32_t num_cells = *leaf_node_num_cells(node);\n+  printf(\"leaf (size %d)\\n\", num_cells);\n+  for (uint32_t i = 0; i < num_cells; i++) {\n+    uint32_t key = *leaf_node_key(node, i);\n+    printf(\"  - %d : %d\\n\", i, key);\n+  }\n+}\n+\n void serialize_row(Row* source, void* destination) {\n   memcpy(destination + ID_OFFSET, &(source->id), ID_SIZE);\n   memcpy(destination + USERNAME_OFFSET, &(source->username), USERNAME_SIZE);\n@@ -100,6 +171,8 @@ void deserialize_row(void* source, Row* destination) {\n   memcpy(&(destination->email), source + EMAIL_OFFSET, EMAIL_SIZE);\n }\n \n+void initialize_leaf_node(void* node) { *leaf_node_num_cells(node) = 0; }\n+\n void* get_page(Pager* pager, uint32_t page_num) {\n   if (page_num > TABLE_MAX_PAGES) {\n     printf(\"Tried to fetch page number out of bounds. %d > %d\\n\", page_num,\n@@ -127,6 +200,10 @@ void* get_page(Pager* pager, uint32_t page_num) {\n     }\n \n     pager->pages[page_num] = page;\n+\n+    if (page_num >= pager->num_pages) {\n+      pager->num_pages = page_num + 1;\n+    }\n   }\n \n   return pager->pages[page_num];\n@@ -135,8 +212,12 @@ void* get_page(Pager* pager, uint32_t page_num) {\n Cursor* table_start(Table* table) {\n   Cursor* cursor = malloc(sizeof(Cursor));\n   cursor->table = table;\n-  cursor->row_num = 0;\n-  cursor->end_of_table = (table->num_rows == 0);\n+  cursor->page_num = table->root_page_num;\n+  cursor->cell_num = 0;\n+\n+  void* root_node = get_page(table->pager, table->root_page_num);\n+  uint32_t num_cells = *leaf_node_num_cells(root_node);\n+  cursor->end_of_table = (num_cells == 0);\n \n   return cursor;\n }\n@@ -144,24 +225,28 @@ Cursor* table_start(Table* table) {\n Cursor* table_end(Table* table) {\n   Cursor* cursor = malloc(sizeof(Cursor));\n   cursor->table = table;\n-  cursor->row_num = table->num_rows;\n+  cursor->page_num = table->root_page_num;\n+\n+  void* root_node = get_page(table->pager, table->root_page_num);\n+  uint32_t num_cells = *leaf_node_num_cells(root_node);\n+  cursor->cell_num = num_cells;\n   cursor->end_of_table = true;\n \n   return cursor;\n }\n \n void* cursor_value(Cursor* cursor) {\n-  uint32_t row_num = cursor->row_num;\n-  uint32_t page_num = row_num / ROWS_PER_PAGE;\n+  uint32_t page_num = cursor->page_num;\n   void* page = get_page(cursor->table->pager, page_num);\n-  uint32_t row_offset = row_num % ROWS_PER_PAGE;\n-  uint32_t byte_offset = row_offset * ROW_SIZE;\n-  return page + byte_offset;\n+  return leaf_node_value(page, cursor->cell_num);\n }\n \n void cursor_advance(Cursor* cursor) {\n-  cursor->row_num += 1;\n-  if (cursor->row_num >= cursor->table->num_rows) {\n+  uint32_t page_num = cursor->page_num;\n+  void* node = get_page(cursor->table->pager, page_num);\n+\n+  cursor->cell_num += 1;\n+  if (cursor->cell_num >= (*leaf_node_num_cells(node))) {\n     cursor->end_of_table = true;\n   }\n }\n@@ -184,6 +269,12 @@ Pager* pager_open(const char* filename) {\n   Pager* pager = malloc(sizeof(Pager));\n   pager->file_descriptor = fd;\n   pager->file_length = file_length;\n+  pager->num_pages = (file_length / PAGE_SIZE);\n+\n+  if (file_length % PAGE_SIZE != 0) {\n+    printf(\"Db file is not a whole number of pages. Corrupt file.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n \n   for (uint32_t i = 0; i < TABLE_MAX_PAGES; i++) {\n     pager->pages[i] = NULL;\n@@ -194,11 +285,15 @@ Pager* pager_open(const char* filename) {\n \n Table* db_open(const char* filename) {\n   Pager* pager = pager_open(filename);\n-  uint32_t num_rows = pager->file_length / ROW_SIZE;\n \n   Table* table = malloc(sizeof(Table));\n   table->pager = pager;\n-  table->num_rows = num_rows;\n+  table->root_page_num = 0;\n+\n+  if (pager->num_pages == 0) {\n+    // New database file. Initialize page 0 as leaf node.\n+    void* root_node = get_page(pager, 0);\n+    initialize_leaf_node(root_node);\n+  }\n \n   return table;\n }\n@@ -228,7 +323,7 @@ void read_input(InputBuffer* input_buffer) {\n   input_buffer->buffer[bytes_read - 1] = 0;\n }\n \n-void pager_flush(Pager* pager, uint32_t page_num, uint32_t size) {\n+void pager_flush(Pager* pager, uint32_t page_num) {\n   if (pager->pages[page_num] == NULL) {\n     printf(\"Tried to flush null page\\n\");\n     exit(EXIT_FAILURE);\n@@ -242,7 +337,7 @@ void pager_flush(Pager* pager, uint32_t page_num, uint32_t size) {\n   }\n \n   ssize_t bytes_written =\n-      write(pager->file_descriptor, pager->pages[page_num], size);\n+      write(pager->file_descriptor, pager->pages[page_num], PAGE_SIZE);\n \n   if (bytes_written == -1) {\n     printf(\"Error writing: %d\\n\", errno);\n@@ -252,29 +347,16 @@ void pager_flush(Pager* pager, uint32_t page_num, uint32_t size) {\n \n void db_close(Table* table) {\n   Pager* pager = table->pager;\n-  uint32_t num_full_pages = table->num_rows / ROWS_PER_PAGE;\n \n-  for (uint32_t i = 0; i < num_full_pages; i++) {\n+  for (uint32_t i = 0; i < pager->num_pages; i++) {\n     if (pager->pages[i] == NULL) {\n       continue;\n     }\n-    pager_flush(pager, i, PAGE_SIZE);\n+    pager_flush(pager, i);\n     free(pager->pages[i]);\n     pager->pages[i] = NULL;\n   }\n \n-  // There may be a partial page to write to the end of the file\n-  // This should not be needed after we switch to a B-tree\n-  uint32_t num_additional_rows = table->num_rows % ROWS_PER_PAGE;\n-  if (num_additional_rows > 0) {\n-    uint32_t page_num = num_full_pages;\n-    if (pager->pages[page_num] != NULL) {\n-      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);\n-      free(pager->pages[page_num]);\n-      pager->pages[page_num] = NULL;\n-    }\n-  }\n-\n   int result = close(pager->file_descriptor);\n   if (result == -1) {\n     printf(\"Error closing db file.\\n\");\n@@ -294,6 +376,14 @@ MetaCommandResult do_meta_command(InputBuffer* input_buffer, Table* table) {\n   if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n     db_close(table);\n     exit(EXIT_SUCCESS);\n+  } else if (strcmp(input_buffer->buffer, \".btree\") == 0) {\n+    printf(\"Tree:\\n\");\n+    print_leaf_node(get_page(table->pager, 0));\n+    return META_COMMAND_SUCCESS;\n+  } else if (strcmp(input_buffer->buffer, \".constants\") == 0) {\n+    printf(\"Constants:\\n\");\n+    print_constants();\n+    return META_COMMAND_SUCCESS;\n   } else {\n     return META_COMMAND_UNRECOGNIZED_COMMAND;\n   }\n@@ -342,16 +432,39 @@ PrepareResult prepare_statement(InputBuffer* input_buffer,\n   return PREPARE_UNRECOGNIZED_STATEMENT;\n }\n \n+void leaf_node_insert(Cursor* cursor, uint32_t key, Row* value) {\n+  void* node = get_page(cursor->table->pager, cursor->page_num);\n+\n+  uint32_t num_cells = *leaf_node_num_cells(node);\n+  if (num_cells >= LEAF_NODE_MAX_CELLS) {\n+    // Node full\n+    printf(\"Need to implement splitting a leaf node.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  if (cursor->cell_num < num_cells) {\n+    // Make room for new cell\n+    for (uint32_t i = num_cells; i > cursor->cell_num; i--) {\n+      memcpy(leaf_node_cell(node, i), leaf_node_cell(node, i - 1),\n+             LEAF_NODE_CELL_SIZE);\n+    }\n+  }\n+\n+  *(leaf_node_num_cells(node)) += 1;\n+  *(leaf_node_key(node, cursor->cell_num)) = key;\n+  serialize_row(value, leaf_node_value(node, cursor->cell_num));\n+}\n+\n ExecuteResult execute_insert(Statement* statement, Table* table) {\n-  if (table->num_rows >= TABLE_MAX_ROWS) {\n+  void* node = get_page(table->pager, table->root_page_num);\n+  if ((*leaf_node_num_cells(node) >= LEAF_NODE_MAX_CELLS)) {\n     return EXECUTE_TABLE_FULL;\n   }\n \n   Row* row_to_insert = &(statement->row_to_insert);\n   Cursor* cursor = table_end(table);\n \n-  serialize_row(row_to_insert, cursor_value(cursor));\n-  table->num_rows += 1;\n+  leaf_node_insert(cursor, row_to_insert->id, row_to_insert);\n \n   free(cursor);\n```\n\nspecs 改动\n\n```ruby\n+  it 'allows printing out the structure of a one-node btree' do\n+    script = [3, 1, 2].map do |i|\n+      \"insert #{i} user#{i} person#{i}@example.com\"\n+    end\n+    script << \".btree\"\n+    script << \".exit\"\n+    result = run_script(script)\n+\n+    expect(result).to match_array([\n+      \"db > Executed.\",\n+      \"db > Executed.\",\n+      \"db > Executed.\",\n+      \"db > Tree:\",\n+      \"leaf (size 3)\",\n+      \"  - 0 : 3\",\n+      \"  - 1 : 1\",\n+      \"  - 2 : 2\",\n+      \"db > \"\n+    ])\n+  end\n+\n+  it 'prints constants' do\n+    script = [\n+      \".constants\",\n+      \".exit\",\n+    ]\n+    result = run_script(script)\n+\n+    expect(result).to match_array([\n+      \"db > Constants:\",\n+      \"ROW_SIZE: 293\",\n+      \"COMMON_NODE_HEADER_SIZE: 6\",\n+      \"LEAF_NODE_HEADER_SIZE: 10\",\n+      \"LEAF_NODE_CELL_SIZE: 297\",\n+      \"LEAF_NODE_SPACE_FOR_CELLS: 4086\",\n+      \"LEAF_NODE_MAX_CELLS: 13\",\n+      \"db > \",\n+    ])\n+  end\n end\n```\n\n","source":"_posts/build_own_x/data_base/build_simple_database/Part8_B_tree_left_node_format.md","raw":"---\ntitle: Part 8 - B-Tree Leaf Node Format\ndate: 2019-02-08 09:02:03\ncategories:\n- build-own-x\ntags:\n- database\n- db原理\n---\n\n# B 树叶子节点格式\n\n我们将table 中未排序的行数据变成B树形状, 这是一个非常大的改变需要多个章节才能完成.\n在文章结束的时候,我们将定义叶子节点层,并且支持插入键值对到单节点树. 但是首先让我们回忆下选择树型结构的原因.\n\n### 替换表的结构\n\n使用当前格式，每个页面仅存储行（没有元数据），因此它非常节省空间。插入也很快，因为我们只是追加到最后。但是，只能通过扫描整个表来查找特定行。如果我们想要删除一行，我们必须通过移动它后面的每一行来填充这个洞。\n\n如果我们将表存储为数组，但保留按id排序的行，我们可以使用二进制搜索来查找特定的id。但是，插入会很慢，因为我们必须移动很多行来腾出空间。\n\n相反，我们将采用树形结构。树中的每个节点都可以包含可变数量的行，因此我们必须在每个节点中存储一些信息以跟踪它包含的行数。此外，所有内部节点的存储开销都不存储任何行。作为更大的数据库文件的交换，我们可以快速插入，删除和查找。\n\nname | Unsorted Array of rows | Sorted Array of rows | Tree of nodes\n :----: | :------: | :------: | :-------:\nPages contain | only data | only data | metadata, primary keys, and data\nRows per page | more | more | fewer\nInsertion | O(1) | O(n) | O(log(n))\nDeletion | O(n) | O(n) | O(log(n))\nLookup by id | O(n) | O(log(n)) | O(log(n))\n\n## 节点的头部格式\n\n叶子节点和中间节点在不同的层上,声明一个枚举类型来跟踪节点类型:\n\n```c\n+enum NodeType_t { NODE_INTERNAL, NODE_LEAF };\n+typedef enum NodeType_t NodeType;\n```\n\n每个节点都对应一页. 内部节点将通过存储存储子项的页码来指向其子项。B树 向寻呼机询问特定页码并返回指向页面缓存的指针。页面按页码顺序依次存储在数据库文件中。\n\n节点需要在页面开头的标题中存储一些元数据. 每个节点将存储它是什么类型的节点，它是否是根节点，以及指向其父节点的指针（以允许查找节点的兄弟节点）.我为每个标题字段的大小和偏移量定义常量:\n```c\n+/*\n+ * Common Node Header Layout\n+ */\n+const uint32_t NODE_TYPE_SIZE = sizeof(uint8_t);\n+const uint32_t NODE_TYPE_OFFSET = 0;\n+const uint32_t IS_ROOT_SIZE = sizeof(uint8_t);\n+const uint32_t IS_ROOT_OFFSET = NODE_TYPE_SIZE;\n+const uint32_t PARENT_POINTER_SIZE = sizeof(uint32_t);\n+const uint32_t PARENT_POINTER_OFFSET = IS_ROOT_OFFSET + IS_ROOT_SIZE;\n+const uint8_t COMMON_NODE_HEADER_SIZE =\n+    NODE_TYPE_SIZE + IS_ROOT_SIZE + PARENT_POINTER_SIZE;\n```\n\n## 叶子节点格式\n\n除了这些常见的头字段,叶子节点还需要存储包含有多少\"cells\". 一个\"Cell\" 包含着一个 key/value 对.\n```c\n+/*\n+ * Leaf Node Header Layout\n+ */\n+const uint32_t LEAF_NODE_NUM_CELLS_SIZE = sizeof(uint32_t);\n+const uint32_t LEAF_NODE_NUM_CELLS_OFFSET = COMMON_NODE_HEADER_SIZE;\n+const uint32_t LEAF_NODE_HEADER_SIZE =\n+    COMMON_NODE_HEADER_SIZE + LEAF_NODE_NUM_CELLS_SIZE;\n```\n\n叶子节点的内容是一个 cells 的数组, 每一个 cell 包含一个键与值(序列化的一行).\n```c\n+/*\n+ * Leaf Node Body Layout\n+ */\n+const uint32_t LEAF_NODE_KEY_SIZE = sizeof(uint32_t);\n+const uint32_t LEAF_NODE_KEY_OFFSET = 0;\n+const uint32_t LEAF_NODE_VALUE_SIZE = ROW_SIZE;\n+const uint32_t LEAF_NODE_VALUE_OFFSET =\n+    LEAF_NODE_KEY_OFFSET + LEAF_NODE_KEY_SIZE;\n+const uint32_t LEAF_NODE_CELL_SIZE = LEAF_NODE_KEY_SIZE + LEAF_NODE_VALUE_SIZE;\n+const uint32_t LEAF_NODE_SPACE_FOR_CELLS = PAGE_SIZE - LEAF_NODE_HEADER_SIZE;\n+const uint32_t LEAF_NODE_MAX_CELLS =\n+    LEAF_NODE_SPACE_FOR_CELLS / LEAF_NODE_CELL_SIZE;\n```\n\n基于这些常量的定义, 叶子节点格式看起来就像这样:\n![Our leaf node format](https://cstack.github.io/db_tutorial/assets/images/leaf-node-format.png)\nOur leaf node format\n\n在表头中使用一个字节来存储一个 bool 位是及其浪费空间的, 但是这样可以简化代码去访问这些值.\n注意,在尾部也浪费了一些空间. 在头部后, 我们存储尽可能多的 cells , 但是剩余的空间可能无法容纳一个完整的 cell. 我们将其留空为了避免 cells 拆分到不同的节点.\n\n## 访问叶子节点文件\n\n访问keys , values 和 元数据的代码都涉及使用我们刚刚定义的常量.\n\n```c\n+uint32_t* leaf_node_num_cells(void* node) {\n+  return (char *)node + LEAF_NODE_NUM_CELLS_OFFSET;\n+}\n+\n+void* leaf_node_cell(void* node, uint32_t cell_num) {\n+  return (char *)node + LEAF_NODE_HEADER_SIZE + cell_num * LEAF_NODE_CELL_SIZE;\n+}\n+\n+uint32_t* leaf_node_key(void* node, uint32_t cell_num) {\n+  return leaf_node_cell(node, cell_num);\n+}\n+\n+void* leaf_node_value(void* node, uint32_t cell_num) {\n+  return leaf_node_cell(node, cell_num) + LEAF_NODE_KEY_SIZE;\n+}\n+\n+void initialize_leaf_node(void* node) { *leaf_node_num_cells(node) = 0; }\n+\n```\n\n这些方法返回一个指向 value 的一个指针, 所以他们可以用在获取或者设置上.\n\n## 改变 Parger 和 table 对象\n\n每个节点仅占用一页, 即使没有填满. 这也意味着, 我们的 pager 不再需要支持读/写部分页面.\n```c\n-void pager_flush(Pager* pager, uint32_t page_num, uint32_t size) {\n+void pager_flush(Pager* pager, uint32_t page_num) {\n   if (pager->pages[page_num] == NULL) {\n     printf(\"Tried to flush null page\\n\");\n     exit(EXIT_FAILURE);\n@@ -242,7 +337,7 @@ void pager_flush(Pager* pager, uint32_t page_num, uint32_t size) {\n   }\n \n   ssize_t bytes_written =\n-      write(pager->file_descriptor, pager->pages[page_num], size);\n+      write(pager->file_descriptor, pager->pages[page_num], PAGE_SIZE);\n \n   if (bytes_written == -1) {\n     printf(\"Error writing: %d\\n\", errno);\n```\n\n```c\nvoid db_close(Table* table) {\n   Pager* pager = table->pager;\n-  uint32_t num_full_pages = table->num_rows / ROWS_PER_PAGE;\n \n-  for (uint32_t i = 0; i < num_full_pages; i++) {\n+  for (uint32_t i = 0; i < pager->num_pages; i++) {\n     if (pager->pages[i] == NULL) {\n       continue;\n     }\n-    pager_flush(pager, i, PAGE_SIZE);\n+    pager_flush(pager, i);\n     free(pager->pages[i]);\n     pager->pages[i] = NULL;\n   }\n \n-  // There may be a partial page to write to the end of the file\n-  // This should not be needed after we switch to a B-tree\n-  uint32_t num_additional_rows = table->num_rows % ROWS_PER_PAGE;\n-  if (num_additional_rows > 0) {\n-    uint32_t page_num = num_full_pages;\n-    if (pager->pages[page_num] != NULL) {\n-      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);\n-      free(pager->pages[page_num]);\n-      pager->pages[page_num] = NULL;\n-    }\n-  }\n-\n   int result = close(pager->file_descriptor);\n   if (result == -1) {\n     printf(\"Error closing db file.\\n\");\n```\n\n在数据库中存储页码会比存储行数更加有用. 页码应该关联上 pager 对象, 而不是 table, 因为这是数据库使用的页码, 而不是特定的表. 一个 B树定义了一个根节点页码, 所以表需要追踪这些信息.\n\n```c\nconst uint32_t PAGE_SIZE = 4096;\n const uint32_t TABLE_MAX_PAGES = 100;\n-const uint32_t ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;\n-const uint32_t TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;\n \n struct Pager_t {\n   int file_descriptor;\n   uint32_t file_length;\n+  uint32_t num_pages;\n   void* pages[TABLE_MAX_PAGES];\n };\n typedef struct Pager_t Pager;\n \n struct Table_t {\n   Pager* pager;\n-  uint32_t num_rows;\n+  uint32_t root_page_num;\n };\n typedef struct Table_t Table;\n```\n\n```c\n@@ -127,6 +200,10 @@ void* get_page(Pager* pager, uint32_t page_num) {\n     }\n \n     pager->pages[page_num] = page;\n+\n+    if (page_num >= pager->num_pages) {\n+      pager->num_pages = page_num + 1;\n+    }\n   }\n \n   return pager->pages[page_num];\n```\n\n```c\n@@ -184,6 +269,12 @@ Pager* pager_open(const char* filename) {\n   Pager* pager = malloc(sizeof(Pager));\n   pager->file_descriptor = fd;\n   pager->file_length = file_length;\n+  pager->num_pages = (file_length / PAGE_SIZE);\n+\n+  if (file_length % PAGE_SIZE != 0) {\n+    printf(\"Db file is not a whole number of pages. Corrupt file.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n \n   for (uint32_t i = 0; i < TABLE_MAX_PAGES; i++) {\n     pager->pages[i] = NULL;\n```\n\n## 游标类的改变\n\n一个游标代表了表中的一个位置. 当我们的 table 是一个简单的数据行元素的时候, 我们可以仅通过行号来访问一行数据. 现在这个一棵树, 我们通过节点的页码来确定位置. 并且 cell 的个数在节点中.\n\n```c\n struct Cursor_t {\n   Table* table;\n-  uint32_t row_num;\n+  uint32_t page_num;\n+  uint32_t cell_num;\n   bool end_of_table;  // Indicates a position one past the last element\n };\n typedef struct Cursor_t Cursor;\n```\n\n```c\n Cursor* table_start(Table* table) {\n   Cursor* cursor = malloc(sizeof(Cursor));\n   cursor->table = table;\n-  cursor->row_num = 0;\n-  cursor->end_of_table = (table->num_rows == 0);\n+  cursor->page_num = table->root_page_num;\n+  cursor->cell_num = 0;\n+\n+  void* root_node = get_page(table->pager, table->root_page_num);\n+  uint32_t num_cells = *leaf_node_num_cells(root_node);\n+  cursor->end_of_table = (num_cells == 0);\n \n   return cursor;\n }\n```\n\n```c\n Cursor* table_end(Table* table) {\n   Cursor* cursor = malloc(sizeof(Cursor));\n   cursor->table = table;\n-  cursor->row_num = table->num_rows;\n+  cursor->page_num = table->root_page_num;\n+\n+  void* root_node = get_page(table->pager, table->root_page_num);\n+  uint32_t num_cells = *leaf_node_num_cells(root_node);\n+  cursor->cell_num = num_cells;\n   cursor->end_of_table = true;\n \n   return cursor;\n }\n```\n\n```c\n void* cursor_value(Cursor* cursor) {\n-  uint32_t row_num = cursor->row_num;\n-  uint32_t page_num = row_num / ROWS_PER_PAGE;\n+  uint32_t page_num = cursor->page_num;\n   void* page = get_page(cursor->table->pager, page_num);\n-  uint32_t row_offset = row_num % ROWS_PER_PAGE;\n-  uint32_t byte_offset = row_offset * ROW_SIZE;\n-  return page + byte_offset;\n+  return leaf_node_value(page, cursor->cell_num);\n }\n```\n\n```c\n void cursor_advance(Cursor* cursor) {\n-  cursor->row_num += 1;\n-  if (cursor->row_num >= cursor->table->num_rows) {\n+  uint32_t page_num = cursor->page_num;\n+  void* node = get_page(cursor->table->pager, page_num);\n+\n+  cursor->cell_num += 1;\n+  if (cursor->cell_num >= (*leaf_node_num_cells(node))) {\n     cursor->end_of_table = true;\n   }\n }\n```\n\n## 插入叶子节点\n在本文中，我们将只实现足以获得单节点树. 回想一下上一篇文章，树开始是一个空叶节点:\n![empty btree](https://cstack.github.io/db_tutorial/assets/images/btree1.png)\nempty btree\n\n键值对可以增加直到叶子节点填满:\n![one-node btree](https://cstack.github.io/db_tutorial/assets/images/btree2.png)\n\n当我们第一打开数据库的时候, 数据库文件将会是一个空的文件, 所以我们初始化页码为0为东的叶子节点(根节点):\n```c\n Table* db_open(const char* filename) {\n   Pager* pager = pager_open(filename);\n-  uint32_t num_rows = pager->file_length / ROW_SIZE;\n \n   Table* table = malloc(sizeof(Table));\n   table->pager = pager;\n-  table->num_rows = num_rows;\n+  table->root_page_num = 0;\n+\n+  if (pager->num_pages == 0) {\n+    // New database file. Initialize page 0 as leaf node.\n+    void* root_node = get_page(pager, 0);\n+    initialize_leaf_node(root_node);\n+  }\n \n   return table;\n }\n```\n\n下一步我们将写一个函数插入键值对到叶子节点. 它将会有一个游标代表插入的位置.\n\n```c\n+void leaf_node_insert(Cursor* cursor, uint32_t key, Row* value) {\n+  void* node = get_page(cursor->table->pager, cursor->page_num);\n+\n+  uint32_t num_cells = *leaf_node_num_cells(node);\n+  if (num_cells >= LEAF_NODE_MAX_CELLS) {\n+    // Node full\n+    printf(\"Need to implement splitting a leaf node.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  if (cursor->cell_num < num_cells) {\n+    // Make room for new cell\n+    for (uint32_t i = num_cells; i > cursor->cell_num; i--) {\n+      memcpy(leaf_node_cell(node, i), leaf_node_cell(node, i - 1),\n+             LEAF_NODE_CELL_SIZE);\n+    }\n+  }\n+\n+  *(leaf_node_num_cells(node)) += 1;\n+  *(leaf_node_key(node, cursor->cell_num)) = key;\n+  serialize_row(value, leaf_node_value(node, cursor->cell_num));\n+}\n+\n```\n\n我们并没有实现切分, 所以如果节点满了将会报错. 下一步, 我们将 cells 向右移动一个空间, 为新的 cell 腾出空间,然后写一个新的键值对到空的空间中.\n\n因为我们的树目前仅有一个节点, 我们的 `execute_insert()` 方法仅需要调用这么帮助方法:\n```c\nExecuteResult execute_insert(Statement* statement, Table* table) {\n-  if (table->num_rows >= TABLE_MAX_ROWS) {\n+  void* node = get_page(table->pager, table->root_page_num);\n+  if ((*leaf_node_num_cells(node) >= LEAF_NODE_MAX_CELLS)) {\n     return EXECUTE_TABLE_FULL;\n   }\n \n   Row* row_to_insert = &(statement->row_to_insert);\n   Cursor* cursor = table_end(table);\n \n-  serialize_row(row_to_insert, cursor_value(cursor));\n-  table->num_rows += 1;\n+  leaf_node_insert(cursor, row_to_insert->id, row_to_insert);\n \n   free(cursor);\n```\n随着这些改变,我们的数据应该是还能向以前一样工作. 异常现在会返回一个\"Table Full\" , 因为我们没有切分根节点.\n\n叶子节点可以容纳多少行呢?\n\n## 打印常量的命令\n\n我添加了一个新的命令打印一些常量.\n```c\n+void print_constants() {\n+  printf(\"ROW_SIZE: %d\\n\", ROW_SIZE);\n+  printf(\"COMMON_NODE_HEADER_SIZE: %d\\n\", COMMON_NODE_HEADER_SIZE);\n+  printf(\"LEAF_NODE_HEADER_SIZE: %d\\n\", LEAF_NODE_HEADER_SIZE);\n+  printf(\"LEAF_NODE_CELL_SIZE: %d\\n\", LEAF_NODE_CELL_SIZE);\n+  printf(\"LEAF_NODE_SPACE_FOR_CELLS: %d\\n\", LEAF_NODE_SPACE_FOR_CELLS);\n+  printf(\"LEAF_NODE_MAX_CELLS: %d\\n\", LEAF_NODE_MAX_CELLS);\n+}\n+\n@@ -294,6 +376,14 @@ MetaCommandResult do_meta_command(InputBuffer* input_buffer, Table* table) {\n   if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n     db_close(table);\n     exit(EXIT_SUCCESS);\n+  } else if (strcmp(input_buffer->buffer, \".constants\") == 0) {\n+    printf(\"Constants:\\n\");\n+    print_constants();\n+    return META_COMMAND_SUCCESS;\n   } else {\n     return META_COMMAND_UNRECOGNIZED_COMMAND;\n   }\n```\n\n添加了一个单元测试\n\n```ruby\n+  it 'prints constants' do\n+    script = [\n+      \".constants\",\n+      \".exit\",\n+    ]\n+    result = run_script(script)\n+\n+    expect(result).to match_array([\n+      \"db > Constants:\",\n+      \"ROW_SIZE: 293\",\n+      \"COMMON_NODE_HEADER_SIZE: 6\",\n+      \"LEAF_NODE_HEADER_SIZE: 10\",\n+      \"LEAF_NODE_CELL_SIZE: 297\",\n+      \"LEAF_NODE_SPACE_FOR_CELLS: 4086\",\n+      \"LEAF_NODE_MAX_CELLS: 13\",\n+      \"db > \",\n+    ])\n+  end\n```\n\n所以现在表能放下13行数据.\n\n## 树的可视化\n\n为了帮助我们调试和可视化, 我添加了一个命令打印我们目前的B树.\n\n```c\n+void print_leaf_node(void* node) {\n+  uint32_t num_cells = *leaf_node_num_cells(node);\n+  printf(\"leaf (size %d)\\n\", num_cells);\n+  for (uint32_t i = 0; i < num_cells; i++) {\n+    uint32_t key = *leaf_node_key(node, i);\n+    printf(\"  - %d : %d\\n\", i, key);\n+  }\n+}\n+\n```\n\n```c\n@@ -294,6 +376,14 @@ MetaCommandResult do_meta_command(InputBuffer* input_buffer, Table* table) {\n   if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n     db_close(table);\n     exit(EXIT_SUCCESS);\n+  } else if (strcmp(input_buffer->buffer, \".btree\") == 0) {\n+    printf(\"Tree:\\n\");\n+    print_leaf_node(get_page(table->pager, 0));\n+    return META_COMMAND_SUCCESS;\n   } else if (strcmp(input_buffer->buffer, \".constants\") == 0) {\n     printf(\"Constants:\\n\");\n     print_constants();\n     return META_COMMAND_SUCCESS;\n   } else {\n     return META_COMMAND_UNRECOGNIZED_COMMAND;\n   }\n```\n\n和一个测试\n\n```ruby\n+  it 'allows printing out the structure of a one-node btree' do\n+    script = [3, 1, 2].map do |i|\n+      \"insert #{i} user#{i} person#{i}@example.com\"\n+    end\n+    script << \".btree\"\n+    script << \".exit\"\n+    result = run_script(script)\n+\n+    expect(result).to match_array([\n+      \"db > Executed.\",\n+      \"db > Executed.\",\n+      \"db > Executed.\",\n+      \"db > Tree:\",\n+      \"leaf (size 3)\",\n+      \"  - 0 : 3\",\n+      \"  - 1 : 1\",\n+      \"  - 2 : 2\",\n+      \"db > \"\n+    ])\n+  end\n```\n\n我们目前依旧没有按排序顺序存储rows. 我们将注意到 `execute_insert()` 插入到叶子节点在`table_end()` 返回的时候. 所以行按插入顺序存储，就像之前一样.\n\n## 下一讲\n\n\n\n## 完整的改动\n\n```c\nconst uint32_t PAGE_SIZE = 4096;\n const uint32_t TABLE_MAX_PAGES = 100;\n-const uint32_t ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;\n-const uint32_t TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;\n \n struct Pager_t {\n   int file_descriptor;\n   uint32_t file_length;\n+  uint32_t num_pages;\n   void* pages[TABLE_MAX_PAGES];\n };\n typedef struct Pager_t Pager;\n \n struct Table_t {\n   Pager* pager;\n-  uint32_t num_rows;\n+  uint32_t root_page_num;\n };\n typedef struct Table_t Table;\n \n struct Cursor_t {\n   Table* table;\n-  uint32_t row_num;\n+  uint32_t page_num;\n+  uint32_t cell_num;\n   bool end_of_table;  // Indicates a position one past the last element\n };\n typedef struct Cursor_t Cursor;\n@@ -88,6 +88,77 @@ void print_row(Row* row) {\n   printf(\"(%d, %s, %s)\\n\", row->id, row->username, row->email);\n }\n \n+enum NodeType_t { NODE_INTERNAL, NODE_LEAF };\n+typedef enum NodeType_t NodeType;\n+\n+/*\n+ * Common Node Header Layout\n+ */\n+const uint32_t NODE_TYPE_SIZE = sizeof(uint8_t);\n+const uint32_t NODE_TYPE_OFFSET = 0;\n+const uint32_t IS_ROOT_SIZE = sizeof(uint8_t);\n+const uint32_t IS_ROOT_OFFSET = NODE_TYPE_SIZE;\n+const uint32_t PARENT_POINTER_SIZE = sizeof(uint32_t);\n+const uint32_t PARENT_POINTER_OFFSET = IS_ROOT_OFFSET + IS_ROOT_SIZE;\n+const uint8_t COMMON_NODE_HEADER_SIZE =\n+    NODE_TYPE_SIZE + IS_ROOT_SIZE + PARENT_POINTER_SIZE;\n+\n+/*\n+ * Leaf Node Header Layout\n+ */\n+const uint32_t LEAF_NODE_NUM_CELLS_SIZE = sizeof(uint32_t);\n+const uint32_t LEAF_NODE_NUM_CELLS_OFFSET = COMMON_NODE_HEADER_SIZE;\n+const uint32_t LEAF_NODE_HEADER_SIZE =\n+    COMMON_NODE_HEADER_SIZE + LEAF_NODE_NUM_CELLS_SIZE;\n+\n+/*\n+ * Leaf Node Body Layout\n+ */\n+const uint32_t LEAF_NODE_KEY_SIZE = sizeof(uint32_t);\n+const uint32_t LEAF_NODE_KEY_OFFSET = 0;\n+const uint32_t LEAF_NODE_VALUE_SIZE = ROW_SIZE;\n+const uint32_t LEAF_NODE_VALUE_OFFSET =\n+    LEAF_NODE_KEY_OFFSET + LEAF_NODE_KEY_SIZE;\n+const uint32_t LEAF_NODE_CELL_SIZE = LEAF_NODE_KEY_SIZE + LEAF_NODE_VALUE_SIZE;\n+const uint32_t LEAF_NODE_SPACE_FOR_CELLS = PAGE_SIZE - LEAF_NODE_HEADER_SIZE;\n+const uint32_t LEAF_NODE_MAX_CELLS =\n+    LEAF_NODE_SPACE_FOR_CELLS / LEAF_NODE_CELL_SIZE;\n+\n+uint32_t* leaf_node_num_cells(void* node) {\n+  return node + LEAF_NODE_NUM_CELLS_OFFSET;\n+}\n+\n+void* leaf_node_cell(void* node, uint32_t cell_num) {\n+  return node + LEAF_NODE_HEADER_SIZE + cell_num * LEAF_NODE_CELL_SIZE;\n+}\n+\n+uint32_t* leaf_node_key(void* node, uint32_t cell_num) {\n+  return leaf_node_cell(node, cell_num);\n+}\n+\n+void* leaf_node_value(void* node, uint32_t cell_num) {\n+  return leaf_node_cell(node, cell_num) + LEAF_NODE_KEY_SIZE;\n+}\n+\n+void print_constants() {\n+  printf(\"ROW_SIZE: %d\\n\", ROW_SIZE);\n+  printf(\"COMMON_NODE_HEADER_SIZE: %d\\n\", COMMON_NODE_HEADER_SIZE);\n+  printf(\"LEAF_NODE_HEADER_SIZE: %d\\n\", LEAF_NODE_HEADER_SIZE);\n+  printf(\"LEAF_NODE_CELL_SIZE: %d\\n\", LEAF_NODE_CELL_SIZE);\n+  printf(\"LEAF_NODE_SPACE_FOR_CELLS: %d\\n\", LEAF_NODE_SPACE_FOR_CELLS);\n+  printf(\"LEAF_NODE_MAX_CELLS: %d\\n\", LEAF_NODE_MAX_CELLS);\n+}\n+\n+void print_leaf_node(void* node) {\n+  uint32_t num_cells = *leaf_node_num_cells(node);\n+  printf(\"leaf (size %d)\\n\", num_cells);\n+  for (uint32_t i = 0; i < num_cells; i++) {\n+    uint32_t key = *leaf_node_key(node, i);\n+    printf(\"  - %d : %d\\n\", i, key);\n+  }\n+}\n+\n void serialize_row(Row* source, void* destination) {\n   memcpy(destination + ID_OFFSET, &(source->id), ID_SIZE);\n   memcpy(destination + USERNAME_OFFSET, &(source->username), USERNAME_SIZE);\n@@ -100,6 +171,8 @@ void deserialize_row(void* source, Row* destination) {\n   memcpy(&(destination->email), source + EMAIL_OFFSET, EMAIL_SIZE);\n }\n \n+void initialize_leaf_node(void* node) { *leaf_node_num_cells(node) = 0; }\n+\n void* get_page(Pager* pager, uint32_t page_num) {\n   if (page_num > TABLE_MAX_PAGES) {\n     printf(\"Tried to fetch page number out of bounds. %d > %d\\n\", page_num,\n@@ -127,6 +200,10 @@ void* get_page(Pager* pager, uint32_t page_num) {\n     }\n \n     pager->pages[page_num] = page;\n+\n+    if (page_num >= pager->num_pages) {\n+      pager->num_pages = page_num + 1;\n+    }\n   }\n \n   return pager->pages[page_num];\n@@ -135,8 +212,12 @@ void* get_page(Pager* pager, uint32_t page_num) {\n Cursor* table_start(Table* table) {\n   Cursor* cursor = malloc(sizeof(Cursor));\n   cursor->table = table;\n-  cursor->row_num = 0;\n-  cursor->end_of_table = (table->num_rows == 0);\n+  cursor->page_num = table->root_page_num;\n+  cursor->cell_num = 0;\n+\n+  void* root_node = get_page(table->pager, table->root_page_num);\n+  uint32_t num_cells = *leaf_node_num_cells(root_node);\n+  cursor->end_of_table = (num_cells == 0);\n \n   return cursor;\n }\n@@ -144,24 +225,28 @@ Cursor* table_start(Table* table) {\n Cursor* table_end(Table* table) {\n   Cursor* cursor = malloc(sizeof(Cursor));\n   cursor->table = table;\n-  cursor->row_num = table->num_rows;\n+  cursor->page_num = table->root_page_num;\n+\n+  void* root_node = get_page(table->pager, table->root_page_num);\n+  uint32_t num_cells = *leaf_node_num_cells(root_node);\n+  cursor->cell_num = num_cells;\n   cursor->end_of_table = true;\n \n   return cursor;\n }\n \n void* cursor_value(Cursor* cursor) {\n-  uint32_t row_num = cursor->row_num;\n-  uint32_t page_num = row_num / ROWS_PER_PAGE;\n+  uint32_t page_num = cursor->page_num;\n   void* page = get_page(cursor->table->pager, page_num);\n-  uint32_t row_offset = row_num % ROWS_PER_PAGE;\n-  uint32_t byte_offset = row_offset * ROW_SIZE;\n-  return page + byte_offset;\n+  return leaf_node_value(page, cursor->cell_num);\n }\n \n void cursor_advance(Cursor* cursor) {\n-  cursor->row_num += 1;\n-  if (cursor->row_num >= cursor->table->num_rows) {\n+  uint32_t page_num = cursor->page_num;\n+  void* node = get_page(cursor->table->pager, page_num);\n+\n+  cursor->cell_num += 1;\n+  if (cursor->cell_num >= (*leaf_node_num_cells(node))) {\n     cursor->end_of_table = true;\n   }\n }\n@@ -184,6 +269,12 @@ Pager* pager_open(const char* filename) {\n   Pager* pager = malloc(sizeof(Pager));\n   pager->file_descriptor = fd;\n   pager->file_length = file_length;\n+  pager->num_pages = (file_length / PAGE_SIZE);\n+\n+  if (file_length % PAGE_SIZE != 0) {\n+    printf(\"Db file is not a whole number of pages. Corrupt file.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n \n   for (uint32_t i = 0; i < TABLE_MAX_PAGES; i++) {\n     pager->pages[i] = NULL;\n@@ -194,11 +285,15 @@ Pager* pager_open(const char* filename) {\n \n Table* db_open(const char* filename) {\n   Pager* pager = pager_open(filename);\n-  uint32_t num_rows = pager->file_length / ROW_SIZE;\n \n   Table* table = malloc(sizeof(Table));\n   table->pager = pager;\n-  table->num_rows = num_rows;\n+  table->root_page_num = 0;\n+\n+  if (pager->num_pages == 0) {\n+    // New database file. Initialize page 0 as leaf node.\n+    void* root_node = get_page(pager, 0);\n+    initialize_leaf_node(root_node);\n+  }\n \n   return table;\n }\n@@ -228,7 +323,7 @@ void read_input(InputBuffer* input_buffer) {\n   input_buffer->buffer[bytes_read - 1] = 0;\n }\n \n-void pager_flush(Pager* pager, uint32_t page_num, uint32_t size) {\n+void pager_flush(Pager* pager, uint32_t page_num) {\n   if (pager->pages[page_num] == NULL) {\n     printf(\"Tried to flush null page\\n\");\n     exit(EXIT_FAILURE);\n@@ -242,7 +337,7 @@ void pager_flush(Pager* pager, uint32_t page_num, uint32_t size) {\n   }\n \n   ssize_t bytes_written =\n-      write(pager->file_descriptor, pager->pages[page_num], size);\n+      write(pager->file_descriptor, pager->pages[page_num], PAGE_SIZE);\n \n   if (bytes_written == -1) {\n     printf(\"Error writing: %d\\n\", errno);\n@@ -252,29 +347,16 @@ void pager_flush(Pager* pager, uint32_t page_num, uint32_t size) {\n \n void db_close(Table* table) {\n   Pager* pager = table->pager;\n-  uint32_t num_full_pages = table->num_rows / ROWS_PER_PAGE;\n \n-  for (uint32_t i = 0; i < num_full_pages; i++) {\n+  for (uint32_t i = 0; i < pager->num_pages; i++) {\n     if (pager->pages[i] == NULL) {\n       continue;\n     }\n-    pager_flush(pager, i, PAGE_SIZE);\n+    pager_flush(pager, i);\n     free(pager->pages[i]);\n     pager->pages[i] = NULL;\n   }\n \n-  // There may be a partial page to write to the end of the file\n-  // This should not be needed after we switch to a B-tree\n-  uint32_t num_additional_rows = table->num_rows % ROWS_PER_PAGE;\n-  if (num_additional_rows > 0) {\n-    uint32_t page_num = num_full_pages;\n-    if (pager->pages[page_num] != NULL) {\n-      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);\n-      free(pager->pages[page_num]);\n-      pager->pages[page_num] = NULL;\n-    }\n-  }\n-\n   int result = close(pager->file_descriptor);\n   if (result == -1) {\n     printf(\"Error closing db file.\\n\");\n@@ -294,6 +376,14 @@ MetaCommandResult do_meta_command(InputBuffer* input_buffer, Table* table) {\n   if (strcmp(input_buffer->buffer, \".exit\") == 0) {\n     db_close(table);\n     exit(EXIT_SUCCESS);\n+  } else if (strcmp(input_buffer->buffer, \".btree\") == 0) {\n+    printf(\"Tree:\\n\");\n+    print_leaf_node(get_page(table->pager, 0));\n+    return META_COMMAND_SUCCESS;\n+  } else if (strcmp(input_buffer->buffer, \".constants\") == 0) {\n+    printf(\"Constants:\\n\");\n+    print_constants();\n+    return META_COMMAND_SUCCESS;\n   } else {\n     return META_COMMAND_UNRECOGNIZED_COMMAND;\n   }\n@@ -342,16 +432,39 @@ PrepareResult prepare_statement(InputBuffer* input_buffer,\n   return PREPARE_UNRECOGNIZED_STATEMENT;\n }\n \n+void leaf_node_insert(Cursor* cursor, uint32_t key, Row* value) {\n+  void* node = get_page(cursor->table->pager, cursor->page_num);\n+\n+  uint32_t num_cells = *leaf_node_num_cells(node);\n+  if (num_cells >= LEAF_NODE_MAX_CELLS) {\n+    // Node full\n+    printf(\"Need to implement splitting a leaf node.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+\n+  if (cursor->cell_num < num_cells) {\n+    // Make room for new cell\n+    for (uint32_t i = num_cells; i > cursor->cell_num; i--) {\n+      memcpy(leaf_node_cell(node, i), leaf_node_cell(node, i - 1),\n+             LEAF_NODE_CELL_SIZE);\n+    }\n+  }\n+\n+  *(leaf_node_num_cells(node)) += 1;\n+  *(leaf_node_key(node, cursor->cell_num)) = key;\n+  serialize_row(value, leaf_node_value(node, cursor->cell_num));\n+}\n+\n ExecuteResult execute_insert(Statement* statement, Table* table) {\n-  if (table->num_rows >= TABLE_MAX_ROWS) {\n+  void* node = get_page(table->pager, table->root_page_num);\n+  if ((*leaf_node_num_cells(node) >= LEAF_NODE_MAX_CELLS)) {\n     return EXECUTE_TABLE_FULL;\n   }\n \n   Row* row_to_insert = &(statement->row_to_insert);\n   Cursor* cursor = table_end(table);\n \n-  serialize_row(row_to_insert, cursor_value(cursor));\n-  table->num_rows += 1;\n+  leaf_node_insert(cursor, row_to_insert->id, row_to_insert);\n \n   free(cursor);\n```\n\nspecs 改动\n\n```ruby\n+  it 'allows printing out the structure of a one-node btree' do\n+    script = [3, 1, 2].map do |i|\n+      \"insert #{i} user#{i} person#{i}@example.com\"\n+    end\n+    script << \".btree\"\n+    script << \".exit\"\n+    result = run_script(script)\n+\n+    expect(result).to match_array([\n+      \"db > Executed.\",\n+      \"db > Executed.\",\n+      \"db > Executed.\",\n+      \"db > Tree:\",\n+      \"leaf (size 3)\",\n+      \"  - 0 : 3\",\n+      \"  - 1 : 1\",\n+      \"  - 2 : 2\",\n+      \"db > \"\n+    ])\n+  end\n+\n+  it 'prints constants' do\n+    script = [\n+      \".constants\",\n+      \".exit\",\n+    ]\n+    result = run_script(script)\n+\n+    expect(result).to match_array([\n+      \"db > Constants:\",\n+      \"ROW_SIZE: 293\",\n+      \"COMMON_NODE_HEADER_SIZE: 6\",\n+      \"LEAF_NODE_HEADER_SIZE: 10\",\n+      \"LEAF_NODE_CELL_SIZE: 297\",\n+      \"LEAF_NODE_SPACE_FOR_CELLS: 4086\",\n+      \"LEAF_NODE_MAX_CELLS: 13\",\n+      \"db > \",\n+    ])\n+  end\n end\n```\n\n","slug":"build_own_x/data_base/build_simple_database/Part8_B_tree_left_node_format","published":1,"updated":"2019-02-23T06:10:57.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgz5005g8seo20463st0","content":"<h1 id=\"B-树叶子节点格式\"><a href=\"#B-树叶子节点格式\" class=\"headerlink\" title=\"B 树叶子节点格式\"></a>B 树叶子节点格式</h1><p>我们将table 中未排序的行数据变成B树形状, 这是一个非常大的改变需要多个章节才能完成.<br>在文章结束的时候,我们将定义叶子节点层,并且支持插入键值对到单节点树. 但是首先让我们回忆下选择树型结构的原因.</p>\n<h3 id=\"替换表的结构\"><a href=\"#替换表的结构\" class=\"headerlink\" title=\"替换表的结构\"></a>替换表的结构</h3><p>使用当前格式，每个页面仅存储行（没有元数据），因此它非常节省空间。插入也很快，因为我们只是追加到最后。但是，只能通过扫描整个表来查找特定行。如果我们想要删除一行，我们必须通过移动它后面的每一行来填充这个洞。</p>\n<p>如果我们将表存储为数组，但保留按id排序的行，我们可以使用二进制搜索来查找特定的id。但是，插入会很慢，因为我们必须移动很多行来腾出空间。</p>\n<p>相反，我们将采用树形结构。树中的每个节点都可以包含可变数量的行，因此我们必须在每个节点中存储一些信息以跟踪它包含的行数。此外，所有内部节点的存储开销都不存储任何行。作为更大的数据库文件的交换，我们可以快速插入，删除和查找。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">name</th>\n<th style=\"text-align:center\">Unsorted Array of rows</th>\n<th style=\"text-align:center\">Sorted Array of rows</th>\n<th style=\"text-align:center\">Tree of nodes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Pages contain</td>\n<td style=\"text-align:center\">only data</td>\n<td style=\"text-align:center\">only data</td>\n<td style=\"text-align:center\">metadata, primary keys, and data</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Rows per page</td>\n<td style=\"text-align:center\">more</td>\n<td style=\"text-align:center\">more</td>\n<td style=\"text-align:center\">fewer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Insertion</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(log(n))</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Deletion</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(log(n))</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Lookup by id</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(log(n))</td>\n<td style=\"text-align:center\">O(log(n))</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"节点的头部格式\"><a href=\"#节点的头部格式\" class=\"headerlink\" title=\"节点的头部格式\"></a>节点的头部格式</h2><p>叶子节点和中间节点在不同的层上,声明一个枚举类型来跟踪节点类型:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">enum</span> NodeType_t &#123; NODE_INTERNAL, NODE_LEAF &#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> NodeType_t NodeType;</span><br></pre></td></tr></table></figure>\n<p>每个节点都对应一页. 内部节点将通过存储存储子项的页码来指向其子项。B树 向寻呼机询问特定页码并返回指向页面缓存的指针。页面按页码顺序依次存储在数据库文件中。</p>\n<p>节点需要在页面开头的标题中存储一些元数据. 每个节点将存储它是什么类型的节点，它是否是根节点，以及指向其父节点的指针（以允许查找节点的兄弟节点）.我为每个标题字段的大小和偏移量定义常量:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Common Node Header Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> NODE_TYPE_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint8_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> NODE_TYPE_OFFSET = <span class=\"number\">0</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> IS_ROOT_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint8_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> IS_ROOT_OFFSET = NODE_TYPE_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PARENT_POINTER_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PARENT_POINTER_OFFSET = IS_ROOT_OFFSET + IS_ROOT_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> COMMON_NODE_HEADER_SIZE =</span><br><span class=\"line\">+    NODE_TYPE_SIZE + IS_ROOT_SIZE + PARENT_POINTER_SIZE;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"叶子节点格式\"><a href=\"#叶子节点格式\" class=\"headerlink\" title=\"叶子节点格式\"></a>叶子节点格式</h2><p>除了这些常见的头字段,叶子节点还需要存储包含有多少”cells”. 一个”Cell” 包含着一个 key/value 对.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Leaf Node Header Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_NUM_CELLS_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_NUM_CELLS_OFFSET = COMMON_NODE_HEADER_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_HEADER_SIZE =</span><br><span class=\"line\">+    COMMON_NODE_HEADER_SIZE + LEAF_NODE_NUM_CELLS_SIZE;</span><br></pre></td></tr></table></figure></p>\n<p>叶子节点的内容是一个 cells 的数组, 每一个 cell 包含一个键与值(序列化的一行).<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Leaf Node Body Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_KEY_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_KEY_OFFSET = <span class=\"number\">0</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_VALUE_SIZE = ROW_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_VALUE_OFFSET =</span><br><span class=\"line\">+    LEAF_NODE_KEY_OFFSET + LEAF_NODE_KEY_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_CELL_SIZE = LEAF_NODE_KEY_SIZE + LEAF_NODE_VALUE_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_SPACE_FOR_CELLS = PAGE_SIZE - LEAF_NODE_HEADER_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_MAX_CELLS =</span><br><span class=\"line\">+    LEAF_NODE_SPACE_FOR_CELLS / LEAF_NODE_CELL_SIZE;</span><br></pre></td></tr></table></figure></p>\n<p>基于这些常量的定义, 叶子节点格式看起来就像这样:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/leaf-node-format.png\" alt=\"Our leaf node format\"><br>Our leaf node format</p>\n<p>在表头中使用一个字节来存储一个 bool 位是及其浪费空间的, 但是这样可以简化代码去访问这些值.<br>注意,在尾部也浪费了一些空间. 在头部后, 我们存储尽可能多的 cells , 但是剩余的空间可能无法容纳一个完整的 cell. 我们将其留空为了避免 cells 拆分到不同的节点.</p>\n<h2 id=\"访问叶子节点文件\"><a href=\"#访问叶子节点文件\" class=\"headerlink\" title=\"访问叶子节点文件\"></a>访问叶子节点文件</h2><p>访问keys , values 和 元数据的代码都涉及使用我们刚刚定义的常量.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* leaf_node_num_cells(<span class=\"keyword\">void</span>* node) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span> *)node + LEAF_NODE_NUM_CELLS_OFFSET;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">leaf_node_cell</span><span class=\"params\">(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> cell_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span> *)node + LEAF_NODE_HEADER_SIZE + cell_num * LEAF_NODE_CELL_SIZE;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* leaf_node_key(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> cell_num) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> leaf_node_cell(node, cell_num);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">leaf_node_value</span><span class=\"params\">(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> cell_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> leaf_node_cell(node, cell_num) + LEAF_NODE_KEY_SIZE;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123; *leaf_node_num_cells(node) = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">+</span><br></pre></td></tr></table></figure>\n<p>这些方法返回一个指向 value 的一个指针, 所以他们可以用在获取或者设置上.</p>\n<h2 id=\"改变-Parger-和-table-对象\"><a href=\"#改变-Parger-和-table-对象\" class=\"headerlink\" title=\"改变 Parger 和 table 对象\"></a>改变 Parger 和 table 对象</h2><p>每个节点仅占用一页, 即使没有填满. 这也意味着, 我们的 pager 不再需要支持读/写部分页面.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pager_flush</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> size)</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pager_flush</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to flush null page\\n\"</span>);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">@@ <span class=\"number\">-242</span>,<span class=\"number\">7</span> +<span class=\"number\">337</span>,<span class=\"number\">7</span> @@ <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pager_flush</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> size)</span> </span>&#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">ssize_t</span> bytes_written =</span><br><span class=\"line\">-      write(pager-&gt;file_descriptor, pager-&gt;pages[page_num], size);</span><br><span class=\"line\">+      write(pager-&gt;file_descriptor, pager-&gt;pages[page_num], PAGE_SIZE);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">if</span> (bytes_written == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error writing: %d\\n\"</span>, errno);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">db_close</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">   Pager* pager = table-&gt;pager;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_full_pages = table-&gt;num_rows / ROWS_PER_PAGE;</span><br><span class=\"line\"> </span><br><span class=\"line\">-  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_full_pages; i++) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; pager-&gt;num_pages; i++) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (pager-&gt;pages[i] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">-    pager_flush(pager, i, PAGE_SIZE);</span><br><span class=\"line\">+    pager_flush(pager, i);</span><br><span class=\"line\">     <span class=\"built_in\">free</span>(pager-&gt;pages[i]);</span><br><span class=\"line\">     pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-  <span class=\"comment\">// There may be a partial page to write to the end of the file</span></span><br><span class=\"line\">-  <span class=\"comment\">// This should not be needed after we switch to a B-tree</span></span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_additional_rows = table-&gt;num_rows % ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (num_additional_rows &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">-    <span class=\"keyword\">uint32_t</span> page_num = num_full_pages;</span><br><span class=\"line\">-    <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">-      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);</span><br><span class=\"line\">-      <span class=\"built_in\">free</span>(pager-&gt;pages[page_num]);</span><br><span class=\"line\">-      pager-&gt;pages[page_num] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">-    &#125;</span><br><span class=\"line\">-  &#125;</span><br><span class=\"line\">-</span><br><span class=\"line\">   <span class=\"keyword\">int</span> result = close(pager-&gt;file_descriptor);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (result == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error closing db file.\\n\"</span>);</span><br></pre></td></tr></table></figure>\n<p>在数据库中存储页码会比存储行数更加有用. 页码应该关联上 pager 对象, 而不是 table, 因为这是数据库使用的页码, 而不是特定的表. 一个 B树定义了一个根节点页码, 所以表需要追踪这些信息.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PAGE_SIZE = <span class=\"number\">4096</span>;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_PAGES = <span class=\"number\">100</span>;</span><br><span class=\"line\">-<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;</span><br><span class=\"line\">-<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> &#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> file_descriptor;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> file_length;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_pages;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* pages[TABLE_MAX_PAGES];</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> <span class=\"title\">Pager</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> &#123;</span></span><br><span class=\"line\">   Pager* pager;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_rows;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> root_page_num;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> <span class=\"title\">Table</span>;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@ <span class=\"number\">-127</span>,<span class=\"number\">6</span> +<span class=\"number\">200</span>,<span class=\"number\">10</span> @@ <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">get_page</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num)</span> </span>&#123;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     pager-&gt;pages[page_num] = page;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (page_num &gt;= pager-&gt;num_pages) &#123;</span><br><span class=\"line\">+      pager-&gt;num_pages = page_num + <span class=\"number\">1</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> pager-&gt;pages[page_num];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@ <span class=\"number\">-184</span>,<span class=\"number\">6</span> +<span class=\"number\">269</span>,<span class=\"number\">12</span> @@ <span class=\"function\">Pager* <span class=\"title\">pager_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename)</span> </span>&#123;</span><br><span class=\"line\">   Pager* pager = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Pager));</span><br><span class=\"line\">   pager-&gt;file_descriptor = fd;</span><br><span class=\"line\">   pager-&gt;file_length = file_length;</span><br><span class=\"line\">+  pager-&gt;num_pages = (file_length / PAGE_SIZE);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (file_length % PAGE_SIZE != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Db file is not a whole number of pages. Corrupt file.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;</span><br><span class=\"line\">     pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"游标类的改变\"><a href=\"#游标类的改变\" class=\"headerlink\" title=\"游标类的改变\"></a>游标类的改变</h2><p>一个游标代表了表中的一个位置. 当我们的 table 是一个简单的数据行元素的时候, 我们可以仅通过行号来访问一行数据. 现在这个一棵树, 我们通过节点的页码来确定位置. 并且 cell 的个数在节点中.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> &#123;</span></span><br><span class=\"line\">   Table* table;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> row_num;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> cell_num;</span><br><span class=\"line\">   <span class=\"keyword\">bool</span> end_of_table;  <span class=\"comment\">// Indicates a position one past the last element</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> <span class=\"title\">Cursor</span>;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\">Cursor* <span class=\"title\">table_start</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">   Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">   cursor-&gt;table = table;</span><br><span class=\"line\">-  cursor-&gt;row_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">-  cursor-&gt;end_of_table = (table-&gt;num_rows == <span class=\"number\">0</span>);</span><br><span class=\"line\">+  cursor-&gt;page_num = table-&gt;root_page_num;</span><br><span class=\"line\">+  cursor-&gt;cell_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* root_node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(root_node);</span><br><span class=\"line\">+  cursor-&gt;end_of_table = (num_cells == <span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\">Cursor* <span class=\"title\">table_end</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">   Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">   cursor-&gt;table = table;</span><br><span class=\"line\">-  cursor-&gt;row_num = table-&gt;num_rows;</span><br><span class=\"line\">+  cursor-&gt;page_num = table-&gt;root_page_num;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* root_node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(root_node);</span><br><span class=\"line\">+  cursor-&gt;cell_num = num_cells;</span><br><span class=\"line\">   cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">cursor_value</span><span class=\"params\">(Cursor* cursor)</span> </span>&#123;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> row_num = cursor-&gt;row_num;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num = cursor-&gt;page_num;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* page = get_page(cursor-&gt;table-&gt;pager, page_num);</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">-  <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> leaf_node_value(page, cursor-&gt;cell_num);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cursor_advance</span><span class=\"params\">(Cursor* cursor)</span> </span>&#123;</span><br><span class=\"line\">-  cursor-&gt;row_num += <span class=\"number\">1</span>;</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (cursor-&gt;row_num &gt;= cursor-&gt;table-&gt;num_rows) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num = cursor-&gt;page_num;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(cursor-&gt;table-&gt;pager, page_num);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  cursor-&gt;cell_num += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (cursor-&gt;cell_num &gt;= (*leaf_node_num_cells(node))) &#123;</span><br><span class=\"line\">     cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入叶子节点\"><a href=\"#插入叶子节点\" class=\"headerlink\" title=\"插入叶子节点\"></a>插入叶子节点</h2><p>在本文中，我们将只实现足以获得单节点树. 回想一下上一篇文章，树开始是一个空叶节点:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree1.png\" alt=\"empty btree\"><br>empty btree</p>\n<p>键值对可以增加直到叶子节点填满:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree2.png\" alt=\"one-node btree\"></p>\n<p>当我们第一打开数据库的时候, 数据库文件将会是一个空的文件, 所以我们初始化页码为0为东的叶子节点(根节点):<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\">Table* <span class=\"title\">db_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename)</span> </span>&#123;</span><br><span class=\"line\">   Pager* pager = pager_open(filename);</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_rows = pager-&gt;file_length / ROW_SIZE;</span><br><span class=\"line\"> </span><br><span class=\"line\">   Table* table = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Table));</span><br><span class=\"line\">   table-&gt;pager = pager;</span><br><span class=\"line\">-  table-&gt;num_rows = num_rows;</span><br><span class=\"line\">+  table-&gt;root_page_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (pager-&gt;num_pages == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// New database file. Initialize page 0 as leaf node.</span></span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* root_node = get_page(pager, <span class=\"number\">0</span>);</span><br><span class=\"line\">+    initialize_leaf_node(root_node);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> table;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>下一步我们将写一个函数插入键值对到叶子节点. 它将会有一个游标代表插入的位置.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">leaf_node_insert</span><span class=\"params\">(Cursor* cursor, <span class=\"keyword\">uint32_t</span> key, Row* value)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(cursor-&gt;table-&gt;pager, cursor-&gt;page_num);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (num_cells &gt;= LEAF_NODE_MAX_CELLS) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Node full</span></span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Need to implement splitting a leaf node.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (cursor-&gt;cell_num &lt; num_cells) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Make room for new cell</span></span><br><span class=\"line\">+    <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = num_cells; i &gt; cursor-&gt;cell_num; i--) &#123;</span><br><span class=\"line\">+      <span class=\"built_in\">memcpy</span>(leaf_node_cell(node, i), leaf_node_cell(node, i - <span class=\"number\">1</span>),</span><br><span class=\"line\">+             LEAF_NODE_CELL_SIZE);</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  *(leaf_node_num_cells(node)) += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  *(leaf_node_key(node, cursor-&gt;cell_num)) = key;</span><br><span class=\"line\">+  serialize_row(value, leaf_node_value(node, cursor-&gt;cell_num));</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br></pre></td></tr></table></figure>\n<p>我们并没有实现切分, 所以如果节点满了将会报错. 下一步, 我们将 cells 向右移动一个空间, 为新的 cell 腾出空间,然后写一个新的键值对到空的空间中.</p>\n<p>因为我们的树目前仅有一个节点, 我们的 <code>execute_insert()</code> 方法仅需要调用这么帮助方法:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ExecuteResult <span class=\"title\">execute_insert</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (table-&gt;num_rows &gt;= TABLE_MAX_ROWS) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> ((*leaf_node_num_cells(node) &gt;= LEAF_NODE_MAX_CELLS)) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> EXECUTE_TABLE_FULL;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">   Cursor* cursor = table_end(table);</span><br><span class=\"line\"> </span><br><span class=\"line\">-  serialize_row(row_to_insert, cursor_value(cursor));</span><br><span class=\"line\">-  table-&gt;num_rows += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  leaf_node_insert(cursor, row_to_insert-&gt;id, row_to_insert);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"built_in\">free</span>(cursor);</span><br></pre></td></tr></table></figure></p>\n<p>随着这些改变,我们的数据应该是还能向以前一样工作. 异常现在会返回一个”Table Full” , 因为我们没有切分根节点.</p>\n<p>叶子节点可以容纳多少行呢?</p>\n<h2 id=\"打印常量的命令\"><a href=\"#打印常量的命令\" class=\"headerlink\" title=\"打印常量的命令\"></a>打印常量的命令</h2><p>我添加了一个新的命令打印一些常量.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_constants</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"ROW_SIZE: %d\\n\"</span>, ROW_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"COMMON_NODE_HEADER_SIZE: %d\\n\"</span>, COMMON_NODE_HEADER_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_HEADER_SIZE: %d\\n\"</span>, LEAF_NODE_HEADER_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_CELL_SIZE: %d\\n\"</span>, LEAF_NODE_CELL_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_SPACE_FOR_CELLS: %d\\n\"</span>, LEAF_NODE_SPACE_FOR_CELLS);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_MAX_CELLS: %d\\n\"</span>, LEAF_NODE_MAX_CELLS);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">@@ <span class=\"number\">-294</span>,<span class=\"number\">6</span> +<span class=\"number\">376</span>,<span class=\"number\">14</span> @@ <span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     db_close(table);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".constants\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Constants:\\n\"</span>);</span><br><span class=\"line\">+    print_constants();</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> META_COMMAND_SUCCESS;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加了一个单元测试</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  it <span class=\"string\">'prints constants'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    script = [</span><br><span class=\"line\">+      <span class=\"string\">\".constants\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ]</span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Constants:\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"ROW_SIZE: 293\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"COMMON_NODE_HEADER_SIZE: 6\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_HEADER_SIZE: 10\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_CELL_SIZE: 297\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_SPACE_FOR_CELLS: 4086\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_MAX_CELLS: 13\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>所以现在表能放下13行数据.</p>\n<h2 id=\"树的可视化\"><a href=\"#树的可视化\" class=\"headerlink\" title=\"树的可视化\"></a>树的可视化</h2><p>为了帮助我们调试和可视化, 我添加了一个命令打印我们目前的B树.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"leaf (size %d)\\n\"</span>, num_cells);</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_cells; i++) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> key = *leaf_node_key(node, i);</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"  - %d : %d\\n\"</span>, i, key);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@ <span class=\"number\">-294</span>,<span class=\"number\">6</span> +<span class=\"number\">376</span>,<span class=\"number\">14</span> @@ <span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     db_close(table);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".btree\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tree:\\n\"</span>);</span><br><span class=\"line\">+    print_leaf_node(get_page(table-&gt;pager, <span class=\"number\">0</span>));</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> META_COMMAND_SUCCESS;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".constants\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Constants:\\n\"</span>);</span><br><span class=\"line\">     print_constants();</span><br><span class=\"line\">     <span class=\"keyword\">return</span> META_COMMAND_SUCCESS;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>和一个测试</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  it <span class=\"string\">'allows printing out the structure of a one-node btree'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    script = [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>].map <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">+      <span class=\"string\">\"insert <span class=\"subst\">#&#123;i&#125;</span> user<span class=\"subst\">#&#123;i&#125;</span> person<span class=\"subst\">#&#123;i&#125;</span>@example.com\"</span></span><br><span class=\"line\">+    <span class=\"keyword\">end</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".btree\"</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".exit\"</span></span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Tree:\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"leaf (size 3)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 0 : 3\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 1 : 1\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 2 : 2\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span></span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>我们目前依旧没有按排序顺序存储rows. 我们将注意到 <code>execute_insert()</code> 插入到叶子节点在<code>table_end()</code> 返回的时候. 所以行按插入顺序存储，就像之前一样.</p>\n<h2 id=\"下一讲\"><a href=\"#下一讲\" class=\"headerlink\" title=\"下一讲\"></a>下一讲</h2><h2 id=\"完整的改动\"><a href=\"#完整的改动\" class=\"headerlink\" title=\"完整的改动\"></a>完整的改动</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PAGE_SIZE = <span class=\"number\">4096</span>;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_PAGES = <span class=\"number\">100</span>;</span><br><span class=\"line\">-<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;</span><br><span class=\"line\">-<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> &#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> file_descriptor;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> file_length;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_pages;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* pages[TABLE_MAX_PAGES];</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> <span class=\"title\">Pager</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> &#123;</span></span><br><span class=\"line\">   Pager* pager;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_rows;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> root_page_num;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> <span class=\"title\">Table</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> &#123;</span></span><br><span class=\"line\">   Table* table;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> row_num;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> cell_num;</span><br><span class=\"line\">   <span class=\"keyword\">bool</span> end_of_table;  <span class=\"comment\">// Indicates a position one past the last element</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> <span class=\"title\">Cursor</span>;</span></span><br><span class=\"line\">@@ <span class=\"number\">-88</span>,<span class=\"number\">6</span> +<span class=\"number\">88</span>,<span class=\"number\">77</span> @@ <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_row</span><span class=\"params\">(Row* row)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"(%d, %s, %s)\\n\"</span>, row-&gt;id, row-&gt;username, row-&gt;email);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"keyword\">enum</span> NodeType_t &#123; NODE_INTERNAL, NODE_LEAF &#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> NodeType_t NodeType;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Common Node Header Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> NODE_TYPE_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint8_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> NODE_TYPE_OFFSET = <span class=\"number\">0</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> IS_ROOT_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint8_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> IS_ROOT_OFFSET = NODE_TYPE_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PARENT_POINTER_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PARENT_POINTER_OFFSET = IS_ROOT_OFFSET + IS_ROOT_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> COMMON_NODE_HEADER_SIZE =</span><br><span class=\"line\">+    NODE_TYPE_SIZE + IS_ROOT_SIZE + PARENT_POINTER_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Leaf Node Header Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_NUM_CELLS_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_NUM_CELLS_OFFSET = COMMON_NODE_HEADER_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_HEADER_SIZE =</span><br><span class=\"line\">+    COMMON_NODE_HEADER_SIZE + LEAF_NODE_NUM_CELLS_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Leaf Node Body Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_KEY_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_KEY_OFFSET = <span class=\"number\">0</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_VALUE_SIZE = ROW_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_VALUE_OFFSET =</span><br><span class=\"line\">+    LEAF_NODE_KEY_OFFSET + LEAF_NODE_KEY_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_CELL_SIZE = LEAF_NODE_KEY_SIZE + LEAF_NODE_VALUE_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_SPACE_FOR_CELLS = PAGE_SIZE - LEAF_NODE_HEADER_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_MAX_CELLS =</span><br><span class=\"line\">+    LEAF_NODE_SPACE_FOR_CELLS / LEAF_NODE_CELL_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* leaf_node_num_cells(<span class=\"keyword\">void</span>* node) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> node + LEAF_NODE_NUM_CELLS_OFFSET;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">leaf_node_cell</span><span class=\"params\">(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> cell_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> node + LEAF_NODE_HEADER_SIZE + cell_num * LEAF_NODE_CELL_SIZE;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* leaf_node_key(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> cell_num) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> leaf_node_cell(node, cell_num);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">leaf_node_value</span><span class=\"params\">(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> cell_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> leaf_node_cell(node, cell_num) + LEAF_NODE_KEY_SIZE;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_constants</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"ROW_SIZE: %d\\n\"</span>, ROW_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"COMMON_NODE_HEADER_SIZE: %d\\n\"</span>, COMMON_NODE_HEADER_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_HEADER_SIZE: %d\\n\"</span>, LEAF_NODE_HEADER_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_CELL_SIZE: %d\\n\"</span>, LEAF_NODE_CELL_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_SPACE_FOR_CELLS: %d\\n\"</span>, LEAF_NODE_SPACE_FOR_CELLS);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_MAX_CELLS: %d\\n\"</span>, LEAF_NODE_MAX_CELLS);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"leaf (size %d)\\n\"</span>, num_cells);</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_cells; i++) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> key = *leaf_node_key(node, i);</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"  - %d : %d\\n\"</span>, i, key);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">serialize_row</span><span class=\"params\">(Row* source, <span class=\"keyword\">void</span>* destination)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(destination + ID_OFFSET, &amp;(source-&gt;id), ID_SIZE);</span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(destination + USERNAME_OFFSET, &amp;(source-&gt;username), USERNAME_SIZE);</span><br><span class=\"line\">@@ <span class=\"number\">-100</span>,<span class=\"number\">6</span> +<span class=\"number\">171</span>,<span class=\"number\">8</span> @@ <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deserialize_row</span><span class=\"params\">(<span class=\"keyword\">void</span>* source, Row* destination)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;email), source + EMAIL_OFFSET, EMAIL_SIZE);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123; *leaf_node_num_cells(node) = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">get_page</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (page_num &gt; TABLE_MAX_PAGES) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to fetch page number out of bounds. %d &gt; %d\\n\"</span>, page_num,</span><br><span class=\"line\">@@ <span class=\"number\">-127</span>,<span class=\"number\">6</span> +<span class=\"number\">200</span>,<span class=\"number\">10</span> @@ <span class=\"keyword\">void</span>* get_page(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num) &#123;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     pager-&gt;pages[page_num] = page;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (page_num &gt;= pager-&gt;num_pages) &#123;</span><br><span class=\"line\">+      pager-&gt;num_pages = page_num + <span class=\"number\">1</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> pager-&gt;pages[page_num];</span><br><span class=\"line\">@@ <span class=\"number\">-135</span>,<span class=\"number\">8</span> +<span class=\"number\">212</span>,<span class=\"number\">12</span> @@ <span class=\"keyword\">void</span>* get_page(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num) &#123;</span><br><span class=\"line\"> Cursor* table_start(Table* table) &#123;</span><br><span class=\"line\">   Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">   cursor-&gt;table = table;</span><br><span class=\"line\">-  cursor-&gt;row_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">-  cursor-&gt;end_of_table = (table-&gt;num_rows == <span class=\"number\">0</span>);</span><br><span class=\"line\">+  cursor-&gt;page_num = table-&gt;root_page_num;</span><br><span class=\"line\">+  cursor-&gt;cell_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* root_node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(root_node);</span><br><span class=\"line\">+  cursor-&gt;end_of_table = (num_cells == <span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">@@ <span class=\"number\">-144</span>,<span class=\"number\">24</span> +<span class=\"number\">225</span>,<span class=\"number\">28</span> @@ Cursor* table_start(Table* table) &#123;</span><br><span class=\"line\"> Cursor* table_end(Table* table) &#123;</span><br><span class=\"line\">   Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">   cursor-&gt;table = table;</span><br><span class=\"line\">-  cursor-&gt;row_num = table-&gt;num_rows;</span><br><span class=\"line\">+  cursor-&gt;page_num = table-&gt;root_page_num;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* root_node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(root_node);</span><br><span class=\"line\">+  cursor-&gt;cell_num = num_cells;</span><br><span class=\"line\">   cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">void</span>* cursor_value(Cursor* cursor) &#123;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> row_num = cursor-&gt;row_num;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num = cursor-&gt;page_num;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* page = get_page(cursor-&gt;table-&gt;pager, page_num);</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">-  <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> leaf_node_value(page, cursor-&gt;cell_num);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">void</span> cursor_advance(Cursor* cursor) &#123;</span><br><span class=\"line\">-  cursor-&gt;row_num += <span class=\"number\">1</span>;</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (cursor-&gt;row_num &gt;= cursor-&gt;table-&gt;num_rows) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num = cursor-&gt;page_num;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(cursor-&gt;table-&gt;pager, page_num);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  cursor-&gt;cell_num += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (cursor-&gt;cell_num &gt;= (*leaf_node_num_cells(node))) &#123;</span><br><span class=\"line\">     cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">@@ <span class=\"number\">-184</span>,<span class=\"number\">6</span> +<span class=\"number\">269</span>,<span class=\"number\">12</span> @@ Pager* pager_open(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename) &#123;</span><br><span class=\"line\">   Pager* pager = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Pager));</span><br><span class=\"line\">   pager-&gt;file_descriptor = fd;</span><br><span class=\"line\">   pager-&gt;file_length = file_length;</span><br><span class=\"line\">+  pager-&gt;num_pages = (file_length / PAGE_SIZE);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (file_length % PAGE_SIZE != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Db file is not a whole number of pages. Corrupt file.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;</span><br><span class=\"line\">     pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">@@ <span class=\"number\">-194</span>,<span class=\"number\">11</span> +<span class=\"number\">285</span>,<span class=\"number\">15</span> @@ Pager* pager_open(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> Table* db_open(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename) &#123;</span><br><span class=\"line\">   Pager* pager = pager_open(filename);</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_rows = pager-&gt;file_length / ROW_SIZE;</span><br><span class=\"line\"> </span><br><span class=\"line\">   Table* table = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Table));</span><br><span class=\"line\">   table-&gt;pager = pager;</span><br><span class=\"line\">-  table-&gt;num_rows = num_rows;</span><br><span class=\"line\">+  table-&gt;root_page_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (pager-&gt;num_pages == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// New database file. Initialize page 0 as leaf node.</span></span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* root_node = get_page(pager, <span class=\"number\">0</span>);</span><br><span class=\"line\">+    initialize_leaf_node(root_node);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> table;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">@@ <span class=\"number\">-228</span>,<span class=\"number\">7</span> +<span class=\"number\">323</span>,<span class=\"number\">7</span> @@ <span class=\"keyword\">void</span> read_input(InputBuffer* input_buffer) &#123;</span><br><span class=\"line\">   input_buffer-&gt;buffer[bytes_read - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-<span class=\"keyword\">void</span> pager_flush(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> size) &#123;</span><br><span class=\"line\">+<span class=\"keyword\">void</span> pager_flush(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to flush null page\\n\"</span>);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">@@ <span class=\"number\">-242</span>,<span class=\"number\">7</span> +<span class=\"number\">337</span>,<span class=\"number\">7</span> @@ <span class=\"keyword\">void</span> pager_flush(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> size) &#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">ssize_t</span> bytes_written =</span><br><span class=\"line\">-      write(pager-&gt;file_descriptor, pager-&gt;pages[page_num], size);</span><br><span class=\"line\">+      write(pager-&gt;file_descriptor, pager-&gt;pages[page_num], PAGE_SIZE);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">if</span> (bytes_written == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error writing: %d\\n\"</span>, errno);</span><br><span class=\"line\">@@ <span class=\"number\">-252</span>,<span class=\"number\">29</span> +<span class=\"number\">347</span>,<span class=\"number\">16</span> @@ <span class=\"keyword\">void</span> pager_flush(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> size) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">void</span> db_close(Table* table) &#123;</span><br><span class=\"line\">   Pager* pager = table-&gt;pager;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_full_pages = table-&gt;num_rows / ROWS_PER_PAGE;</span><br><span class=\"line\"> </span><br><span class=\"line\">-  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_full_pages; i++) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; pager-&gt;num_pages; i++) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (pager-&gt;pages[i] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">-    pager_flush(pager, i, PAGE_SIZE);</span><br><span class=\"line\">+    pager_flush(pager, i);</span><br><span class=\"line\">     <span class=\"built_in\">free</span>(pager-&gt;pages[i]);</span><br><span class=\"line\">     pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-  <span class=\"comment\">// There may be a partial page to write to the end of the file</span></span><br><span class=\"line\">-  <span class=\"comment\">// This should not be needed after we switch to a B-tree</span></span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_additional_rows = table-&gt;num_rows % ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (num_additional_rows &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">-    <span class=\"keyword\">uint32_t</span> page_num = num_full_pages;</span><br><span class=\"line\">-    <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">-      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);</span><br><span class=\"line\">-      <span class=\"built_in\">free</span>(pager-&gt;pages[page_num]);</span><br><span class=\"line\">-      pager-&gt;pages[page_num] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">-    &#125;</span><br><span class=\"line\">-  &#125;</span><br><span class=\"line\">-</span><br><span class=\"line\">   <span class=\"keyword\">int</span> result = close(pager-&gt;file_descriptor);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (result == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error closing db file.\\n\"</span>);</span><br><span class=\"line\">@@ <span class=\"number\">-294</span>,<span class=\"number\">6</span> +<span class=\"number\">376</span>,<span class=\"number\">14</span> @@ MetaCommandResult do_meta_command(InputBuffer* input_buffer, Table* table) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     db_close(table);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".btree\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tree:\\n\"</span>);</span><br><span class=\"line\">+    print_leaf_node(get_page(table-&gt;pager, <span class=\"number\">0</span>));</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> META_COMMAND_SUCCESS;</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".constants\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Constants:\\n\"</span>);</span><br><span class=\"line\">+    print_constants();</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> META_COMMAND_SUCCESS;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">@@ <span class=\"number\">-342</span>,<span class=\"number\">16</span> +<span class=\"number\">432</span>,<span class=\"number\">39</span> @@ PrepareResult prepare_statement(InputBuffer* input_buffer,</span><br><span class=\"line\">   <span class=\"keyword\">return</span> PREPARE_UNRECOGNIZED_STATEMENT;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"keyword\">void</span> leaf_node_insert(Cursor* cursor, <span class=\"keyword\">uint32_t</span> key, Row* value) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(cursor-&gt;table-&gt;pager, cursor-&gt;page_num);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (num_cells &gt;= LEAF_NODE_MAX_CELLS) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Node full</span></span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Need to implement splitting a leaf node.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (cursor-&gt;cell_num &lt; num_cells) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Make room for new cell</span></span><br><span class=\"line\">+    <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = num_cells; i &gt; cursor-&gt;cell_num; i--) &#123;</span><br><span class=\"line\">+      <span class=\"built_in\">memcpy</span>(leaf_node_cell(node, i), leaf_node_cell(node, i - <span class=\"number\">1</span>),</span><br><span class=\"line\">+             LEAF_NODE_CELL_SIZE);</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  *(leaf_node_num_cells(node)) += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  *(leaf_node_key(node, cursor-&gt;cell_num)) = key;</span><br><span class=\"line\">+  serialize_row(value, leaf_node_value(node, cursor-&gt;cell_num));</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> ExecuteResult execute_insert(Statement* statement, Table* table) &#123;</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (table-&gt;num_rows &gt;= TABLE_MAX_ROWS) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> ((*leaf_node_num_cells(node) &gt;= LEAF_NODE_MAX_CELLS)) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> EXECUTE_TABLE_FULL;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">   Cursor* cursor = table_end(table);</span><br><span class=\"line\"> </span><br><span class=\"line\">-  serialize_row(row_to_insert, cursor_value(cursor));</span><br><span class=\"line\">-  table-&gt;num_rows += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  leaf_node_insert(cursor, row_to_insert-&gt;id, row_to_insert);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"built_in\">free</span>(cursor);</span><br></pre></td></tr></table></figure>\n<p>specs 改动</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  it <span class=\"string\">'allows printing out the structure of a one-node btree'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    script = [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>].map <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">+      <span class=\"string\">\"insert <span class=\"subst\">#&#123;i&#125;</span> user<span class=\"subst\">#&#123;i&#125;</span> person<span class=\"subst\">#&#123;i&#125;</span>@example.com\"</span></span><br><span class=\"line\">+    <span class=\"keyword\">end</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".btree\"</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".exit\"</span></span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Tree:\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"leaf (size 3)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 0 : 3\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 1 : 1\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 2 : 2\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span></span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  it <span class=\"string\">'prints constants'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    script = [</span><br><span class=\"line\">+      <span class=\"string\">\".constants\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ]</span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Constants:\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"ROW_SIZE: 293\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"COMMON_NODE_HEADER_SIZE: 6\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_HEADER_SIZE: 10\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_CELL_SIZE: 297\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_SPACE_FOR_CELLS: 4086\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_MAX_CELLS: 13\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\"> <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"B-树叶子节点格式\"><a href=\"#B-树叶子节点格式\" class=\"headerlink\" title=\"B 树叶子节点格式\"></a>B 树叶子节点格式</h1><p>我们将table 中未排序的行数据变成B树形状, 这是一个非常大的改变需要多个章节才能完成.<br>在文章结束的时候,我们将定义叶子节点层,并且支持插入键值对到单节点树. 但是首先让我们回忆下选择树型结构的原因.</p>\n<h3 id=\"替换表的结构\"><a href=\"#替换表的结构\" class=\"headerlink\" title=\"替换表的结构\"></a>替换表的结构</h3><p>使用当前格式，每个页面仅存储行（没有元数据），因此它非常节省空间。插入也很快，因为我们只是追加到最后。但是，只能通过扫描整个表来查找特定行。如果我们想要删除一行，我们必须通过移动它后面的每一行来填充这个洞。</p>\n<p>如果我们将表存储为数组，但保留按id排序的行，我们可以使用二进制搜索来查找特定的id。但是，插入会很慢，因为我们必须移动很多行来腾出空间。</p>\n<p>相反，我们将采用树形结构。树中的每个节点都可以包含可变数量的行，因此我们必须在每个节点中存储一些信息以跟踪它包含的行数。此外，所有内部节点的存储开销都不存储任何行。作为更大的数据库文件的交换，我们可以快速插入，删除和查找。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">name</th>\n<th style=\"text-align:center\">Unsorted Array of rows</th>\n<th style=\"text-align:center\">Sorted Array of rows</th>\n<th style=\"text-align:center\">Tree of nodes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Pages contain</td>\n<td style=\"text-align:center\">only data</td>\n<td style=\"text-align:center\">only data</td>\n<td style=\"text-align:center\">metadata, primary keys, and data</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Rows per page</td>\n<td style=\"text-align:center\">more</td>\n<td style=\"text-align:center\">more</td>\n<td style=\"text-align:center\">fewer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Insertion</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(log(n))</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Deletion</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(log(n))</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Lookup by id</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(log(n))</td>\n<td style=\"text-align:center\">O(log(n))</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"节点的头部格式\"><a href=\"#节点的头部格式\" class=\"headerlink\" title=\"节点的头部格式\"></a>节点的头部格式</h2><p>叶子节点和中间节点在不同的层上,声明一个枚举类型来跟踪节点类型:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">enum</span> NodeType_t &#123; NODE_INTERNAL, NODE_LEAF &#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> NodeType_t NodeType;</span><br></pre></td></tr></table></figure>\n<p>每个节点都对应一页. 内部节点将通过存储存储子项的页码来指向其子项。B树 向寻呼机询问特定页码并返回指向页面缓存的指针。页面按页码顺序依次存储在数据库文件中。</p>\n<p>节点需要在页面开头的标题中存储一些元数据. 每个节点将存储它是什么类型的节点，它是否是根节点，以及指向其父节点的指针（以允许查找节点的兄弟节点）.我为每个标题字段的大小和偏移量定义常量:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Common Node Header Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> NODE_TYPE_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint8_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> NODE_TYPE_OFFSET = <span class=\"number\">0</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> IS_ROOT_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint8_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> IS_ROOT_OFFSET = NODE_TYPE_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PARENT_POINTER_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PARENT_POINTER_OFFSET = IS_ROOT_OFFSET + IS_ROOT_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> COMMON_NODE_HEADER_SIZE =</span><br><span class=\"line\">+    NODE_TYPE_SIZE + IS_ROOT_SIZE + PARENT_POINTER_SIZE;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"叶子节点格式\"><a href=\"#叶子节点格式\" class=\"headerlink\" title=\"叶子节点格式\"></a>叶子节点格式</h2><p>除了这些常见的头字段,叶子节点还需要存储包含有多少”cells”. 一个”Cell” 包含着一个 key/value 对.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Leaf Node Header Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_NUM_CELLS_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_NUM_CELLS_OFFSET = COMMON_NODE_HEADER_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_HEADER_SIZE =</span><br><span class=\"line\">+    COMMON_NODE_HEADER_SIZE + LEAF_NODE_NUM_CELLS_SIZE;</span><br></pre></td></tr></table></figure></p>\n<p>叶子节点的内容是一个 cells 的数组, 每一个 cell 包含一个键与值(序列化的一行).<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Leaf Node Body Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_KEY_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_KEY_OFFSET = <span class=\"number\">0</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_VALUE_SIZE = ROW_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_VALUE_OFFSET =</span><br><span class=\"line\">+    LEAF_NODE_KEY_OFFSET + LEAF_NODE_KEY_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_CELL_SIZE = LEAF_NODE_KEY_SIZE + LEAF_NODE_VALUE_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_SPACE_FOR_CELLS = PAGE_SIZE - LEAF_NODE_HEADER_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_MAX_CELLS =</span><br><span class=\"line\">+    LEAF_NODE_SPACE_FOR_CELLS / LEAF_NODE_CELL_SIZE;</span><br></pre></td></tr></table></figure></p>\n<p>基于这些常量的定义, 叶子节点格式看起来就像这样:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/leaf-node-format.png\" alt=\"Our leaf node format\"><br>Our leaf node format</p>\n<p>在表头中使用一个字节来存储一个 bool 位是及其浪费空间的, 但是这样可以简化代码去访问这些值.<br>注意,在尾部也浪费了一些空间. 在头部后, 我们存储尽可能多的 cells , 但是剩余的空间可能无法容纳一个完整的 cell. 我们将其留空为了避免 cells 拆分到不同的节点.</p>\n<h2 id=\"访问叶子节点文件\"><a href=\"#访问叶子节点文件\" class=\"headerlink\" title=\"访问叶子节点文件\"></a>访问叶子节点文件</h2><p>访问keys , values 和 元数据的代码都涉及使用我们刚刚定义的常量.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* leaf_node_num_cells(<span class=\"keyword\">void</span>* node) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span> *)node + LEAF_NODE_NUM_CELLS_OFFSET;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">leaf_node_cell</span><span class=\"params\">(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> cell_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span> *)node + LEAF_NODE_HEADER_SIZE + cell_num * LEAF_NODE_CELL_SIZE;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* leaf_node_key(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> cell_num) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> leaf_node_cell(node, cell_num);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">leaf_node_value</span><span class=\"params\">(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> cell_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> leaf_node_cell(node, cell_num) + LEAF_NODE_KEY_SIZE;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123; *leaf_node_num_cells(node) = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">+</span><br></pre></td></tr></table></figure>\n<p>这些方法返回一个指向 value 的一个指针, 所以他们可以用在获取或者设置上.</p>\n<h2 id=\"改变-Parger-和-table-对象\"><a href=\"#改变-Parger-和-table-对象\" class=\"headerlink\" title=\"改变 Parger 和 table 对象\"></a>改变 Parger 和 table 对象</h2><p>每个节点仅占用一页, 即使没有填满. 这也意味着, 我们的 pager 不再需要支持读/写部分页面.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pager_flush</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> size)</span> </span>&#123;</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pager_flush</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to flush null page\\n\"</span>);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">@@ <span class=\"number\">-242</span>,<span class=\"number\">7</span> +<span class=\"number\">337</span>,<span class=\"number\">7</span> @@ <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pager_flush</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> size)</span> </span>&#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">ssize_t</span> bytes_written =</span><br><span class=\"line\">-      write(pager-&gt;file_descriptor, pager-&gt;pages[page_num], size);</span><br><span class=\"line\">+      write(pager-&gt;file_descriptor, pager-&gt;pages[page_num], PAGE_SIZE);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">if</span> (bytes_written == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error writing: %d\\n\"</span>, errno);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">db_close</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">   Pager* pager = table-&gt;pager;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_full_pages = table-&gt;num_rows / ROWS_PER_PAGE;</span><br><span class=\"line\"> </span><br><span class=\"line\">-  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_full_pages; i++) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; pager-&gt;num_pages; i++) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (pager-&gt;pages[i] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">-    pager_flush(pager, i, PAGE_SIZE);</span><br><span class=\"line\">+    pager_flush(pager, i);</span><br><span class=\"line\">     <span class=\"built_in\">free</span>(pager-&gt;pages[i]);</span><br><span class=\"line\">     pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-  <span class=\"comment\">// There may be a partial page to write to the end of the file</span></span><br><span class=\"line\">-  <span class=\"comment\">// This should not be needed after we switch to a B-tree</span></span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_additional_rows = table-&gt;num_rows % ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (num_additional_rows &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">-    <span class=\"keyword\">uint32_t</span> page_num = num_full_pages;</span><br><span class=\"line\">-    <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">-      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);</span><br><span class=\"line\">-      <span class=\"built_in\">free</span>(pager-&gt;pages[page_num]);</span><br><span class=\"line\">-      pager-&gt;pages[page_num] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">-    &#125;</span><br><span class=\"line\">-  &#125;</span><br><span class=\"line\">-</span><br><span class=\"line\">   <span class=\"keyword\">int</span> result = close(pager-&gt;file_descriptor);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (result == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error closing db file.\\n\"</span>);</span><br></pre></td></tr></table></figure>\n<p>在数据库中存储页码会比存储行数更加有用. 页码应该关联上 pager 对象, 而不是 table, 因为这是数据库使用的页码, 而不是特定的表. 一个 B树定义了一个根节点页码, 所以表需要追踪这些信息.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PAGE_SIZE = <span class=\"number\">4096</span>;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_PAGES = <span class=\"number\">100</span>;</span><br><span class=\"line\">-<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;</span><br><span class=\"line\">-<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> &#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> file_descriptor;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> file_length;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_pages;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* pages[TABLE_MAX_PAGES];</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> <span class=\"title\">Pager</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> &#123;</span></span><br><span class=\"line\">   Pager* pager;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_rows;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> root_page_num;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> <span class=\"title\">Table</span>;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@ <span class=\"number\">-127</span>,<span class=\"number\">6</span> +<span class=\"number\">200</span>,<span class=\"number\">10</span> @@ <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">get_page</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num)</span> </span>&#123;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     pager-&gt;pages[page_num] = page;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (page_num &gt;= pager-&gt;num_pages) &#123;</span><br><span class=\"line\">+      pager-&gt;num_pages = page_num + <span class=\"number\">1</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> pager-&gt;pages[page_num];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@ <span class=\"number\">-184</span>,<span class=\"number\">6</span> +<span class=\"number\">269</span>,<span class=\"number\">12</span> @@ <span class=\"function\">Pager* <span class=\"title\">pager_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename)</span> </span>&#123;</span><br><span class=\"line\">   Pager* pager = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Pager));</span><br><span class=\"line\">   pager-&gt;file_descriptor = fd;</span><br><span class=\"line\">   pager-&gt;file_length = file_length;</span><br><span class=\"line\">+  pager-&gt;num_pages = (file_length / PAGE_SIZE);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (file_length % PAGE_SIZE != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Db file is not a whole number of pages. Corrupt file.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;</span><br><span class=\"line\">     pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"游标类的改变\"><a href=\"#游标类的改变\" class=\"headerlink\" title=\"游标类的改变\"></a>游标类的改变</h2><p>一个游标代表了表中的一个位置. 当我们的 table 是一个简单的数据行元素的时候, 我们可以仅通过行号来访问一行数据. 现在这个一棵树, 我们通过节点的页码来确定位置. 并且 cell 的个数在节点中.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> &#123;</span></span><br><span class=\"line\">   Table* table;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> row_num;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> cell_num;</span><br><span class=\"line\">   <span class=\"keyword\">bool</span> end_of_table;  <span class=\"comment\">// Indicates a position one past the last element</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> <span class=\"title\">Cursor</span>;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\">Cursor* <span class=\"title\">table_start</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">   Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">   cursor-&gt;table = table;</span><br><span class=\"line\">-  cursor-&gt;row_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">-  cursor-&gt;end_of_table = (table-&gt;num_rows == <span class=\"number\">0</span>);</span><br><span class=\"line\">+  cursor-&gt;page_num = table-&gt;root_page_num;</span><br><span class=\"line\">+  cursor-&gt;cell_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* root_node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(root_node);</span><br><span class=\"line\">+  cursor-&gt;end_of_table = (num_cells == <span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\">Cursor* <span class=\"title\">table_end</span><span class=\"params\">(Table* table)</span> </span>&#123;</span><br><span class=\"line\">   Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">   cursor-&gt;table = table;</span><br><span class=\"line\">-  cursor-&gt;row_num = table-&gt;num_rows;</span><br><span class=\"line\">+  cursor-&gt;page_num = table-&gt;root_page_num;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* root_node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(root_node);</span><br><span class=\"line\">+  cursor-&gt;cell_num = num_cells;</span><br><span class=\"line\">   cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">cursor_value</span><span class=\"params\">(Cursor* cursor)</span> </span>&#123;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> row_num = cursor-&gt;row_num;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num = cursor-&gt;page_num;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* page = get_page(cursor-&gt;table-&gt;pager, page_num);</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">-  <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> leaf_node_value(page, cursor-&gt;cell_num);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cursor_advance</span><span class=\"params\">(Cursor* cursor)</span> </span>&#123;</span><br><span class=\"line\">-  cursor-&gt;row_num += <span class=\"number\">1</span>;</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (cursor-&gt;row_num &gt;= cursor-&gt;table-&gt;num_rows) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num = cursor-&gt;page_num;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(cursor-&gt;table-&gt;pager, page_num);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  cursor-&gt;cell_num += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (cursor-&gt;cell_num &gt;= (*leaf_node_num_cells(node))) &#123;</span><br><span class=\"line\">     cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入叶子节点\"><a href=\"#插入叶子节点\" class=\"headerlink\" title=\"插入叶子节点\"></a>插入叶子节点</h2><p>在本文中，我们将只实现足以获得单节点树. 回想一下上一篇文章，树开始是一个空叶节点:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree1.png\" alt=\"empty btree\"><br>empty btree</p>\n<p>键值对可以增加直到叶子节点填满:<br><img src=\"https://cstack.github.io/db_tutorial/assets/images/btree2.png\" alt=\"one-node btree\"></p>\n<p>当我们第一打开数据库的时候, 数据库文件将会是一个空的文件, 所以我们初始化页码为0为东的叶子节点(根节点):<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\">Table* <span class=\"title\">db_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename)</span> </span>&#123;</span><br><span class=\"line\">   Pager* pager = pager_open(filename);</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_rows = pager-&gt;file_length / ROW_SIZE;</span><br><span class=\"line\"> </span><br><span class=\"line\">   Table* table = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Table));</span><br><span class=\"line\">   table-&gt;pager = pager;</span><br><span class=\"line\">-  table-&gt;num_rows = num_rows;</span><br><span class=\"line\">+  table-&gt;root_page_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (pager-&gt;num_pages == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// New database file. Initialize page 0 as leaf node.</span></span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* root_node = get_page(pager, <span class=\"number\">0</span>);</span><br><span class=\"line\">+    initialize_leaf_node(root_node);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> table;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>下一步我们将写一个函数插入键值对到叶子节点. 它将会有一个游标代表插入的位置.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">leaf_node_insert</span><span class=\"params\">(Cursor* cursor, <span class=\"keyword\">uint32_t</span> key, Row* value)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(cursor-&gt;table-&gt;pager, cursor-&gt;page_num);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (num_cells &gt;= LEAF_NODE_MAX_CELLS) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Node full</span></span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Need to implement splitting a leaf node.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (cursor-&gt;cell_num &lt; num_cells) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Make room for new cell</span></span><br><span class=\"line\">+    <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = num_cells; i &gt; cursor-&gt;cell_num; i--) &#123;</span><br><span class=\"line\">+      <span class=\"built_in\">memcpy</span>(leaf_node_cell(node, i), leaf_node_cell(node, i - <span class=\"number\">1</span>),</span><br><span class=\"line\">+             LEAF_NODE_CELL_SIZE);</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  *(leaf_node_num_cells(node)) += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  *(leaf_node_key(node, cursor-&gt;cell_num)) = key;</span><br><span class=\"line\">+  serialize_row(value, leaf_node_value(node, cursor-&gt;cell_num));</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br></pre></td></tr></table></figure>\n<p>我们并没有实现切分, 所以如果节点满了将会报错. 下一步, 我们将 cells 向右移动一个空间, 为新的 cell 腾出空间,然后写一个新的键值对到空的空间中.</p>\n<p>因为我们的树目前仅有一个节点, 我们的 <code>execute_insert()</code> 方法仅需要调用这么帮助方法:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ExecuteResult <span class=\"title\">execute_insert</span><span class=\"params\">(Statement* statement, Table* table)</span> </span>&#123;</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (table-&gt;num_rows &gt;= TABLE_MAX_ROWS) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> ((*leaf_node_num_cells(node) &gt;= LEAF_NODE_MAX_CELLS)) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> EXECUTE_TABLE_FULL;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">   Cursor* cursor = table_end(table);</span><br><span class=\"line\"> </span><br><span class=\"line\">-  serialize_row(row_to_insert, cursor_value(cursor));</span><br><span class=\"line\">-  table-&gt;num_rows += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  leaf_node_insert(cursor, row_to_insert-&gt;id, row_to_insert);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"built_in\">free</span>(cursor);</span><br></pre></td></tr></table></figure></p>\n<p>随着这些改变,我们的数据应该是还能向以前一样工作. 异常现在会返回一个”Table Full” , 因为我们没有切分根节点.</p>\n<p>叶子节点可以容纳多少行呢?</p>\n<h2 id=\"打印常量的命令\"><a href=\"#打印常量的命令\" class=\"headerlink\" title=\"打印常量的命令\"></a>打印常量的命令</h2><p>我添加了一个新的命令打印一些常量.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_constants</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"ROW_SIZE: %d\\n\"</span>, ROW_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"COMMON_NODE_HEADER_SIZE: %d\\n\"</span>, COMMON_NODE_HEADER_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_HEADER_SIZE: %d\\n\"</span>, LEAF_NODE_HEADER_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_CELL_SIZE: %d\\n\"</span>, LEAF_NODE_CELL_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_SPACE_FOR_CELLS: %d\\n\"</span>, LEAF_NODE_SPACE_FOR_CELLS);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_MAX_CELLS: %d\\n\"</span>, LEAF_NODE_MAX_CELLS);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">@@ <span class=\"number\">-294</span>,<span class=\"number\">6</span> +<span class=\"number\">376</span>,<span class=\"number\">14</span> @@ <span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     db_close(table);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".constants\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Constants:\\n\"</span>);</span><br><span class=\"line\">+    print_constants();</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> META_COMMAND_SUCCESS;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加了一个单元测试</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  it <span class=\"string\">'prints constants'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    script = [</span><br><span class=\"line\">+      <span class=\"string\">\".constants\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ]</span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Constants:\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"ROW_SIZE: 293\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"COMMON_NODE_HEADER_SIZE: 6\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_HEADER_SIZE: 10\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_CELL_SIZE: 297\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_SPACE_FOR_CELLS: 4086\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_MAX_CELLS: 13\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>所以现在表能放下13行数据.</p>\n<h2 id=\"树的可视化\"><a href=\"#树的可视化\" class=\"headerlink\" title=\"树的可视化\"></a>树的可视化</h2><p>为了帮助我们调试和可视化, 我添加了一个命令打印我们目前的B树.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"leaf (size %d)\\n\"</span>, num_cells);</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_cells; i++) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> key = *leaf_node_key(node, i);</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"  - %d : %d\\n\"</span>, i, key);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@ <span class=\"number\">-294</span>,<span class=\"number\">6</span> +<span class=\"number\">376</span>,<span class=\"number\">14</span> @@ <span class=\"function\">MetaCommandResult <span class=\"title\">do_meta_command</span><span class=\"params\">(InputBuffer* input_buffer, Table* table)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     db_close(table);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".btree\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tree:\\n\"</span>);</span><br><span class=\"line\">+    print_leaf_node(get_page(table-&gt;pager, <span class=\"number\">0</span>));</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> META_COMMAND_SUCCESS;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".constants\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Constants:\\n\"</span>);</span><br><span class=\"line\">     print_constants();</span><br><span class=\"line\">     <span class=\"keyword\">return</span> META_COMMAND_SUCCESS;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>和一个测试</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  it <span class=\"string\">'allows printing out the structure of a one-node btree'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    script = [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>].map <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">+      <span class=\"string\">\"insert <span class=\"subst\">#&#123;i&#125;</span> user<span class=\"subst\">#&#123;i&#125;</span> person<span class=\"subst\">#&#123;i&#125;</span>@example.com\"</span></span><br><span class=\"line\">+    <span class=\"keyword\">end</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".btree\"</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".exit\"</span></span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Tree:\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"leaf (size 3)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 0 : 3\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 1 : 1\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 2 : 2\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span></span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>我们目前依旧没有按排序顺序存储rows. 我们将注意到 <code>execute_insert()</code> 插入到叶子节点在<code>table_end()</code> 返回的时候. 所以行按插入顺序存储，就像之前一样.</p>\n<h2 id=\"下一讲\"><a href=\"#下一讲\" class=\"headerlink\" title=\"下一讲\"></a>下一讲</h2><h2 id=\"完整的改动\"><a href=\"#完整的改动\" class=\"headerlink\" title=\"完整的改动\"></a>完整的改动</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PAGE_SIZE = <span class=\"number\">4096</span>;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_PAGES = <span class=\"number\">100</span>;</span><br><span class=\"line\">-<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;</span><br><span class=\"line\">-<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> &#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> file_descriptor;</span><br><span class=\"line\">   <span class=\"keyword\">uint32_t</span> file_length;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_pages;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* pages[TABLE_MAX_PAGES];</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pager_t</span> <span class=\"title\">Pager</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> &#123;</span></span><br><span class=\"line\">   Pager* pager;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_rows;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> root_page_num;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table_t</span> <span class=\"title\">Table</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> &#123;</span></span><br><span class=\"line\">   Table* table;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> row_num;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> cell_num;</span><br><span class=\"line\">   <span class=\"keyword\">bool</span> end_of_table;  <span class=\"comment\">// Indicates a position one past the last element</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cursor_t</span> <span class=\"title\">Cursor</span>;</span></span><br><span class=\"line\">@@ <span class=\"number\">-88</span>,<span class=\"number\">6</span> +<span class=\"number\">88</span>,<span class=\"number\">77</span> @@ <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_row</span><span class=\"params\">(Row* row)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"(%d, %s, %s)\\n\"</span>, row-&gt;id, row-&gt;username, row-&gt;email);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"keyword\">enum</span> NodeType_t &#123; NODE_INTERNAL, NODE_LEAF &#125;;</span><br><span class=\"line\">+<span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> NodeType_t NodeType;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Common Node Header Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> NODE_TYPE_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint8_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> NODE_TYPE_OFFSET = <span class=\"number\">0</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> IS_ROOT_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint8_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> IS_ROOT_OFFSET = NODE_TYPE_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PARENT_POINTER_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> PARENT_POINTER_OFFSET = IS_ROOT_OFFSET + IS_ROOT_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> COMMON_NODE_HEADER_SIZE =</span><br><span class=\"line\">+    NODE_TYPE_SIZE + IS_ROOT_SIZE + PARENT_POINTER_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Leaf Node Header Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_NUM_CELLS_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_NUM_CELLS_OFFSET = COMMON_NODE_HEADER_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_HEADER_SIZE =</span><br><span class=\"line\">+    COMMON_NODE_HEADER_SIZE + LEAF_NODE_NUM_CELLS_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+ * Leaf Node Body Layout</span></span><br><span class=\"line\"><span class=\"comment\">+ */</span></span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_KEY_SIZE = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>);</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_KEY_OFFSET = <span class=\"number\">0</span>;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_VALUE_SIZE = ROW_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_VALUE_OFFSET =</span><br><span class=\"line\">+    LEAF_NODE_KEY_OFFSET + LEAF_NODE_KEY_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_CELL_SIZE = LEAF_NODE_KEY_SIZE + LEAF_NODE_VALUE_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_SPACE_FOR_CELLS = PAGE_SIZE - LEAF_NODE_HEADER_SIZE;</span><br><span class=\"line\">+<span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> LEAF_NODE_MAX_CELLS =</span><br><span class=\"line\">+    LEAF_NODE_SPACE_FOR_CELLS / LEAF_NODE_CELL_SIZE;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* leaf_node_num_cells(<span class=\"keyword\">void</span>* node) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> node + LEAF_NODE_NUM_CELLS_OFFSET;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">leaf_node_cell</span><span class=\"params\">(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> cell_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> node + LEAF_NODE_HEADER_SIZE + cell_num * LEAF_NODE_CELL_SIZE;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"keyword\">uint32_t</span>* leaf_node_key(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> cell_num) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> leaf_node_cell(node, cell_num);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">leaf_node_value</span><span class=\"params\">(<span class=\"keyword\">void</span>* node, <span class=\"keyword\">uint32_t</span> cell_num)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> leaf_node_cell(node, cell_num) + LEAF_NODE_KEY_SIZE;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_constants</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"ROW_SIZE: %d\\n\"</span>, ROW_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"COMMON_NODE_HEADER_SIZE: %d\\n\"</span>, COMMON_NODE_HEADER_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_HEADER_SIZE: %d\\n\"</span>, LEAF_NODE_HEADER_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_CELL_SIZE: %d\\n\"</span>, LEAF_NODE_CELL_SIZE);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_SPACE_FOR_CELLS: %d\\n\"</span>, LEAF_NODE_SPACE_FOR_CELLS);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"LEAF_NODE_MAX_CELLS: %d\\n\"</span>, LEAF_NODE_MAX_CELLS);</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">+  <span class=\"built_in\">printf</span>(<span class=\"string\">\"leaf (size %d)\\n\"</span>, num_cells);</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_cells; i++) &#123;</span><br><span class=\"line\">+    <span class=\"keyword\">uint32_t</span> key = *leaf_node_key(node, i);</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"  - %d : %d\\n\"</span>, i, key);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">serialize_row</span><span class=\"params\">(Row* source, <span class=\"keyword\">void</span>* destination)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(destination + ID_OFFSET, &amp;(source-&gt;id), ID_SIZE);</span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(destination + USERNAME_OFFSET, &amp;(source-&gt;username), USERNAME_SIZE);</span><br><span class=\"line\">@@ <span class=\"number\">-100</span>,<span class=\"number\">6</span> +<span class=\"number\">171</span>,<span class=\"number\">8</span> @@ <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deserialize_row</span><span class=\"params\">(<span class=\"keyword\">void</span>* source, Row* destination)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(&amp;(destination-&gt;email), source + EMAIL_OFFSET, EMAIL_SIZE);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize_leaf_node</span><span class=\"params\">(<span class=\"keyword\">void</span>* node)</span> </span>&#123; *leaf_node_num_cells(node) = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">get_page</span><span class=\"params\">(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (page_num &gt; TABLE_MAX_PAGES) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to fetch page number out of bounds. %d &gt; %d\\n\"</span>, page_num,</span><br><span class=\"line\">@@ <span class=\"number\">-127</span>,<span class=\"number\">6</span> +<span class=\"number\">200</span>,<span class=\"number\">10</span> @@ <span class=\"keyword\">void</span>* get_page(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num) &#123;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     pager-&gt;pages[page_num] = page;</span><br><span class=\"line\">+</span><br><span class=\"line\">+    <span class=\"keyword\">if</span> (page_num &gt;= pager-&gt;num_pages) &#123;</span><br><span class=\"line\">+      pager-&gt;num_pages = page_num + <span class=\"number\">1</span>;</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> pager-&gt;pages[page_num];</span><br><span class=\"line\">@@ <span class=\"number\">-135</span>,<span class=\"number\">8</span> +<span class=\"number\">212</span>,<span class=\"number\">12</span> @@ <span class=\"keyword\">void</span>* get_page(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num) &#123;</span><br><span class=\"line\"> Cursor* table_start(Table* table) &#123;</span><br><span class=\"line\">   Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">   cursor-&gt;table = table;</span><br><span class=\"line\">-  cursor-&gt;row_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">-  cursor-&gt;end_of_table = (table-&gt;num_rows == <span class=\"number\">0</span>);</span><br><span class=\"line\">+  cursor-&gt;page_num = table-&gt;root_page_num;</span><br><span class=\"line\">+  cursor-&gt;cell_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* root_node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(root_node);</span><br><span class=\"line\">+  cursor-&gt;end_of_table = (num_cells == <span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">@@ <span class=\"number\">-144</span>,<span class=\"number\">24</span> +<span class=\"number\">225</span>,<span class=\"number\">28</span> @@ Cursor* table_start(Table* table) &#123;</span><br><span class=\"line\"> Cursor* table_end(Table* table) &#123;</span><br><span class=\"line\">   Cursor* cursor = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Cursor));</span><br><span class=\"line\">   cursor-&gt;table = table;</span><br><span class=\"line\">-  cursor-&gt;row_num = table-&gt;num_rows;</span><br><span class=\"line\">+  cursor-&gt;page_num = table-&gt;root_page_num;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* root_node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(root_node);</span><br><span class=\"line\">+  cursor-&gt;cell_num = num_cells;</span><br><span class=\"line\">   cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">void</span>* cursor_value(Cursor* cursor) &#123;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> row_num = cursor-&gt;row_num;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> page_num = row_num / ROWS_PER_PAGE;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num = cursor-&gt;page_num;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>* page = get_page(cursor-&gt;table-&gt;pager, page_num);</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> row_offset = row_num % ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> byte_offset = row_offset * ROW_SIZE;</span><br><span class=\"line\">-  <span class=\"keyword\">return</span> page + byte_offset;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> leaf_node_value(page, cursor-&gt;cell_num);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">void</span> cursor_advance(Cursor* cursor) &#123;</span><br><span class=\"line\">-  cursor-&gt;row_num += <span class=\"number\">1</span>;</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (cursor-&gt;row_num &gt;= cursor-&gt;table-&gt;num_rows) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> page_num = cursor-&gt;page_num;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(cursor-&gt;table-&gt;pager, page_num);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  cursor-&gt;cell_num += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (cursor-&gt;cell_num &gt;= (*leaf_node_num_cells(node))) &#123;</span><br><span class=\"line\">     cursor-&gt;end_of_table = <span class=\"literal\">true</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">@@ <span class=\"number\">-184</span>,<span class=\"number\">6</span> +<span class=\"number\">269</span>,<span class=\"number\">12</span> @@ Pager* pager_open(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename) &#123;</span><br><span class=\"line\">   Pager* pager = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Pager));</span><br><span class=\"line\">   pager-&gt;file_descriptor = fd;</span><br><span class=\"line\">   pager-&gt;file_length = file_length;</span><br><span class=\"line\">+  pager-&gt;num_pages = (file_length / PAGE_SIZE);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (file_length % PAGE_SIZE != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Db file is not a whole number of pages. Corrupt file.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;</span><br><span class=\"line\">     pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">@@ <span class=\"number\">-194</span>,<span class=\"number\">11</span> +<span class=\"number\">285</span>,<span class=\"number\">15</span> @@ Pager* pager_open(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> Table* db_open(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* filename) &#123;</span><br><span class=\"line\">   Pager* pager = pager_open(filename);</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_rows = pager-&gt;file_length / ROW_SIZE;</span><br><span class=\"line\"> </span><br><span class=\"line\">   Table* table = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Table));</span><br><span class=\"line\">   table-&gt;pager = pager;</span><br><span class=\"line\">-  table-&gt;num_rows = num_rows;</span><br><span class=\"line\">+  table-&gt;root_page_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (pager-&gt;num_pages == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// New database file. Initialize page 0 as leaf node.</span></span><br><span class=\"line\">+    <span class=\"keyword\">void</span>* root_node = get_page(pager, <span class=\"number\">0</span>);</span><br><span class=\"line\">+    initialize_leaf_node(root_node);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> table;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">@@ <span class=\"number\">-228</span>,<span class=\"number\">7</span> +<span class=\"number\">323</span>,<span class=\"number\">7</span> @@ <span class=\"keyword\">void</span> read_input(InputBuffer* input_buffer) &#123;</span><br><span class=\"line\">   input_buffer-&gt;buffer[bytes_read - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-<span class=\"keyword\">void</span> pager_flush(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> size) &#123;</span><br><span class=\"line\">+<span class=\"keyword\">void</span> pager_flush(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tried to flush null page\\n\"</span>);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">@@ <span class=\"number\">-242</span>,<span class=\"number\">7</span> +<span class=\"number\">337</span>,<span class=\"number\">7</span> @@ <span class=\"keyword\">void</span> pager_flush(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> size) &#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">ssize_t</span> bytes_written =</span><br><span class=\"line\">-      write(pager-&gt;file_descriptor, pager-&gt;pages[page_num], size);</span><br><span class=\"line\">+      write(pager-&gt;file_descriptor, pager-&gt;pages[page_num], PAGE_SIZE);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">if</span> (bytes_written == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error writing: %d\\n\"</span>, errno);</span><br><span class=\"line\">@@ <span class=\"number\">-252</span>,<span class=\"number\">29</span> +<span class=\"number\">347</span>,<span class=\"number\">16</span> @@ <span class=\"keyword\">void</span> pager_flush(Pager* pager, <span class=\"keyword\">uint32_t</span> page_num, <span class=\"keyword\">uint32_t</span> size) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">void</span> db_close(Table* table) &#123;</span><br><span class=\"line\">   Pager* pager = table-&gt;pager;</span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_full_pages = table-&gt;num_rows / ROWS_PER_PAGE;</span><br><span class=\"line\"> </span><br><span class=\"line\">-  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; num_full_pages; i++) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; pager-&gt;num_pages; i++) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (pager-&gt;pages[i] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">-    pager_flush(pager, i, PAGE_SIZE);</span><br><span class=\"line\">+    pager_flush(pager, i);</span><br><span class=\"line\">     <span class=\"built_in\">free</span>(pager-&gt;pages[i]);</span><br><span class=\"line\">     pager-&gt;pages[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-  <span class=\"comment\">// There may be a partial page to write to the end of the file</span></span><br><span class=\"line\">-  <span class=\"comment\">// This should not be needed after we switch to a B-tree</span></span><br><span class=\"line\">-  <span class=\"keyword\">uint32_t</span> num_additional_rows = table-&gt;num_rows % ROWS_PER_PAGE;</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (num_additional_rows &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">-    <span class=\"keyword\">uint32_t</span> page_num = num_full_pages;</span><br><span class=\"line\">-    <span class=\"keyword\">if</span> (pager-&gt;pages[page_num] != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">-      pager_flush(pager, page_num, num_additional_rows * ROW_SIZE);</span><br><span class=\"line\">-      <span class=\"built_in\">free</span>(pager-&gt;pages[page_num]);</span><br><span class=\"line\">-      pager-&gt;pages[page_num] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">-    &#125;</span><br><span class=\"line\">-  &#125;</span><br><span class=\"line\">-</span><br><span class=\"line\">   <span class=\"keyword\">int</span> result = close(pager-&gt;file_descriptor);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (result == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error closing db file.\\n\"</span>);</span><br><span class=\"line\">@@ <span class=\"number\">-294</span>,<span class=\"number\">6</span> +<span class=\"number\">376</span>,<span class=\"number\">14</span> @@ MetaCommandResult do_meta_command(InputBuffer* input_buffer, Table* table) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".exit\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     db_close(table);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".btree\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Tree:\\n\"</span>);</span><br><span class=\"line\">+    print_leaf_node(get_page(table-&gt;pager, <span class=\"number\">0</span>));</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> META_COMMAND_SUCCESS;</span><br><span class=\"line\">+  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(input_buffer-&gt;buffer, <span class=\"string\">\".constants\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Constants:\\n\"</span>);</span><br><span class=\"line\">+    print_constants();</span><br><span class=\"line\">+    <span class=\"keyword\">return</span> META_COMMAND_SUCCESS;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">@@ <span class=\"number\">-342</span>,<span class=\"number\">16</span> +<span class=\"number\">432</span>,<span class=\"number\">39</span> @@ PrepareResult prepare_statement(InputBuffer* input_buffer,</span><br><span class=\"line\">   <span class=\"keyword\">return</span> PREPARE_UNRECOGNIZED_STATEMENT;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"keyword\">void</span> leaf_node_insert(Cursor* cursor, <span class=\"keyword\">uint32_t</span> key, Row* value) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(cursor-&gt;table-&gt;pager, cursor-&gt;page_num);</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (num_cells &gt;= LEAF_NODE_MAX_CELLS) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Node full</span></span><br><span class=\"line\">+    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Need to implement splitting a leaf node.\\n\"</span>);</span><br><span class=\"line\">+    <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (cursor-&gt;cell_num &lt; num_cells) &#123;</span><br><span class=\"line\">+    <span class=\"comment\">// Make room for new cell</span></span><br><span class=\"line\">+    <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = num_cells; i &gt; cursor-&gt;cell_num; i--) &#123;</span><br><span class=\"line\">+      <span class=\"built_in\">memcpy</span>(leaf_node_cell(node, i), leaf_node_cell(node, i - <span class=\"number\">1</span>),</span><br><span class=\"line\">+             LEAF_NODE_CELL_SIZE);</span><br><span class=\"line\">+    &#125;</span><br><span class=\"line\">+  &#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">+  *(leaf_node_num_cells(node)) += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  *(leaf_node_key(node, cursor-&gt;cell_num)) = key;</span><br><span class=\"line\">+  serialize_row(value, leaf_node_value(node, cursor-&gt;cell_num));</span><br><span class=\"line\">+&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\"> ExecuteResult execute_insert(Statement* statement, Table* table) &#123;</span><br><span class=\"line\">-  <span class=\"keyword\">if</span> (table-&gt;num_rows &gt;= TABLE_MAX_ROWS) &#123;</span><br><span class=\"line\">+  <span class=\"keyword\">void</span>* node = get_page(table-&gt;pager, table-&gt;root_page_num);</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> ((*leaf_node_num_cells(node) &gt;= LEAF_NODE_MAX_CELLS)) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> EXECUTE_TABLE_FULL;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   Row* row_to_insert = &amp;(statement-&gt;row_to_insert);</span><br><span class=\"line\">   Cursor* cursor = table_end(table);</span><br><span class=\"line\"> </span><br><span class=\"line\">-  serialize_row(row_to_insert, cursor_value(cursor));</span><br><span class=\"line\">-  table-&gt;num_rows += <span class=\"number\">1</span>;</span><br><span class=\"line\">+  leaf_node_insert(cursor, row_to_insert-&gt;id, row_to_insert);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"built_in\">free</span>(cursor);</span><br></pre></td></tr></table></figure>\n<p>specs 改动</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+  it <span class=\"string\">'allows printing out the structure of a one-node btree'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    script = [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>].map <span class=\"keyword\">do</span> <span class=\"params\">|i|</span></span><br><span class=\"line\">+      <span class=\"string\">\"insert <span class=\"subst\">#&#123;i&#125;</span> user<span class=\"subst\">#&#123;i&#125;</span> person<span class=\"subst\">#&#123;i&#125;</span>@example.com\"</span></span><br><span class=\"line\">+    <span class=\"keyword\">end</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".btree\"</span></span><br><span class=\"line\">+    script &lt;&lt; <span class=\"string\">\".exit\"</span></span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Executed.\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Tree:\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"leaf (size 3)\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 0 : 3\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 1 : 1\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"  - 2 : 2\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span></span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\">+</span><br><span class=\"line\">+  it <span class=\"string\">'prints constants'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">+    script = [</span><br><span class=\"line\">+      <span class=\"string\">\".constants\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\".exit\"</span>,</span><br><span class=\"line\">+    ]</span><br><span class=\"line\">+    result = run_script(script)</span><br><span class=\"line\">+</span><br><span class=\"line\">+    expect(result).to match_array([</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; Constants:\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"ROW_SIZE: 293\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"COMMON_NODE_HEADER_SIZE: 6\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_HEADER_SIZE: 10\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_CELL_SIZE: 297\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_SPACE_FOR_CELLS: 4086\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"LEAF_NODE_MAX_CELLS: 13\"</span>,</span><br><span class=\"line\">+      <span class=\"string\">\"db &gt; \"</span>,</span><br><span class=\"line\">+    ])</span><br><span class=\"line\">+  <span class=\"keyword\">end</span></span><br><span class=\"line\"> <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Let's Build a Simple Database","date":"2019-01-26T08:11:20.000Z","_content":"\n# Let's Build a Simple Database\n\n原文: https://cstack.github.io/db_tutorial/\n\n从 C 重新开始写 Sqlite\n\n## 数据库是如何工作的?\n\n- 在内存和磁盘上, 数据保存的格式是啥?\n- 什么时候会从内存中移动到硬盘上?\n- 为什么每个表仅有一个主键呢?\n- 事务回滚是如何工作的呢?\n- 索引是如何格式化? FIXME(Jx)  (How are indexes formatted?)\n- 啥时候全表扫描会发生呢?\n- 保存前的预准备格式是啥样的呢? FIXME(Jx) (What format is a prepared statement saved in?)\n\n总而言之, 数据库是如何工作的呢?\n\n为了理解这个, 我将会用 C 重新构建一个 Sqlite , 并且会记录其过程.\n\n## 目录\n\n- Part 1 - 介绍和设置 REPL\n- Part 2 - 世上最简单的 SQL 编译器和虚拟机\n- Part 3 - 一个在内存, 仅追加的 单表数据库\n- Part 4 - 第一个单元测试类(和一些Bugs)\n- Part 5 - 持久化到硬盘\n- Part 6 - 游标的抽象化\n- Part 7 - 介绍 B 树\n- Part 8 - B 树叶子接口格式化\n- Part 9 - 二分查找和重复键\n- Part 10 - 拆分叶子节点\n- Part 11 - 递归搜索 B 树\n- Part 12 - 扫描多层级的 B 树\n- Part 13 - 拆分后更新父节点\n\n> “What I cannot create, I do not understand.” – [Richard Feynman](https://en.m.wikiquote.org/wiki/Richard_Feynman)\n\n### Sqlite 架构图\n![Sqlite 架构图](https://cstack.github.io/db_tutorial/assets/images/arch2.gif)\n\nSqlite 架构图: https://www.sqlite.org/arch.html\n\n","source":"_posts/build_own_x/data_base/build_simple_database/Readme_Index.md","raw":"---\ntitle: Let's Build a Simple Database\ndate: 2019-01-26 16:11:20\ncategories:\n- build-own-x\ntags:\n- database\n- db原理\n---\n\n# Let's Build a Simple Database\n\n原文: https://cstack.github.io/db_tutorial/\n\n从 C 重新开始写 Sqlite\n\n## 数据库是如何工作的?\n\n- 在内存和磁盘上, 数据保存的格式是啥?\n- 什么时候会从内存中移动到硬盘上?\n- 为什么每个表仅有一个主键呢?\n- 事务回滚是如何工作的呢?\n- 索引是如何格式化? FIXME(Jx)  (How are indexes formatted?)\n- 啥时候全表扫描会发生呢?\n- 保存前的预准备格式是啥样的呢? FIXME(Jx) (What format is a prepared statement saved in?)\n\n总而言之, 数据库是如何工作的呢?\n\n为了理解这个, 我将会用 C 重新构建一个 Sqlite , 并且会记录其过程.\n\n## 目录\n\n- Part 1 - 介绍和设置 REPL\n- Part 2 - 世上最简单的 SQL 编译器和虚拟机\n- Part 3 - 一个在内存, 仅追加的 单表数据库\n- Part 4 - 第一个单元测试类(和一些Bugs)\n- Part 5 - 持久化到硬盘\n- Part 6 - 游标的抽象化\n- Part 7 - 介绍 B 树\n- Part 8 - B 树叶子接口格式化\n- Part 9 - 二分查找和重复键\n- Part 10 - 拆分叶子节点\n- Part 11 - 递归搜索 B 树\n- Part 12 - 扫描多层级的 B 树\n- Part 13 - 拆分后更新父节点\n\n> “What I cannot create, I do not understand.” – [Richard Feynman](https://en.m.wikiquote.org/wiki/Richard_Feynman)\n\n### Sqlite 架构图\n![Sqlite 架构图](https://cstack.github.io/db_tutorial/assets/images/arch2.gif)\n\nSqlite 架构图: https://www.sqlite.org/arch.html\n\n","slug":"build_own_x/data_base/build_simple_database/Readme_Index","published":1,"updated":"2019-01-28T01:37:45.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgz8005j8seozg5o361g","content":"<h1 id=\"Let’s-Build-a-Simple-Database\"><a href=\"#Let’s-Build-a-Simple-Database\" class=\"headerlink\" title=\"Let’s Build a Simple Database\"></a>Let’s Build a Simple Database</h1><p>原文: <a href=\"https://cstack.github.io/db_tutorial/\" target=\"_blank\" rel=\"noopener\">https://cstack.github.io/db_tutorial/</a></p>\n<p>从 C 重新开始写 Sqlite</p>\n<h2 id=\"数据库是如何工作的\"><a href=\"#数据库是如何工作的\" class=\"headerlink\" title=\"数据库是如何工作的?\"></a>数据库是如何工作的?</h2><ul>\n<li>在内存和磁盘上, 数据保存的格式是啥?</li>\n<li>什么时候会从内存中移动到硬盘上?</li>\n<li>为什么每个表仅有一个主键呢?</li>\n<li>事务回滚是如何工作的呢?</li>\n<li>索引是如何格式化? FIXME(Jx)  (How are indexes formatted?)</li>\n<li>啥时候全表扫描会发生呢?</li>\n<li>保存前的预准备格式是啥样的呢? FIXME(Jx) (What format is a prepared statement saved in?)</li>\n</ul>\n<p>总而言之, 数据库是如何工作的呢?</p>\n<p>为了理解这个, 我将会用 C 重新构建一个 Sqlite , 并且会记录其过程.</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>Part 1 - 介绍和设置 REPL</li>\n<li>Part 2 - 世上最简单的 SQL 编译器和虚拟机</li>\n<li>Part 3 - 一个在内存, 仅追加的 单表数据库</li>\n<li>Part 4 - 第一个单元测试类(和一些Bugs)</li>\n<li>Part 5 - 持久化到硬盘</li>\n<li>Part 6 - 游标的抽象化</li>\n<li>Part 7 - 介绍 B 树</li>\n<li>Part 8 - B 树叶子接口格式化</li>\n<li>Part 9 - 二分查找和重复键</li>\n<li>Part 10 - 拆分叶子节点</li>\n<li>Part 11 - 递归搜索 B 树</li>\n<li>Part 12 - 扫描多层级的 B 树</li>\n<li>Part 13 - 拆分后更新父节点</li>\n</ul>\n<blockquote>\n<p>“What I cannot create, I do not understand.” – <a href=\"https://en.m.wikiquote.org/wiki/Richard_Feynman\" target=\"_blank\" rel=\"noopener\">Richard Feynman</a></p>\n</blockquote>\n<h3 id=\"Sqlite-架构图\"><a href=\"#Sqlite-架构图\" class=\"headerlink\" title=\"Sqlite 架构图\"></a>Sqlite 架构图</h3><p><img src=\"https://cstack.github.io/db_tutorial/assets/images/arch2.gif\" alt=\"Sqlite 架构图\"></p>\n<p>Sqlite 架构图: <a href=\"https://www.sqlite.org/arch.html\" target=\"_blank\" rel=\"noopener\">https://www.sqlite.org/arch.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Let’s-Build-a-Simple-Database\"><a href=\"#Let’s-Build-a-Simple-Database\" class=\"headerlink\" title=\"Let’s Build a Simple Database\"></a>Let’s Build a Simple Database</h1><p>原文: <a href=\"https://cstack.github.io/db_tutorial/\" target=\"_blank\" rel=\"noopener\">https://cstack.github.io/db_tutorial/</a></p>\n<p>从 C 重新开始写 Sqlite</p>\n<h2 id=\"数据库是如何工作的\"><a href=\"#数据库是如何工作的\" class=\"headerlink\" title=\"数据库是如何工作的?\"></a>数据库是如何工作的?</h2><ul>\n<li>在内存和磁盘上, 数据保存的格式是啥?</li>\n<li>什么时候会从内存中移动到硬盘上?</li>\n<li>为什么每个表仅有一个主键呢?</li>\n<li>事务回滚是如何工作的呢?</li>\n<li>索引是如何格式化? FIXME(Jx)  (How are indexes formatted?)</li>\n<li>啥时候全表扫描会发生呢?</li>\n<li>保存前的预准备格式是啥样的呢? FIXME(Jx) (What format is a prepared statement saved in?)</li>\n</ul>\n<p>总而言之, 数据库是如何工作的呢?</p>\n<p>为了理解这个, 我将会用 C 重新构建一个 Sqlite , 并且会记录其过程.</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>Part 1 - 介绍和设置 REPL</li>\n<li>Part 2 - 世上最简单的 SQL 编译器和虚拟机</li>\n<li>Part 3 - 一个在内存, 仅追加的 单表数据库</li>\n<li>Part 4 - 第一个单元测试类(和一些Bugs)</li>\n<li>Part 5 - 持久化到硬盘</li>\n<li>Part 6 - 游标的抽象化</li>\n<li>Part 7 - 介绍 B 树</li>\n<li>Part 8 - B 树叶子接口格式化</li>\n<li>Part 9 - 二分查找和重复键</li>\n<li>Part 10 - 拆分叶子节点</li>\n<li>Part 11 - 递归搜索 B 树</li>\n<li>Part 12 - 扫描多层级的 B 树</li>\n<li>Part 13 - 拆分后更新父节点</li>\n</ul>\n<blockquote>\n<p>“What I cannot create, I do not understand.” – <a href=\"https://en.m.wikiquote.org/wiki/Richard_Feynman\" target=\"_blank\" rel=\"noopener\">Richard Feynman</a></p>\n</blockquote>\n<h3 id=\"Sqlite-架构图\"><a href=\"#Sqlite-架构图\" class=\"headerlink\" title=\"Sqlite 架构图\"></a>Sqlite 架构图</h3><p><img src=\"https://cstack.github.io/db_tutorial/assets/images/arch2.gif\" alt=\"Sqlite 架构图\"></p>\n<p>Sqlite 架构图: <a href=\"https://www.sqlite.org/arch.html\" target=\"_blank\" rel=\"noopener\">https://www.sqlite.org/arch.html</a></p>\n"},{"title":"Build a Simple Database - 模块功能概述","date":"2018-05-17T11:59:57.000Z","_content":"\n![https://cstack.github.io/db_tutorial/assets/images/arch2.gif](https://cstack.github.io/db_tutorial/assets/images/arch2.gif)\n\nsqlite architecture (https://www.sqlite.org/arch.html)\n\n小结:\n\ncore: 主要的构成模块: interface, sqlCommand Processor, Virtual Machine\n\nSQL Compiler: Tokenizer, Parser, Code Generator\n\nBackend: B-Tree, Pager, OS Interface\n\n\n\n\n\n翻译:(https://www.sqlite.org/arch.html)\n\n### 概览\n\nSQLite的工作原理是将SQL文本编译为[字节码](https://www.sqlite.org/opcode.html)，然后使用虚拟机运行该字节码。\n\nsqlite3_prepare_v2（）和相关接口充当用于将SQL文本转换为字节码的编译器。 sqlite3_stmt对象是用于实现单个SQL语句的单个字节码程序的容器。 sqlite3_step（）接口将一个字节码程序传递给虚拟机，并运行该程序直到它完成，或者形成一行结果返回，或者发生致命错误或中断。\n\n\n\n### Interface\n\n许多C语言接口可以在源文件main.c，legacy.c和vdbeapi.c中找到，尽管一些例程分散在其他文件中，在这些文件中它们可以访问具有文件范围的数据结构。sqlite3_get_table（）例程在table.c中实现。 sqlite3_mprintf（）例程在printf.c中找到。 sqlite3_complete（）接口位于tokenize.c中。 TCL接口由tclsqlite.c实现。\n\n为避免名称冲突，SQLite库中的所有外部符号都以前缀sqlite3开头。那些用于外部使用的符号（换句话说，那些构成SQLite API的符号）会添加一个下划线，因此以sqlite3_开头。扩展API有时会在下划线之前添加扩展名;例如：sqlite3rbu_或sqlite3session_。\n\n\n\n### Tokenizer\n\n当包含SQL语句的字符串要被评估时，它首先被发送到标记器。标记器将SQL文本分解为标记并将这些标记逐个传递给解析器。标记器是在文件tokenize.c中手动编码的\n\n请注意，在此设计中，标记器调用解析器。熟悉YACC和BISON的人可能习惯于以相反的方式做事 - 让解析器调用标记器。不过，令牌分析器调用分析器会更好，因为它可以做成线程安全的并且运行速度更快。\n\n\n\n### Parser\n\n解析器根据其上下文为令牌分配含义。 SQLite的解析器是使用Lemon解析器生成器生成的。Lemon和YACC / BISON一样工作，但它使用了不太容易出错的不同输入语法。Lemon还生成一个可重入且线程安全的解析器。Lemon定义了非终端析构函数的概念，以便在遇到语法错误时不会泄漏内存。驱动Lemon并定义SQLite可理解的SQL语言的语法文件可在parse.y中找到。\n\n因为Lemon是一个通常在开发机器上找不到的程序，Lemon的完整源代码（只有一个C文件）包含在SQLite分发的“tool”子目录中。\n\n\n\n### Code Generator\n\n解析器将令牌组装成解析树之后，代码生成器运行以分析解析器树并生成执行SQL语句工作的字节码。准备好的语句对象是这个字节码的容器。代码生成器中有许多文件，其中包括：attach.c，auth.c，build.c，delete.c，expr.c，insert.c，pragma.c，select.c，trigger.c，update.c ，vacuum.c，where.c，wherecode.c和whereexpr.c。在这些文件中，大部分严重的魔法都是在这里发生的。 expr.c处理表达式的代码生成。其中* .c处理SELECT，UPDATE和DELETE语句中WHERE子句的代码生成。文件attach.c，delete.c，insert.c，select.c，trigger.c update.c和vacuum.c处理具有相同名称的SQL语句的代码生成。 （这些文件中的每一个都根据需要调用expr.c和where.c中的例程。）所有其他SQL语句都由build.c编码。 auth.c文件实现sqlite3_set_authorizer（）的功能\n\n代码生成器，特别是* .c和select.c中的逻辑有时称为查询规划器。对于任何特定的SQL语句，可能有数百，数千或数百万种不同的算法来计算答案。查询计划员是一个AI，致力于从数百万个选择中选择最佳算法。\n\n\n\n### Bytecode Engine\n\n由代码生成器创建的字节码程序由虚拟机运行。\n\n虚拟机本身完全包含在单个源文件vdbe.c中。 vdbe.h头文件定义了虚拟机和SQLite库的其余部分之间的接口，vdbeInt.h定义了虚拟机本身专用的结构和接口。其他各种vdbe * .c文件都是虚拟机的助手。 vdbeaux.c文件包含虚拟机使用的实用程序以及库的其余部分用于构建VM程序的接口模块。 vdbeapi.c文件包含虚拟机的外部接口，如sqlite3_bind_int（）和sqlite3_step（）。各个值（字符串，整数，浮点数和BLOB）存储在由vdbemem.c实现的名为“Mem”的内部对象中。\n\nSQLite使用C语言例程的回调来实现SQL函数。即使内置的SQL函数也是这样实现的。大多数内置的SQL函数（例如：abs（），count（），substr（）等）都可以在func.c源文件中找到。日期和时间转换函数可在date.c中找到。一些函数如coalesce（）和typeof（）直接由代码生成器实现为字节码。\n\n\n\n### B-Tree\n\nSQLite数据库使用btree.c源文件中的B-tree实现在磁盘上进行维护。数据库中的每个表和索引都使用单独的B树。所有B树都存储在同一个磁盘文件中。文件格式细节稳定且定义明确，并保证向前兼容。\n\nB树子系统和SQLite库的其余部分的接口由头文件btree.h定义。\n\n\n\n### Page Cache\n\nB树模块以固定大小的页面从磁盘请求信息。默认的page_size是4096字节，但可以是512到65536字节之间的任意两个幂。页面缓存负责读取，写入和缓存这些页面。页面缓存还提供了回滚和原子提交抽象，并负责锁定数据库文件。 B树驱动程序请求页面缓存中的特定页面，并在需要修改页面或提交或回滚更改时通知页面缓存。页面缓存处理了确保请求被快速，安全和有效地处理的所有细节.\n\n主页面缓存实现在pager.c文件中。 WAL模式逻辑位于单独的wal.c中。内存中缓存由pcache.c和pcache1.c文件实现。页面缓存子系统和SQLite其余部分之间的接口由头文件pager.h定义。\n\n\n\n###OS Interface\n\n为了提供跨操作系统的可移植性，SQLite使用称为VFS的抽象对象。每个VFS都提供了打开，读取，写入和关闭磁盘上的文件以及执行其他特定于操作系统的任务（如查找当前时间或获取随机性以初始化内置伪随机数生成器的方法）。 SQLite当前为unix（在os_unix.c文件中）和Windows（在os_win.c文件中）提供了VFSes。\n\n\n\n### Utilities\n\n内存分配，无格式字符串比较例程，便携式文本到数字转换例程以及其他实用程序位于util.c中。解析器使用的符号表由散列表中的哈希表维护。 utf.c源文件包含Unicode转换子例程。 SQLite在printf.c中有它自己的printf（）（有一些扩展）的私有实现，在random.c中有它自己的伪随机数生成器（PRNG）。\n\n\n\n\n\n### 总结:\n\nsqlite(数据库)将数据持久化,并将其做到了极致吧.(引人深思)\n\n整体结构, 主要分成三部分: 1. core, 2. SQL Compiler, 3. Backend\n\n其主要流程也相当清晰:\n\n   interface -> sqlCommand Processor -> Virtual Machine\n\n","source":"_posts/build_own_x/data_base/build_simple_database/模块功能概述.md","raw":"---\ntitle: Build a Simple Database - 模块功能概述\ndate: 2018-05-17 19:59:57\ncategories:\n- build-own-x\ntags:\n- database\n- db原理\n---\n\n![https://cstack.github.io/db_tutorial/assets/images/arch2.gif](https://cstack.github.io/db_tutorial/assets/images/arch2.gif)\n\nsqlite architecture (https://www.sqlite.org/arch.html)\n\n小结:\n\ncore: 主要的构成模块: interface, sqlCommand Processor, Virtual Machine\n\nSQL Compiler: Tokenizer, Parser, Code Generator\n\nBackend: B-Tree, Pager, OS Interface\n\n\n\n\n\n翻译:(https://www.sqlite.org/arch.html)\n\n### 概览\n\nSQLite的工作原理是将SQL文本编译为[字节码](https://www.sqlite.org/opcode.html)，然后使用虚拟机运行该字节码。\n\nsqlite3_prepare_v2（）和相关接口充当用于将SQL文本转换为字节码的编译器。 sqlite3_stmt对象是用于实现单个SQL语句的单个字节码程序的容器。 sqlite3_step（）接口将一个字节码程序传递给虚拟机，并运行该程序直到它完成，或者形成一行结果返回，或者发生致命错误或中断。\n\n\n\n### Interface\n\n许多C语言接口可以在源文件main.c，legacy.c和vdbeapi.c中找到，尽管一些例程分散在其他文件中，在这些文件中它们可以访问具有文件范围的数据结构。sqlite3_get_table（）例程在table.c中实现。 sqlite3_mprintf（）例程在printf.c中找到。 sqlite3_complete（）接口位于tokenize.c中。 TCL接口由tclsqlite.c实现。\n\n为避免名称冲突，SQLite库中的所有外部符号都以前缀sqlite3开头。那些用于外部使用的符号（换句话说，那些构成SQLite API的符号）会添加一个下划线，因此以sqlite3_开头。扩展API有时会在下划线之前添加扩展名;例如：sqlite3rbu_或sqlite3session_。\n\n\n\n### Tokenizer\n\n当包含SQL语句的字符串要被评估时，它首先被发送到标记器。标记器将SQL文本分解为标记并将这些标记逐个传递给解析器。标记器是在文件tokenize.c中手动编码的\n\n请注意，在此设计中，标记器调用解析器。熟悉YACC和BISON的人可能习惯于以相反的方式做事 - 让解析器调用标记器。不过，令牌分析器调用分析器会更好，因为它可以做成线程安全的并且运行速度更快。\n\n\n\n### Parser\n\n解析器根据其上下文为令牌分配含义。 SQLite的解析器是使用Lemon解析器生成器生成的。Lemon和YACC / BISON一样工作，但它使用了不太容易出错的不同输入语法。Lemon还生成一个可重入且线程安全的解析器。Lemon定义了非终端析构函数的概念，以便在遇到语法错误时不会泄漏内存。驱动Lemon并定义SQLite可理解的SQL语言的语法文件可在parse.y中找到。\n\n因为Lemon是一个通常在开发机器上找不到的程序，Lemon的完整源代码（只有一个C文件）包含在SQLite分发的“tool”子目录中。\n\n\n\n### Code Generator\n\n解析器将令牌组装成解析树之后，代码生成器运行以分析解析器树并生成执行SQL语句工作的字节码。准备好的语句对象是这个字节码的容器。代码生成器中有许多文件，其中包括：attach.c，auth.c，build.c，delete.c，expr.c，insert.c，pragma.c，select.c，trigger.c，update.c ，vacuum.c，where.c，wherecode.c和whereexpr.c。在这些文件中，大部分严重的魔法都是在这里发生的。 expr.c处理表达式的代码生成。其中* .c处理SELECT，UPDATE和DELETE语句中WHERE子句的代码生成。文件attach.c，delete.c，insert.c，select.c，trigger.c update.c和vacuum.c处理具有相同名称的SQL语句的代码生成。 （这些文件中的每一个都根据需要调用expr.c和where.c中的例程。）所有其他SQL语句都由build.c编码。 auth.c文件实现sqlite3_set_authorizer（）的功能\n\n代码生成器，特别是* .c和select.c中的逻辑有时称为查询规划器。对于任何特定的SQL语句，可能有数百，数千或数百万种不同的算法来计算答案。查询计划员是一个AI，致力于从数百万个选择中选择最佳算法。\n\n\n\n### Bytecode Engine\n\n由代码生成器创建的字节码程序由虚拟机运行。\n\n虚拟机本身完全包含在单个源文件vdbe.c中。 vdbe.h头文件定义了虚拟机和SQLite库的其余部分之间的接口，vdbeInt.h定义了虚拟机本身专用的结构和接口。其他各种vdbe * .c文件都是虚拟机的助手。 vdbeaux.c文件包含虚拟机使用的实用程序以及库的其余部分用于构建VM程序的接口模块。 vdbeapi.c文件包含虚拟机的外部接口，如sqlite3_bind_int（）和sqlite3_step（）。各个值（字符串，整数，浮点数和BLOB）存储在由vdbemem.c实现的名为“Mem”的内部对象中。\n\nSQLite使用C语言例程的回调来实现SQL函数。即使内置的SQL函数也是这样实现的。大多数内置的SQL函数（例如：abs（），count（），substr（）等）都可以在func.c源文件中找到。日期和时间转换函数可在date.c中找到。一些函数如coalesce（）和typeof（）直接由代码生成器实现为字节码。\n\n\n\n### B-Tree\n\nSQLite数据库使用btree.c源文件中的B-tree实现在磁盘上进行维护。数据库中的每个表和索引都使用单独的B树。所有B树都存储在同一个磁盘文件中。文件格式细节稳定且定义明确，并保证向前兼容。\n\nB树子系统和SQLite库的其余部分的接口由头文件btree.h定义。\n\n\n\n### Page Cache\n\nB树模块以固定大小的页面从磁盘请求信息。默认的page_size是4096字节，但可以是512到65536字节之间的任意两个幂。页面缓存负责读取，写入和缓存这些页面。页面缓存还提供了回滚和原子提交抽象，并负责锁定数据库文件。 B树驱动程序请求页面缓存中的特定页面，并在需要修改页面或提交或回滚更改时通知页面缓存。页面缓存处理了确保请求被快速，安全和有效地处理的所有细节.\n\n主页面缓存实现在pager.c文件中。 WAL模式逻辑位于单独的wal.c中。内存中缓存由pcache.c和pcache1.c文件实现。页面缓存子系统和SQLite其余部分之间的接口由头文件pager.h定义。\n\n\n\n###OS Interface\n\n为了提供跨操作系统的可移植性，SQLite使用称为VFS的抽象对象。每个VFS都提供了打开，读取，写入和关闭磁盘上的文件以及执行其他特定于操作系统的任务（如查找当前时间或获取随机性以初始化内置伪随机数生成器的方法）。 SQLite当前为unix（在os_unix.c文件中）和Windows（在os_win.c文件中）提供了VFSes。\n\n\n\n### Utilities\n\n内存分配，无格式字符串比较例程，便携式文本到数字转换例程以及其他实用程序位于util.c中。解析器使用的符号表由散列表中的哈希表维护。 utf.c源文件包含Unicode转换子例程。 SQLite在printf.c中有它自己的printf（）（有一些扩展）的私有实现，在random.c中有它自己的伪随机数生成器（PRNG）。\n\n\n\n\n\n### 总结:\n\nsqlite(数据库)将数据持久化,并将其做到了极致吧.(引人深思)\n\n整体结构, 主要分成三部分: 1. core, 2. SQL Compiler, 3. Backend\n\n其主要流程也相当清晰:\n\n   interface -> sqlCommand Processor -> Virtual Machine\n\n","slug":"build_own_x/data_base/build_simple_database/模块功能概述","published":1,"updated":"2018-08-29T13:39:43.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgza005n8seosu3dajic","content":"<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/arch2.gif\" alt=\"https://cstack.github.io/db_tutorial/assets/images/arch2.gif\"></p>\n<p>sqlite architecture (<a href=\"https://www.sqlite.org/arch.html\" target=\"_blank\" rel=\"noopener\">https://www.sqlite.org/arch.html</a>)</p>\n<p>小结:</p>\n<p>core: 主要的构成模块: interface, sqlCommand Processor, Virtual Machine</p>\n<p>SQL Compiler: Tokenizer, Parser, Code Generator</p>\n<p>Backend: B-Tree, Pager, OS Interface</p>\n<p>翻译:(<a href=\"https://www.sqlite.org/arch.html\" target=\"_blank\" rel=\"noopener\">https://www.sqlite.org/arch.html</a>)</p>\n<h3 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h3><p>SQLite的工作原理是将SQL文本编译为<a href=\"https://www.sqlite.org/opcode.html\" target=\"_blank\" rel=\"noopener\">字节码</a>，然后使用虚拟机运行该字节码。</p>\n<p>sqlite3_prepare_v2（）和相关接口充当用于将SQL文本转换为字节码的编译器。 sqlite3_stmt对象是用于实现单个SQL语句的单个字节码程序的容器。 sqlite3_step（）接口将一个字节码程序传递给虚拟机，并运行该程序直到它完成，或者形成一行结果返回，或者发生致命错误或中断。</p>\n<h3 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h3><p>许多C语言接口可以在源文件main.c，legacy.c和vdbeapi.c中找到，尽管一些例程分散在其他文件中，在这些文件中它们可以访问具有文件范围的数据结构。sqlite3_get_table（）例程在table.c中实现。 sqlite3_mprintf（）例程在printf.c中找到。 sqlite3_complete（）接口位于tokenize.c中。 TCL接口由tclsqlite.c实现。</p>\n<p>为避免名称冲突，SQLite库中的所有外部符号都以前缀sqlite3开头。那些用于外部使用的符号（换句话说，那些构成SQLite API的符号）会添加一个下划线，因此以sqlite3_开头。扩展API有时会在下划线之前添加扩展名;例如：sqlite3rbu_或sqlite3session_。</p>\n<h3 id=\"Tokenizer\"><a href=\"#Tokenizer\" class=\"headerlink\" title=\"Tokenizer\"></a>Tokenizer</h3><p>当包含SQL语句的字符串要被评估时，它首先被发送到标记器。标记器将SQL文本分解为标记并将这些标记逐个传递给解析器。标记器是在文件tokenize.c中手动编码的</p>\n<p>请注意，在此设计中，标记器调用解析器。熟悉YACC和BISON的人可能习惯于以相反的方式做事 - 让解析器调用标记器。不过，令牌分析器调用分析器会更好，因为它可以做成线程安全的并且运行速度更快。</p>\n<h3 id=\"Parser\"><a href=\"#Parser\" class=\"headerlink\" title=\"Parser\"></a>Parser</h3><p>解析器根据其上下文为令牌分配含义。 SQLite的解析器是使用Lemon解析器生成器生成的。Lemon和YACC / BISON一样工作，但它使用了不太容易出错的不同输入语法。Lemon还生成一个可重入且线程安全的解析器。Lemon定义了非终端析构函数的概念，以便在遇到语法错误时不会泄漏内存。驱动Lemon并定义SQLite可理解的SQL语言的语法文件可在parse.y中找到。</p>\n<p>因为Lemon是一个通常在开发机器上找不到的程序，Lemon的完整源代码（只有一个C文件）包含在SQLite分发的“tool”子目录中。</p>\n<h3 id=\"Code-Generator\"><a href=\"#Code-Generator\" class=\"headerlink\" title=\"Code Generator\"></a>Code Generator</h3><p>解析器将令牌组装成解析树之后，代码生成器运行以分析解析器树并生成执行SQL语句工作的字节码。准备好的语句对象是这个字节码的容器。代码生成器中有许多文件，其中包括：attach.c，auth.c，build.c，delete.c，expr.c，insert.c，pragma.c，select.c，trigger.c，update.c ，vacuum.c，where.c，wherecode.c和whereexpr.c。在这些文件中，大部分严重的魔法都是在这里发生的。 expr.c处理表达式的代码生成。其中* .c处理SELECT，UPDATE和DELETE语句中WHERE子句的代码生成。文件attach.c，delete.c，insert.c，select.c，trigger.c update.c和vacuum.c处理具有相同名称的SQL语句的代码生成。 （这些文件中的每一个都根据需要调用expr.c和where.c中的例程。）所有其他SQL语句都由build.c编码。 auth.c文件实现sqlite3_set_authorizer（）的功能</p>\n<p>代码生成器，特别是* .c和select.c中的逻辑有时称为查询规划器。对于任何特定的SQL语句，可能有数百，数千或数百万种不同的算法来计算答案。查询计划员是一个AI，致力于从数百万个选择中选择最佳算法。</p>\n<h3 id=\"Bytecode-Engine\"><a href=\"#Bytecode-Engine\" class=\"headerlink\" title=\"Bytecode Engine\"></a>Bytecode Engine</h3><p>由代码生成器创建的字节码程序由虚拟机运行。</p>\n<p>虚拟机本身完全包含在单个源文件vdbe.c中。 vdbe.h头文件定义了虚拟机和SQLite库的其余部分之间的接口，vdbeInt.h定义了虚拟机本身专用的结构和接口。其他各种vdbe * .c文件都是虚拟机的助手。 vdbeaux.c文件包含虚拟机使用的实用程序以及库的其余部分用于构建VM程序的接口模块。 vdbeapi.c文件包含虚拟机的外部接口，如sqlite3_bind_int（）和sqlite3_step（）。各个值（字符串，整数，浮点数和BLOB）存储在由vdbemem.c实现的名为“Mem”的内部对象中。</p>\n<p>SQLite使用C语言例程的回调来实现SQL函数。即使内置的SQL函数也是这样实现的。大多数内置的SQL函数（例如：abs（），count（），substr（）等）都可以在func.c源文件中找到。日期和时间转换函数可在date.c中找到。一些函数如coalesce（）和typeof（）直接由代码生成器实现为字节码。</p>\n<h3 id=\"B-Tree\"><a href=\"#B-Tree\" class=\"headerlink\" title=\"B-Tree\"></a>B-Tree</h3><p>SQLite数据库使用btree.c源文件中的B-tree实现在磁盘上进行维护。数据库中的每个表和索引都使用单独的B树。所有B树都存储在同一个磁盘文件中。文件格式细节稳定且定义明确，并保证向前兼容。</p>\n<p>B树子系统和SQLite库的其余部分的接口由头文件btree.h定义。</p>\n<h3 id=\"Page-Cache\"><a href=\"#Page-Cache\" class=\"headerlink\" title=\"Page Cache\"></a>Page Cache</h3><p>B树模块以固定大小的页面从磁盘请求信息。默认的page_size是4096字节，但可以是512到65536字节之间的任意两个幂。页面缓存负责读取，写入和缓存这些页面。页面缓存还提供了回滚和原子提交抽象，并负责锁定数据库文件。 B树驱动程序请求页面缓存中的特定页面，并在需要修改页面或提交或回滚更改时通知页面缓存。页面缓存处理了确保请求被快速，安全和有效地处理的所有细节.</p>\n<p>主页面缓存实现在pager.c文件中。 WAL模式逻辑位于单独的wal.c中。内存中缓存由pcache.c和pcache1.c文件实现。页面缓存子系统和SQLite其余部分之间的接口由头文件pager.h定义。</p>\n<p>###OS Interface</p>\n<p>为了提供跨操作系统的可移植性，SQLite使用称为VFS的抽象对象。每个VFS都提供了打开，读取，写入和关闭磁盘上的文件以及执行其他特定于操作系统的任务（如查找当前时间或获取随机性以初始化内置伪随机数生成器的方法）。 SQLite当前为unix（在os_unix.c文件中）和Windows（在os_win.c文件中）提供了VFSes。</p>\n<h3 id=\"Utilities\"><a href=\"#Utilities\" class=\"headerlink\" title=\"Utilities\"></a>Utilities</h3><p>内存分配，无格式字符串比较例程，便携式文本到数字转换例程以及其他实用程序位于util.c中。解析器使用的符号表由散列表中的哈希表维护。 utf.c源文件包含Unicode转换子例程。 SQLite在printf.c中有它自己的printf（）（有一些扩展）的私有实现，在random.c中有它自己的伪随机数生成器（PRNG）。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h3><p>sqlite(数据库)将数据持久化,并将其做到了极致吧.(引人深思)</p>\n<p>整体结构, 主要分成三部分: 1. core, 2. SQL Compiler, 3. Backend</p>\n<p>其主要流程也相当清晰:</p>\n<p>   interface -&gt; sqlCommand Processor -&gt; Virtual Machine</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://cstack.github.io/db_tutorial/assets/images/arch2.gif\" alt=\"https://cstack.github.io/db_tutorial/assets/images/arch2.gif\"></p>\n<p>sqlite architecture (<a href=\"https://www.sqlite.org/arch.html\" target=\"_blank\" rel=\"noopener\">https://www.sqlite.org/arch.html</a>)</p>\n<p>小结:</p>\n<p>core: 主要的构成模块: interface, sqlCommand Processor, Virtual Machine</p>\n<p>SQL Compiler: Tokenizer, Parser, Code Generator</p>\n<p>Backend: B-Tree, Pager, OS Interface</p>\n<p>翻译:(<a href=\"https://www.sqlite.org/arch.html\" target=\"_blank\" rel=\"noopener\">https://www.sqlite.org/arch.html</a>)</p>\n<h3 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h3><p>SQLite的工作原理是将SQL文本编译为<a href=\"https://www.sqlite.org/opcode.html\" target=\"_blank\" rel=\"noopener\">字节码</a>，然后使用虚拟机运行该字节码。</p>\n<p>sqlite3_prepare_v2（）和相关接口充当用于将SQL文本转换为字节码的编译器。 sqlite3_stmt对象是用于实现单个SQL语句的单个字节码程序的容器。 sqlite3_step（）接口将一个字节码程序传递给虚拟机，并运行该程序直到它完成，或者形成一行结果返回，或者发生致命错误或中断。</p>\n<h3 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h3><p>许多C语言接口可以在源文件main.c，legacy.c和vdbeapi.c中找到，尽管一些例程分散在其他文件中，在这些文件中它们可以访问具有文件范围的数据结构。sqlite3_get_table（）例程在table.c中实现。 sqlite3_mprintf（）例程在printf.c中找到。 sqlite3_complete（）接口位于tokenize.c中。 TCL接口由tclsqlite.c实现。</p>\n<p>为避免名称冲突，SQLite库中的所有外部符号都以前缀sqlite3开头。那些用于外部使用的符号（换句话说，那些构成SQLite API的符号）会添加一个下划线，因此以sqlite3_开头。扩展API有时会在下划线之前添加扩展名;例如：sqlite3rbu_或sqlite3session_。</p>\n<h3 id=\"Tokenizer\"><a href=\"#Tokenizer\" class=\"headerlink\" title=\"Tokenizer\"></a>Tokenizer</h3><p>当包含SQL语句的字符串要被评估时，它首先被发送到标记器。标记器将SQL文本分解为标记并将这些标记逐个传递给解析器。标记器是在文件tokenize.c中手动编码的</p>\n<p>请注意，在此设计中，标记器调用解析器。熟悉YACC和BISON的人可能习惯于以相反的方式做事 - 让解析器调用标记器。不过，令牌分析器调用分析器会更好，因为它可以做成线程安全的并且运行速度更快。</p>\n<h3 id=\"Parser\"><a href=\"#Parser\" class=\"headerlink\" title=\"Parser\"></a>Parser</h3><p>解析器根据其上下文为令牌分配含义。 SQLite的解析器是使用Lemon解析器生成器生成的。Lemon和YACC / BISON一样工作，但它使用了不太容易出错的不同输入语法。Lemon还生成一个可重入且线程安全的解析器。Lemon定义了非终端析构函数的概念，以便在遇到语法错误时不会泄漏内存。驱动Lemon并定义SQLite可理解的SQL语言的语法文件可在parse.y中找到。</p>\n<p>因为Lemon是一个通常在开发机器上找不到的程序，Lemon的完整源代码（只有一个C文件）包含在SQLite分发的“tool”子目录中。</p>\n<h3 id=\"Code-Generator\"><a href=\"#Code-Generator\" class=\"headerlink\" title=\"Code Generator\"></a>Code Generator</h3><p>解析器将令牌组装成解析树之后，代码生成器运行以分析解析器树并生成执行SQL语句工作的字节码。准备好的语句对象是这个字节码的容器。代码生成器中有许多文件，其中包括：attach.c，auth.c，build.c，delete.c，expr.c，insert.c，pragma.c，select.c，trigger.c，update.c ，vacuum.c，where.c，wherecode.c和whereexpr.c。在这些文件中，大部分严重的魔法都是在这里发生的。 expr.c处理表达式的代码生成。其中* .c处理SELECT，UPDATE和DELETE语句中WHERE子句的代码生成。文件attach.c，delete.c，insert.c，select.c，trigger.c update.c和vacuum.c处理具有相同名称的SQL语句的代码生成。 （这些文件中的每一个都根据需要调用expr.c和where.c中的例程。）所有其他SQL语句都由build.c编码。 auth.c文件实现sqlite3_set_authorizer（）的功能</p>\n<p>代码生成器，特别是* .c和select.c中的逻辑有时称为查询规划器。对于任何特定的SQL语句，可能有数百，数千或数百万种不同的算法来计算答案。查询计划员是一个AI，致力于从数百万个选择中选择最佳算法。</p>\n<h3 id=\"Bytecode-Engine\"><a href=\"#Bytecode-Engine\" class=\"headerlink\" title=\"Bytecode Engine\"></a>Bytecode Engine</h3><p>由代码生成器创建的字节码程序由虚拟机运行。</p>\n<p>虚拟机本身完全包含在单个源文件vdbe.c中。 vdbe.h头文件定义了虚拟机和SQLite库的其余部分之间的接口，vdbeInt.h定义了虚拟机本身专用的结构和接口。其他各种vdbe * .c文件都是虚拟机的助手。 vdbeaux.c文件包含虚拟机使用的实用程序以及库的其余部分用于构建VM程序的接口模块。 vdbeapi.c文件包含虚拟机的外部接口，如sqlite3_bind_int（）和sqlite3_step（）。各个值（字符串，整数，浮点数和BLOB）存储在由vdbemem.c实现的名为“Mem”的内部对象中。</p>\n<p>SQLite使用C语言例程的回调来实现SQL函数。即使内置的SQL函数也是这样实现的。大多数内置的SQL函数（例如：abs（），count（），substr（）等）都可以在func.c源文件中找到。日期和时间转换函数可在date.c中找到。一些函数如coalesce（）和typeof（）直接由代码生成器实现为字节码。</p>\n<h3 id=\"B-Tree\"><a href=\"#B-Tree\" class=\"headerlink\" title=\"B-Tree\"></a>B-Tree</h3><p>SQLite数据库使用btree.c源文件中的B-tree实现在磁盘上进行维护。数据库中的每个表和索引都使用单独的B树。所有B树都存储在同一个磁盘文件中。文件格式细节稳定且定义明确，并保证向前兼容。</p>\n<p>B树子系统和SQLite库的其余部分的接口由头文件btree.h定义。</p>\n<h3 id=\"Page-Cache\"><a href=\"#Page-Cache\" class=\"headerlink\" title=\"Page Cache\"></a>Page Cache</h3><p>B树模块以固定大小的页面从磁盘请求信息。默认的page_size是4096字节，但可以是512到65536字节之间的任意两个幂。页面缓存负责读取，写入和缓存这些页面。页面缓存还提供了回滚和原子提交抽象，并负责锁定数据库文件。 B树驱动程序请求页面缓存中的特定页面，并在需要修改页面或提交或回滚更改时通知页面缓存。页面缓存处理了确保请求被快速，安全和有效地处理的所有细节.</p>\n<p>主页面缓存实现在pager.c文件中。 WAL模式逻辑位于单独的wal.c中。内存中缓存由pcache.c和pcache1.c文件实现。页面缓存子系统和SQLite其余部分之间的接口由头文件pager.h定义。</p>\n<p>###OS Interface</p>\n<p>为了提供跨操作系统的可移植性，SQLite使用称为VFS的抽象对象。每个VFS都提供了打开，读取，写入和关闭磁盘上的文件以及执行其他特定于操作系统的任务（如查找当前时间或获取随机性以初始化内置伪随机数生成器的方法）。 SQLite当前为unix（在os_unix.c文件中）和Windows（在os_win.c文件中）提供了VFSes。</p>\n<h3 id=\"Utilities\"><a href=\"#Utilities\" class=\"headerlink\" title=\"Utilities\"></a>Utilities</h3><p>内存分配，无格式字符串比较例程，便携式文本到数字转换例程以及其他实用程序位于util.c中。解析器使用的符号表由散列表中的哈希表维护。 utf.c源文件包含Unicode转换子例程。 SQLite在printf.c中有它自己的printf（）（有一些扩展）的私有实现，在random.c中有它自己的伪随机数生成器（PRNG）。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h3><p>sqlite(数据库)将数据持久化,并将其做到了极致吧.(引人深思)</p>\n<p>整体结构, 主要分成三部分: 1. core, 2. SQL Compiler, 3. Backend</p>\n<p>其主要流程也相当清晰:</p>\n<p>   interface -&gt; sqlCommand Processor -&gt; Virtual Machine</p>\n"},{"title":"Learn CSS Grid","date":"2018-09-02T02:38:47.663Z","_content":"\n视频教程推荐(建议先看一些基础概念): [https://scrimba.com/g/gR8PTE](https://scrimba.com/g/gR8PTE)\n简单教程: [https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228](https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228) \n详细教程: [https://learncssgrid.com/](https://learncssgrid.com/)\n\n\n该内容主要来自:\nhttps://scrimba.com/g/gR8PTE and https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228\n\n\n![目标结构](https://cdn-images-1.medium.com/max/2000/1*Oc88rInEcNuY-xCN3e1iPQ.png)\n\n## 重要术语解释\n\n参考: [https://www.jianshu.com/p/d183265a8dad](https://www.jianshu.com/p/d183265a8dad)\n\n1. 网格容器（Grid Container）\n元素应用display:grid，它是其所有网格项的父元素。下面例子container就是网格容器。\n```html\n<div class=\"container\">\n  <div class=\"item item-1\"></div>\n  <div class=\"item item-2\"></div>\n  <div class=\"item item-3\"></div>\n</div>\n```\n\n2. 网格项（Grid Item）\n\n网格容器的子元素，下面的item元素是网格项，但sub-item不是。\n```html\n<div class=\"container\">\n  <div class=\"item\"></div> \n  <div class=\"item\">\n    <p class=\"sub-item\"></p>\n  </div>\n  <div class=\"item\"></div>\n</div>\n```\n\n3. 网格线（Grid Line）\n\n组成网格线的分界线。它们可以是列网格线（column grid lines），也可以是行网格线（row grid lines）并且居于行或列的任意一侧，下面黄色线就是列网格线。\n![grid lines](https://upload-images.jianshu.io/upload_images/3600755-294354d5cb39077a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp)\n\n4. 网格轨道（Grid Track）\n两个相邻的网格线之间为网格轨道。你可以认为它们是网格的列或行，下面在第二个和第三个网格线之间的黄色部分为网格轨道。\n![Grid Track](https://upload-images.jianshu.io/upload_images/3600755-6fd45c7949a3f29b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp)\n\n5. 网格单元（Grid Cell）\n两个相邻的列网格线和两个相邻的行网格线组成的是网格单元，它是最小的网格单元。下面行网格线1（row grid lines 1）、行网格线2（row grid lines 2）和列网格线2（column grid lines 2）、列网格线3（column grid lines 3）组成的黄色区域为网格单元。\n![Grid Cell](https://upload-images.jianshu.io/upload_images/3600755-5feacaa8175909c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp)\n\n6. 网格区（Grid Area）\n网格区是由任意数量网格单元组成，下面行网格线1（row grid lines 1）、行网格线3（row grid lines 3）和列网格线1（column grid lines 1）、列网格线3（column grid lines3）组成的黄色区域为网格区。\n![Grid Area](https://upload-images.jianshu.io/upload_images/3600755-2a62922e76f77c3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp)\n\n\n## 第一个 grid 布局\n\n> The two core ingredients of a CSS Grid are the wrapper (parent) and the items (children). The wrapper is the actual grid and the items are the content inside the grid.\n> CSS Grid的两个核心组成部分是包装器（父）和项（子）。 包装器是实际网格，项目是网格内的内容。\n\n\n```html\n<div class=\"wrapper\">\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>\n  <div>4</div>\n  <div>5</div>\n  <div>6</div>\n</div>\n```\n\n```css\n.wrapper {\n    display: grid;\n}\n```\n\nresult: \n![first grid layout result](https://cdn-images-1.medium.com/max/1600/1*vTY7C5FMIp8OLkjrgp-vBg.png)\n\n## Columns and rows\n\n```css\n.wrapper {\n    display: grid;\n    grid-template-columns: 100px 100px 100px;\n    grid-template-rows: 50px 50px;\n}\n```\n\n![](https://cdn-images-1.medium.com/max/1600/1*fJNIdDiScjhI9CZjdxv3Eg.png)\n\n```css\n.wrapper {\n    display: grid;\n    grid-template-columns: 200px 50px 100px;\n    grid-template-rows: 100px 30px;\n}\n```\n![](https://cdn-images-1.medium.com/max/1600/1*M9WbiVEFcseUCW6qeG4lSQ.png)\n\n\n## items\n\n```css\n.item1 {\n    grid-column-start: 1;\n    grid-column-end: 4;\n}\n```\n\n![](https://cdn-images-1.medium.com/max/1600/1*he7CoAzdQB3sei_WpHOtNg.png)\n\n```css\n.item1 {\n    grid-column: 1 / 4;\n}\n```\n\n![](https://cdn-images-1.medium.com/max/1600/1*l-adYpQCGve7W6DWY949pw.png)\n\n\n\n","source":"_posts/frontend/css/grid_learn/learn_css_grid.md","raw":"---\ntitle: Learn CSS Grid\ndate: \ncategories:\n- frontend\n- learn notebook\ntags:\n- css\n- css grid\n---\n\n视频教程推荐(建议先看一些基础概念): [https://scrimba.com/g/gR8PTE](https://scrimba.com/g/gR8PTE)\n简单教程: [https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228](https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228) \n详细教程: [https://learncssgrid.com/](https://learncssgrid.com/)\n\n\n该内容主要来自:\nhttps://scrimba.com/g/gR8PTE and https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228\n\n\n![目标结构](https://cdn-images-1.medium.com/max/2000/1*Oc88rInEcNuY-xCN3e1iPQ.png)\n\n## 重要术语解释\n\n参考: [https://www.jianshu.com/p/d183265a8dad](https://www.jianshu.com/p/d183265a8dad)\n\n1. 网格容器（Grid Container）\n元素应用display:grid，它是其所有网格项的父元素。下面例子container就是网格容器。\n```html\n<div class=\"container\">\n  <div class=\"item item-1\"></div>\n  <div class=\"item item-2\"></div>\n  <div class=\"item item-3\"></div>\n</div>\n```\n\n2. 网格项（Grid Item）\n\n网格容器的子元素，下面的item元素是网格项，但sub-item不是。\n```html\n<div class=\"container\">\n  <div class=\"item\"></div> \n  <div class=\"item\">\n    <p class=\"sub-item\"></p>\n  </div>\n  <div class=\"item\"></div>\n</div>\n```\n\n3. 网格线（Grid Line）\n\n组成网格线的分界线。它们可以是列网格线（column grid lines），也可以是行网格线（row grid lines）并且居于行或列的任意一侧，下面黄色线就是列网格线。\n![grid lines](https://upload-images.jianshu.io/upload_images/3600755-294354d5cb39077a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp)\n\n4. 网格轨道（Grid Track）\n两个相邻的网格线之间为网格轨道。你可以认为它们是网格的列或行，下面在第二个和第三个网格线之间的黄色部分为网格轨道。\n![Grid Track](https://upload-images.jianshu.io/upload_images/3600755-6fd45c7949a3f29b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp)\n\n5. 网格单元（Grid Cell）\n两个相邻的列网格线和两个相邻的行网格线组成的是网格单元，它是最小的网格单元。下面行网格线1（row grid lines 1）、行网格线2（row grid lines 2）和列网格线2（column grid lines 2）、列网格线3（column grid lines 3）组成的黄色区域为网格单元。\n![Grid Cell](https://upload-images.jianshu.io/upload_images/3600755-5feacaa8175909c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp)\n\n6. 网格区（Grid Area）\n网格区是由任意数量网格单元组成，下面行网格线1（row grid lines 1）、行网格线3（row grid lines 3）和列网格线1（column grid lines 1）、列网格线3（column grid lines3）组成的黄色区域为网格区。\n![Grid Area](https://upload-images.jianshu.io/upload_images/3600755-2a62922e76f77c3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp)\n\n\n## 第一个 grid 布局\n\n> The two core ingredients of a CSS Grid are the wrapper (parent) and the items (children). The wrapper is the actual grid and the items are the content inside the grid.\n> CSS Grid的两个核心组成部分是包装器（父）和项（子）。 包装器是实际网格，项目是网格内的内容。\n\n\n```html\n<div class=\"wrapper\">\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>\n  <div>4</div>\n  <div>5</div>\n  <div>6</div>\n</div>\n```\n\n```css\n.wrapper {\n    display: grid;\n}\n```\n\nresult: \n![first grid layout result](https://cdn-images-1.medium.com/max/1600/1*vTY7C5FMIp8OLkjrgp-vBg.png)\n\n## Columns and rows\n\n```css\n.wrapper {\n    display: grid;\n    grid-template-columns: 100px 100px 100px;\n    grid-template-rows: 50px 50px;\n}\n```\n\n![](https://cdn-images-1.medium.com/max/1600/1*fJNIdDiScjhI9CZjdxv3Eg.png)\n\n```css\n.wrapper {\n    display: grid;\n    grid-template-columns: 200px 50px 100px;\n    grid-template-rows: 100px 30px;\n}\n```\n![](https://cdn-images-1.medium.com/max/1600/1*M9WbiVEFcseUCW6qeG4lSQ.png)\n\n\n## items\n\n```css\n.item1 {\n    grid-column-start: 1;\n    grid-column-end: 4;\n}\n```\n\n![](https://cdn-images-1.medium.com/max/1600/1*he7CoAzdQB3sei_WpHOtNg.png)\n\n```css\n.item1 {\n    grid-column: 1 / 4;\n}\n```\n\n![](https://cdn-images-1.medium.com/max/1600/1*l-adYpQCGve7W6DWY949pw.png)\n\n\n\n","slug":"frontend/css/grid_learn/learn_css_grid","published":1,"updated":"2018-09-02T11:42:15.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2hcgzc005q8seobmyuqptb","content":"<p>视频教程推荐(建议先看一些基础概念): <a href=\"https://scrimba.com/g/gR8PTE\" target=\"_blank\" rel=\"noopener\">https://scrimba.com/g/gR8PTE</a><br>简单教程: <a href=\"https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228\" target=\"_blank\" rel=\"noopener\">https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228</a><br>详细教程: <a href=\"https://learncssgrid.com/\" target=\"_blank\" rel=\"noopener\">https://learncssgrid.com/</a></p>\n<p>该内容主要来自:<br><a href=\"https://scrimba.com/g/gR8PTE\" target=\"_blank\" rel=\"noopener\">https://scrimba.com/g/gR8PTE</a> and <a href=\"https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228\" target=\"_blank\" rel=\"noopener\">https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228</a></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*Oc88rInEcNuY-xCN3e1iPQ.png\" alt=\"目标结构\"></p>\n<h2 id=\"重要术语解释\"><a href=\"#重要术语解释\" class=\"headerlink\" title=\"重要术语解释\"></a>重要术语解释</h2><p>参考: <a href=\"https://www.jianshu.com/p/d183265a8dad\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/d183265a8dad</a></p>\n<ol>\n<li><p>网格容器（Grid Container）<br>元素应用display:grid，它是其所有网格项的父元素。下面例子container就是网格容器。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item item-1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item item-2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item item-3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>网格项（Grid Item）</p>\n</li>\n</ol>\n<p>网格容器的子元素，下面的item元素是网格项，但sub-item不是。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub-item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>网格线（Grid Line）</li>\n</ol>\n<p>组成网格线的分界线。它们可以是列网格线（column grid lines），也可以是行网格线（row grid lines）并且居于行或列的任意一侧，下面黄色线就是列网格线。<br><img src=\"https://upload-images.jianshu.io/upload_images/3600755-294354d5cb39077a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp\" alt=\"grid lines\"></p>\n<ol start=\"4\">\n<li><p>网格轨道（Grid Track）<br>两个相邻的网格线之间为网格轨道。你可以认为它们是网格的列或行，下面在第二个和第三个网格线之间的黄色部分为网格轨道。<br><img src=\"https://upload-images.jianshu.io/upload_images/3600755-6fd45c7949a3f29b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp\" alt=\"Grid Track\"></p>\n</li>\n<li><p>网格单元（Grid Cell）<br>两个相邻的列网格线和两个相邻的行网格线组成的是网格单元，它是最小的网格单元。下面行网格线1（row grid lines 1）、行网格线2（row grid lines 2）和列网格线2（column grid lines 2）、列网格线3（column grid lines 3）组成的黄色区域为网格单元。<br><img src=\"https://upload-images.jianshu.io/upload_images/3600755-5feacaa8175909c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp\" alt=\"Grid Cell\"></p>\n</li>\n<li><p>网格区（Grid Area）<br>网格区是由任意数量网格单元组成，下面行网格线1（row grid lines 1）、行网格线3（row grid lines 3）和列网格线1（column grid lines 1）、列网格线3（column grid lines3）组成的黄色区域为网格区。<br><img src=\"https://upload-images.jianshu.io/upload_images/3600755-2a62922e76f77c3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp\" alt=\"Grid Area\"></p>\n</li>\n</ol>\n<h2 id=\"第一个-grid-布局\"><a href=\"#第一个-grid-布局\" class=\"headerlink\" title=\"第一个 grid 布局\"></a>第一个 grid 布局</h2><blockquote>\n<p>The two core ingredients of a CSS Grid are the wrapper (parent) and the items (children). The wrapper is the actual grid and the items are the content inside the grid.<br>CSS Grid的两个核心组成部分是包装器（父）和项（子）。 包装器是实际网格，项目是网格内的内容。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>result:<br><img src=\"https://cdn-images-1.medium.com/max/1600/1*vTY7C5FMIp8OLkjrgp-vBg.png\" alt=\"first grid layout result\"></p>\n<h2 id=\"Columns-and-rows\"><a href=\"#Columns-and-rows\" class=\"headerlink\" title=\"Columns and rows\"></a>Columns and rows</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*fJNIdDiScjhI9CZjdxv3Eg.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">200px</span> <span class=\"number\">50px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">100px</span> <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*M9WbiVEFcseUCW6qeG4lSQ.png\" alt=\"\"></p>\n<h2 id=\"items\"><a href=\"#items\" class=\"headerlink\" title=\"items\"></a>items</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">grid-column-start</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">grid-column-end</span>: <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*he7CoAzdQB3sei_WpHOtNg.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">grid-column</span>: <span class=\"number\">1</span> / <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*l-adYpQCGve7W6DWY949pw.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>视频教程推荐(建议先看一些基础概念): <a href=\"https://scrimba.com/g/gR8PTE\" target=\"_blank\" rel=\"noopener\">https://scrimba.com/g/gR8PTE</a><br>简单教程: <a href=\"https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228\" target=\"_blank\" rel=\"noopener\">https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228</a><br>详细教程: <a href=\"https://learncssgrid.com/\" target=\"_blank\" rel=\"noopener\">https://learncssgrid.com/</a></p>\n<p>该内容主要来自:<br><a href=\"https://scrimba.com/g/gR8PTE\" target=\"_blank\" rel=\"noopener\">https://scrimba.com/g/gR8PTE</a> and <a href=\"https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228\" target=\"_blank\" rel=\"noopener\">https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228</a></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*Oc88rInEcNuY-xCN3e1iPQ.png\" alt=\"目标结构\"></p>\n<h2 id=\"重要术语解释\"><a href=\"#重要术语解释\" class=\"headerlink\" title=\"重要术语解释\"></a>重要术语解释</h2><p>参考: <a href=\"https://www.jianshu.com/p/d183265a8dad\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/d183265a8dad</a></p>\n<ol>\n<li><p>网格容器（Grid Container）<br>元素应用display:grid，它是其所有网格项的父元素。下面例子container就是网格容器。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item item-1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item item-2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item item-3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>网格项（Grid Item）</p>\n</li>\n</ol>\n<p>网格容器的子元素，下面的item元素是网格项，但sub-item不是。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub-item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>网格线（Grid Line）</li>\n</ol>\n<p>组成网格线的分界线。它们可以是列网格线（column grid lines），也可以是行网格线（row grid lines）并且居于行或列的任意一侧，下面黄色线就是列网格线。<br><img src=\"https://upload-images.jianshu.io/upload_images/3600755-294354d5cb39077a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp\" alt=\"grid lines\"></p>\n<ol start=\"4\">\n<li><p>网格轨道（Grid Track）<br>两个相邻的网格线之间为网格轨道。你可以认为它们是网格的列或行，下面在第二个和第三个网格线之间的黄色部分为网格轨道。<br><img src=\"https://upload-images.jianshu.io/upload_images/3600755-6fd45c7949a3f29b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp\" alt=\"Grid Track\"></p>\n</li>\n<li><p>网格单元（Grid Cell）<br>两个相邻的列网格线和两个相邻的行网格线组成的是网格单元，它是最小的网格单元。下面行网格线1（row grid lines 1）、行网格线2（row grid lines 2）和列网格线2（column grid lines 2）、列网格线3（column grid lines 3）组成的黄色区域为网格单元。<br><img src=\"https://upload-images.jianshu.io/upload_images/3600755-5feacaa8175909c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp\" alt=\"Grid Cell\"></p>\n</li>\n<li><p>网格区（Grid Area）<br>网格区是由任意数量网格单元组成，下面行网格线1（row grid lines 1）、行网格线3（row grid lines 3）和列网格线1（column grid lines 1）、列网格线3（column grid lines3）组成的黄色区域为网格区。<br><img src=\"https://upload-images.jianshu.io/upload_images/3600755-2a62922e76f77c3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/383/format/webp\" alt=\"Grid Area\"></p>\n</li>\n</ol>\n<h2 id=\"第一个-grid-布局\"><a href=\"#第一个-grid-布局\" class=\"headerlink\" title=\"第一个 grid 布局\"></a>第一个 grid 布局</h2><blockquote>\n<p>The two core ingredients of a CSS Grid are the wrapper (parent) and the items (children). The wrapper is the actual grid and the items are the content inside the grid.<br>CSS Grid的两个核心组成部分是包装器（父）和项（子）。 包装器是实际网格，项目是网格内的内容。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>result:<br><img src=\"https://cdn-images-1.medium.com/max/1600/1*vTY7C5FMIp8OLkjrgp-vBg.png\" alt=\"first grid layout result\"></p>\n<h2 id=\"Columns-and-rows\"><a href=\"#Columns-and-rows\" class=\"headerlink\" title=\"Columns and rows\"></a>Columns and rows</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*fJNIdDiScjhI9CZjdxv3Eg.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">200px</span> <span class=\"number\">50px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">100px</span> <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*M9WbiVEFcseUCW6qeG4lSQ.png\" alt=\"\"></p>\n<h2 id=\"items\"><a href=\"#items\" class=\"headerlink\" title=\"items\"></a>items</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">grid-column-start</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">grid-column-end</span>: <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*he7CoAzdQB3sei_WpHOtNg.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">grid-column</span>: <span class=\"number\">1</span> / <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*l-adYpQCGve7W6DWY949pw.png\" alt=\"\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjy2hcgrk00098seocwoql82w","category_id":"cjy2hcgr900068seon8tcbb9p","_id":"cjy2hcgrz000g8seoenrddafu"},{"post_id":"cjy2hcgr400048seo9juy9izi","category_id":"cjy2hcgr900068seon8tcbb9p","_id":"cjy2hcgs0000j8seon9zcxjzg"},{"post_id":"cjy2hcgru000e8seoh6jsuo1x","category_id":"cjy2hcgr900068seon8tcbb9p","_id":"cjy2hcgs1000k8seowzxoqebj"},{"post_id":"cjy2hcgr600058seo8aerowrt","category_id":"cjy2hcgrs000b8seowe9ebsjz","_id":"cjy2hcgs2000m8seojq8tsmof"},{"post_id":"cjy2hcgre00088seoxytuopk1","category_id":"cjy2hcgrz000h8seo5ecevht8","_id":"cjy2hcgs3000p8seodvutixg0"},{"post_id":"cjy2hcgtn00118seo769zi1oi","category_id":"cjy2hcgtt00138seo71ruc95k","_id":"cjy2hcgu7001e8seojbvfgf96"},{"post_id":"cjy2hcgtr00128seobedseh3v","category_id":"cjy2hcgtt00138seo71ruc95k","_id":"cjy2hcguf001i8seo47s41tk5"},{"post_id":"cjy2hcgtv00158seozh4v8cgr","category_id":"cjy2hcgtt00138seo71ruc95k","_id":"cjy2hcguo001n8seo0dqr9901"},{"post_id":"cjy2hcguk001m8seomuka8koe","category_id":"cjy2hcgtt00138seo71ruc95k","_id":"cjy2hcguz001u8seomtnll4gz"},{"post_id":"cjy2hcguy001t8seoi9o5o16i","category_id":"cjy2hcgtt00138seo71ruc95k","_id":"cjy2hcgv800208seoyvhkzpma"},{"post_id":"cjy2hcgv0001v8seolhaktw4m","category_id":"cjy2hcgtt00138seo71ruc95k","_id":"cjy2hcgvc00228seo6zi6a56x"},{"post_id":"cjy2hcgv2001y8seokg5i1zq0","category_id":"cjy2hcgrs000b8seowe9ebsjz","_id":"cjy2hcgvg00268seoc96r5guw"},{"post_id":"cjy2hcgv4001z8seoe6sp591w","category_id":"cjy2hcgrs000b8seowe9ebsjz","_id":"cjy2hcgvj00288seozzmqw3ws"},{"post_id":"cjy2hcgv900218seo4wswij35","category_id":"cjy2hcgrs000b8seowe9ebsjz","_id":"cjy2hcgvl002b8seo07x0i4qv"},{"post_id":"cjy2hcgvj002a8seo5vjyvsw7","category_id":"cjy2hcgrs000b8seowe9ebsjz","_id":"cjy2hcgvr002h8seo114dznsq"},{"post_id":"cjy2hcgvl002d8seorvzuws9w","category_id":"cjy2hcgrs000b8seowe9ebsjz","_id":"cjy2hcgvt002k8seo0ot3wuy5"},{"post_id":"cjy2hcgvo002f8seo95onupfe","category_id":"cjy2hcgrs000b8seowe9ebsjz","_id":"cjy2hcgvv002n8seoaudn86xo"},{"post_id":"cjy2hcgvu002m8seodg6uxic9","category_id":"cjy2hcgvz002r8seocx3bqava","_id":"cjy2hcgw5002x8seoy1va22mr"},{"post_id":"cjy2hcgvw002p8seotf8kyyxv","category_id":"cjy2hcgw4002v8seojxw0q164","_id":"cjy2hcgw700328seoozrjjod4"},{"post_id":"cjy2hcgvz002s8seo430jitbq","category_id":"cjy2hcgvz002r8seocx3bqava","_id":"cjy2hcgw800358seo5h6d5o1y"},{"post_id":"cjy2hcgxd003v8seofz9i4wbc","category_id":"cjy2hcgrs000b8seowe9ebsjz","_id":"cjy2hcgxm00408seobl2wxt3e"},{"post_id":"cjy2hcgxi003y8seou05set2u","category_id":"cjy2hcgrs000b8seowe9ebsjz","_id":"cjy2hcgxs00448seobq7q4l98"},{"post_id":"cjy2hcgxp00418seo15vyj1jh","category_id":"cjy2hcgrs000b8seowe9ebsjz","_id":"cjy2hcgxz00488seouzt1uche"},{"post_id":"cjy2hcgxx00478seo1qent1rn","category_id":"cjy2hcgrs000b8seowe9ebsjz","_id":"cjy2hcgy5004f8seo09rlx6du"},{"post_id":"cjy2hcgxz004a8seo61vd0iyv","category_id":"cjy2hcgrs000b8seowe9ebsjz","_id":"cjy2hcgy8004i8seook01ych4"},{"post_id":"cjy2hcgy2004d8seo98062g6g","category_id":"cjy2hcgrs000b8seowe9ebsjz","_id":"cjy2hcgya004l8seoa2dxp5jc"},{"post_id":"cjy2hcgy4004e8seo7s4dna2w","category_id":"cjy2hcgrs000b8seowe9ebsjz","_id":"cjy2hcgyd004q8seoocw5bjla"},{"post_id":"cjy2hcgye004s8seoknubkd90","category_id":"cjy2hcgyb004o8seou6q0tti7","_id":"cjy2hcgyo00518seo90prmnks"},{"post_id":"cjy2hcgy6004h8seogypgj67y","category_id":"cjy2hcgyb004o8seou6q0tti7","_id":"cjy2hcgyx00568seogbfhf4vk"},{"post_id":"cjy2hcgyg004v8seoe2nvjxjt","category_id":"cjy2hcgyb004o8seou6q0tti7","_id":"cjy2hcgz000598seoexyl30rm"},{"post_id":"cjy2hcgyk004y8seohc4sa3a1","category_id":"cjy2hcgyb004o8seou6q0tti7","_id":"cjy2hcgz2005c8seoxzcx3ofx"},{"post_id":"cjy2hcgy9004k8seobeux0iq8","category_id":"cjy2hcgyb004o8seou6q0tti7","_id":"cjy2hcgz4005e8seodsts8a48"},{"post_id":"cjy2hcgyn00508seoi5pstelu","category_id":"cjy2hcgyb004o8seou6q0tti7","_id":"cjy2hcgz7005h8seoan3y4gn6"},{"post_id":"cjy2hcgyw00558seosp5hxixg","category_id":"cjy2hcgyb004o8seou6q0tti7","_id":"cjy2hcgz9005k8seolanomjzi"},{"post_id":"cjy2hcgyb004p8seonz431hxs","category_id":"cjy2hcgyb004o8seou6q0tti7","_id":"cjy2hcgzc005o8seo02xvytw0"},{"post_id":"cjy2hcgyy00588seozpwbhbwf","category_id":"cjy2hcgyb004o8seou6q0tti7","_id":"cjy2hcgze005r8seosyka844s"},{"post_id":"cjy2hcgz1005b8seooi5sloq6","category_id":"cjy2hcgyb004o8seou6q0tti7","_id":"cjy2hcgzf005u8seom4m8gx17"},{"post_id":"cjy2hcgz3005d8seopk1vg4lm","category_id":"cjy2hcgyb004o8seou6q0tti7","_id":"cjy2hcgzg005x8seou8hout93"},{"post_id":"cjy2hcgz5005g8seo20463st0","category_id":"cjy2hcgyb004o8seou6q0tti7","_id":"cjy2hcgzg005z8seo6r53wib1"},{"post_id":"cjy2hcgz8005j8seozg5o361g","category_id":"cjy2hcgyb004o8seou6q0tti7","_id":"cjy2hcgzh00628seor0mys39t"},{"post_id":"cjy2hcgza005n8seosu3dajic","category_id":"cjy2hcgyb004o8seou6q0tti7","_id":"cjy2hcgzi00648seoi2mnw3sn"},{"post_id":"cjy2hcgzc005q8seobmyuqptb","category_id":"cjy2hcgvz002r8seocx3bqava","_id":"cjy2hcgzj00678seowp3vgc7p"},{"post_id":"cjy2hcgzc005q8seobmyuqptb","category_id":"cjy2hcgzg005w8seo5qqogbjl","_id":"cjy2hcgzj00698seogrnd6lgo"}],"PostTag":[{"post_id":"cjy2hcgr400048seo9juy9izi","tag_id":"cjy2hcgrd00078seo9lidkfbw","_id":"cjy2hcgru000d8seoujhba2is"},{"post_id":"cjy2hcgr600058seo8aerowrt","tag_id":"cjy2hcgrs000c8seo05gctl94","_id":"cjy2hcgs2000n8seoptwxxiwp"},{"post_id":"cjy2hcgr600058seo8aerowrt","tag_id":"cjy2hcgs0000i8seo3drwm9v5","_id":"cjy2hcgs3000o8seod6jf4ksg"},{"post_id":"cjy2hcgre00088seoxytuopk1","tag_id":"cjy2hcgs2000l8seoriejby3x","_id":"cjy2hcgs5000s8seolxc2ofqo"},{"post_id":"cjy2hcgre00088seoxytuopk1","tag_id":"cjy2hcgs3000q8seoe639svwa","_id":"cjy2hcgs6000t8seok4obu9js"},{"post_id":"cjy2hcgrk00098seocwoql82w","tag_id":"cjy2hcgs5000r8seogdianjit","_id":"cjy2hcgs8000v8seot8dr0ywk"},{"post_id":"cjy2hcgrq000a8seoxlcolviv","tag_id":"cjy2hcgs6000u8seo87kq72hz","_id":"cjy2hcgs9000x8seo21cblg8j"},{"post_id":"cjy2hcgru000e8seoh6jsuo1x","tag_id":"cjy2hcgs8000w8seo40w3e8q5","_id":"cjy2hcgsd000z8seoj2cl3ihe"},{"post_id":"cjy2hcgry000f8seo7ux22fri","tag_id":"cjy2hcgs6000u8seo87kq72hz","_id":"cjy2hcgse00108seoszbj6vqd"},{"post_id":"cjy2hcgtn00118seo769zi1oi","tag_id":"cjy2hcgtu00148seo7d9dpp2h","_id":"cjy2hcgu3001a8seoqxd7htem"},{"post_id":"cjy2hcgtr00128seobedseh3v","tag_id":"cjy2hcgtu00148seo7d9dpp2h","_id":"cjy2hcguj001l8seoe4jba9i8"},{"post_id":"cjy2hcgtr00128seobedseh3v","tag_id":"cjy2hcgu7001f8seo1phip7h2","_id":"cjy2hcguo001o8seo1ca4zlc9"},{"post_id":"cjy2hcgtv00158seozh4v8cgr","tag_id":"cjy2hcgtu00148seo7d9dpp2h","_id":"cjy2hcgut001q8seo11dt15kp"},{"post_id":"cjy2hcguk001m8seomuka8koe","tag_id":"cjy2hcguv001r8seozhll467u","_id":"cjy2hcgv2001x8seoe6sfe0oa"},{"post_id":"cjy2hcguy001t8seoi9o5o16i","tag_id":"cjy2hcgv1001w8seouvc65nkc","_id":"cjy2hcgve00248seoxfs5n2pe"},{"post_id":"cjy2hcgv0001v8seolhaktw4m","tag_id":"cjy2hcgvd00238seowr7yq32c","_id":"cjy2hcgvl002c8seoq8nxgjzk"},{"post_id":"cjy2hcgv2001y8seokg5i1zq0","tag_id":"cjy2hcgvj00298seoy0ltfwn4","_id":"cjy2hcgvu002l8seoh51cdblf"},{"post_id":"cjy2hcgv2001y8seokg5i1zq0","tag_id":"cjy2hcgvn002e8seoj91bvdyl","_id":"cjy2hcgvw002o8seorsanv1xg"},{"post_id":"cjy2hcgv4001z8seoe6sp591w","tag_id":"cjy2hcgvs002i8seowtem5loy","_id":"cjy2hcgw6002z8seolvcm1sys"},{"post_id":"cjy2hcgv4001z8seoe6sp591w","tag_id":"cjy2hcgvy002q8seonqts54s5","_id":"cjy2hcgw600308seomctx8kcs"},{"post_id":"cjy2hcgv4001z8seoe6sp591w","tag_id":"cjy2hcgw3002u8seonoiibno8","_id":"cjy2hcgw700338seonpmxdjf8"},{"post_id":"cjy2hcgv900218seo4wswij35","tag_id":"cjy2hcgvs002i8seowtem5loy","_id":"cjy2hcgw800368seom0i8rqis"},{"post_id":"cjy2hcgv900218seo4wswij35","tag_id":"cjy2hcgw600318seoo60hkmss","_id":"cjy2hcgw800378seotoqyj88p"},{"post_id":"cjy2hcgvj002a8seo5vjyvsw7","tag_id":"cjy2hcgw800348seo63p2isse","_id":"cjy2hcgw9003a8seo9hf7989i"},{"post_id":"cjy2hcgvj002a8seo5vjyvsw7","tag_id":"cjy2hcgw800388seoy7s17tzc","_id":"cjy2hcgwa003b8seovq0blgje"},{"post_id":"cjy2hcgvl002d8seorvzuws9w","tag_id":"cjy2hcgw900398seoprbn10vq","_id":"cjy2hcgwb003e8seoqmazeth2"},{"post_id":"cjy2hcgvl002d8seorvzuws9w","tag_id":"cjy2hcgwa003c8seof3y4uyo0","_id":"cjy2hcgwb003f8seo5n6tel7b"},{"post_id":"cjy2hcgvo002f8seo95onupfe","tag_id":"cjy2hcgrs000c8seo05gctl94","_id":"cjy2hcgwc003h8seoaentja8k"},{"post_id":"cjy2hcgvo002f8seo95onupfe","tag_id":"cjy2hcgwa003d8seobrm0g8in","_id":"cjy2hcgwd003i8seoh88j9o4s"},{"post_id":"cjy2hcgvu002m8seodg6uxic9","tag_id":"cjy2hcgwb003g8seoewl024vl","_id":"cjy2hcgwe003l8seoidlsrirp"},{"post_id":"cjy2hcgvu002m8seodg6uxic9","tag_id":"cjy2hcgwd003j8seopfnhsryu","_id":"cjy2hcgwf003m8seo66j5dv8e"},{"post_id":"cjy2hcgvw002p8seotf8kyyxv","tag_id":"cjy2hcgwe003k8seovx5247og","_id":"cjy2hcgwi003p8seo1q310225"},{"post_id":"cjy2hcgvw002p8seotf8kyyxv","tag_id":"cjy2hcgwf003n8seozvfmneg7","_id":"cjy2hcgwi003q8seoep1cd2a8"},{"post_id":"cjy2hcgvz002s8seo430jitbq","tag_id":"cjy2hcgwh003o8seooxtui6qt","_id":"cjy2hcgwj003s8seobe93bgn9"},{"post_id":"cjy2hcgvz002s8seo430jitbq","tag_id":"cjy2hcgwi003r8seoagr4kwjo","_id":"cjy2hcgwj003t8seoszv1k7k8"},{"post_id":"cjy2hcgxd003v8seofz9i4wbc","tag_id":"cjy2hcgxi003x8seoq8kdxbgg","_id":"cjy2hcgxz00498seoubcegpyj"},{"post_id":"cjy2hcgxd003v8seofz9i4wbc","tag_id":"cjy2hcgxq00428seot8oek9u8","_id":"cjy2hcgy1004b8seonq6fwi3w"},{"post_id":"cjy2hcgxi003y8seou05set2u","tag_id":"cjy2hcgxi003x8seoq8kdxbgg","_id":"cjy2hcgy8004j8seok3gkatzs"},{"post_id":"cjy2hcgxi003y8seou05set2u","tag_id":"cjy2hcgxq00428seot8oek9u8","_id":"cjy2hcgya004m8seorjtr6alm"},{"post_id":"cjy2hcgxp00418seo15vyj1jh","tag_id":"cjy2hcgxi003x8seoq8kdxbgg","_id":"cjy2hcgyd004r8seo5g6rs49o"},{"post_id":"cjy2hcgxp00418seo15vyj1jh","tag_id":"cjy2hcgy6004g8seocci4nsfs","_id":"cjy2hcgyf004t8seoie5akvhp"},{"post_id":"cjy2hcgxx00478seo1qent1rn","tag_id":"cjy2hcgxi003x8seoq8kdxbgg","_id":"cjy2hcgyj004x8seogb4cxhua"},{"post_id":"cjy2hcgxx00478seo1qent1rn","tag_id":"cjy2hcgyb004n8seott82xl28","_id":"cjy2hcgym004z8seoc76mcml1"},{"post_id":"cjy2hcgxz004a8seo61vd0iyv","tag_id":"cjy2hcgxi003x8seoq8kdxbgg","_id":"cjy2hcgyv00548seos6w0t9gl"},{"post_id":"cjy2hcgxz004a8seo61vd0iyv","tag_id":"cjy2hcgyf004u8seo9argdau5","_id":"cjy2hcgyy00578seo6ca0aoji"},{"post_id":"cjy2hcgy2004d8seo98062g6g","tag_id":"cjy2hcgxi003x8seoq8kdxbgg","_id":"cjy2hcgz7005i8seo5nqbqxmb"},{"post_id":"cjy2hcgy2004d8seo98062g6g","tag_id":"cjy2hcgyb004n8seott82xl28","_id":"cjy2hcgz9005l8seoolm10wer"},{"post_id":"cjy2hcgy2004d8seo98062g6g","tag_id":"cjy2hcgz0005a8seo81cvu0ku","_id":"cjy2hcgzc005p8seovjlj5nmb"},{"post_id":"cjy2hcgy4004e8seo7s4dna2w","tag_id":"cjy2hcgxi003x8seoq8kdxbgg","_id":"cjy2hcgze005s8seo9tju1n25"},{"post_id":"cjy2hcgy4004e8seo7s4dna2w","tag_id":"cjy2hcgz4005f8seocc4cx213","_id":"cjy2hcgzf005v8seoktb7sfgo"},{"post_id":"cjy2hcgzc005q8seobmyuqptb","tag_id":"cjy2hcgwb003g8seoewl024vl","_id":"cjy2hcgzg005y8seouzunyteo"},{"post_id":"cjy2hcgzc005q8seobmyuqptb","tag_id":"cjy2hcgwd003j8seopfnhsryu","_id":"cjy2hcgzh00618seobubmu41i"},{"post_id":"cjy2hcgy6004h8seogypgj67y","tag_id":"cjy2hcgza005m8seotit2hcia","_id":"cjy2hcgzi00638seoz27bjnpb"},{"post_id":"cjy2hcgy6004h8seogypgj67y","tag_id":"cjy2hcgze005t8seo3lpu3j5l","_id":"cjy2hcgzi00668seo380b9nj2"},{"post_id":"cjy2hcgy9004k8seobeux0iq8","tag_id":"cjy2hcgza005m8seotit2hcia","_id":"cjy2hcgzk006a8seody7ejgog"},{"post_id":"cjy2hcgy9004k8seobeux0iq8","tag_id":"cjy2hcgze005t8seo3lpu3j5l","_id":"cjy2hcgzl006b8seoud6gsb2p"},{"post_id":"cjy2hcgyb004p8seonz431hxs","tag_id":"cjy2hcgza005m8seotit2hcia","_id":"cjy2hcgzn006e8seol42tocqk"},{"post_id":"cjy2hcgyb004p8seonz431hxs","tag_id":"cjy2hcgze005t8seo3lpu3j5l","_id":"cjy2hcgzn006f8seoeg2obxxk"},{"post_id":"cjy2hcgye004s8seoknubkd90","tag_id":"cjy2hcgza005m8seotit2hcia","_id":"cjy2hcgzp006i8seo5v7wsakq"},{"post_id":"cjy2hcgye004s8seoknubkd90","tag_id":"cjy2hcgze005t8seo3lpu3j5l","_id":"cjy2hcgzp006j8seos9v4uxb1"},{"post_id":"cjy2hcgyg004v8seoe2nvjxjt","tag_id":"cjy2hcgza005m8seotit2hcia","_id":"cjy2hcgzr006m8seoyukx9hu4"},{"post_id":"cjy2hcgyg004v8seoe2nvjxjt","tag_id":"cjy2hcgze005t8seo3lpu3j5l","_id":"cjy2hcgzr006n8seolb71ekn9"},{"post_id":"cjy2hcgyk004y8seohc4sa3a1","tag_id":"cjy2hcgza005m8seotit2hcia","_id":"cjy2hcgzt006q8seog5po7d9w"},{"post_id":"cjy2hcgyk004y8seohc4sa3a1","tag_id":"cjy2hcgze005t8seo3lpu3j5l","_id":"cjy2hcgzu006r8seobjnjtjfg"},{"post_id":"cjy2hcgyn00508seoi5pstelu","tag_id":"cjy2hcgza005m8seotit2hcia","_id":"cjy2hcgzw006u8seote4uju1c"},{"post_id":"cjy2hcgyn00508seoi5pstelu","tag_id":"cjy2hcgze005t8seo3lpu3j5l","_id":"cjy2hcgzw006v8seoncckes3k"},{"post_id":"cjy2hcgyw00558seosp5hxixg","tag_id":"cjy2hcgza005m8seotit2hcia","_id":"cjy2hcgzy006y8seo4aj1xe9x"},{"post_id":"cjy2hcgyw00558seosp5hxixg","tag_id":"cjy2hcgze005t8seo3lpu3j5l","_id":"cjy2hcgzz006z8seobyqs0ena"},{"post_id":"cjy2hcgyy00588seozpwbhbwf","tag_id":"cjy2hcgza005m8seotit2hcia","_id":"cjy2hch0000728seox7g6qn9v"},{"post_id":"cjy2hcgyy00588seozpwbhbwf","tag_id":"cjy2hcgze005t8seo3lpu3j5l","_id":"cjy2hch0100738seobs68ftcg"},{"post_id":"cjy2hcgz1005b8seooi5sloq6","tag_id":"cjy2hcgza005m8seotit2hcia","_id":"cjy2hch0300768seohbbh8m5s"},{"post_id":"cjy2hcgz1005b8seooi5sloq6","tag_id":"cjy2hcgze005t8seo3lpu3j5l","_id":"cjy2hch0300778seovuj0jxgo"},{"post_id":"cjy2hcgz3005d8seopk1vg4lm","tag_id":"cjy2hcgza005m8seotit2hcia","_id":"cjy2hch05007a8seor55x17zz"},{"post_id":"cjy2hcgz3005d8seopk1vg4lm","tag_id":"cjy2hcgze005t8seo3lpu3j5l","_id":"cjy2hch05007b8seoj5dtu080"},{"post_id":"cjy2hcgz5005g8seo20463st0","tag_id":"cjy2hcgza005m8seotit2hcia","_id":"cjy2hch07007e8seouvf9mkw3"},{"post_id":"cjy2hcgz5005g8seo20463st0","tag_id":"cjy2hcgze005t8seo3lpu3j5l","_id":"cjy2hch07007f8seo0dj3o7dg"},{"post_id":"cjy2hcgz8005j8seozg5o361g","tag_id":"cjy2hcgza005m8seotit2hcia","_id":"cjy2hch08007i8seoe79bx8we"},{"post_id":"cjy2hcgz8005j8seozg5o361g","tag_id":"cjy2hcgze005t8seo3lpu3j5l","_id":"cjy2hch09007j8seoo2n2azim"},{"post_id":"cjy2hcgza005n8seosu3dajic","tag_id":"cjy2hcgza005m8seotit2hcia","_id":"cjy2hch09007k8seofrng0maw"},{"post_id":"cjy2hcgza005n8seosu3dajic","tag_id":"cjy2hcgze005t8seo3lpu3j5l","_id":"cjy2hch09007l8seoe88zunse"}],"Tag":[{"name":"vpn 服务器","_id":"cjy2hcgrd00078seo9lidkfbw"},{"name":"blockchain","_id":"cjy2hcgrs000c8seo05gctl94"},{"name":"以太坊","_id":"cjy2hcgs0000i8seo3drwm9v5"},{"name":"Mac","_id":"cjy2hcgs2000l8seoriejby3x"},{"name":"日常杂记","_id":"cjy2hcgs3000q8seoe639svwa"},{"name":"shadowsocks 服务器","_id":"cjy2hcgs5000r8seogdianjit"},{"name":"tools安装","_id":"cjy2hcgs6000u8seo87kq72hz"},{"name":"supervisor","_id":"cjy2hcgs8000w8seo40w3e8q5"},{"name":"动态规划","_id":"cjy2hcgtu00148seo7d9dpp2h"},{"name":"题集","_id":"cjy2hcgu7001f8seo1phip7h2"},{"name":"raft learn","_id":"cjy2hcguv001r8seozhll467u"},{"name":"raft think","_id":"cjy2hcgv1001w8seouvc65nkc"},{"name":"sorting","_id":"cjy2hcgvd00238seowr7yq32c"},{"name":"docker","_id":"cjy2hcgvj00298seoy0ltfwn4"},{"name":"docker app","_id":"cjy2hcgvn002e8seoj91bvdyl"},{"name":"java","_id":"cjy2hcgvs002i8seowtem5loy"},{"name":"lombok","_id":"cjy2hcgvy002q8seonqts54s5"},{"name":"原理","_id":"cjy2hcgw3002u8seonoiibno8"},{"name":"spring aop","_id":"cjy2hcgw600318seoo60hkmss"},{"name":"markdown","_id":"cjy2hcgw800348seo63p2isse"},{"name":"build tools","_id":"cjy2hcgw800388seoy7s17tzc"},{"name":"apidoc","_id":"cjy2hcgw900398seoprbn10vq"},{"name":"learn","_id":"cjy2hcgwa003c8seof3y4uyo0"},{"name":"智能合约","_id":"cjy2hcgwa003d8seobrm0g8in"},{"name":"css","_id":"cjy2hcgwb003g8seoewl024vl"},{"name":"css grid","_id":"cjy2hcgwd003j8seopfnhsryu"},{"name":"learn task","_id":"cjy2hcgwe003k8seovx5247og"},{"name":"flutter","_id":"cjy2hcgwf003n8seozvfmneg7"},{"name":"react","_id":"cjy2hcgwh003o8seooxtui6qt"},{"name":"admin manage","_id":"cjy2hcgwi003r8seoagr4kwjo"},{"name":"go","_id":"cjy2hcgxi003x8seoq8kdxbgg"},{"name":"gin","_id":"cjy2hcgxq00428seot8oek9u8"},{"name":"fsm","_id":"cjy2hcgy6004g8seocci4nsfs"},{"name":"grpc","_id":"cjy2hcgyb004n8seott82xl28"},{"name":"goose","_id":"cjy2hcgyf004u8seo9argdau5"},{"name":"etcd","_id":"cjy2hcgz0005a8seo81cvu0ku"},{"name":"redis","_id":"cjy2hcgz4005f8seocc4cx213"},{"name":"database","_id":"cjy2hcgza005m8seotit2hcia"},{"name":"db原理","_id":"cjy2hcgze005t8seo3lpu3j5l"}]}}